pattern using command handler deal persistence fit purely functional language want make io related thin possible implementing domain driven design oriented language common use command handler pattern execute state change design command handler sit top domain object responsible boring persistence related logic like using repository publishing domain event handler public face domain model application like ui call handler need change domain object state sketch c public commandhandler repo publisher public repo publisher repo repo publisher publisher public override handle command var document repo get command documentid document discard command userid publisher publish document document domain responsible implementing business rule like user permission discard document discard document already discarded generating domain event need publish document would ienumerable event would probably contain event nice design easy extend add new use case without changing domain model adding new command handler agnostic object persisted easily swap nhibernate repository mongo repository swap rabbitmq publisher publisher make easy test using fake mock also obeys model view separation command handler idea whether used batch job gui rest api purely functional language like haskell might model command handler roughly like newtype commandhandler commandhandler handlecommand command io result result success failure reason reason commandhandler handle handle documentid userid document documentid let result discard document userid result event case result success event event result event sourced model extra step save document failure result handle failure expected command part struggling understand typically sort presentation call command handler like gui rest api two layer program need io command handler view big haskell far make two opposing force one model view separation need persist model need io persist model somewhere model view separation say put presentation layer io course normal language io happen anywhere good design dictate different type io kept separate enforce reconcile model view separation desire push io edge program model need persisted keep two different type io separate still away pure update bounty expires less num hour feel either current answer addressed question ptharien flame comment acid state seems promising answer lacking detail hate point go waste