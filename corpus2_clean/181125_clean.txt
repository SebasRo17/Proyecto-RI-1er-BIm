standardized widely accepted algorithm picking operator shift reduce conflict lalr parser question naive problem implementing solution implementing solution already widely used shift operator next token reduce depends consider already read symbol given production declared operator one operator one report grammar none use token operator example e e e e e e e num case e e num considering first production read since one operator read pick one reduce operator first token server shift operator algorithm correct e normally used lalr parser especially worried point num operator read token update asking ask resolve shift reduce conflict operator ask set precedence operator asking ask extract operator stream token let say user set precedence rule stack e e e stack e operator reduce first case second stack really entire right hand side production