given large sparse matrix efficiently operate nonzeros given row example row generate list column index magnitude absolute value greater threshold r current approach similar spirit previous answer leonid efficient way combine sparsearray object shamelessly steal implementation spart current approach first let build random sparsearray testing purpose randomsparsearray n integer r integer sparsearray table random integer n random integer n randomreal r n n randomsparsearray x matrix nonzeros part used grab row sparsearray representation returned okay let rip representation apart raw form using spart example rd row holdpattern spart sparsearray p p raw spart use combination part position extract column index raw use threshold ind flatten position flatten raw x ab x flatten raw ind wrapping function thresholdindex sparsearray r module raw ind raw spart ind flatten position flatten raw x ab x r flatten raw ind use map hit row search column index element magnitude greater say map thresholdindex whole process feel little roundabout first mathematica extract new sparsearray representation row expensive chop piece order work easier way still maintaining performance idea apply spart original matrix work csr compressed sparse row representation seems defeat purpose even using sparsearray get go sidebar starting implement efficient algebraic multigrid amg package mathematica amg fast iterative method traditionally used solve large sparse matrix equation produced discretization elliptic pdes one step algorithm similar flavor thresholdindex sidebar anyone know nice amg implemented mathematica would like build tool similar pyamg