consider following toy example hold x x sequence give hold sequence sequence like unevaluated expanded first level head attribute holdall obtain hold simplest way note use case trying generate piece code passed compile need inject variable number iterators list expression hold code iterators iterators sequence j would prefers solution match expression enclosing x would like repeat expression case code perhaps worth pointing hold f f x x return hold sequence easily implement manual sequence flattening step answer based leonid code write flattensequence function flatten sequence expression level flattensequence expr expr f left verbatim sequence middle right f left middle right flattensequence hold sequence hold based mr wizard code write general function injecting subexpressions expression supporting sequence clearall inject inject setattributes inject holdfirst quiet inject expr rule ruledelayed var symbol value verbatim sequence replace unevaluated value sequence var expr inject expr rule ruledelayed var symbol value replace unevaluated value var expr ruledelayed rh setattributes inject holdall inject rule expr internal inheritedblock rule ruledelayed setattributes rule ruledelayed holdfirst releasehold fold inject holdcomplete expr rule usage inject sequence b b hold b hold replacement done one second one use result first rule ruledelayed handled correctly