authentication reading article really grasped yet private key given client say javascript client would store private key assigned cookie think maybe done authenticating user javascript client make post request authenticates user server validates give back user id public key generated stored table private key follow approach quoted article client making rest api call combine bunch unique together typically parameter value intend sending argument snippet aws site client hash hmac sha1 sha256 preferably blob step num private key assigned system client send server following user identifiable information like api key client id user id something else use identify public api key never private api key public anyone even evil know mind way system know sending request trust sender figure based hmac send hmac hash generated send parameter value planning sending anyway probably unencrypted harmless value like mode start number num order desc operating nonsense value private need encrypt optional way protect replay attack api include timestamp time kind along request server decide old request deny timestamp must included hmac generation effectively stamping created time hash addition checked within acceptable bound server server receive client server see optional compare current server timestamp timestamp client sent make sure difference two timestamps within acceptable time limit num 15mins maybe hinder replay attack note sure compare timezones watch issue popup daylight saving time change over update correctly pointed folk use utc time forget dst issue server using user identifying sent along request e g api key look user db load private key server combine together client way client hash generate hmac blob using private key looked db see optional protecting replay attack include timestamp client hmac calculation server since already determined timestamp within acceptable bound accepted apply hash calculation make sure timestamp sent client originally made timestamp man middle attack server mess hmac hash exactly like client server compare hash got server hash client sent match client considered legit process command otherwise reject command second note believe would readable article getting right