basic idea behind oop behavior upon inseparable coupled idea method work obviously principle oop object like c structs considered anti pattern far good problem noticed seems going direction anti pattern lately seems try achieve information hiding class loosely coupled design class get mix pure behavior class behavior class generally design class way minimizes awareness class existence minimizes knowledge class interface especially enforce top fashion lower level class know higher level class e g suppose general card game api card card need determine visibility player one way boolean isvisible player p card another boolean isvisible card c player dislike first approach particular grant knowledge higher level player lower level card instead opted third option viewport given player list card determines card visible however approach robs card player class possible member stuff visibility card left card player class contain purely functionality implemented class mostly class method like viewport clearly principal idea oop correct way go task minimizing interdependency minimizing assumed knowledge coupling without winding weird design low level class contain high level class contain method anyone third solution perspective design avoids whole problem p another example suppose documentid immutable single bigdecimal id member getter member need somewhere given documentid return document id database add document getdocument documentid suddenly introducing knowledge persistence using database query used retrieve document id api used access db like also requires persistence jar file compile add document getdocument documentid id leaving documentid dead behavior struct like