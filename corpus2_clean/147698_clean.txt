read different opinion singleton pattern maintain avoided cost others useful certain situation one situation use singleton need factory let say f f create object certain factory created using configuration parameter used time instantiated every part want instantiate fetch singleton f create new instance e g f f f instance boost shared ptr f createa general scenario num need one instance either optimization reason need multiple factory object sharing common state e g factory know many instance still create num need way access instance f f different place interested discussion whether pattern good bad assuming want avoid using singleton pattern use idea num get factory registry num create factory point program start pas factory around parameter solution num registry singleton shifted problem using singleton factory registry case num need initial source factory come afraid would fall back another singleton provides factory instance following back chain singleton maybe reduce problem one singleton whole application singleton directly indirectly managed would last option using one initial singleton creates unique object injects singleton right place acceptable solution solution implicitly suggested one advises use singleton solution e g example illustrated edit since think point question misunderstood information explained e g word singleton indicate single instance b design pattern used create access make thing clearer let u use term unique singleton pattern b know singleton pattern dependency injection btw lately using di heavily remove instance singleton pattern working point unless whole graph instantiated single living stack always need access unique object singleton pattern question whether complete graph creation wiring depend e g powerful di framework use pattern singleton pattern free solution