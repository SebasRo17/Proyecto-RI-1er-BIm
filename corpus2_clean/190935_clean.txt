question similar question posted groovy call partial application currying completely answer given really satisfy would like state right point go currying one concept hard fully understand think reason fact seem two general definition currying really mean thing theory application said think currying simple concept decide take one two definition stick fact currying difficult understand experience understanding currying equivalent showing little boy apple telling fruit called apple go calling fruit orange boy never understand simple concept apple caused enormous amount confusion calling apple orange definition currying accepted right one currying taking arbitrary arity turning multiple chainable function accepts one parameter unary function would look like f num num num becomes f num num num however people including well known programmer like john resig explain currying something completely different currying simple partial application even generally accepted javascript currying prototype curry var fn prototype slice call argument fn apply concat prototype slice call argument function really curry anything rather partially applies supplied argument reason think anything end accepts one argument var f2 f curry num f accepts num argument f num num num f2 num num calling resulting curried question misunderstood currying wanted post link material read currying cannot post num link since reputation least num leave post explains currying javascript way really see currying num num num curry cooking function