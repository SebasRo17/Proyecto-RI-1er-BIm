problem visualising gap closed coarse grained n tier boundary high level automated acceptance testing lower level task sub task scope unit testing motivation able take unit test system able follow backwards coverage scenario make use unit test familiar idea bdd extension tdd writing scenario high level solution design level format driving scenario using tool jbehave cucumber equally familiar humble unit test utility task level using xunit test various path begin come unstuck try imagine two discipline applied together enterprise setting perhaps going wrong tend use one approach attempt articulate thought far let assert right believe used agile world user story broken task sub task enterprise setting problem large number developer per story many task sub task distributed amongst team people specialist problem solving skill developer example may specialise mid tier development develop controller layer continue work downwards others may specialise ui development work controller layer upwards developer may therefore share implementation single task glued back together implement story case seems cycle tdd task sub task level still necessary ensure effort developer collaborate correctly within one layer one layer next mocking collaborator working way implies certain amount high level solution design front contract layer agreed respected perhaps sequence diagram perhaps emerges task breakdown session story yet hand defining bdd acceptance test higher level configure block work together expected form super integration test suppose suppose answer looking aside simpler yes question explanation worked example team developer start single n tier scenario end implementation enterprise setting able break task layer share amongst work parallel turn bdd scenario test red green ensuring write written scenario call fine grained level written appropriately unit tested following cycle tdd task sub task level go course correct