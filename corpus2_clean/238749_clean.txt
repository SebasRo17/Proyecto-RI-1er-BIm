recently assigned new high performance c project finance together num guy like refer primarily c c programmer meaning u also done stuff comparable experience num num year successfully collaborated making project c c soon found different mindset come mother programming tongue risk good delivery project also general well team office specifically come electrical engineering automation background reasoning intimately related hardware work byte move around processor working instruction caching generally everything lower layer embedded programming arm programming barely know soon found practical experience mostly c c think procedurally oop hand trained think abstract way apply principle encapsulation low coupling high cohesion creating reusable modular software speciality c programming language accent language construct help get fast reusable generic think design pattern idiom concept throughout num year developing software consistently witnessed poor maintainability software system far num burden team generously document write careful interface embrace template meta programming way obtain fast reusable product embrace new c num standard feature see reusability loose coupling see complication want see want see buffer interface method one point one even said care simple interface implementation look complicated trouble really trying transition monolithic style system reusable one writing library yet wish see c style structs polluted templated method typedefs c even neither make structs non pod also wish see static assert std pod love memcpy pointer generally stay away reference tend think typedefs somehow evil really tried make see abstraction together operates necessity library need define interface user able plug larger product tend see interface way requires behave look wish allow thing way without actually telling specific functionality obtain make mistake ignorant come performance know cache line branch prediction overhead virtualization heap allocation hash lookup good complexity algorithm though matter much structure inlining optimization believe modern reusable layered oop c product get within num performance c monolithic product carefully written optimized honestly believed would complement thinking thought please harsh need make work