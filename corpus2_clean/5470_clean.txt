trying speed code many particle take random walk sure slow simple task got hint colleague reduce precision calculation compile function parallelize code implement c code tried implement likely know get work particle simulated parallel take advantage two core bunch particle take fixed step random direction bunch list length number particle operate list faster nested loop first loop every particle loop time step two random angle generated particle time step particle position incremented also want know many time particle crossed spherical shell history particle important eventually distinguish particle number time cross shell take bigger step crossed tried timing step seems like trig function slow thing way speed better way write code make much faster eventually would like add complication code run many time step particle general speed tip would help comparison absolute timing loop second laptop core ghz gb ram numparticles numsteps radius radius shell particlesx table numparticles x coordinate particle particlesy table numparticles coordinate particle particlesz table numparticles numcrossings table numparticles count number crossing particle theta rand randomreal pi numparticles random polar angle particle phi rand randomreal pi numparticles random azimuthal angle particle rold particlesx particlesy particlesz original distance origin particle particlesx particlesx sin theta rand co phi rand update particle position particlesy particlesy sin theta rand sin phi rand particlesz particlesz co theta rand rnew particlesx particlesy particlesz new distance origin isitoutside rold radius rnew radius yield negative number particle crossed sphere else positive switchsides map isitoutside particle crossed increment numcrossings numcrossings numcrossings switchsides step numsteps absolutetiming