sequence task undertake zip file simplified step num validate file zip file valid num unzip file num validate content expected num turn content product currently using command pattern look little something like interface command public execute implement command public execute filepath implement command public execute filepath implement command public execute implement command public execute execute command return turn command invoker passed next command chain defined configuration two problem num command requires dependency e unzip need access handle unzipping zip file inject command quite happy get around instantiating command dic plugging invoker accepts instantiated object command run sequence however feel right num issue persist command seen place people passing context one command another however feel bit dirty command would depending upon untyped interface essentially wrap associative make sense untyped maintain interface command context implement specific method would deter abstraction would appreciate advice deal issue edit another issue command actually coupled state file path passed quite specific case hand doubt possible work past