let assume conceptual scenario database constantly populated ton task named scheduler listener background aimed handle task course rule specific mail sent handling fastest possible possible status task new inprogress regarding strategy complete fail various strategy listener present one process iteration single threaded solution querying one task whose status new sending task worker emailsender worker job passing status complete pro solution safety con slow slow multi threaded solution querying several task whose status new multiple emailsender worker instantiated dispatching task soon worker handled one occurrence corresponding status set complete meanwhile worker processing new query processed task dispatched worker queue etc whole asynchronous pro wow fast con potential race condition since task currently processed could retrieve next query since current worker processing might completed yet one mail occurrence could sent bad multi threaded solution involving inprogress status querying several task whose status new updating immediately task status inprogress multiple emailsender worker instantiated dispatching task soon worker handled one occurrence corresponding status set complete meanwhile worker processing new query processed task dispatched worker queue etc whole asynchronous pro multi threaded safety mail expected con increasing access database mark status inprogress possible contention database huge number event multi threaded solution avoiding query least one worker still processing querying several task whose status new multiple emailsender worker instantiated dispatching task soon worker achieve one task corresponding status set complete meanwhile worker processing new query processed task dispatched worker queue etc whole asynchronous pro multi threaded safety need involve locking status inprogress con reason one mail take num second sent delay next query many job could seen idle awaiting next query solution use efficient solution