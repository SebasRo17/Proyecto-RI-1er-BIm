working project generates technical brochure batch 3rd party api used expects pocos property name match field name used brochure template task seeking advice source used populate pocos based cascading calculation domain model originally entertained idea domain self calculating many calcs required seemed obvious needed abstracted away created hypothetical closely mimic design pattern question open suggestion whether approaching correctly primary concern num constructor injects calculation class also publicly exposed property create recursive path num possible circular reference cascading calculation call various property method various class note using calculation logic requested propose need refactored need noticed used word intricate usually warning need abstracted struggling see make better entity calculated picture aggregate root larger domain model airplane entity public double get set public double get set public double get set public double get set public double get set public double get set public double get set public double get set calculation context intent passed along part batch process abstract factory consumes interface represented context generates poco object note also omitted interface abstract class would used different calculation strategy brevity public airplane airplane airplane airplane new seating new public airplane airplane get private set public get private set public seating get private set public double airplane num calculator non hypothetical project method private protected cached first call read back read property wanted show basic representation calculation complexity private readonly context public context context context public double context airplane context airplane double context context double context airplane context airplane context airplane math floor private readonly context public context context context public double math pi context airplane