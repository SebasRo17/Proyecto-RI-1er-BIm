moved new project software guy welcome expected suggest design improvement existing got prototype phase need extended final releasable version plus adding functionality multiple stand alone component suppose concert one passing message daemon via hand written class implement server message queue work well enough project made passed prototype phase stability one biggest long term focus notoriously unstable quite par final release still ever time see think would done using jms went back time implementation day would told jms start tempted insist problem even reinventing wheel suboptimal time mostly work would hate throw large chunk doubt kept message passing logic would spend time working certain num reliable minor race get away system able recover even happens smell want investigate etc etc still replacing whole system jms would pretty big overhaul require writing allot new debugging fix issue already ran corrected home brewed system ultimately add dependency jms release project may undesirable give slightly better idea system mostly direct pipeline two way asynchronous call separate part system called daemon speak two daemon one front pipeline one behind daemon pas request pipeline low level architecture want response back block waiting addition asynchronous message must able propagate back system multiple people making request expect absurdly high number total message customer generate message small burst burst huge think scale absurdly high number customer lost message would likely result inconsistent state lost message quasi detected currently nothing really done clean happens system basic enough inconsistent state likely break thing horrible system could plus tiny closed system probably going lose message current communication generic daemon send message trust daemon sends message correct daemon daemon sends message another daemon know happen message enumerated viable sent specific daemon question justify switch jms feel comfortable stability know using enterprise system think would allow crazy probably never get around implementing would cool idea bit easier implement later however small team possible everything would love anyways jms provide enough benefit warrant cost rewriting mostly working mostly working obvious work example know review minor issue smell need look basically decent close enterprise level stuff certain address take long writing jms logic much less testing debugging bad create dependency external system like jms currently without useful advantage jms seeing guaranteed message delivery seems big one sure much benefit yet project incidentally one eventual long term cool see get around goal would replace current use sql call fetch storing everything memory store memory need reliable message passing keep state consistent multiple daemon inclination right something like never tried without something like jms state change often change stay consistent worry race etc may would jms make substantially easier keep consistent state handle race still logic either case certain thing particularly prone failing quickly written message passing system looking explicitly