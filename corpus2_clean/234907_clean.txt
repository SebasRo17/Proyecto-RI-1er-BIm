trying write branch bound search set function f r domain size small num range much bigger r num num initially came following solution builder domain range partial map let passed check partial map cond passed nil domain recur first domain range partial map partial map recur first domain range partial map ignored cond range nil let first first builder cdr domain append ignored cdr range con con car domain car range partial map first first recur first domain cdr range partial map con car range ignored parameter builder list condition satisfied solution check return nil iff element list condition violated partial map recur first assigns first element domain first element range try build solution failing recur first invokes try construct solution assigns first element domain element first one range however maintain list ignored store discarded element like first element range could image element domain two problem see solution first one list ignored range recur first quite large append ing expensive operation second problem recursion depth solution depends size range came following solution us doubly linked list store element range function start next end provide facility iterate doubly linked list builder domain range optional partial map nil block builder let passed check partial map cond passed nil domain let cur start range prev dbl node prev cur end cur progn splice range cur let sol builder cdr domain range con con car domain cur partial map splice range prev cur sol builder sol setq prev cur setq cur next cur builder nil partial map runtime second solution much better runtime first solution append operation first solution replaced splicing element doubly linked list operation constant time recursion depth depends size domain problem solution us c style question solution efficient second solution use mutable structure word efficient functional programming solution problem