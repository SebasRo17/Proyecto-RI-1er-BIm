still relative novice oop still trying understand best practice design good object know question probably rather subjective rather stackoverflow designing num separate property none required constraint fixed cannot changed implementation outside source control design problem running effectively construct instance able compare equality comparing field without violating normal best practice num argument constructor seems wrong especially since every field case many could use optional argument c num reduce number argument actually called since everything would use named parameter calling constructor seems would even uglier thought trying group property smaller class logical grouping still num property least half remaining property logical grouping could give property public setter would make mutable thus complicate matter overriding gethashcode really need mutable built never reason change want rely know someone try implementing iequatable possibility equality test understanding recommended also override equal obj gethashcode implementing iequatable equal method behavior edge case overriding equal without overriding gethashcode done intend using key dictionary member hashset predict someone else would try future abandon idea equality comparison property equal implement compare better building would allow still immutable without pas argument constructor edit response sign comment purpose ultimately able compare outside source internal ensure accurate set contain address information broken differently internal generally stored typical address street city state postal county country variation suite apartment floor building external broken even smaller piece supposed common link num source allow user compare like field equality edit num ultimately chose doc brown answer modified version dictionary idea enums key instead string simplest way go without messy constructor still provide immutability hoping long term going experiment oliver suggestion edits lot offer