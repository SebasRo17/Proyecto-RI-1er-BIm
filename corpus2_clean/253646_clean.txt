title say circular dependency correct wording design seems solid however consider following scenario blue part given external partner orange implementation also assume one want use specific one reality dependency tried simplify scenario would like instanciate depency injection unity obviously get stackoverflowexception following runner try instantiate need runner iunitycontainer ioc new unitycontainer ioc registertype registertype runner var runner ioc resolve runner way structure use di scenario setting everything manually put hard dependency instantiates trying avoid unity registration configuration source simplified example public program public static iunitycontainer ioc new unitycontainer ioc registertype registertype runner var runner ioc resolve runner writeline invoking runner runner readline public runner private readonly public runner public writeline trying something awesome dosomething public something writeline hey look something finally done public interface dosomething public interface something public abstract protected readonly callback protected callback callback callback public abstract dosomething public public callback base callback public override dosomething writeline starting something var task task factory startnew thread sleep num long running task task continuewith callback