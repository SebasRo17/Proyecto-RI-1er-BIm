purpose discussion let consider foursquare scenario scenario entity user place relationship checkins user place many many friend user user many many database design likely error please point rdbms table user place checkins junction friend junction pro cap consistency availability con cap partition tolerance aka sharding scheme inflexible structure poor replication graph object user place edge friend user user checkins user place contains timestamp pro cap consistency availability schemaless easily mutable object edge graph traversal query example clustering finding group friend finding restaurant liked similar people common useful query con cap partition tolerance document num separate database user friend list checkins timestamp user place place pro cap availability partition tolerance schemaless easily mutable object con cap consistency question record ended using mongodb addition question mark num sure implement document database num document database gain partition tolerance num get single user checkins assume operation would parse checkins filter metadata username map filter performance parsing num num num document user would terribly poor assume correct behavior num pro con