working consulting firm time client various size seen web application ranging complexity really simple mvc service layer ef db really complex mvc uow di ioc repository service ui test unit test integration test end spectrum quality requirement simple project new devs consultant hop make change contribute immediately without wade num layer abstraction understand going risking misunderstanding complex abstraction costing case never need actually make swappable reusable test never actually maintained past first iteration requirement changed time consuming deadline business pressure etc etc end testing interface used rapid development read cost saving priority project requirement changing lot development would wrong recommend super simple architecture even solve complex problem enterprise client complexity defines enterprise solution reliability concurrent user ease maintenance know vague question answer apply case interested hearing devs consultant business worked varying degree complexity hear cool expensive abstraction worth overall cost least project development