simple question design consideration often across day day development work let say represents kind collection public public property order list end within kind important work combining many different information source eventually build modified customer order different process consume need slightly different slice item enable want add filtering functionality go num add filtering call say num create static shared tooling allows call num create extension accomplish feat num less typing num create service handle getting order appropriate calling using one previous approach hood num others tend prefer tooling extension approach make testing little bit simpler although dependency inject sourcing part make little bit complicated test typically choose use extension method parameterless transformation filter get complex move static instead thought approach would approach