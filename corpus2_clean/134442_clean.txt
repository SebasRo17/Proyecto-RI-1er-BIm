think understand actual limitation compile time polymorphism time polymorphism conceptual difference explicit interface time polymorphism ie virtual function pointer reference implicit interface compile time polymorphism ie template thought two object offer explicit interface must common ancestor two object offer implicit interface need excluding implicit interface offer quite different functionality thought two object offer implicit interface reason beside technical benefit needing dynamic dispatch w virtual lookup table etc object inherit base declares interface thus making explicit interface another way saying give case two object offer implicit interface therefore used type sample template inherit base make interface explicit related post num num num num num num example make question concrete implicit interface class1 public class2 public template public obj obj explicit interface public virtual num class1 public public virtual class2 public public virtual public obj obj even depth concrete example c problem solved either num templated whose template provides implicit interface num non templated take base pointer provides explicit interface change public virtual num virtual worthless num public public virtual cool stuff would virtual worthless worthless must implemented public public virtual cool stuff b would virtual worthless worthless must implemented case num non templated take base pointer provides explicit interface public c1 new c2 new br user user c1 user c2 br num case num templated whose template provides implicit interface template typename public c1 new c2 new br user user c1 user c2 br num case num templated whose template provides implicit interface time deriving public cool stuff would implement worthless na na na na na template typename public c1 new c2 new br user user c1 user c2 br num case num requires passed child implement worthless case num num hand take user always fine subclassing case num make intuitive sense since would always expecting implementation assume part api framework cannot predict user want subclass roll