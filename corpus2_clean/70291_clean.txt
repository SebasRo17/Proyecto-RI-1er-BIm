curious drawback using activerecord pattern access business object one think top head violates single responsibility principle ar pattern common enough reason alone seem good enough justify using course view may skewed since often none work follows solid principle personally fan activerecord exception writing ruby rail application ar feel natural feel like much access handle prefer use repository business object work tends use variation activerecord form know boolean public foo property public foo fooid fooid fooid public bool load db stuff map datareader property bool returncode dr hasrows returncode returncode sometimes traditional way public static foo fooid finder something along line public save saving updating get activerecord typically much simpler implement use seems little simple complex application could robust architecture encapsulating access logic repository mention easier swap access strategy e g maybe use stored procs datasets want switch linq something drawback pattern considered deciding activerecord best candidate job