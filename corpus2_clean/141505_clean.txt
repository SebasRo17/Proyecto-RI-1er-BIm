sorry many abbreviation title observation application built relational mapping like hibernate tend follow service oriented architecture instead oriented one people e g say single responsibility principle suggests dealing reading writing attribute persisted object well creating finding object enough responsibility one business logic using go separate class lead u design two separate type class state full dumb record keeping one logic bearing state less one like kind design num separation goal oriented design service oriented architecture ood say operation go class attribute us defined num also bogus solution whenever structure one state full class change change service class use logic inside class change would stay one num using orm framework pretty much generates necessary accessing persisted adding business logic would stay rather empty e would contain generated know many programmer follow service oriented design especially using framework suggest like spring using framework go separation want provoke discussion whether soa good interested question whether good ood per srp separate business logic class representing entity