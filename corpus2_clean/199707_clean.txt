writing web service several apis sharing implementation order copy paste would like ideally implement api call series task executed sequence determined business logic one obvious question whether best strategy reuse whether look different way assuming want go task several issue arise num good task interface use num pas computed one task another task sequence might need past worked task interface like interface task u u execute also sort task context getters setter kind task needed produce consume get passed task aware suffers host problem wanted figure better way implement time around current idea safe heterogeneous container described effective task ask item container task add item container task way task need know directly write dozen method item however several drawback num item container complex wrap around actual item task us purpose task b us something entirely different storing mapping work task reason use kind container generic collection directly need wrapped another num mean based many task define would need also define number class task item may consumed produced may lead bloat duplication instance task take long produce another long would two class simply wrap around long imo spiral control pretty quickly codebase evolves briefly looked workflow engine library kind seem like heavy hammer particular nail would go writing simple task framework following requirement task self contained possible composed different way create different workflow said task may perform expensive computation prerequisite task want way storing result intermediate computation done task task use result free task framework light e growing involve introducing many new type plug framework