although could programming language agnostic question interested answer targeting net ecosystem scenario suppose need develop simple application public administration application vehicle tax following business rule num vehicle car last time owner paid tax num day ago owner pay num b vehicle last time owner paid tax num day ago owner pay word car pay every num day pay every num day vehicle system application test rule vehicle plate number owner information satisfy want num conform l principle especially open closed principle want think num b anemic domain therefore business logic go inside business entity started public person wanted banana got gorilla holding banana entire jungle public get set public surname get set public abstract vehicle public get set public person owner get set public datetime get set public abstract bool public car vehicle public override bool datetime today num public vehicle public override bool datetime today num public public ienumerable vehicle vehicle vehicle private ienumerable vehicle throw new notimplementedexception program static administration new foreach var vehicle administration writeline plate number num num num vehicle vehicle owner surname vehicle owner num open closed principle guaranteed want bicycle tax inherit vehicle override done open closed principle satisfied simple inheritance problem num vehicle know pay concern public administration rule car tax change car change think asking put inside vehicle answer want test vehicle typeof inside see better alternative num b maybe tax payment vehicle concern maybe initial person vehicle car design plain wrong need philosopher better business analyst solution could move another call create two derived class add abstract payment property vehicle right instance car class public abstract public abstract bool public public override bool datetime today num public public override bool datetime today num public abstract vehicle public get set public person owner get set public datetime get set public abstract payment get public car vehicle private payment new public override payment get payment public vehicle private payment new public override payment get payment invoke old process way public ienumerable vehicle vehicle vehicle payment compile member inside starting see like algorithm implementation rather business entity somehow algorithm need sure pas constructor would violate vehicle encapsulation responsibility whatever oop evangelist call num c suppose already entity framework objectcontext us domain object person vehicle car would get objectcontext reference therefore implement funcionality num also need objectcontext reference different one charge injecting would pas reference payment class case avoiding anemic domain thus service object lead u disaster design choice simple scenario clearly example shown complex easy task time idea adhere l principle prevent anemic domain commissioned destroy