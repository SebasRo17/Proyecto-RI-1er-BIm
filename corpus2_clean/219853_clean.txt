comparing rest api structure oo model see similarity oriented rest resource oo object surround operation around rest surround verb get post around resource oo promote operation around object encapsulation however good oo practice always stand rest apis trying apply facade pattern instance rest num controller handle request hide internal complexity simple relation num concept analogy oo rest contrary rest promotes resource publishing relation resource least two form num via resource hierarchy relation contact id num composed address num api contact num address num num via link rest json response get api contact num http response id num address id num link id num basic complexity hidden objecta coming back oo facade design pattern respect low coupling objecta objectb client high cohesion objecta internal composition objecta interface allow developer limit impact objectb objecta internal change long objecta api operation still respected rest resource relation link behavior verb exploded different element available web playing rest always impact change client server high coupling backbone j request low cohesion resource never figured let backbone j javascript application deal rest resource feature discovery promoted rest link understand www meant served multi server oo element exploded serviced many host simple scenario like saving page showing contact address end get api contact num embed address save button pressed put api contact num put api contact num address num lead move saving action atomic transactional responsibility browser application since two resource addressed separately mind cannot simplify development facade design pattern applicable bring complexity client handling transactional atomic save benefit restful