debate rich v anemic domain model internet full philosophical advice short authoritative example objective question find definitive guideline concrete example proper domain driven design model ideally c real world example implementation ddd seems wrong workitem domain model nothing property bag used entity framework first database per fowler anemic layer apparently common domain service contains behavior business logic workitem per others procedural pg num wrong make right behavior e checkout belong workitem correct dependency workitem model enter image description public private iunitofworkfactory unitofworkfactory using unity dependency injection public iunitofworkfactory unitofworkfactory unitofworkfactory unitofworkfactory public statusid using var unitofwork unitofworkfactory var unitofwork var unitofwork var workitem read wi wi id firstordefault workitem throw new argumentexception format provided workitem id num recognized var status read id statusid firstordefault status throw new argumentexception format provided status id num recognized statusid statusid workitem add status update workitem unitofwork save example simplified readable entity instance extra behavior irl actually take status category category exist category created update gave correct answer perfect video subject c jimmy bogard apparently moved comment give enough information beyond link rough draft note summarizing video answer please feel free comment answer correction video hour long worth watching