us duck typing rather static checking many concern ultimately apply desired method attribute attribute valid range value whether writing constraint writing test case validating user debugging inevitably somewhere need verify still proper state still look like duck quack like duck statically typed language simply declare x anytime create mutate x always valid seems feasible decorate ensure valid certain constraint every time mutated still valid constraint ideally would simple declarative syntax express hasattr length length non negative word unlike rail validators less human language programming language could think ad hoc interface system could think ever present level unit test library exist declare validate constraint duck checking object unreasonable tool want thanks contrived example rectangle length num width num live fictional universe multiplication super expensive therefore time multiply need cache result def area rect area rect rect area rect area rect length rect width rect area area rectangle rectangle length num area rectangle compare expected v actual imagine thing attribute rather dictionary key