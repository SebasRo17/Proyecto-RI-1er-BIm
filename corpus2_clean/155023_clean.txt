developing program sql database backing store broad description program allows user generate record number user defined table make connection spec num record generated must able connected record user table excluding record table yes creates arbitrary user generated relational map num connection directional incoming outgoing bi directional num list connection record user ordered num record must know connection made others well connection made others num record field also include aggregate information connection like obtaining average sum etc must updated change another record connected num conserve memory relevant information must loaded one time load entire database memory load go num cannot assume backing store local right eventually program include syncing remote db num cannot depend specific implementation backing store mean cannot certain backing store fact relational thus relational stored explicitly connection kind point program strong possibility number connection made high especially user using software intended neither user table connection record known design time user generated spent lot time trying figure design backing store model best fit spec first design attempt one managing table record connection attempted first kept memory footprint smaller record connection simple dicts maintaining aggregate link information table became onerous ie huge mess tracing dependency using almost became impossible instead settled distributed smart graph record connection aware around managing connection record increase memory footprint also let create system connection record loaded memory needed also much easier trace dependency eliminate cycling recursive update etc biggest problem storing loading connection happy current solution idea wanted ask see anybody else idea structured connection fairly simple contain come far num store connection one big table either load connection one big db call make call every time user table loaded big issue size connection table potential huge afraid would slow thing num store separate table outgoing connection user table probably worst idea connection spread multiple table one user table mean load table find incoming connection particular user table avoided making one big as table sure cost worth num store separate table outgoing incoming connection user table using flag distinguish incoming v outgoing idea leaning towards essentially double total storage connection connection stored two table also mean make sure connection information kept sync place connection corresponding connection appropriate table obviously ideal mean load user table need load one connection table information need also present separate problem connection creation since user table list connection two opportunity connection made however connection object designed facilitate communication record created mean devise common caching factory make sure one connection made per connection anybody idea better way committed particular design pattern pretty much stuck want make sure come best one possible also note current backing store sqlite written program depend specific backing store though introducing adapter layer retrieval rest program backing store could anything even simple text file use backing store exclusively storage retrieval nothing else use specific database sql relational feature use database perform calculation aggregate otherwise handled program logic