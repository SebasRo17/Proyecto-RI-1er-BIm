working large multi tiered software project found recurring anti pattern occurring coulnd find definition wikipedia source quick search would like ask known anti pattern current situation explain general way providing example general anti pattern could called like italian expression lit passing buck avoiding responsibility giving someone else funny image describing several people sub project organized chain responsibility someone upper level could decide deliberately avoid resolving design problem leave resolution person next could repeat ultimately leave last developer mess development complexity anti pattern appears discovered person top chain resolved problem much less work rework would done people real world situation general developing middle tier service handle call front end perform several call different back end service db web service file storage outsourced service well documented get field immediately handle instead asking information simply put front middle end interface require front end guy supply parameter passed unprocessed back end front end guy may perform several call service get single could else obtained middle tier call instruction case assuming middle back tier interface value considered please comment becuase reason discovered back end service require field order thought respectively enumeration ascending descending boolean one problem encode enumeration service accept value asc desc num num developer know fact ultimately discovered original developer lazy ask detailed information possible value field instead put front middle end interface two leaving fe guy angrily questioning pick value field describe another case fictional example suppose outsourced back end service define operation phonenumber date birthdate person db table identifies people unique id contains information certain time fe know person id bunch information insufficient make complete call however middle tier expose signature back end instead simpler long personid implemented db call followed service call since already deployed force fe guy request rework new service retrieve missing information call middle end service case request service developed change signature perform missed operation general word original developer take time resolve simple simplified problem obtaining required information smallest information available decided pas buck fe word better design much attention could prevented situation fact first also led trouble switching mocked environment integration testing would like explain team wrong passing buck rather solving problem find popular definition far help find article documented yet