suppose one relatively large program say sloc c commented documented thoroughly well organized working well entire base written single senior developer longer company testable ioc used throughout except strange reason write unit test company want branch want unit test added detect change break core functionality adding test good idea would one even start something like edit ok expected answer making good argument opposite conclusion issue may hand anyway read duplicate question well general consensus writing test good yeah helpful particular case think alone contemplating writing test legacy system going keep metric much time spent many time new test catch problem many time come back update year result conclusion turn basically impossible add unit test existing semblance orthodoxy working obviously cannot red light green light test usually clear behavior important test clear begin certainly clear finished really even asking question miss point writing test first place majority case found actually easier write using tdd decipher intended function retroactively add unit test fixing problem adding new feature different story believe time add unit test pointed eventually get rewritten often sooner expect taking approach able add test coverage surprisingly large chunk existing codebase