created diff implementation compare document revision work based nd difference algorithm variation one thing become important take list change interpret human readable text current algorithm efficient much difficult expand upon short question thinking trying use heuristic add penalty turn idea smooth unnecessary add delete add delete add delete easier parse something human read basically turn shortest path problem simplest path problem course create always delete everything add everything sound reasonable precedence using heuristic diff implementation heuristic problem long sentence deleted another long sentence removed share least one word say leaving common word alone adding deleting create shortest path however really obfuscates context change human trying read change example current diff old text clean blow dry shop air new text clean wipe lint free cloth change note list change blow dry wipe change shop air lint free cloth note change used instead delete shop air add see second note loses context without still looking full old new text set text cannot understand mean note punctuation delimited punctuation separate word would get add instead change repair repair obnoxious however mean even comma text opposed word previous example thing happens possible solution think could use different path finding algorithm instead give flexibility add weight different change path might make sense person maybe could even make traveling node containing punctuation little weight sure would effect thing could get previous example list following change note list change blow dry shop air wipe lint free cloth see much clearer know would take performance hit might fairly major overhaul program important final result want bottom precedence using heuristic diff implementation thought reasonable time investment idea algorithm thanks advance edit tried clarify solidify question generalize question adding heuristic algorithm rather using basically thing instance still think accurate post insightful