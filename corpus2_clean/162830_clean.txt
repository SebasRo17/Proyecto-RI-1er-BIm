order redo thing several time wanted factorize common stuff instance let say cow horse cow produce milk horse run fast eat grass public herbivorous protected quantity public quantity var evt build quantity evt public apply evt quantity evt quantity public horse herbivorous private bool public var evt build evt public apply public cow herbivorous private bool public var evt build evt public apply evt eat grass application receives command json xml whatever deserialise namespace herbivorous public public guid get set public guid get set public long version get set public quantity get set command handler public commandhandler public override execute cmd contract requires argumentnullexception cmd herbivorous herbivorous getbyid herbivorous cmd id herbivorous isnull throw new herbivorous cmd quantity save herbivorous cmd far good get herbivorous access whether horse cow matter really problem getbyid herbivorous cmd id indeed let imagine cow produced milk morning want eat grass contains event come command commandhandler longer presence cow know anything producing milk explicit contextual command like namespace herbivorous cow public public guid get set public guid get set public long version get set public quantity get set public public guid get set public guid get set public long version get set would mean external component asks herbivorous eat grass know bounded context talk cow former command talking general herbivorous behavior context call important knew needed herbivorous eat grass problem possible leakage domain specific one bounded context another actually might mean cannot support abstraction working interface several application wonder could accept event rebuilding herbivorous mean find apply event go fine trying apply next one stream real simple solution put ease know event might applied producing error rehydrating actually think less feel guilty thanks help beginning kind problem would glad news someone experienced