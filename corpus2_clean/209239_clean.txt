talk douglas crockford claim based orientation represented term prototypal inheritance construction give something like var var var also claim converse prototypal inheritance cannot general encoded using based construct thinking seems claim wrong num supposed encoding based orientation wrong operational semantics point view typical based oriented language member variable function known exist directly used prototypal encoding relies testing runtime whether member present hashtable ergo semantics different num prototypal inheritance actually encoded based oriented language use c example based oriented language could used struct prototypal std shared ptr prototypal base std unordered map std boost member boost operator const std key auto member find key member end base base key else throw std logic member found else analysis wrong missing something