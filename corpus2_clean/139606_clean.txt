programming language design decision influence usage applicability example focused maintainability readability indentation part language intention cross platform oop easier friendlier c objective c built oo wrapper around c knowing future c time erlang designed highly fault tolerant concurrent system php designed handling dynamic creation web page coffeescript designed expose good part javascript adding oop syntactical sugar hiding nuance globals etc j behind scene etc programming language tried exploit capitalize particular niche imho perspective founding principle programming language governed evolution widespread course many list intended example however struggled understand founding principle ruby based growing popularity founding principle ruby make popular today genius one man designed rail framework latter ruby made designing rail better easier faster sense commonly cited reason per creator wanted fun weakly typed programming language see reason creating new programming language altogether programming sheer fun imho irrespective language language bad part one either get around life niche ruby exploit exploited current language strong point usp ruby led widespread ruby done extremely difficult ruby programmer ruby noob hence confusion disclaimer flame war looking ruby v programming language answer looking design decision ruby based led widespread adoption niche ruby satisfy become popular purely attributed rail