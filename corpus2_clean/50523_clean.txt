need analyze directed graph edge vertex k strongly connected component largest one contains k vertex read explanation leonid shifrin although quite understand code merge blazingly fast learned two thing recursion iteration linked list cool trying mimic approach prepared two function finding strongly connected component first one kosaraju algorithm clearall readedge sowdfs dfs kosaraju readedge b adjout q b adjout adjin b q adjin b sow postvisit vertex function sowdfs q v newq rest sowdfs newq v false adjin v q q sow v rest sowdfs q v rest sowdfs rest deep first scan dfs q v newq rest dfs sow v tag newq v false adjout v q rest dfs q v rest dfs rest finding connected component kosaraju graphlist block adjout adjin order newq q tag iterationlimit infinity construction adjacency list adjout v q adjin v q scan readedge graphlist setattributes q holdallcomplete first scan topological sort reverse graph newq v true order reverse reap scan sowdfs q q deleteduplicates flatten graphlist second scan finding component clear adjin newq newq v true last reap scan tag dfs q q order second one based tarjan algorithm described wikipedia adapted non recursive way reading edge readout b adj q b adj test start component strongq v index v link v pop stack pop v q v rest inq sow v v false rest pop v q rest pop v inq sow v false rest deep first scan two stack bidfs q v newq rest stack bidfs previsit function newq v false index v link v idx p v root root v adj v q q h v rest inq v true q v stack bidfs q h v strongq rest stack bidfs rest pop v stack bidfs q v inq rest stack bidfs link root min link root index v rest stack bidfs q v rest stack bidfs rest stack postvisit vertex function h root p link root min link root link start scan start v newq block p root v inq link index idx p parent p inq false bidfs q v q q finding connected component tarjan graphlist block adj newq q iterationlimit infinity construction adjacency list adj v q scan readout graphlist setattributes q holdallcomplete finding component newq v true last reap scan start deleteduplicates flatten graphlist try use wm build function graph analysis order clear comparison test performance chose google graph stanford large network dataset collection renamed version one available setdirectory notebookdirectory graphlist import edge dat graph contains edge vertex structure scc completely trivial single connected component vertex another one vertex one vertex three one vertex ten component vertex vertex strongly connected one hand wm somehow requires lot time form graph result connectedcomponents graph directededge graphlist absolutetiming null half second find strongly connected component hand reading graph take second function tarjan second find component thus second total result tarjan graphlist absolutetiming null hence question possible speed tarjan function least time slower built function connectedcomponents nb file available