opportunity rewrite core piece project c inheritance heavy feel increasingly restrictive designed scenario pretty simple imagine application built handle various small task every task unique functionality implement itask interface simple method get implemented task e g init start stop etc addition itask interface also abstract task inherit sort everything kitchen sink approach contains useful piece functionality task often require example task record status progress exact way logic defined available child protected give another example task send email notification certain condition met provides access core smtp functionality app purpose many example kind helper method property problem course base already grown unwieldy cluttered property method universal task starting introduce problem solving example anytime change required base find position might wind breaking task also seems like breaking encapsulation single responsibility principal also quite clear happened first place common occurrence initially small specialized application blew term scope size quickly initially probably bad decision architecturally proven inflexible awkward would start something like would approach problem principal design patter would choose thank much