project monte carlo modelling grain growth link one costly subroutine calculation potts energy monte carlo grid cell comparing center cell value neighbour calculating resulting potential energy calculated pottsenergy osub total map kroneckerdelta osub osub osub x matrix integer overall algorithm convolves calculation across whole system matrix oin consist big matrix following way energy indx nmax pottsenergy sequence energypart indx nmax energypart routine return boundary center cell position denoted indx neighbour part notation energypart indx nx ny module ii jj ib jl jr get part specification nearest neighbour location ii jj reflecting boundary condition assumed ii indx jj indx row top bottom neighbour ii ii ib ii ny ny ii row left right neighbour row top bottom neighbour jl jj jj jr jj nx nx jj ib jl jr actual convolution done allenergy oin nmax mapindexed energy oin nmax oin take big matrix return big matrix potts energy value input matrix oin oin randominteger allenergy oin dimension oin matrixform main problem implementation rather slow cannot easily sped use cuda parallelize implementation looking mathematica documentation found promising algorithm like cellular automaton discrete convolution would definitely faster suppose use routine unfortunately non trivial way folding idea speed algorithm using power mathematica