think understand theoretical benefit automated testing especially unit testing however sure optimal amount testing project non critical rapidly developed deployed web app reasonably large user base current reasoning go like core functionality app manually tested matter second site search engine basically search get result work course many edge case option could tested well unit testing underlying logic anything significant break caught made live literally tend get email user within hour within minute major problem rarely one get consequence significant problem going live people minute maybe percentage new visitor get period would lost although number low since time period short lower impact bug might take longer someone email day even week depending severity also less impact user business perspective likely matter much saying excellent test coverage useless course would nice catch every issue go live cost benefit tradeoff working test responding quickly user feedback adding refining feature latter seems win one exception found directly affect user example ad serving collection directly impact user site people unlikely let u know break also less noticeable feature testing see strong case well defined unit test ironically seems spectrum good test coverage becomes less important feature become important point critical site operation really need tested well defined manner question way base widespread test coverage test driven development optimal even non critical continuous release environment failing reasoning assuming fix bug immediately reported reasonable focus rapid nimble development knowing user let u know break something exception formal test functionality directly exposed user