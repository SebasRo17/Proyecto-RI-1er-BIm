met criterion good system desing stability relative requirement change small req change raise small change design yet gut feeling almost somewhat complex software system possible state set small change requirement cause unacceptable amount change software feeling based personal experience though great fact schedule often broken community argue statement case strong disagreement question meaning agree yagni principle work well overengineering agile methodology brings whole process software development system evolves incrementally perfectly conforms stability concept started post however agree instability point localize case understand implication beginning possible design system agile manner p part dialog colleague nothing wrong incremental software development imagine cost changing architecture curiosity firmware landed mar hey changed firmware yes carefully designed feature would point