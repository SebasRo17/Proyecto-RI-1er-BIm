simple question even sure answer let try coding c using dependancy injection avoid global state work quite well unexpected undefined behaviour often however realise project grows writing lot consider boilerplate worse fact boilerplate actual make sometimes hard understand nothing beat good example let go called creates time object detail sure relevant time object quite complex time different format conversion neither linear straightforward time contains synchronizer handle conversion make sure properly initialized synchronizer use one instance application wide would qualify singleton mutable want make singleton app lot class need create time object sometimes class deeply nested let say contains instance b need create time object naive implementation pas constructor pass constructor b imagine couple class like couple hierarchy like one loose flexibility readability suppose get using dependancy injection starting wonder major design flaw app necessary evil using dependancy injection think