background use model view presenter design pattern along abstract factory pattern signal slot pattern application fullfill num requirement enhance testability lightweight gui every action simulated unit test make view totally independant rest change actual view implementation without changing anything else order divided num layer core hold model presenter manages interaction view interface see bellow core view interface define signal slot view implementation view actual implementation view presenter creates deal view us abstract factory know view interface signal slot binding view interface care actual implementation view layer concrete factory deal implementation signal slot mechanism implemented using custom framework built upon boost really something like everything work fine problem however problem know solve let take example simple drag drop example two drag must create different point model get callback called drop action parameter call passing case dealing view mvp pv view supposed know anything presenter model right create knowing model representing thought adding itemid every view id id core view represents pseudo would something like add get much detail work problem like pointer pointer dangling imagine mistake delete deletes represents invalid elegant bulletproof solution even though never objectivec macosx programming help notice framework similar cocoa framework deal kind problem find depth information google someone could shed light hope question confusing