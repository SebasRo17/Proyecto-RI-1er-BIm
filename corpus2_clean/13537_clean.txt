created simple numeric symbolic integration use symbolical numerical technique time also interpolate numerical integral problem function use timeconstrained testing integral done fully symbolically waste time without result much much faster optimized maybe implementation like found note easily extended sum exchange integrate sum option nsintegrate interpolationvariable linearity nsintegrate f g option nsintegrate f option nsintegrate g option nsintegrate f x limit option freeq x nsintegrate f x limit option constant function nsintegrate x limit option freeq x nsintegrate x limit option exponential nsintegrate f g x limit option freeq f x f nsintegrate g x limit option nsintegrate f g h x limit option freeq f x f nsintegrate g h x limit option basic integral polynomial nsintegrate x b b nsintegrate x x b b nsintegrate x x b numericq numericq b sign sign b true b log b nsintegrate x n x b n b n n n basic integral exponential nsintegrate x x b b log nsintegrate x x b b log nsintegrate x scaling offset nsintegrate f x args x b option freeq x flatten args nsintegrate f x args x b option nsintegrate f x args x b option freeq x flatten args nsintegrate f x args x b option nsintegrate f x args x b option freeq x flatten args nsintegrate f x args x b option interpolation nsintegrate f x b option interpolationvariable varrange list option length varrange module var range varrange table depth varrange var varrange range list range var varrange table table var nsintegrate f x b option option range interpolatingpolynomial table var real chop expand database use nintegrate nsintegrate f x b opts expandall f f nsintegrate expandall f opts nsintegrate f x numericq b numericq opts nintegrate f opts usage nsintegrate co x x interpolationvariable interpolationvariable work like table case interpolation use form b added scaling offset section