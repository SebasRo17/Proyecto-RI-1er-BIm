applies c probably similar non oriented language central store potentially concurrent access two way see protecting let say store element struct data1 data2 data3 store example type let imagine applies something bit varied different type etc keep question simple grant user access within could thing num could provide critical region function rely caller get protection correct num could provide setter getter item store manage critical region within module protect user deal logic trouble first burden placed caller trouble second least c firstly end writing whole load boiler plate accessors secondly complex stuff like test set needing hold lock whilst several operation becomes messy e g num need getdata1 unsigned index enter cr store index data1 leave cr unsigned index enter cr store index leave cr setter want set multiple item atomically get hard get benefit modularity encapsulation still flexible interface