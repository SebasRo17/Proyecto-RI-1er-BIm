would like calculate gateau derivative functional e function depending function simple example dirichlet functional l u x int frac u x dx derivative direction v x calculated dl u v left frac partial partial l u x v x right int u x v x dx mathematica define functional consideration without argument like l u integrate u x x order compute derivative use following recipe functionalhead function testfunctions independentvar block myop x operate x functionalhead flatten inner myop flatten function flatten independentvar list inner myop flatten testfunctions flatten independentvar list l u v x int u x v x dx funny list construction definition need allow multiple argument exclusively depend space variable notice output functional slightly different correct form input functional would like calculate higher order derivative second one dl u v w left frac partial partial dl u w v right int w x v x dx higher one defined recursively case dirichlet functional quadratic hence third higher order derivative zero problem appear want use function redefine output first derivative look like dl u integrate u x v x x x get dl u dl u w x int v x w x dx since need calculate bulk higher third fourth fifth etc derivative nonlinear functionals workaround redefining without argument ineffective anybody idea make process systematic edit came solution redefined derivative operator called use pure function instead symbol produce correct output used iteration code functionalhead function independentvar block testfunctions flatten toexpression stringreplace tostring function except tostring myop x operate x functionalhead flatten inner function flatten independentvar flatten inner myop flatten function flatten independentvar list inner myop flatten testfunctions flatten independentvar list list functionalhead function independentvar n block tempfunc tempfunctions temp dtemp tempfunctions function toexpression tostring temp stringreplace tostring tempfunctions except tostring functionalhead flatten tostring tempfunctions n toexpression tostring dtemp stringreplace tostring tempfunctions except tostring temp tostring tempfunctions tostring independentvar tostring toexpression tostring temp stringreplace tostring tempfunctions except tostring dtemp flatten tostring tempfunctions temp flatten tempfunctions recursion step sadly messy wanted test function automatically named u v first derivative u second led confusing manipulation variable name unable mathematica way transformed everything string manipulation pulled everything back expression note except command used also wanted include greek special character function name whole thing work like l u v w integrate u x x v x x x w l u v w x x int left u x text u x v x text v x right dx w text w l u v w x x int left text u x text u x text v x text v x right dx text w text w edit changed title since seems discrepancy respect terminology used wikipedia reference concise following book ambrosetti prodi nonlinear analysis