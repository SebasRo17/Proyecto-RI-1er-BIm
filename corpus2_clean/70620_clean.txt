two interface one one without generic parameter non generic interface used internally store instance generic interface collection would well except fact c generate signature based interface called getitems one return ilist ilist since cannot give need come two different name convey interface public interface enqueue enqueue ienumerable item dequeue dequeue ienumerable item ilist getitems public interface enqueue item enqueue ienumerable item dequeue item dequeue ienumerable item ilist getitems task run every often get item batch processing store pas external resource processed external resource removed store task need non generic interface reason exists created abstract implement redirects call non generic interface generic one generic one abstract like public abstract enqueue enqueue enqueue ienumerable item enqueue ienumerable item dequeue dequeue dequeue ienumerable item dequeue ienumerable item ilist getitems getitems toarray public abstract enqueue item public abstract enqueue ienumerable item public abstract dequeue item public abstract dequeue ienumerable item public abstract ilist getitems supposed customer inherit going force inheritance hierarchy may implement interface reason great concern name want api crap name call getitems conveys meaning without looking like working around language limitation update think analyzing learned lot public api past num year one chance get new one right stuck released average internal software application software platform extensible used well known company world going hard honestly get stage conference tout usefulness software platform crappy api overly complex overly abstract designed serve specific business need customer going need better yet already poorly named overly complex api make jump hoop get thing done hindsight always num num