project consists user application server application server application prepares file user application consumes huge stored custom format project includes many class related reading writing user application need writing side want might resource limited device compilation c known fast compiler say two class ten pair datareader class operate thing serialized first needed user application second needed server application would suggest keeping class together say common datareader common separate like datareader go compilation common stuff life common compiled library linked first option split two together common linked common together common directory linked target need advantage disadvantage closely related make sense keep together one library make library larger compile longer compiling separately mean directory layout correspond project layout rather confusing complicates build script keeping separate make build structure logical avoids unnecessary work updating component far apart need modified application maintained team like someone aware part currently mixture approach class separate others common library contains lot stuff individual project would like clean usual recommendation situation useful experience similar case