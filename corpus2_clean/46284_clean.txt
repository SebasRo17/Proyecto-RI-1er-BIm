seems infrequent common experience sometimes working project suddenly something turn unexpectedly throw massive work complexity whole lot example working application talked soap service various machine whipped prototype worked fine went develop regular front end generally get everything running nice fairly simple easy follow fashion worked great started testing across wider network suddenly page started timing latency connection time required perform calculation remote machine resulted timed request soap service turned needed change architecture spin request onto thread cache returned could updated progressively background rather performing calculation request request basis detail scenario important indeed great example quite forseeable people written lot apps environment might anticipated except illustrates way one start simple premise model suddenly escalation complexity well development project strategy dealing type functional change whose need arises often result environmental factor rather specification change later development process result testing balance avoiding premature optimisation yagni overengineering risk designing solution mitigates possible necessarily probable issue opposed developing simpler easier solution likely effective incorporate every possible edit crazy eddie answer includes suck find least expensive way implement new complexity made think something implicit question specifically raise hit bump incorporate necessary change thing keep project close schedule possible may affect maintainability go back architecture rework detailed level may maintainable push everything back development