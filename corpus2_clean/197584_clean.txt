trying make case putting structure parent shown strategy pattern minimizing inheritance favor relationship really sure principle ooad pattern breaking principle ooad pattern breaking potential pattern public interface render public basemodel public abstract init public abstract load public tmodel tmodel basemodel public tmodel model get set public override render join new header container side nav side navigation side nav content content public abstract public basemodel public list ints get set public mymodule public override join model ints select tostring toarray preferred pattern duplicated clear public interface render public basemodel public abstract init public abstract load public basemodel public list ints get set public mymodule public model get set public mymodule model model model public override render join new header container side nav side navigation side nav content content public join model ints select tostring toarray part pattern trying focus instead thinking structure tag living first example live parent second example pushed derived right example pretty simple something like side nav could potentially get complicated may need controlled child anyway feel principle feel like tag structure parent first example thing removed preferred version namely generic suggested reading good bad choice welcome proponent first example embedded structure like fact wield change large amount child class feel offering flexibility derived class way go need parent parent offer functionality cross cutting feature bottle canned structure