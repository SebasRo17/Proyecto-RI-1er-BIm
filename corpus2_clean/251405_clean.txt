working wpf application trying stay strict separating view viewmodel model application different view relatively flat hierarchy one view editing something call substance one classification substance number classification question viewmodel class classification num line thing mostly consisting get set property inherent logic working model well command private function could easily divide bunch smaller class like one per view whatever one owning instance get smaller class seem meaningful seems like solving symptom like sake size clearly depends number field related classification anything think trouble normal wpf application dominated size wise viewmodels serious limiting size could reduce significantly changing way write brace think look clear egyptian bracket question really whether muddy rather actually say viewmodel muddy large give perspective substance view num list datagrids similar num button num comboboxes num checkboxes num textboxes num radio button num row per control case interaction going different control setting one control disable nullify another one etc sample public relaycommand get new relaycommand x var number new number id number modifiedby op loginname number modifieddate datetime number createddate datetime number converter translation first key number validator normalize var temp replace number numbervalue int32 parse temp substring num temp length num sn sn replace number sn number add number param public observablecollection get substance set substance onpropertychanged public relaycommand get new relaycommand x opening tab classification already tab open var var tab gettype typeof var classification c id c tolist foreach tab add new new service one particularly muddy repeated public get substance else set bool sv substance onpropertychanged property includes fallback functionality substance lack certain set value state change going substance value state user start editing one value certainly room improvement even without would number time larger num row recommend size