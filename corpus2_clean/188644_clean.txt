last large project used dependency injection really heavily started using constructor injection even two three dependency resulted really ugly public myclass idependency1 dependency1 idependency2 dependency2 idependency3 fan property injection people say implies optional dependency think mean default dependency production replaced mock test many time dependency dependency provide default unless used singleton something problem property injection prefer fully initialized object want accidentally forget mock dependency test found compromise created parameter property dependency passed constructor benefit keeping somewhat cleaner could ignore dependency test touched based feedback got impression bad idea constructor injection parameter injection compromise allowed later realized parameter object sometimes became class set class discovered interesting pattern many business object depended business object dependency ended interesting structure similar linked list simple depedency chain structure could become fairly complex depending number interacting class case structure closer n ary tree parameter could link number object including business object business object node tree parameter object like edge connecting complex dependency tree think connecting object together without using declarative dependency injection framework would mind numbing dependency injection framework using going num level deep building dependency bottom worst case parameter object usually exposed dependency rare occasion would hide behind friendly call made business object usually resulting yet another parameter remind parameter object existed want construct dependency constructor pas constructor made sense create new business object started repeating even ended explosion parameter object read plenty book explaining situation never happen class dependency sign class much case business used multiple database table repository configuration setting service etc order calculate something occurred often implementing series step making unit work n thing needed task best push n thing class call stack one num dependency better worse num class two dependency hoping get feedback approach dependency injection relates architecting business layer