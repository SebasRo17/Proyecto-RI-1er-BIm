recently came attention hierarchical inheritance may relic thinking class structs function rather product contract driven mentality consider simple implementation unmodifiable iterator guava library googlecode com svn trunk javadoc com google common collect html iterator throw unsupportedoperationexception invocation remove sure people would agree implementing contract one method always throw exception bad form implement contract implicitly guaranteeing method would work yet option could declare interface contain remove would render incompatible method work iterators could blame api designer forcing remove part every iterator rather moving higher level interface would indeed avoid problem let say need iterator also set value called implement setvalue also iterator require combination functionality forced declare interface every combination etc combination grow exponentially extra feature add interface usually trying express something like requires parameter iterable settable return iterable yet language like c c allow u without awkward use generic recent method make kind design obsolete