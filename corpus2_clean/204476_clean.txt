concept programming interface pygame personal project make creation game easier far managed design architecture behaves like object displayable component appear move screen object child object display ask child display parent surface object three important element callback system graphic system physic system respectively act display move want create game scene create root contains object like player mouse ground monster ask root display every appears recursively designed without knowing composite pattern first basic oop issue make substitutability property object come inheritance work well recursive composition made mean abstract called put abstract quote really concept inherited class like image able display movingobject able move inheritance meant extend ability composite pattern requires group object must considered single object call recursively call every child regardless fact may example instance let use root element root image player movingobject cloud movingobject background image sun image let suppose want call move root element make every child move first cannot root image instance know move even case child background sun would know decided put empty move inside abstract every know even anything issue containing empty method understand need permit recursive behavior possible solution heard inheritance v composition fuss one solution came mind stop using inheritance ability use composition instead mean would create example body image callback would represent different action plug instance equip give power thought barely change something call move check body plug use still requires move present inside question turning guy gave advice pattern understand well composite pattern work approach correct use plug class help recursive behavior good idea pattern fitting need hope give hint