less low level async socket programming year ago event based asynchronous pattern eap fashion recently moving tcplistener asynchronous programming model apm trying move async await task based asynchronous pattern tap pretty much keep bother low level plumbing figuring give rx go reactive extension since might fit problem domain lot write many client connecting tcp application start two way async communication client server may point decide message need sent classic request response setup real time two way open party send whatever want whenever want anyone decent describe glad hear protocol differs per application really relevant question however initial question num given one server running keep track many usually thousand connection e g client lack better description state machine keep track internal state etc approach would prefer eap tap apm would rx even considered option need work async since request response protocol cannot thread client waiting message blocking call sending message blocking call however send blocking client could live b need handle many concurrent connection see way reliably using blocking call application voip related sip message sip related messaging application like etc simplest form try imagine chat server trying handle many chat client protocol text based ascii implemented many different permutation aforementioned technique would like simplify work creating simply instantiate tell ipendpoint listen tell whenever something interest going usually use event eap usually mixed two technique bother trying understand protocol merely handle incoming outgoing string thus eye rx hoping would end simplify work created new fiddle scratch using system using system collection concurrent using system net using system net socket using system reactive linq using system text program static var f new new ipendpoint ipaddress num f start readkey f stop readkey public private tcplistener listener private concurrentdictionary ulong client private ulong num public ipendpoint get private set public ipendpoint client new concurrentdictionary ulong public start listener new tcplistener listener start observable observable fromasync listener accepttcpclientasync subscribe tcpclient create new unique id var new tcpclient keep track client client clientid initialize connection send connect n n writeline client num accepted clientid onerror ex oncomplete writeline client connection initialized accept new connection listener accepttcpclientasync writeline started public stop listener stop writeline stopped public send ulong clientid client trygetvalue clientid send public private tcpclient tcpclient public ulong clientid get private set public ulong id tcpclient tcpclient clientid id tcpclient tcpclient public send writeline sending num var encoding ascii getbytes tcpclient getstream num length write v aware fiddle little implementation specific detail case working connect n n fiddle refactoring generic approach removed also aware need refactor anonymous method private instance method server sure convention e g example use name basis starting point foundation need tweaking question num see question num num right track design decision num concurrency wise would cope thousand client parsing handling actual message aside num exception sure get exception raised within client server rx wise would good way num get connected client server using clientid assuming expose client one way another call method directly also call method via server example send clientid whereas latter approach would convenience quickly getting message side num quite sure go need handle incoming message would set get stream ofcourse would handle retrieving received byte think need kind something subscribe would put b assuming want avoid using event class implemented specifically tailor application specific protocol handling etc using specific class would go getting underlying fiddle class specific counterpart article link already read skimmed used reference consume socket using reactive extension creating subscribing simple observable sequence add associate context connection session asynchronous programming reactive framework task parallel library part num num num using reactive extension rx socket programming practical net rx driven web server net rx driven web server take num rx tutorial