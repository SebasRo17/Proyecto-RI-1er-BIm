work shop web application us implementation mvp architectural pattern manager come net world exposed mvvm design pattern manager advocating change mvp implementation including presenter decoupled loosely coupled depending interpretation view via observer design pattern tradition mvvm opinion presenter view work together achieve common goal coupled among argument brought support change ability unit test presenter presenter see view observer argument go easily unit tested presenter strongly coupled view necessarily difficult test view us humble view paradigm mocked finally testability symptom good design driver design another argument used manager support layering view presenter supposed maturity mvvm follow mvvm teaching adapt implementation mvp correct wrong mvvm imposes artificial layering view presenter order facilitate binding control please help u see light use decoupled model pay price seeing benefit occam razor say need argument use decoupling testing seem one clarification really looking question argument tip balance favor presenter know view shoot event favor presenter know view direct coupling like humble view interface directly note presenter easily serve multiple view loose tight coupling difference interface presenter talk loose coupling presenter talk listener class event bus representative whereas tight coupling presenter talk view interface