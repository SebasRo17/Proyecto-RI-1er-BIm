based example documentation page processmathlink got following c code void mathematicafunctiondescriptor register wolframlibrarydata lib data const mlink link lib data getmathlink lib data checked mlputfunction link evalutatepacket mlputfunction evaluatepacket failed checked mlputfunction link set mlputfunction set failed checked mlputsymbol link mafunctionname c str mlputsymbol mafunctionname failed checked mlputfunction link libraryfunctionload mlputfunction libraryfunctionload failed checked mlputstring link macalfrontend mlputstring macalfrontend failed checked mlputstring link mgfunctionname c str mlputstring mgfunctionname failed putsymbollist link input checked mlputsymbol link output c str mlputsymbol output failed int errorcode lib data processmathlink link errorcode throw gmathematica callbackerror errorcode cannot register function mafunctionname int nextpacket mlnextpacket link nextpacket returnpkt mlnewpacket link called function initializeall catch exception convert error return mathematica checked simple template function wrap call first arguement checking return status throwing exception last argument message call fails invoked mathematica libraryfunctionload macal initializeall integer libraryfunctionload seems work dll macal contains function initializeall load necessary dlls correct order invokes wrapper function dll macalfrontend get back error message mlputfunction evaluatepacket failed regretfully know find failed generally trying execute libraryfunctionload function c code invoked first function actually tried first wolframlibrary initialize moved separate function failed noticeable difference possible wolframlibrary initialize correct technique better solution generally good literature net form book explains sort thing wolfram documentation worst encountered seem confuse quantity quality