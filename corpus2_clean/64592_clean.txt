overhead associated continuous integration e g set training awareness activity fix bug turn issue enforced separation concern programming style etc point continuous integration pay edit finding set cruisecontrol net nant reading vss tfs reason failure nothing setup cost investigation time spent investigating whether red light due genuine logical inconsistency quality another source infrastructure problem e g network issue timeout reading source control third party server etc etc political cost infrastructure considered performing infrastructure check test solution timeout except replace build server red tape got way server replacement cost fixing unit test red light due quality issue could indicator badly written unit test dependent unit test written reduce likelihood red light due bad many case necessary inserted test environment able accurately unit test make sense say making robust test becomes robust dependent course worked well cost coverage e writing unit test already existing problem unit test coverage thousand method unit test sizeable amount man day would needed create would difficult provide business case decided unit test would used new public going forward unit test termed potentially infra red point static method moot point would possible uniquely determine specific static failed cost bespoke release nant script go far useful say cm dependent build cm ui oriented database deployment type issue occured build server hourly test run overnight qa build entertain unnecessary build master perform task manually time release esp one man band small build single step build justified use ci experience complex build pain build especially without nant script even created one successful cost fixing red light issue outweighed benefit eventually developer lost interest questioned validity red light given fair try believe ci expensive lot working around edge instead getting job done cost effective employ experienced developer make mess large project introduce maintain alarm system case even developer leave matter good developer leaf process follows would ensure writes requirement spec design spec stick coding guideline comment readable reviewed happening team leader job picked manager ci work enough write unit test attempt maintain full coverage ensure working infrastructure sizable system bottom one might question whether fixing many bug release even desirable business ci involves lot work capture handful bug customer could identify uat company could get paid fixing part client service agreement warranty period expires anyway