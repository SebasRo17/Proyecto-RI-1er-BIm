image object image type bit dimension x x would like split small image cube dimension x x would give total small image object want apply adaptive thresholding algorithm already implemented computes separate threshold image block interpolates computed threshold value adaptive thresholding purpose use function imagepartition following code illustrates partitioning croppped imagecrop image part imagepartition cropped use imagecrop add border original image result mentioned image object dimension x x try run partitioning mathematica kernel crash memory error gb ram installed machine sure memory sufficient amount memory available partitioning surprised create multiple huge image object kernel crash partition image using imagepartition see following code memory usage create another image object memoryinuse cropped imagecrop image memoryinuse question simple explanation problem would suitable workaround order perform splitting edit first thanks much udb nice solution posted time try function myimagepartition data result obtained far first get feeling timing memory usage created test volume partitioned machine checked whether original volume assembled give volume volume image randominteger byte first absolutetiming ip imagepartition volume maxmemoryused first absolutetiming mip myimagepartition volume maxmemoryused image imageassemble ip volume true image imageassemble mip volume true tested function myimagepartition real image partitioning test volume real data quit kernel get fresh mathematica session fortunately function fast partitioning data memory consumption seems issue reassembling checked image dimension assembled image imagedimensions testimage maxmemoryused first absolutetiming mip myimagepartition testimage maxmemoryused imagedimensions image imageassemble mip obviously dimension reassembled image match original image dimension admit fully understand usage second parameter dwdh option image padding image match partitioning block size tried several option failed continuously besides issue would possible add functionality create overlapping partitioning image e g give overlap block voxels additional parameter built function imagepartition work quite good follows part imagepartition spheroid padding