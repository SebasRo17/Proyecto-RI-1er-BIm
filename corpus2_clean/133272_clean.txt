state machine pattern implementation pretty straightforward got design problem know elegant solution partly pseudo illustrate state public override list player context currentstate new context player list need specific basically event triggering state change also providing belongs new state know nice way besides shared parent context mangling constructor special case edit detail state setup encapsulate state specific well logic includes case gui screen belonging current state seems elegant way handling separation logic also state specific abstract state look like public abstract gamestate public gamestate game context context context net context net incoming event public abstract public abstract reason public abstract msg public abstract num method shown game mainly functioning holder also control game timer firing event etc public game public game bunch init currentstate new public gamestate currentstate get set method etc see opted composite containment currentstate rather implementing pas method mostly disliked messiness passing call really need also whole state store reference context rather passing per got two question problem pattern num every concrete state must implement fashion every abstract state ridiculous overkill currently state use num num method leaving couple page public override handled state num second issue state need exist state want store huge conglomeration context far encapsulated way handling would putting state looking example suppose one answer original question could properly pas method current state kind hack game public override list player currentstate new currentstate handledata player player list need specific