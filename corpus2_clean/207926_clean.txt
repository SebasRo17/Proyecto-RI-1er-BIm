problem description wanting use voice recognition part hardware project would like completely self containing using small low power low speed device arduino raspberry pi etc running traditional computer o involved closed self containing project voice recognition complicated depending level sophistication desire believe comparatively simple set requirement want recognise voice small dictionary num word like recognise thus require complex speech text voice recognition library excellent 3rd party software find via internet search engine shortage believe requirement simple enough within reason solution wondering anyone written process like massively flawed better way without requiring high level mathematics write complex algorithm solution tried think solution description writing c wish discus language agnostic process focussing process self let ignore num pre record dictionary word match spoken imagine num recording num different word perhaps short phrase sentence two three word believe make process comparing two recording file easier actually converting audio text comparing two string num microphone connected hardware device running num continuously taking fixed length sample say length example storing num consecutive sample example circular logging style num inventing figure top head example describe process num would likely connected band pas filter op amp would dictionary recording made keep stored collected audio sample smaller num sure exactly take sample need work though produce numerical figure integer float double represents audio sample perhaps crc md5 sum etc audio sample stream figure stream audio reading frequency perhaps ultimately sample numerical figure figure part going much hardware involved really discussion num look stored num consecutive sample look volume increase indicate word phrase said break silence increase consecutive sample collecting say num sample example would mean capture num second audio num sample sample slice compared stored sound captured sound high enough percentage sample captured matched equivalent stored one assumes word start store recording world hello example stored word split num sample also stored sample num num num num num num num num stored sample num num num num num num num num incoming audio saying hello blank sample start silence incoming sample num num num num num num num num num num num num incoming sample num num num num num num num num num num collected full sample stream chop blank sample start produce following audio recording could also move sample set backwards forward place better align stored sample produce sample set like stored sample num num num num num num num num stored sample num num num num num num num num incoming sample num num num num num num num num num incoming sample num num num num num num num num num num believe percentage close sample must sample num differs num less num percentage total number sample must within sample matching percentage easily tunable level accuracy never done anything like audio could lot work asking question perhaps already know answer question obvious ever answer may hoping computationally massive task hardware using low sec stuff hundred maybe 1ghz using clocked pi rather crude way match audio sample using lower computational power aiming instant result less num second decent proof concept p rep tag new tag like audio audio recognition voice voice recognition etc