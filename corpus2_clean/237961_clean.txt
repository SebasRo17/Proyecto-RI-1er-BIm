business people people could liked business could commented like comment person implement business implement like comment performed user person authored like implement comment implement people like could also used history history like implement smart developer come say history attached user history authored interface extends could removed like person implement business implement like implement comment implement history interface extends another smart guy come question could capture authored fact like comment class may know nothing history concept project kind interface may go encapsulated type cause strength hand explicitness suffered also end user face much pain process question encapsulate dependant type parent type interface hierarchy explicitly repeat every single level system