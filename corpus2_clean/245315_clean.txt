trying make flexible particle system xna game got interface public interface bool alive get float percent get public interface apply gametime time ref particle public interface public interface idea behind system client need derive make compatible subclass everything else automagically work behind scene actually middle writing everything moment latter two would abstract base available anyways particle system like use mutable structs optimization purpose perfectly reasonable system provides skeleton client decides hey structs way go system support whatever client throw apply take particle ref cheaper pas struct reference copy unfortunately break collection involved foreach iterator play nicely object passed ref eric lippert explains design decision make num completely disregard structs change constraint potentially hurt future optimization make much easier work collection num change anything us icollection ienumerable ilist manually poll via indexer make potentially powerful cost using deeper interface list store object num something else hope question depends curious strategy apply make work way want edit realized could also include local foreach var particle var p particle apply ref p however p would still net effect copying also ideal