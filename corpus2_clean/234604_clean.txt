going use language agnostic description monad like first describing monoids monoid roughly set function take parameter monad roughly set function take wrapper parameter return wrapper note description definition feel free attack description oo language monad permit operation composition like duck new duck duck land note monad defines control semantics operation rather contained traditionally oo language use hierarchy inheritance provide semantics bird method land duck would inherit get trouble bird penguin fails resort exception throwing handling also say penguin bird problem multiple inheritance example also hierarchy swimmer essentially trying put class category apology category theory guy define semantics category rather individual class monad seem like much clearer mechanism hierarchy case monad like example duck new duck duck land would never instantiate penguin could even use static typing prevent happening maybe marker interface runtime capability checking bail really programmer never put penguin sense never divide zero also generally applicable bird example without changing semantics individual type classify semantics composable function container instead hierarchy resolve old problem class kind kind fit particular hierarchy also easily clearly allows multiple semantics like duck well swimmer duck seems like struggling impedance mismatch classifying behavior hierarchy monad handle elegantly question way come favor composition inheritance also make sense favor monad inheritance btw sure comp sci seems like practical modelling problem maybe better