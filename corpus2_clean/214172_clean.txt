year ago worked small company went far developing house framework dedicated senior developer architect developing custom mvc framework orm scratch two thing orthogonal core product unfortunately support framework driven approach came top delayed delivery revenue generating software framework produced notably inferior shelf alternative compounded delay company burned cash quickly eventually everyone laid later employer made similar mistake got highly technically skilled developer perfectionist strong grounding enterprise design pattern grossly engineer consulting solution one client knowingly taking loss hope solution could adapted extended customer project significantly potential customer bit gold strategic blunder cost small fortune case significant degree overengineering case company project management people domain analysis background rather programming background case software architect built overly complex solution scratch itch enhance r sum complicity non technical management case architect stake keeping cost apart risk losing job company went bankrupt much risk considering high employability experience suggests uncommon trap dev shop fall place software project formal internal external technical adversarial role quantity use building analogy call prevent wasteful engineering best suited fill role