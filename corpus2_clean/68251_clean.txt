learn different programming paradigm functional programming begin question wisdom oop concept like inheritance polymorphism first learned inheritance polymorphism school time polymorphism seemed like wonderful way write generic allowed easy extensibility face duck typing dynamic static functional feature higher order function begun look inheritance polymorphism imposing unnecessary restriction based fragile set relationship object general idea behind polymorphism write later add new functionality program without changing original need create another derived implement necessary method lot simpler achieve duck typing whether dynamic language like static language like c example consider following followed static c equivalent def foo obj obj dosomething template obj foo obj obj obj dosomething oop equivalent would something like following public foo obj obj dosomething major difference course version requires creation interface inheritance hierarchy work version thus involves work less flexible additionally find real world inheritance hierarchy somewhat unstable seen contrived example shape animal real world business requirement change new feature added difficult get work done need really stretch relationship sub class else refactor hierarchy include base class interface order accommodate new requirement duck typing need worry modeling anything worry functionality need yet inheritance polymorphism popular doubt would much exaggeration call dominant strategy extensibility reuse inheritance polymorphism wildly successful overlooking serious advantage inheritance polymorphism duck typing