separating software three layer maybe tier would better term presentation view business logic service repository access entity e g presentation use read access entity returned repository service display bank city new bank way display bank example real find approach quite efficient term performance maintanability still safe long write operation create update delete preformed service namespace service use service use service use model bank service extends implement register new bank param bank param bank identification param account bank account bank public account bank new bank bank setname account bank getentitymanager persist bank bank make bank system default bank param bank bank public bank bank default bank default bank default bank setdefault bank setdefault stuck struggling update certain field bank entity bad solution num making series setter service setter bank seems quite increase service interface complexity proportionally decrease simplicity something avoid care try follow kiss dry principle bad solution num modifying bank directly native setter really bad ever need move modification service pain business logic remain business logic layer plus plan logging action maybe even involve user permission perhaps decorator future modification made service possible good solution creating bank bank field update make interface simple possible problem one try manually set flag bank operation performed get even worse relation want directly modified course limit field modified tell user cannot modify exception