make clear distinction interface believe c also experience writing c however language enforced distinction interface consequently always viewed interface workaround lack multiple inheritance making distinction feel arbitrary meaningless c always tended go write thing obvious way approach c got might called interface e g foo public virtual dostuff num foo num decided implementers foo wanted share common functionality would probably write foo public virtual dostuff num foo protected need thing need pointer static make interface sense anymore instead c two important concept related underlying inheritance problem num virtual num class member variable occupy extra space used base base may zero size reference try avoid num wherever possible rare encounter scenario genuinely cleanest design num however subtle important difference understanding term interface c language feature result currently almost never refer thing interface c talk term base class size would say context c interface misnomer come attention though many people make distinction num stand lose anything allowing e g protected non virtual function exist within interface c feeling exactly opposite natural location shared num term interface meaningful c imply pure virtual would fair call c class member variable interface still