implementing matrix compression library based modified two dimensional grammar syntax two approach type one better case memory usage want compress something grammar contain exactly num production terminal side need name production equality check grammar minimization first synonym non terminal symbol nonterminal right hand side production nonterminal nonterminal nonterminal nonterminal terminal set production map nonterminal start symbol nonterminal production production save name determine next production know haskell save string example num num num num matrix num production terminal num astring b astring astring astring astring b production map astring b question often really saved astring num time b production astring others hold cheaper reference second production nonterminal production production production production terminal map production term terminal bit misleading actually production terminal right hand side matrix terminal num b nonterminal b production map b b similar question often production saved internally haskell possibly drop name inside production need sure right let say grammar num production approach consume less memory finally question integer haskell currently planning string could easily switch integer name num production name num char assume num bit haskell handle always num bit integer allocates memory really need also read devising test haskell reference semantics figure exactly mean u imperative child good functional programmer p