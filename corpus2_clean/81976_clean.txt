let say called country two subclass called ai player country number virtual method allow player specific ai specific behavior want make possible player switch country game end refactoring inheritance relation composition able switch player internal instance country another time brings bit problem external attempt call one virtual method player delegated correctly country appropriate processing done internal country call one virtual method player ai version longer chance left updating every one method make sure version called trivial task infinite loop anyone seems much harder ought done similar refactorings never issue missing blindingly obvious observation edit concrete example access country public virtual float money money float loan loan route ai player implementation ai public country private country public virtual float x x formerly country x x