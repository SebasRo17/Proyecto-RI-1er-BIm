adding functionality website performs long running process asynchronously using msmq however mean need notify user request completed using command pattern created interface called inotify composed message message processing simply call message inotify first implementation difficult expected surprised discover mailmessage serializable got going working new concrete notifier call sp sort update status transactional database tripped would like reuse dal architecture already created inotify member model project fundamental dal hierarchy look like common model dal bal detail particular n tier bear mind inherited looking suggestion improving wondering break rule common responsible utility function used many place application thing like accessing configuration setting parsing string non business related functionality model repository business object folk call transfer object collection getters setter added smart layer business rule internal item must begin alphanumeric character dal access layer theory happens model object moved database bal business layer encapsulates business rule govern interaction object e form must least two item inotify interface defined abstraction allow notification vary independently e email txt twitter etc message processing created model tier independent dal tier reuse without creating circular dependency anyone else dealt business whose purpose interact database situate n tier architecture tell use linq sql great thanks technical question design question think answer dependency injection ever used