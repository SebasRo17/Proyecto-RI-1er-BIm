background question stem architectural discussion work current project using oriented database service consume certain interface expected provide someone team started designing model question well represented dict fair amount question site relational database column need map object either time cost model always need maintained interface change imho simply becomes another dependency need satisfied unlike static typed language actually enforce anything question way seems environment everything dynamic make sense interface define model implicitly rather maintain sort class define model ever good reason contrary edit comment answer people seem focusing two area database mapping representation well validation model apologize explicit db environment face oriented db store blob file system like representation mapping sql orm sort speak understand argument though example django model require subclassing orm work case making model class make perfect sense db effectively static typed store dynamic scenario question pure dynamically typed environment regarding validators yes one need create validators check field present right static typed language model implicitly coding c stick user std user model enforce anything building validators check presence attribute anyway make class dicts generator etc functionally interchangable solution one least validators general seem argument favour building model class rather contrary wrong