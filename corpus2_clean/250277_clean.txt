currently working project replace excel worksheet lot industry specific change quite often nobody really know thing every sure enough think know project priority maintainability business process change frequently like num num different excel template floating around agile bos want visible change every week sometimes less structure application work several system entire business process approach design db schema took one defined business logic database property type value stored database table ofcourse originally thought typical approach estimate table defining property bid table table etc way bos wanted using see picture pro con current schema pro theoretically adapts allowing later change simple adding database con overly complex difficulty even getting mind around schema trying create handle typical traditional schema pro simplistic anyone without knowledge project able pick future con many many table situation currently retrieving using made represent entity converting business model class estimate bid pas view obviously extra work current schema felt way view controller parse model determine display making u require view controller seemed like bad design programming though entirely sure correct thinking schema design bad bos want schema may complex programming done change need done obviously way way want feel like might fail kept confusing complexity one bos argument find lot field traditional schema feel like wrong case maybe instance table like num column num majority row column programming supporting current schema way desire worth theoretical simplicity add thing future much work add small feature add display view template using knockout especially considering project done agile environment work something show sound agile basically would need done complex class display view mention bunch html helper coupling bit knockout order personally sound like moving work saving correct thought process proposed solution suggested day switch schema use entity framework first make change easier way change business model regardless first would theoretically allow database change well bos concern traditional schema schema change system need updated well whereas state current schema system need updated something change database quite understand since would know deal mean would need complex coding process back initially question schema design bad argue schema design bad bad design better prepare best abstract class functionality keep thing single responsibility bad design convince bos switch suggestion assuming suggestion best alternative understand last two question subjective understandable ignored