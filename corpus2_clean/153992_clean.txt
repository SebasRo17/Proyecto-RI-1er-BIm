edit avoid confusion talking web service talking structuring application internally computer communicate programming language compiler imperative programming paradigm extended original imperative programming field saw two paradigm past num year oriented oo service oriented aka component based cb paradigm extend imperative programming paradigm introducing notion module oo call object class let encapsulates field procedure method together contrast separate record bean component service however oo programming language natively support paradigm smalltalk c jvm compatibles c net compatibles etc native language come existence top procedural language oo language com dcom binary c c corba ejb spring guice framework clearly suffer missing native language support concept start using oo class represent service record lead design clear distinction class method service field record inheritance service record simulated inheritance class technically kept strictly general programmer adviced make class play one two role use additional external language represent missing part idl xml configuration annotation even embedded dsl like guice especially needed limited since composition service part service oo object create object need facility service instantiate configure service establish inner platform effect top oo early ejb corba programmer write needed drive class represent part nature service lot class written form service together boiler plate necessary would programmer like people c oo c pas record hold first parameter procedure oo language parameter implicit produce need virtual function etc clearly missing especially newer framework extensively use aop introspection add missing part oo language bring necessary language expressiveness avoids boiler platform described previous point framework use generation produce boiler plate configuration file xml annotation oo source information phenomenon mentioned attributed hope clearly show need language since paradigm popular one maybe academic one least industry use one