writing low level emulator ibm num late 50 computer low level mean lowest observable unit work num microsecond trigger machine instruction achieve objective running series trigger written emulate almost observable mean num contained single cycle execution key allowed manually advance one trigger time cpu inner state register pc condition displayed large light guaranteeing correctness state single cycle level normally emulator either waiting operator press start executing trigger trigger also need able respond external event like thrown toggle switch afore mentioned single cycle execution key conveyed cpu thread gui thread event queue peek queue firing next trigger far worked fine however implementing card reader instruction problem num synchronous num interrupt capability executed readcard instruction would literally wait mid trigger card reader delivered card normally took tenth second unless operator mounted card deck latter contingency creates problem num must wait mid trigger e running remaining responsive external event thrown switch reset key course card card reader seem think clean elegant way design polling handling event top worked well far need callable mechanism thing able control caller right event occurs look like right state manual mean unable immediately process next trigger auto mean go ahead process next trigger forever event processing never block state manual block queue empty else state auto trigger trigger trigger get next one cpu trigger sends message requesting card buffer must wait receive event containing buffer meantime cpu must continue receive process event usual could imagine operating system design problem strong suit anyone provide guidance