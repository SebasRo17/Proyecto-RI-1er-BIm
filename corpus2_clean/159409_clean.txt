long time working well warehouse integrating wide variety source pipe application one us provide pipe application imagine one app maintains database personnel another app manages tracking sale occasionally sale app may need drop personnel someone pick say credit particular employee sale commission sale application query get list personnel allows personnel app change structure modifies etl process adapt change thus apps consuming impacted change sale app need save sale commission record database however next time refreshed using full load technique key change since stored sale database separate database straight forward way cascade change creates challenge change made made carefully may even limit certain design external application depending key never change would usually avoid exposing key user case seems necessary allow external apps reference enterprise wide entity application go lookup table available lookup table key text full load ensure key satisfy referential integrity within database external database utilizing key since part currently coded full load would cause key regenerated would need recode etl incremental external database reference key without fear changing technique used enterprise wide source application consume need store foreign key referencing entity decouple foreign key reference much possible without complicating access currently using table valued function provide access chose approach allows parameter join decouples access underlying table may change later