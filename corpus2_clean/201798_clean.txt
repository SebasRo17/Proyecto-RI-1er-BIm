trying prepare first software design document self taught formal training c done wee bit reading beforehand created list requirement quality non quality system provide overview managerial viewpoint project tasked providing intent convertible design constraint turn would guide justifiable design decision far get many specific resource provided general apply resource present system difficulty however proceeding next step exactly design constraint supposed look like specific general convert domain requirement constraint already gone nut specified thing background programmer small service company current html php pi application grew organically test infrastructure editing one bit repercussion unintended consequence far part app want replace professionally designed fact kind designed one based test suite management know programming need know current feature cruft workflow bogged etc intended guidance perpetually postponed design meeting implementation far following terminology owner refers company division running deployment software independent deployment developer mean individual either programmer write access source database admin working owner user mean individual authenticated access deployment staff mean user work owner client refers user customer owner requirement feature must service exhibit platform access service must available via variety recent modern general business computing device e desktop laptop tablet smartphones num mobility reasonable effort providing access service user must made regardless physical location secure must require authentication authorization access non safe request must come sufficient confirmation initiated user intent access control resource set resource must authorization permission admin power read write authorization individual resource set resource must seperate unbreakable system must able put broken state user clobber user allowed overwrite another user change unknowingly user scheduled event current day must readable rapid bootstrap new staff must able get speed internal side system quickly owner agnostic nothing specific one owner present new clean deployment another owner owner must able configure system exhibit branding corporate specific safe frequent reliable back must easily scheduled quality feature would like end product exhibit fast developer turn around bug fix fast prototyping new feature free implementation new feature regression free change attractive client ui efficient staff ui widest device o support reasonably achievable accountability blame editable user sufficient authorization without needing developer back ups creatable demand sufficiently authorized user back ups demand sufficiently authorized user non quality feature important allow flexibility design programming language choice ui need generic resource import export system list incomplete