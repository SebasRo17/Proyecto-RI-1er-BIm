ran across scoping puzzle experimenting scheduledtasks grateful explanation sage found workaround intuitive horse sense unable explain adequately wrong original attempt first straightforward tail recursive synchronous module module state donextiteration donextiteration function state state state print state donextiteration donextiteration next first attempt asynchronous task need tail chain one shot scheduledtasks createscheduledtask second list argument creates one shot task delayed time second list need bigger application simplified sample scheduledtask tail chain new one shot scheduledtask tail recursive call like successful synchronous code every tenth second condition state produce false ignore cleanup task object simplicity module state runnexttask runnexttask function startscheduledtask createscheduledtask state state state print state runnexttask runnexttask ok problem print desired three time sickening hunch problem something runnexttask local module somehow able refer recursively even though one module bizzaro land asynchrony fixed code follows module state runnexttask unique runnexttask state startscheduledtask createscheduledtask module state state print state runnexttask runnexttask made runnexttask refer unique global symbol made function rewrite rule attached runnexttask work great understand well hate dumb horse even jump fence clue advice explanation appreciated