reading clean various online article solid lately read feel like know anything let say building web application using asp net mvc num let say userscontroller create action like public userscontroller controller public actionresult create viewmodel action want save user database entered valid according single responsibility principle single responsibility responsibility entirely encapsulated service narrowly aligned responsibility since validation saving database two separate responsibility guess create separate handle like public userscontroller controller private validator private iuserservice service public userscontroller validator iuserservice service validator validator service service public actionresult create viewmodel validationresult result validator isvalid viewmodel result isvalid service createuser viewmodel redirecttoaction index else foreach var errormessage result errormessages modelstate addmodelerror empty errormessage view viewmodel make sense sure right way handle thing like example entirely possible pas invalid instance iuserservice know could use built dataannotations enough image check database see already another user another option let iuserservice take care validation like public userservice iuserservice private validator public userservice validator validator validator public validationresult createuser viewmodel var result validator isvalid viewmodel result isvalid save user result feel violating single responsibility principle deal something like