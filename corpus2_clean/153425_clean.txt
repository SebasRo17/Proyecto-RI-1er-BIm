looking guidance architect app regard modularity separation concern usability working application asp net c distinctly generic chunk functionality love able lift layer usable component mean module handle database schema access api everything next time want use register module hook developing module usable functionality brainer really confusing come handling core usable database schema serf module functionality ideal world would register module would ensure associated database schema exists db creating schema already would dependent functionality assumption table exist calling module functionality dll agnostic database layer kind like enterprise library caching logging application block create db schema target db use store question think best way achieve firstly term design architecture secondly solution structure pattern framework know exist support kind thing thought far mostly use entity framework sql server db project thought black box approach module functionality could use use first approach ef4 use objectcontext create database module initialized however mean entity module encapsulates would disconnected rest application belonged abstracted objectcontext creating appropriate index reference domain entity module entity would impossible practically thought adopting enterprise library creating application block sure would play nice entity framework though like idea building proven pattern practice encapsulate established reusable functionality thought abandoning entity framework module creating separate db schema module set stored procedure ado net deploying script time show exist developing functionality outside module would want use entity framework would use module separately disconnected domain objectcontext anyone experience developing sort full stack module advice offer biting chew