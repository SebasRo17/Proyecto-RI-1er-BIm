discussion co worker yesterday design philosophy coder experienced fully admit likely much better properly automating testing trying break sloppy habit however seems dispute philosophical issue unwilling simply yield greater experience generally directing programmer follows formal approach interface nearly every automated test everything getter setter basic pojo object see refactoring dirty word sign thing written designed properly start inevitable done necessary everything done avoid feel bad feel flexible enabling programmer feel interface used necessary thrown needed kiss easy enough pull interface existing refactoring decide interface polymorphism make sense later also felt admit need better testing currently level automated test suggested seemed since would take long implement importantly make refactoring nightmare since free modify behavior non private requirement grow change find refactoring heavily level testing feel like would kill flexibility view refactoring matter test make harder ultimately philosophical discussion seemed boil word refactor love refactoring feel used liberally time feel something quite clean beautiful natural course growing program adding new requirement necessitate refactoring better enable reuse moving logic new class package grows complex yes fixing inevitable design mistake happen flexible agile development approach always bad written allow modification disagrees wondering thought refactoring common writing philosophy simple refactor later complicated logic prof necessary inherently flawed dangerous refactoring depend program approach style generally rapid prototyping clean ugly working prototype non engineer wrote sound like actually get formal programming official requirement change never job like