suppose writing c visualize foo object two way getting foo computing taking piece precomputed foo building new foo foo computed guaranteed good visualization changing may break assumption therefore decided represent foos foo mutating method constructed initialized change second way make foo build precomputed foo component come several method building foo precomputed num constructor static method perhaps obvious would add new constructor static foo call would read component precomputed foo make new foo checking valid explain like shy away complicate example let say one component foo collection bar term implementation sometimes bar represented std vector std vector bar sometimes bar num sometimes std vector std pair bar bar could user reorganize standardized form single constructor standard might require user perform extra copy want provide static format clutter api num make foo mutable exposed addbar bar foo could allow user iterate collection bar way however make foo mutable could compute foo make sense visualization use addbar add bar make foo longer foo good num make friend builder make called addbar bar exposed make friend foo add constructor foo take calling constructor check make sure contains valid foo swap empty representation foo inside everybody happy messiness num requires friendship worth maintain encapsulation think got thinking established pattern another better way know