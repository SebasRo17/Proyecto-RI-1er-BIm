bit design dilemma writing library consists bunch template class designed used base creating content example public template public get set public description get set public attribute1 get set public attribute2 get set public template constructor public dosomething something problem library providing template also supply quite predefined template instance template class question put instance template three solution come far num provide serialized instance template file one hand solution would keep instance separated library nice would also potentially add complexity user even provided method loading deserializing file still deal bunch file kind config file app know look file plus creating template file would probably require separate app user wanted stick file storing template provide kind app creating template file also requires external dependency testing template user num add readonly instance template example public template public get set public description get set public attribute1 get set public attribute2 get set public template get template new template description description public template constructor public dosomething something would convenient user would able access predefined template directly would able unit test used drawback predefined template pollute template namespace bunch extra stuff suppose could put predefined template different namespace get around drawback problem approach basically duplicate namespaces library predefined namespace e g template subtemplates predefined template subtemplates would pain would also make refactoring difficult num make template abstract class make predefined template inherit class example public abstract template public get set public description get set public attribute1 get set public attribute2 get set public template constructor public dosomething something public template public description description attribute1 solution pretty similar num end creating lot class really anything none predefined template currently overriding behavior method sure good practice anyone else experience something like best practice kind different better approach thought kind banging head wall trying figure best way go thanks