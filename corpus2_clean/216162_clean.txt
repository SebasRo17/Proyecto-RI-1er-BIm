hardware communicate via tcp hardware accepts num different command request num different response created tcpclient send receive like idea num different method send command request started path single sendcommand take icommand return result num different class problem requires semantic coupling e invokes sendcommand receives downcast use future map believe ensures appropriate get impression smell besides semantic coupling icommand essentially empty abstract class marker interface seems suspicious go num method think broken single principle responsibility act hardware command route ugly plus like asynchronous version num method better bite bullet large accept coupling smaller missing better way thanks possible solution based dxm response came struct proxy template c r icommand c r createcommand new c send std tcp send command cout endl template derived struct struct std getvalue template derived response struct icommand protected proxy public response send std msg sent static cast derived getname send msg wait future response new response replace future struct public icommand proxy std getname proxy proxy icommand proxy createcommand send cout received getvalue endl num look seems like may even need interface see implment realize lot important stuff missing like future wanted get template stuff first think passing proxy command also send icommand opposed writting every command violating oo principle thanks