going back forth handle best problem c project consisting wcf service used flex application customer may request functionality change requires alter work could single maybe act totally different way customer x idea num use branch customer customization release ready merge customer branch try break forget customization use svn huge fan base large num use inversion control dependency injection mef create interface need modified create new library project add new implement created override needed customer change add mef export place customization folder point mef find dll file folder us instead export executing assembly like option num pro num easy normal deployment install drop dll file num obvious might overly clear wether customer running branch option could look customization folder num clean file need customized exist need full copy trunk promotes better solid future development refactoring project little oop con num harder manage change trunk customer project num necessarily solve problem database change change flex side num change single num see option override copy paste customer override make one change good use dry good way around num ok better use oop solid principle could mitigate also mean implement simple customer request major refactoring whole potentially many class