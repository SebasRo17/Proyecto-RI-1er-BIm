application written entirely django consist three separate component admin service generating invoice api ui user problem tightly coupled even kind split component setting standalone well often really since share model functionality view ie ui mean time invoice generating service also problem generating invoice crucial part business also push client use amqp websockets tornado celery looked erlang found exactly perfect fit invoice generating service could exchange celery tornado amqp written erlang anyhow far know erlang early stage one invoice created every hour big deal imagine big problem might cause future question whether good decoupling problem really exist focus adding new feature product start solve start issue part problem quite big part application logic django model use quite lot signal pre post save hook etc would lost functionality instance writing database directly erlang feel might save u lot pain future