first would like make clear language x versus language question determine better using long time intend keep using parallel currently learning scala great interest apart minor thing take getting used impression really work well language question software written scala compare software written term execution speed memory consumption course difficult question answer general would expect higher level construct pattern matching higher order function etc introduce overhead however current experience scala limited small example num line benchmark real turned scala overhead wrt make sense mixed scala project one code complex part scala performance critical part common practice edit num small benchmark build list integer multiply integer two put new list resulting list wrote implementation num scala implementation scala num eclipse indigo ubuntu num result comparable num m num m scala averaged num iteration snippet used public static long total num final maxcount num count num count maxcount count final long t1 system currenttimemillis final max num final list integer list new arraylist integer index num index max index list add index final list integer new arraylist integer integer list add num integer system println final long t2 system currenttimemillis system println elapsed millisecond t2 t1 total t2 t1 system println average millisecond total maxcount scala def var total long num val maxcount num num maxcount val t1 system currenttimemillis val list num num tolist val list map n num n foreach println val t2 system currenttimemillis println elapsed millisecond t2 t1 total total t2 t1 println average millisecond total maxcount case seems scala overhead using range map lambda really minimal far information provided world engineer maybe scala construct used care particularly heavy execute edit num pointed println inner loop take execution time removed set size list num instead num resulting average num m num m scala