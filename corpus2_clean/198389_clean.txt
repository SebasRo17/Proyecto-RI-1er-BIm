edit clearly explain well let try example pipe given size signal routed given offset pipe get fragmented signal different offset making impossible fit new signal want algorithm tell arrange signal defragment pipe minimal number signal actually moved example say pipe size num following signal size offset described offset num size num fill slot num num offset num c size num fill slot num num offset num b size num fill num num offset num size num fill num num pipe aaaa cc bbbb dd case num slot open offset num num two offset num num let say want add size num signal pipe continuous space know enough space defragment obvious solution group signal together top like offset num size num fill num num offset num b size num fill num num offset num c size num fill num num offset num size num fill num num pipe leaf slot num num free new signal however num signal b signal moved send command hardware wait non trivial amount time smarter could realize another approch could reposition like offset num size num fill num num offset num b size num fill num num offset num c size num fill num num offset num size num fill num num pipe aaaa fit new signal offset num num reposition one signal b thus saving hardware call wondering good algorithm detect like fit signal onto pipe minimum number signal moved come mind n algorithm basically generate every possible distribution calculate many move resulted faster approch approch num perfect looking primarily minimize average case long worst case made horrendous know never num signal given pipe may able get away n bad sound also know signal size power num pipe size also algorithm placing signal minimize fragmentation question answered see wanted answer slightly better explain defragmentation would occure anyone reading buddy wanted point simpler approch conceptualize explain part detail since original question explaining approch slightly different simpler approch effectively keep buddy concept precomputing block labeling much effort implement maintain cpu cost calculating signal go pretty trivial compared actual placing deletion signal afford lose tiny linear amount cpu pre computing logic process insertion signal kept signal boundary equal signal size signal start offset num actuall offset walk figure interval keep boundry signal size num num size pipe look interval num num num num num num num num interval check space interval free simple case interval signal put signal interval important look interval order place signal first free interval ensure break smallest possible block using buddy term add signal buddy approch described except without block interval completely free find signal unused slot multuple interval number slot unused select first interval find largest signal interval recursively call insert algorithm smaller signal except mark interval insert first signal unavailable somehow move signal somewhere else fit find next smallest signal selected interval moved signal worst case num n num signal moved n number potential signal size signal assuming signal multuple num n log2 example stand slot marked unavailable recursively call ie interval calling wanted place signal thus want recursive call try place signal exaple simplest case could come still demonstrates full complexity note following structure would hard create could result buddy approch someone tried hard aa b j someone pass signal z size num select offset num z size num effective structure aa b j placing signal interval aa b size num effective structure j place signal interval offset num h h size1 effective structure j place signal c h size1 effective structure j place h offset num open size num effective structure b j move b b size1 effective structure j place b j b size1 effective structure add b z size num structure