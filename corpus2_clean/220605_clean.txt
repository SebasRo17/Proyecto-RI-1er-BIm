started working new project lately related big internship manager recommended start learning functional programming highly recommended scala humbled experience using f see important using paradigm programming expensive case dean gave interesting talk topic shared thought big convenient big mean hadoop bigdata vague concept forget tried come one simple example compare different aspect deal see functional way expensive functional programming expensive memory consuming small need big far fancy tool tried build solution one specific popular problem using three approach imperative way functional way recursion using collection compared time complexity compare three approach used scala write function best tool write algorithm using three paradigm def val start system currenttimemillis fibonacci p val fibonacci p num val end system currenttimemillis println functional way n fibonacci sequence whose value exceed four million n time format end start val system currenttimemillis fibonacci val s2 fibonacci num num val system currenttimemillis println imperative way n fibonacci sequence whose value exceed four million n time format s2 functional way def fibonacci p max bigint bigint lazy val stream long num num zip tail map case b b lazy val fib stream bigint bigint num bigint num fib zip fib tail map n n 1 n 2 println fib takewhile p p max tolist fib takewhile p p max bigint num recursive way def fibonacci r n bigint n match case num num num case fibonacci r n num fibonacci r n num imperative way def fibonacci max bigint bigint var first element bigint num var second element bigint num var sum bigint num second element max sum second element second element first element second element first element second element first element sum noticed functional programming heavy take longer time consume space memory confused whenever read article watch talk say use functional programming science easier productive specially world take time memory space need use functional programming big best practice use functional programming scala big