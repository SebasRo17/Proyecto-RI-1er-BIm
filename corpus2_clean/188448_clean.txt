background one functionality product currently working process set compressed file containing xml file made available fixed location periodically local remote location really matter dump content xml file database taken care design generic parsing module able accommodate parsing file explained question linked need take look following link answer question would definitely provide better context problem generic file parser design using strategy pattern goal want able keep track status xml file status compressed file containing xml file probably different status defined xml file new processing loading complete failed derive status compressed file based status xml file within compressed file e g status compressed file complete xml file inside compressed file failed state status compressed file failed status least one xml file inside compressed file failed possible solution model need maintain status xml file compressed file define pojos holding information xml file shown note need store status compressed file status compressed file derived status xml file public private compressedfilename private private long private status public final compressedfilename final final long lastmodified final status compressedfilename compressedfilename lastmodified status status called aggregate map instance provides status given file given time lifetime shown public private map new hashmap public add setstatus num num indicates file new state num indicate file process put public update filename status get filename setstatus status take care model sake explanation whats question edited comment answer eric would like know existing design pattern refer coming design would also like know go designing status management class interested understanding model status management class interested component going updated change status moment suggested eric