ok need create bunch utility class normally would use simple module need able inherit order share common common need reference state module using simple import work well like singleton class use classmethod decorator proper support property one pattern see used lot creating internal prefixed underscore creating single instance explicitly imported set module also used fabric create common environment fabric api env realized another way accomplish would example util py property def file path cl raise notimplementederror def inherited cl cl file path foo py util import import env property def file path cl env base path relative path def another cl pas foo metaclass client py foo import foo file path foo file path like approach better first pattern reason first instantiating foo would meaningless attribute method act like single interface utility unlike first pattern relies underscore convention dissuade client creating instance internal second sub classing different module awkward importing underscore inherently going private naming convention third seems closest approximation static exists meta applies instance shown common convention using cl instead self method well base inherits instead would prevent user trying use base non static class implementation static also apparent using naming convention foo opposed foo denotes static used much think good fit feel others might feel pythonic sanctioned use avoided 99 time also find devs tend shy away might affect reuse maintainability considered smell community ask creating pypi package would like everything increase adoption