let consider following example entity using entity framework property decimal property decimal balance property decimal trying find best approach keep balance updated based value two property torn two practice num updating balance amount every time updated setter num caller would appropriate aware calculate balance getter however really possible entity field need saved back database actual column calculated amount persisted worry automatically updating approach calculated value might little bit different originally saved database due rounding value older version software using float decimal loading let say num entity database could change status make orm believe changed persisted back database next time savechanges called context would trigger mass update really interested could cause problem calculation method changed entity fetched would lose old value replaced freshly recalculated one simply loaded let take example even invoice related invoice detail also balance simplifying actual business case sake example let assume customer pay item invoice separately rather whole consider entity take care change child detail cause invoice total change well fully automated approach simple implementation would looping detail invoice recalculate header total every time one property change probably would fine record lot entity fetched could create significant overhead would perform process every time new invoice detail record fetched possibly worse detail already loaded could cause orm lazy load recalculate balance far went update way mainly reason explained wonder right noticing keep calling method quite often different place potential source bug also detrimental effect binding property detail header change property left date way called recommended approach case