abstract syntax tree want compile different representation struggling arrange class way new representation added easily easiest way achieve add representation e g compile foo compile bar additional representation added monkey patching problem compilation implementation spread place violates single responsibility principle advantage compilation inherited could also define compilation containing giant switch dispatch argument loos advantage polymorphism make inheriting behavior compilation difficult viable option interesting solution would use abstract factory abstract factory design look fairly promising disadvantage ast node hierarchy cannot extended without also extending turn concrete compiler parallel hierarchy concrete node subtyping information ast node across whole system specified order share behaviour using role order share compile implementation least provide default implementation e g nodea node could partially solved via metaprogramming ast built compile one representation want multiple output need rebuild ast different ideally would pas concrete instance parameter compile ideal diagram idea compile could obtain actual implementation parallel hierarchy without using giant switch node also investigated bridge pattern solution seem applicable problem without creating thousand little bridge carefully read previous question designing robust architecture multiple export type key difference equivalent standalone hierarchical ast node inheritance compilation implementation crucial system implemented perl restricted classic oop also use metaprogramming role aka trait functional programming missing architecture could use elegantly structure system make corresponding parallel hierarchy discoverable node class without sacrificing polymorphism