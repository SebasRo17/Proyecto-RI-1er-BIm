question moved stackoverflow num set mvp winforms solution used mvp mvc past prefer mvp control flow execution much better opinion created infrastructure datastore repository class use without issue hard coding sample moving onto gui preparing mvp section num seen mvp using view entry point view constructor creates presenter turn creates model wiring event needed num also seen presenter entry point view model presenter created presenter given view model constructor wire event num num model passed presenter instead model static method called response returned directly section b term keeping view model sync seen num whenever view changed e textchanged event net c fire passed model keep sync time model change e background event listens view updated via idea raising user want commit change fire passing model make save case model mimic view process action num similar b1 however view sync model time instead user want commit change fired presenter grab latest detail pass model case model know view required act upon case passed needed detail section c displaying business object view e myclass primitive double num view property field display domain business object view animal expose ienumerable ianimal property even though view process node treeview selected animal would expose ianimal property num view knowledge domain object expose property primitive framework net included object type instance presenter pas adapter domain adapter translate given business control visible view instance adapter must access actual control view view becomes tightly coupled section multiple view used create single control e complex view simple model like saving object different type could menu system side click item appropriate control shown num create one huge view contains individual control exposed via view interface num several view one view menu blank panel view creates view required display visible view also implement interface view contains e child view expose one presenter blank panel filled view control add myview myview visible event raised child view handled parent view turn pas event presenter visa versa supplying event back child element num view parent smaller child view wired presenter model drop view control existing form functionality ready need wiring presenter behind scene section e everything interface based mvp done example affect answer might cross compatible num everything interface view presenter model obviously concrete implementation even one concrete view model presenter num view model interface allows view model differ presenter creates given view model object serf pas message num view interface model static method created thus need interface want different model presenter call different set static method static model link presenter personal thought different variation presented probably used form sure prefer a3 keeping business logic reusable outside mvp b2 less duplication less event fired c1 adding another sure put small amount non unit testable logic view domain could reviewed simply viewed application logic complex would agree adapter case section feel d1 creates view big atleast menu example used d2 d3 problem d2 end write lot route event presenter correct child view drag drop compatible new control need wiring support single presenter d3 prefered choice add yet class presenter model deal view even view happens simple need reused think mixture d2 d3 best based circumstance section e think everything interface could overkill already domain business object often see advantage design help mocking object test personally would see e2 classic solution although seen used num project worked previously question implementing mvp correctly right way going read martin fowler work variation remember first started mvc understood concept could originally work entry point everything control creates original set mvc object