thinking c property work could work know purpose c property originally designed certainly useful however instead question comparing abstractly function element firstly wondered possible like c property example byte n num byte test property get n set n func n use follows n num byte n2 test get test num set n num test n num n example used simple demonstration also noticed room polymorphism parameter type example overload resolution get set private public well public test get get byte private get byte get bool get mytype set byte set mytype func func bool func byte mytype etc example defines test along reasonably fine detail involving different implementation using test various different way example read byte test get like test func like parameter polymorphism return byte byte test func bool func mytype int16 behaves depending assigned test set bool set mytype like could depending context used test byte get func bool func byte byte mytype additional possibility expression tidiness apparent however challenged find specific us one example could used equality bool expected example statement behaviour could defined however either nothing bool behaviour would instead n equal num n num n equal num n num another example follows list list store public count get unless otherwise apparent use int32 version int32 count get byte byte n num foreach var e store n n get int32 int32 n num foreach var e store n n private get count get occurs count used inside list func store count set num list clear