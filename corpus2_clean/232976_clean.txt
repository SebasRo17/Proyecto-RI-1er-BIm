currently learning design pattern learned factory pattern pattern mean order implement factory create object one subclass need object subclass create way superclass work abstract reference instead concrete implementation subclass generates creates loosely coupled design usually mean superclass becomes abstract since createobject must abstract subclass containing factory implement like factory pattern pattern encapsulates creation concrete allows client work higher level abstraction specific pattern built inheritance understand would anybody go trouble subclassing need factory making abstract composition much better purpose way make much sense create abstract interface called factory would declare one createobject create concrete implementation different purpose give client factory member instance factory reference set whatever concrete factory needed runtime client simply use factory createobject needed without know concrete implementation factory holding understand one would go trouble subclassing making abstract benefit allowing use factory loosely coupled manner simple composition based design described better way think agree could explain anybody would use factory pattern described