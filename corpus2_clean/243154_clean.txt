trying think way declaring strongly typed typedefs catch certain bug compilation stage often case typedef several type id vector position velocity typedef entityid typedef typedef vector3 position typedef vector3 velocity make intent clear long night coding one might make silly mistake like comparing different kind id adding position velocity perhaps entityid mid mid see nothing wrong bug position p velocity v position p v bug meant p v see nothing wrong unfortunately suggestion found strongly typed typedefs include using boost least possibility c num least bit thinking came upon idea wanted someone first declare base template template parameter used anything definition however template typename unsigned id public unsigned const id id id friend bool operator const lh const rh friend function actually need forward declared definition requires forward declaration template define member base remembering template finally want use typedef typedef entityid typedef type entirely separate function take entityid throw try feed instead example aside declare base type template issue entail also fairly compact hoping anyone comment critique idea one issue came mind writing case position velocity example would convert type freely multiplying vector scalar would give another vector could typedef float time typedef vector3 position typedef vector3 velocity time num 0f position p num 0f velocity v num 0f num 0f num 0f position p v strongly typed typedef tell velocity time result position typedef float time typedef vector3 position typedef vector3 velocity time num 0f position p num 0f velocity v num 0f num 0f num 0f position p v solve think specialize every conversion explicitly kind bother hand limitation help prevent kind error say multiplying velocity distance perhaps make sense domain torn wondering people opinion original issue approach solving