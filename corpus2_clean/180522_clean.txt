design question recently fp c mostly form template lambda heavy overloading single really like fp well defined operation also noticed oop one could easily fall anti pattern spaghetti one careful eg circular dependency bigger issue state based question thinking adding new functionality decide using fp paradigm oop paradigm may identifying invariant problem design sure example without oop model simplification real world may immediately obvious dog cat state method otoh fp pov eat simply allows animal turn food poop energy harder imagine eat anything else least looking c answer question could apply sub module language handle multiple paradigm