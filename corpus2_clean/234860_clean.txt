recently discussion friend mine oop video game development explaining architecture one game friend surprise contained many small class several abstraction layer argued result focusing giving everything single responsibility also loosen coupling component concern large number class would translate maintenance nightmare view would exact opposite effect proceeded discus seemed like eventually agreeing disagree saying perhaps case solid principle proper oop actually mix well even wikipedia entry solid principle state guideline help writing maintainable part overall strategy agile adaptive programming question case oop solid principle lend clean imagine right away liskov substitution principle could possibly conflict another flavour safe inheritance say someone devised another useful pattern implemented inheritance quite possible lsp might direct conflict others perhaps certain type project certain target platform work better less solid approach edit like specify asking improve reason mentioned project question give little context question oop design principle general curious project edit num imagined question would answered one num way num yes exist oop design principle partially conflict solid num yes exist oop design principle completely conflict solid num solid bee knee oop forever better everything panacea drink responsibly option num num would likely generated long interesting answer option num hand would short uninteresting overall reassuring answer seem converging onto option num