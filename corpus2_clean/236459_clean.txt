finding lot blog post claiming j encryption unsafe couple detailed one num num num final post javascript crypto question browser truly inherently unsafe extension entering pci related info browser unsafe regardless j encryption http security measure would imply malicious party taking major advantage fact right could someone provide specific example browser vulnerability leveraged steal massive amount pci info massive mean comparable amount could obtained hacking hosting server db also despite post describing security flaw proliferation payment service j crypto library indicate company community num unaware browser vulnerability num simply disregarding underlying issue jumping bandwagon make num weighted possibly low likelihood someone going trouble exploiting browser decided still worth capture payment browser edit using ssl tl address issue definitely notable issue fall outside area ssl tl solve quoted directly blog post prevalence content controlled mean page built multiple request conveying javascript directly influencing javascript using dom tag attribute onmouseover javascript runtime reliable way piece javascript verify execution environment javascript crypto ask really dealing random number generator one provided attacker certainly assert nobody allowed anything crypto secret except way author approve two property often provided environment use crypto impossible javascript else javascript runtime lacking crypto implementors two big one secure erase javascript usually garbage collected secret lurking memory potentially long needed function known timing characteristic real crypto library carefully studied vetted eliminate dependant path ensuring one similarly sized bucket bit take long process without vetting attacker extract crypto key timing point technically credit card number important piece info entered text field page chance compromised compromised easily entered native application