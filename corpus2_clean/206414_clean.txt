writing library sparse linear algebra computation backend thesis work come bit crossroad using modern fortran groan inheritance polymorphism jazz num year software design standpoint issue making iterative solver able use sparse matrix without knowing storage format functionality iterative solver know multiply matrix vector abstract sparse matrix virtual matrix vector multiplication several child class representing storage format override parent implementation believe called template pattern yes considering refactoring use composition inheritance end sparse matrix consists underlying graph extra sometimes real complex number sometimes dense matrix etc multiple different sparse matrix format use underlying graph storage scheme every sparse matrix graph attribute collection pointer change use graph different way effectively redefine graph storage scheme sparse matrix format used advantage discern num fewer class make easier hook c c num easy choose different parallel implementation algorithm write every implementation redirect pointer runtime use big conditional block num think design easier underlying graph better thought hyper graph matrix heterogeneous composition several matrix possibly different format happens pde application anyone think good reason stick old inheritance based design new approach sensible advice beyond said gof would appreciated