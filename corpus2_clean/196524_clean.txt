preamble aim create reusable multiple project also publish github manage subscription know stripe recurring billing provider module aiming wrapper helper calculating account balance easy notification renew subscription handle price calculation country use recurring billing provider payment possibility poor support expensive people want use recurring billing pay bill manually invoice end year please suggest paypal recurring billing similar service situation let say model subscribe subscription plan e g user model field store identifier subscription plan currently subscribed every plan change change recorded model e g following field recording mentioned change subscriber relating subscribing model user case plan defining plan identifier model change plan defining plan identifier model selected created date time field storing change valid store date actual subscription valid paid also date time field defines subscription paid course layout question account balance user change subscription plan need compare plan field get calculate deduction new plan based current plan valid price say subscribed year plan num month upgrade plan b get deduction half paid price num month plan wondering user e g switch free plan credit deducted user want switch would cache additional field calculate record related user every time would add change something table layout question easy comprehensibility end subscription period arrives user get notified possiblity renew subscription paying easiest way would update paid valid new subscription option however sure store every someone might need like payment subscription history another option would create additional record plan plan identifier thus symbolizing change calculating account balance way someone could point right direction logic handling subscription appreciate much update thanks help think question vague try precisely using less abstraction unfortunately could solve problem yet case user select subscription plan currently store keep track e g num month user upgrade subscription subscription plan b pay price new subscription price plan unused num month case b num month user roll back subscription plan pay receives balance end subscription get balance deducted new subscription case c user select subscription plan sub service independent subscription plan case case b apply sub service subscription case user cancel one subscription result top balance question currently least mainly depends store properly reproduce history subscription business analysis calculate balance get outstanding payment based subscription etc also sure balance stored e g user model stored calculated time based stored history thing note although think introduce problem user could anything subscriber polymorphic plan necessarily plan could e g magazine like mentioned described case c case