reading domain driven design almost two year cautiously introducing concept daily work least making plan thing regularly could done within domain driven design one conclusion beginning come especially response reading event sourcing command query responsibility segregation cqrs perhaps domain object intended used write purpose clear seems people subtly suggesting much documentation read domain object responsible domain centric operation calculation validation mainly provide road persistence infrastructure provided within repository implementation although like fact may simplifies domain model greatly cut responsibility exposing state indeed correct domain object mainly used write object raise question hoping somebody could answer num one perform unit test setter method modify state provide outwardly public interface read state property getters c okay expose state solely purpose making testable num one show user result calculation operation done domain without persist pull result persist store outside context domain okay expose state solely purpose showing result rule thumb property getters get accessors one also writable domain said differently readonly property thing avoid since read purpose thus play necessary role actual domain model related material num tdd ddd encapsulation