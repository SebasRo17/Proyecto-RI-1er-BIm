working application creates music seeking feedback oo design far question focus one part program application produce tune object final musical product tune abstract abstract play two subclass owns melody progression chord sequence play implementation play two object simultaneously owns two tune instance play play two tune one according pattern currently melody abstract abstract play two subclass composed note invoking play play note one composed melody object invoking play play melody y one think starting see pattern progression also abstract play two subclass composed differently played differently owns chord play sequentially owns progression play implementation play sequentially enter image description every corresponding generator tune melody progression matched corresponding abstract melodygenerator progressiongenerator class abstract generate example melodygenerator defines abstract melody generate generator two subclass simple structured example melodygenerator subclass implementation generate return important note generate method encapsulate complex algorithm mere factory example generate implement algorithm compose series chord object used instantiate returned every structured generator us another generator internally simple generator default special case may structured generator enter image description part design meant allow end user gui choose kind music created example user choose simple tune full tune part system subject direct user control question regarding design rather specific look design look like design equivalent duplication duplication design duplication clearly see referring look diagram question split two num intuition correct duplication pattern design bad thing num design differently efficiently