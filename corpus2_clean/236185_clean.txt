consider implement idisposable member way never become eligible garbage collection disposed garbage collected chance use destructor cleaning result disposed e g unreliable user programming error resource leaked general approach designed deal situation avoid example using system program static new cyclical gc collect gc readkey cyclical public cyclical timer new system threading timer callback num num system threading timer timer callback state write something useful cyclical writeline destructor omitted idisposable keep example short us timer something useful certain interval need reference timer avoid garbage collected let assume user dispose result timer somewhere worker thread reference cyclical instance via callback result cyclical instance never become eligible garbage collection destructor never resource leak example possible fix workaround could use helper receives callback timer reference weakreference cyclical instance call using weakreference however general design rule class like need disposed avoid leaking resource sake completeness example including idispose including workaround solution hopefully less distracting idisposable public timer new system threading timer new weakreference num num system threading timer timer static state weakreference weakreference state instance instance instance callback callback state write something useful public dispose dispose gc suppressfinalize protected virtual dispose bool disposing disposing writeline dispose timer dispose writeline destructor dispose disposed timer disposed disposed become eligible garbage collection