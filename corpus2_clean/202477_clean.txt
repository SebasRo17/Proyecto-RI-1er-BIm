programmer feel goal provide good abstraction given domain model business logic abstraction stop make trade abstraction benefit flexibility ease changing etc ease understanding benefit believe tend write overly abstracted know good often tend write like kind micro framework consists two part num micro module hooked micro framework module easy understood developed maintained single unit basically represents actually functional stuff described requirement num connecting believe stand problem tends complicated sometimes abstracted hard understood beginning arises due fact pure abstraction base reality business logic performed presented num reason expected changed tested good approach programming changing fragmented many module easy understood non changing complex abstraction pov uniformly complex num complex interlinked num simple anybody looking understand reasonable amount time change expensive solution presented good changing easy understood debugged changed linking kind difficult note readability num num readable num come complex abstraction num come simple abstraction