physical problem would like simulate consider following variation random walk allow certain random site excluded probability allow walker able hop either unit left right whether hopping unit weighted hopping rate time hop taken exponential distribution width total hopping rate possible site end would like find much slower walker take reach say x exclusion present following attempt problem think basic hoping area decrease computation time problem alluded earlier question answer random walk variant first different hop rate defined kback k k exp kfor k k exp kback k k exp kfor k k exp know redundant since actually two unique rate however would like eventually add bias random walk make rate different need choose site walker hop long take make hop excluded site accounted statement excluded site nearby probability site unreachable new site newcoords chosen weighting different hopping rate time step sampled exponential distribution simulation time updated findrate k module kb xi intersection blockedsites randomchoice kback k kback k kb xi intersection blockedsites randomchoice kback k kback k kf xi intersection blockedsites randomchoice kfor k kfor k kf xi intersection blockedsites randomchoice kfor k kfor k newcoords randomchoice kb kb kf kf xi xi xi xi dt randomreal exponentialdistribution kb kb kf kf simt xi simt newcoords dt edit explanation hop chosen consider walker point next hop chosen following way walker space away excluded point let say point excluded rate kf point point hopped respective rate kb kb kf one hop well compare different rate example kb kb kf kf rate chosen decided randomchoice choice weighted rate end edit time string hop together hopmod k xf module xi simt blockedsites randominteger xf keep exclusion away endpoint nestwhilelist findrate k xi xf define random set excluding site would prefer adjacent next adjacent point exclusion separated least normal site way force randominteger sample consecutive integer calculate time reach specified endpoint xf average n configuration k xf n n run average print absolutetiming table p hopmod k xf n itable flatten table p j p j j n took second time highly varying time increase dramatically xf increase reason used paralleltable got identical result every time calculated another itable must something seed going wrong get convergence n need increased sped different scheme hopmod module discussed random walk variant however sure generalized approach situation also need keep track simulation time