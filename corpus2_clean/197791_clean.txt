good example wikipedia regarding violation solid principle isp first used formulated robert c martin consulting xerox xerox created new printer system could perform variety task like set printed paper software system created ground performed task successfully software grew making modification became difficult even smallest change would take redeployment cycle hour making near impossible continue development design problem one job used almost task anytime job job done call made job resulted huge fat multitude method specific variety different client design staple job would know method job even though use solution suggested martin called interface segregation principle today applied xerox software layer interface job client added using dependency inversion principle instead one large job staple job interface job interface created would used staple class respectively calling method job therefore one interface created job implemented job tried find good php solution got far job implement protected public construct staple protected public construct understand interface limit knowledge actually change big job remove srp violation clarify solution actually solves problem design problem one job used almost task