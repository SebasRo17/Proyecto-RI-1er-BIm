although gamedev project question general oop practice believe go problem note call equivalent real world physical object entity e g rock game entity specific character public private inventory public private characterstats stats public private equipment inventory functionality self contained go stats aim make character game self manageable entity mean put plainly want design base character end get reacts entirety even smallest change occurs component make thing clearer example item change strength character get equipped component character get updated time character call stats change strength attribute thought using event character subscribes equipment event handler tell stats component job believe elegant enough solution issue however lie somewhere else got two way update character inventory first making inventory component private providing public inside character work calling appropriate update inventory like character new character 2nd way making component public accessing like character new character inventory additem way seem roughly equivalent term readability 2nd way seems like breaking whole self manageable idea basically invading private space character going 2nd way hook inventory event place break idea even however going 1st way get impression writing duplicated even though think impression given fact character additem share enough naming similarity suggest duplicated sincere go first way even though seems like extra layer make character self manageable extra layer security essential like hear people experienced advantage 2nd way severe disadvantage get impression writing extra unnecessary