update much shorter version given list paired index j need first evaluate rather complicated function test j x computationally costing assign copy function named j memoization specifically need expression elegant possible though timing important effectively following thing f x f x evaluate test x f x f x evaluate test x note example evaluate effect due memoization want done first update thank simonwoods proposing function approach goldberg proposing replacement rule approach however approach quite satisfying way function approach confirmed simplest mwe index f assign x instead test x f x f x f x test x f want create f f idea generalize approach existence extra ruin function definition toexpression f tostring tostring x toexpression f tostring tostring x test x f replacement rule approach address issue shown goldberg answer however said function test also depends specifically one think complicated function either test j x module stuff complicated operation use j return expression x test x module stuff complicated operation return expression x test x module stuff complicated operation return another expression x word would like assign evaluated result test x test x f x test x test x f x forth made point transparent apology replacement rule approach seems fail requirement code toexpression f tostring tostring x toexpression f tostring tostring x expr expr test x give f x toexpression f tostring tostring x test x give expr instead approach still meet need yet goal create bunch function f f fly later calculation function involve pre defined module let call test give rather complicated expression simplicity let u first consider following example toexpression f tostring tostring x toexpression f tostring tostring x x example defines function f x f x x memoization easily seen using downvalues f range downvalues f holdpattern f holdpattern f holdpattern f x toexpression f tostring tostring x x last element downvalues f crucial importance tell u expression f x x let use different approach define function using module test x module x fullsimplify log exp assumption essentially give x upon evaluation follow strategy let u define f f toexpression f tostring tostring x toexpression f tostring tostring x test x look downvalues f f range downvalues f holdpattern f holdpattern f holdpattern f x toexpression f tostring tostring x test x note last element downvalues f involves function test however want reason mentioned calculation test x rather complicated expression depends index simplified within module would like assign simplified expression f f instead computing situ tried toexpression f tostring tostring x toexpression f tostring tostring x evaluate test x downvalues f simply give holdpattern f holdpattern f holdpattern f x toexpression f tostring tostring x evaluate test x useful short would like see manipulation test x give downvalues holdpattern f x toexpression f tostring tostring x x word need test x evaluated first assigned f f memoization site think two best article talking memoization one one think neither solves problem