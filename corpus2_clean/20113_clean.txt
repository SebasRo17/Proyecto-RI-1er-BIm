trying optimize solution given michael e previous problem efficiently determining point within surface composed polygon figured would relatively straight forward compile trouble listing two input compiled function starting michael code data flatten table x z x z randomreal x z plot listcontourplot data contour mesh none polygoncoords case normal plot polygon x x infinity g graphic opacity edgeform opacity polygon vertexcolors table hue randomreal length case normal plot polygon x x infinity lighting neutral imagesize ax true side p q r x det difference x p q r insideq polyhedron point positive side point polyhedron point randomreal insideq polygoncoords point absolutetiming slow sec point million inlined formula det replaced positive min unitstep sidec compile poly real x real block p poly p poly p poly q poly q poly q poly r poly r poly r poly x x x x x x unitstep p q r p q r p q r p q r p q r p q r p q x p q x p r x q r x p r x q r x p q x p q x p r x q r x p r x q r x p q x p q x p r x q r x p r x q r x compilationtarget c runtimeattributes listable parallelization true runtimeoptions speed insideqc polyhedron point min sidec polygoncoords point list polygon let test insideqc polygoncoords point absolutetiming x faster second compiling compiledfunctioncall provides tiny speed improvment think faster list list polygon coordinate point suspect question related threading compiled function multiple argument different length specifically ruebenko last answer work fine mma win x possible work sidec polygoncoords point list input make work tried force inline ing compiled function definition appear supported insideqc compile polyhedron real point real min sidec polyhedron point compilationtarget c runtimeoptions speed compilationoptions inlinecompiledfunctions true inlineexternaldefinitions true runtimeattributes listable parallelization true compile cfinll compiledfunction could inlined use requires threading listable runtime attribute