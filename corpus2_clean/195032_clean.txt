writing private static expression func binding bool criterion switch criterion case inherited var action byte inherit x x action action case var action byte setvalue x x action action default todo localize error throw new invalidoperationexception invalid criterion surprised find compile local named action already defined scope pretty easy issue resolve getting rid second var trick evidently variable declared case block scope parent switch curious given c allow execution fall case requires break throw goto case statement end every case block seems quite odd would allow declaration inside one case used conflict variable case word variable appear fall case statement even though execution cannot c take great pain promote readability prohibiting construct language confusing easily abused seems like bound cause confusion consider following scenario num change case inherited var action byte inherit x x action action case x x action action get use unassigned local action confusing every construct c think var action would initialize simply declares num swap case like case action byte setvalue x x action action case inherited var action byte inherit x x action action get cannot use local action declared order case block appears important way entirely obvious normally could write order wish var must appear first block action used tweak case block accordingly num change case inherited var action byte inherit x x action action case action byte setvalue goto case inherited get sense look like assigned declared although think time actually want even know goto case existed today question designer c give case block local scope historical technical reason