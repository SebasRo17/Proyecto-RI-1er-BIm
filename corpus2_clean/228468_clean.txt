high business daily used customer software written php span approximately 600k line customer long time need want demand new feature functionality time done yesterday write new feature implement new functionality deliver customer yes well problem causing considerable pain current developer existing base ball mud notable problem hairy single feature everything tracing pain adding feature may potentially impact everything else test mix procedural oriented ridden bad programming practice file reaching num line html cs php sql jquery javascript comment complete disregard non existence mvc separation concern pattern intermixed together business logic depends volatile thing relation like database metadata hardcoded value path lack configurability contribute lack security current architecture large repeated block essentially contribute similar feature working slightly differently updating one update slow lack documentation etc etc quite thing done better work good thing work functionality reasonably worked actual business case going forward painful problem easier faster add new feature using existing style mostly using cut n paste n modify approach thus perpetuating rewrite thing using currently existing modern best practice solution talk rewriting whole thing using one currently leading framework e zf2 mean ignoring customer demand taking long time build software essentially creating new software version num num customer new software bug lack mature software feel functionality another thought incremental development e new feature come write using new approach currently failing reason stated problem title yet another idea slow refactoring existing codebase might work cleaning thing like mvc host thing take long time essentially feel like messed tightly wound ball yarn address thing like unit testing dependency injection modern framework principle end new feature coming added existing codebase getting better might suggest case