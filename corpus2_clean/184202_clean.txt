possible duplicate inversion control promote anemic domain model impression project using di framework like spring guice tend lose orientation degenerate purely procedural design num di centralizes question implementation use also manages life cycle object many oo design pattern however rely ability business logic wire object know example implement strategy pattern spring decision concrete strategy use statically determined configuration application instead piece go decorator composite observer num reason lead design functionality separated want let di container decide created split order part managed di container contrary idea oo reside together one unit break encapsulation field bean exposed public getters setter num use polymorphism anymore linked anymore virtual function work lead instanceof cascade know use also lose design rely polymorphism num di container inject managed bean object also managed mix managed bean normal object non managed gap reference chain managed bean started di need put control di container use normal object anymore suppose reason separation done rigorously di project see reason use di really worth giving much people care oo apart article find discussion topic understand properly idea four point tackled appendix num explanation strategy pattern refer example let assume di version implementation strategy context injected decide anymore strategy inject context configuration would already decided implementation inject context yes di heavily applies strategy pattern always statically