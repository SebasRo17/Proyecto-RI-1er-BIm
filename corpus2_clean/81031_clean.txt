reading programming article mentioned decorator pattern programming awhile without kind formal education training trying learn standard pattern looked decorator found wikipedia article understand concept decorator pattern bit confused passage example consider window windowing system allow scrolling window content may wish add horizontal vertical scrollbars appropriate assume window represented instance window assume functionality adding scrollbars could create subclass provides could create add functionality existing window object point either solution would fine let assume also desire ability add border window original window support subclass pose problem effectively created new kind window wish add border support window must create subclass obviously problem get worse every new feature added decorator solution simply create new runtime decorate existing window see fit ok say add border window add functionality original window allow option way see subclassing adding specific functionality overriding needed add functionality existing object modify superclass another article decorator pattern alternative subclassing subclassing add behavior compile time change affect instance original decorating provide new behavior time individual object get say change affect instance original subclassing change parent whole point subclassing going assume article like many wiki written clearly see usefulness decorator last provide new behavior time individual object without read pattern needed change behavior time individual object would probably built method super subclass enable disable said behavior please help really understand usefulness decorator newbie thinking flawed