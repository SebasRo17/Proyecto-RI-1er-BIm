company follow rigid cycle num requirement analysis document use case document num design document first high level low level num coding according document num unit testing num qa team testing abstract started developed component initial lifecycle project component consisted domain layer business layer layer interface etc say around month create new component due given requirement also consisted domain layer business layer layer interface etc common component solution keep common method class entire solution kept developing second component requirement coming providing new feature component result design also started evolving component first component kept untouched old design however class interface mostly similar duplicated violating dry question ok add reference business layer layer relevant component component2 component1 approach adhere architecture software design best practice common class method promoted common component could used component following dry principle first approach seems component solution danger big ball mud second approach seems used one component promoted common component violate high cohesion principle long story short asking expert advice two mentioned approach may another one software professional architect since common problem every software product face tackle