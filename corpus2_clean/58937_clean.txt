trying implement dyson series begin array lcl u x x int x x dy v int x x dy int x dy v v cdots int x x dy int x dy cdots int x n dy nv v cdots v n cdots end array v x large matrix aware solution symmetric function work case probably main bottleneck integration since involves multiple integral see easy way dealing compile seems reach well greatly appreciate kind advice code written far myint exp x rat module mulint len int sum rar x x rat x r r setattributes x nholdfirst prevent switching numerical value mulint n integer n module tab tab table x x n return prepend tab x mulint creates list variable integrated int n integrate dot sequence exp mulint x x n map first element mulint list variable exp creates matrix product exps sum n module set set sum int n len length set return identitymatrix len set dyson series sum rar total ab flatten r rar function convergence check int n r rar print n r r ab r r len break r r n convergence test return simple example rd pauli matrix matrixexp integrate paulimatrix x myint paulimatrix result course matrixexp integrate function x work general case operator work sparse array code take age get result typical value good working example run code type instance myint tomt tomt x module nmax sw ret v ntol mrul ntol nn mn mn ceiling nn mrul n n sw n switch mod n n nmax n nmax n true true mrul n n ntol n x mrul n n v mrul n n v ntol n x true false mrul n n ntol n x mrul n n v false mrul n n ntol n x mrul n n ntol n x mrul n n true mrul n n ntol n x mrul n n v mrul n n v ntol n x false mrul n n ntol n x mrul n n ntol n x mrul n n ret map sw range return sparsearray flatten ret