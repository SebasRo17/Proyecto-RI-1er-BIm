almost posix compliant operating system window known distinguish binary mode text mode file former mode transform actual file stream application latter translates content standard format platform specific manner ending transparently translated n c platform cp do window cut file byte found transformation seem little useless people share file computer different operating system text mode would cause handled differently across platform matter one would probably use binary mode instead example window us sequence cr lf end text mode unix text mode treat cr part ending sequence application would filter noise older mac version use cr text mode ending neither unix window would understand file matter portable application would probably implement parsing instead using text mode implementing newline interpretation parser might also remove overhead using text mode buffer would need rewritten possibly resized returning application may less efficient would happen application instead question good reason still rely host o translate ending file truncation