need speed parallelize operation look essentially like comparisonsetsa round table randomreal k comparisonsetsb round table randomreal k intersectionsizes table length intersection comparisonsetsa comparisonsetsb b length comparisonsetsa b length comparisonsetsb absolutetiming computing length intersection pair set comparisonsetsa comparisonsetsb containing real number less trivial actual application roughly size simply writing paralleltable make thing time worse term timing core machine way efficiently parallelize optimize process note cannot make assumption size intersection set assumed contain duplicate update help need know size intersection greater smaller threshold value e g cap b geq need know anything update like extend ybeltukov handle case set b necessarily equal size simple way add much way overhead asked question possible padding method set array using non intersecting integer element update let bit explicit update since poor job earlier communicating meant would like extend ybeltukov nice result case internal set b set different size say example case list set size set b set size believe one call ragged list