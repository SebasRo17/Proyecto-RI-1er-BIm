working major enhancement legacy wrestling whether good case use proxy pattern specifically whether good case use dynamic proxy api background used send order destination application maintains num n sending specific selected based user specified order normally order would sent straight market enhancement see whether order could filled order already sent market sending filled execute totally different logic e send delegate current logic feature used one client turned dynamically configuration setting feel like good use proxy pattern dynamic proxy would allow designing block intercept request existing send also case whether feature enabled proxy could either execute new logic warranted dispatch existing logic pro con pro using proxy avoids issue hierarchy occasionally subclass handled subclass child might need moved parent need update existing top level flag check feature enabled conditionally execute e create one special case would hit case single point control con existing expose public variable would need refactored getter setter method need extract interface dynamic proxy could used e ripple throughout class binding proxy legacy could little cheesy e g getname equal send way tightly binding yuck making thing unnecessarily complicated general try subscribe simplest thing could work quite feel like would love hear anyone thought might handle design question