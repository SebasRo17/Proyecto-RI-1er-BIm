backstory graduated less year ago degree computer science extra course software engineering another degree software engineering like think familiar modern software development methodology ci scrum xp etc problem got first current job medium sized game development company company around several year multiple successful title belt full talented dedicated people however software development happens entirely ad hoc way use svn bugtracker beyond little planning automated testing hard pressed find uml diagram anywhere office think two possible reason num programmer simply given enough time thing properly sadly upper management tendency set deadline without consulting programmer led many nighter num programmer lack education motivation employ proper technique question recently spoke management encouraged suggest alternative figure first thing would rule second possibility listed give management evidence programmer given breathing space could become much productive however quite sure go best idea far conduct survey among programmer software development methodology know well attitude towards quality tl dr assess whether programmer able willing employ modern software development method prove management would lead increased productivity edit obviously failed bring point across properly let elaborate situation little first fully aware look like bright eyed fresh grad trying save world l33t education changing wicked way grumpy old fossil know better also understand always difference theory practice teach school never happens real life exactly incredibly cautious trying get feel current situation instead charging going hai let teh unit test second psr raise good point let reason think room improvement senior developer bit maverick ultimately skilled reasonable guy agrees point company history sophisticated repeatable development process place one programmer much experienced used modern method agrees could productive used case throwing feature together nighter hunting bug take ridiculous amount time cannot imagine thing way could worse lack planning design refactoring documentation lead poor quality perhaps importantly lead programmer forgetting work matter month still working project way find apart trial wading spaghetti even management suffers quantifiable measure progress project number unresolved bug since anything liable break time due reason unreliable figure third actually believe colleague lack knowledge modern method willingness use point cannot rule possibility kind reason came asking best way find know besides lengthy personal interview obviously fourth take comment uml automated testing seriously example fact produced immediate whim designer upper management without kind software design ever tested couple guy pressing button see anything break perhaps still wearing university issued rose tinted glass strike garage development finest tl dr trying really hard arrogant fellow programmer management seem expressing desire predictable productive way developing software find solution could make easy transition