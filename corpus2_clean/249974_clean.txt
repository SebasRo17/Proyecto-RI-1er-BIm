related onerror handler better exception premise writing piece library performs certain task separate concern decided write log write display directly instead provide event registration mechanism allows interested client listen event life cycle far good event handler log event handler display informed event occurs write log display independently far pseudo mylib list listener display implement log implement question question raised inform client exception one way looking exception looked another event something external happens client interested knowing occurs simply add another event exception receives exception throw exception allow try catch construct handle log display really handling exception notified happened whatever want really recover hand smell wrong exception normal event break flow say catch exception pas display log instance explicitly outside event dispatch mechanism smell also already list listener yet explicitly call log display handle exception perhaps alarmed something exceptional handing exception still smell need keep track client twice stuck smell matter choose design pattern handle multiple listener handler exception try catch single listener hierarchical structure seem right tool wide dispatch like scenario perhaps sort aop pattern attempt answer remote server multiple client server need communicate server exception occurred would question since client really try catch exception likely sent event e g akka try even rmi exception sent event trigger locally known design pattern handle multiple independent read listener exception e g listener recover exception need know happened perhaps case sending exception event rethrowing right way go