approach pretty much accepted way anything company simple example piece customer requested service fetch customer relevant part service save memory dictionary serve following request singleton service update go db update memory dictionary seems simple harmless implement complicated business rule cache get sync deal hard find bug sometimes defer writing database keeping new cache till case store million row memory table many relation table need show aggregate quickly cache handling big part codebase sense right way juggling add much noise make hard understand actual business logic however think serve reasonable amount time hit database every time unhappy current situation better alternative solution would use nhibernate 2nd level cache nearly experience know many use redis memcached heavily gain performance idea would integrate system also know perform better memory structure query alternative approach look