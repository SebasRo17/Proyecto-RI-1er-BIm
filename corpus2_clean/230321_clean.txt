computer science field noticed notable shift thinking come programming advice stand write smaller testable refactor existing smaller smaller chunk method function line long write function one thing make smaller change compared old bad practice method spanning num line big class everything question call come machine 1 0 assembly instruction concerned separated variety small tiny function generates much extra overhead exactly familiar oo call handled asm end idea assume extra call call include call language generate extra set instruction thereby increasing volume adding various overhead without adding actual useful also imagine good optimization done asm actually ran hardware optimization much hence question much overhead space speed well separated split across hundred file class method actually introduce compared one big contains everything due overhead update clarity assuming adding function object class result parameter passing smaller piece said somewhere quote tbd num made asm mov instruction loading cpu register proper variable actual computation done case load cpu time push pop instruction provide linkage parameter passing various piece smaller make piece overhead linkage required concerned linkage add software bloat slow wondering concerned much current future generation programmer building software next century live consume software built using practice update multiple file writing new slowly replacing old particular noted one old class num file mentioned earlier becoming set num num file located across various directory including test file including php framework using bind thing together file coming well come disk loading multiple file slower loading one large file course file loaded loaded needed disk caching memory caching option exist yet still believe loading multiple file take processing loading single file memory adding concern