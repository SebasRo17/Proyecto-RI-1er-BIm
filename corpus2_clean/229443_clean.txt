well expert student curious language design pattern goal like know whether point miss following example technique like widely used popular language better idea real life program explicitly define unit test instead using declarative language use declaration test implementation well general split thing two part suppose following unit test avg valueerror assertequals avg num num assertequals avg num num num assertequals avg num num num take pseudocode def avg item len item num raise valueerror else len item num item num else sum item len item part avg seem nothing little declaring way pas unit test word feel little like duplication especially first test seems superfluous example wonder would good design get rid unit test way def avg item len item num raise valueerror len item num item num len item num sum item len item test item num num avg num test item num num avg num test avg item sum item example test indicates specific test case useful definition though maybe could even used optimization rare case course pseudocode well designed less readable first implementation think convenient way declare unit test actually unit test seem wrong since nothing test definition last test trivial perform performed example another test test avg chance give useful set test parameter also example last unit test secondary role like avg sum necessary evaluate complex definition since runtime one test case implies directly ok case real optimization though ide could notify user expression always useful however imagine many complex example optimized way without making developer explicitly test special case every single place relevant maybe better example optimization def power n n num num n num n num power n num test x power n x power x n x secret think clever could use many case clever interpreter time could use much case order understand test language better curious whether thought useful missing popular language implement pattern