recently reading mark seemann dependency injection net attempting apply learned new project working stumped particular scenario trying determine dependency inject read several question elsewhere discus similar scenario roundabout manner think narrowed underlying conceptual question title stable dependency volatile dependency put another way stable dependency volatile dependency stable dependency really stable quick example public myclass private one private stable public myclass one two one one stable new two public private two public two two two situation myclass stable dependency chosen inject instead instantiate internally hold via composition however stable dependency volatile dependency injecting myclass passing constructor whatever reason smell little bit fairly straightforward simple contrived example see thing getting hand quickly complicated real world situation really stable composing resolving prior constructing myclass injecting really foresee changing replaced another implementation hand practice passing dependency parent class child parent child composition sense seems expose detail child parent would violation law demeter edit changed interface clarify intended satisfied multiple possible implementation lsp compatible edit num thinking reading keiths answer default comment make realize maybe named think dependency first place something ever expect multiple implementation merely implementation detail myclass us composition contain myclass knowledge construct problem think big question dependency inject dependency reason intent purpose myclass dependency fact pass dependency implementation detail unrelated di