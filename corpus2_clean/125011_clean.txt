asking argument testing internal method though restate mind hearing others question relate implication testing public interface especially whether understand extent refactor part red green refactor book tdd non tdd technique tdd practitioner use address problem make want test internals question write straightforward possible get light green test internal method follow time time allow start writing far bunch member variable know survive refactoring wind refactoring bunch method explicitly tested get familiar tdd feel like anyone would least tempted test internal method many practitioner say e g num million result item num comment stackoverflow post given implementation involve one non trivial problem test public interface two possibility num non trivial logic wind getting tested indirectly tested call non trivial logic num make method public expect client sut test call think hear advocate book tdd num right yes lot non trivial tested indirectly problem want test start failing improve implementation even fail innocuous test keep passing targetting bunch longer used test show use test public interface sound like reasonable thing say seen said explicitly even though sound reasonable test internals feel like lose part help keep test driving coding maybe part difficulty applying distinguish coding developing internal logic turn valid int32 int64 decimal depending want test little bit logic find whole failed want one test pinpoint line exercise fail thinking doubly downvoted answer seems obviously attractive wonder book fellow neglecting mention instrumentation tracing logging use addition tdd watch work symbolic debugger recognize failure point write test cause failure pinpointing line testing implementation though seems natural want test isolation verify fails even though implementation detail suppose talent experience classify bigger chunk non trivial seen anyone bluntly saying condescendingly implying test implementation detail lot time make perfect sense test public interface lot method really like see tdd example feel wonder purist something writing test public member say want put file database one public envisioned consumer public sqlconnection c bunch dependency resolved using configuration file environment variable determine find folder live find load parse schema file using vendor ddl library forth none interest envisioned calling reason moving dependency would could test make easier understand maintain moving another make testable wrong really implementation detail first implementation trying write enough get light turn green write anything reasonable maintainability easier bunch variable big two write helper class instead get light green refactor part diligently even clean class introduced keep internal friend accessibility get tested via call thanks reading far reminder question second paragraph