background game development hobby looking better way design currently using standard oop approach enterprise development num year come take example public needed inherit sprite sprite base thing like texture use current position base update draw getinput method etc contains helper animated player one draw whatever texture problem let say making 2d need able jump usually add appropriate update getinput method need make player crawl duck climb etc go careful method get cluttered end creating method pair like getinput look like public update look like public update go create another game player need jump duck usually go game functionality copy messy know thats looking something better solution really like blend behavior attach element thinking using concept game let look example would create base behavior public behavior public update public getinput create behavior using behavior behavior add collection behavior sprite base add need entity public public behavior new behavior num behavior num new etc public update behavior update public getinput behavior getinput wanted use jump duck many game bring behavior could even make library common one work figure share state looking jump duck affect current portion texture drawn also state player jump going apply decrementing amount upward force time duck going stop movement change texture collision size tie together work create dependency property behavior behavior know parent directly modify one thing thought able pas delegate behavior get executed triggered sure issue looking entire purpose able easily reuse behavior game entity game turn care explain done better idea ear