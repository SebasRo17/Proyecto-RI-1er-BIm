assignment software engineering design application play different form particular game game question game called game differ aspect question important know game could differ following way result move handled way end game determined way winner determined first thing came mind design use strategy pattern variation algorithm actual rule game design could look like enter image description thought game way winner determined exactly would duplicated think definition violation one rule one place dry principle seeing change rule automatically mean rule changed well nevertheless feedback got professor got impression find different design came enter image description game would attribute rule interface e num version num except winner determined use version think implementation rule strategy pattern certainly valid real problem come want design reading template pattern immediately thought could applied problem action done user make move always order namely deposit stone hole game would implemented template determine result move determine game finished previous move game finished determine three last step strategy pattern described lot trouble combining two one possible solution found would abandon strategy pattern following enter image description really see design difference strategy pattern certain need use template although sure use strategy pattern also determine would responsible creating whereas strategy pattern feel family object three rule could easily create using abstract factory pattern would etc would create correct instance rule hand back ruleset let say use strategy abstract factory pattern ruleset algorithm three rule way feel still use template pattern pas ruleset problem surface would never need concrete implementation class would become obsolete protected method could call ruleset consequence would longer abstract would become concrete still template pattern summarize thinking right way missing something easy right track combine strategy pattern template pattern