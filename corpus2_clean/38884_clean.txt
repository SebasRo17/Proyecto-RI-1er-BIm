mostly c c programmer mean majority experience procedural oriented paradigm however many c programmer aware c shifted emphasis year functional esque style finally addition lambda closure c 0x regardless considerable experience coding functional style using c little experience actual functional language lisp haskell etc recently began studying language idea side effect purely functional language always intrigued especially regard application concurrency distributed computing however coming c background confused side effect work asynchronous programming asynchronous programming mean framework api coding style dispatch user provided event handler handle event occur asynchronously outside flow program includes asynchronous library boost asio even plain old c signal handler gui event handler one thing common nature asynchronous programming seems require creation side effect state order flow program become aware asynchronous event handler invoked typically framework like boost asio event handler change state effect event propagated beyond life time event handler really else event handler call point call point event handler part flow program way effect actual program change state else another execution point seems asynchronous programming asynchronously producing side effect seems completely odds goal functional programming two paradigm reconciled practice functional language