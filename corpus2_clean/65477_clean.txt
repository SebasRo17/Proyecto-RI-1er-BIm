understand automated testing use wherever problem well specified enough come good test case noticed though people stackoverflow emphasize testing unit dependency fail see benefit mocking stubbing avoid testing dependency add complexity test add artificial flexibility decoupling requirement production support mocking disagree anyone say promotes good design writing extra introducing thing like dependency injection framework otherwise adding complexity codebase make thing flexible pluggable extensible decoupled without real use case overengineering good design secondly testing dependency mean critical low level used everywhere get tested input whoever wrote test explicitly thought found plenty bug low level functionality running unit test high level functionality without mocking low level functionality depended ideally would found unit test low level functionality missed case always happen side really important unit test also test dependency edit understand mocking external dependency like database network web service etc thanks anna lear motivating clarify referring internal dependency e class static function etc direct external dependency