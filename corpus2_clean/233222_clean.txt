refactoring huge legacy refactoring presume advocate num write test legacy num refactor heck problem refactor test step num need changed example legacy may separate instead one may several method entire landscape legacy may something new test write step num almost essence adding step num rewrite test profusely purpose write test refactor sound like academic exercise creating work writing test learning test thing legacy work one learn reading legacy writing test almost like nose also documenting temporary knowledge separate test way almost choice learn said temporary refactor heck documentation test significant part except knowledge stay allow fresher refactoring real reason write test refactor help understand better got another reason please explain note post make sense write test legacy time complete refactoring say write test refactor say writing test seems like busy work destroyed soon