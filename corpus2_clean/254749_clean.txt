hope programmer correct stack exchange quite concept based question working structure c represents 3d space x plane large say num num num z axis small range num num located integer x z point however one one point x z coordinate thought three way approaching subject necessary experience choose num using 2d linked list inside vector dynamic array vector vector first list item x point accessed using x contains z actual well pointer next structure list may may different z coordinate located defined x accessing element middle end list slow num using three dimensional vector vector vector vector case first two vector define x coordinate third vector give u element defined x quickly determine many element querying third vector iterate back front contains point z seems like fairly good safe regarding memory allocation solution num using three dimensional vector linked list case could accessed x z would point first element linked list resides coordinate structure pointed would contain z already dealt address however many x z point whereas num structure line defined specific x contain least one structure seems worst solution many case would iterate empty z coordinate hitting linked list iterate emphasis program speed set less 100mb modern computer even inefficient storing ram fine option num seems best although past normally seen people inclined go option num interested hear opinion best way handle along reasoning many thanks update thanks response stand learn quite lot comment hobby programmer taken one short course fundamental c year back jagged z slice range x value also seem sparse enough hash table iirc slow significantly hash collision guaranteed multiple element x z dimension set known file load included file header along md5 hash file checking bit relevant analysis j trana florian f set pre built infrequently modified program piece may need moved deleted adjusting particularly adjusting z removing frequent operation linked list faster operation num opposed n vector however believe change infrequent enough n change may worthwhile lookup speed even marginally faster frequent operation majority time accessed iteratively taking n p slice x plane pseudocode example p x n read node x get node z x analyse node possibly modify node possibly compute something based value access always related x element always need node dependant z either structure require u retrieve one want perform secondary sort file represents sorted list ascending z x also look structure never met little training use stl vector list everything like spend time properly time though spent fair amount time thinking last night posting question seeing first response realised one piece point x z required element point required time led think option num least preferred started yesterday afternoon actually best option enumerated use three dimensional dynamic pointer linked list exactly lose much speed heap space setting pointer rather attaching struct also allows full access 3d currently required may reduce operation n num brief look octave r tree feel safe saying set complex enough require engineering heavy solution come fairly sure three option outlined would work even fastest would like learn good relatively efficient rather relying awesome power modern computer brute force problem like normally thanks reply suggestion far