write unit test usually provide context plain mocked stubbed setup way assert statement context note pseudo groovy like syntax test mytest def testme number num assert mult testme testme organize test need test complex boolean expression take many parameter edit replaced one expression something readable avoid confusion real example naming bad conciseness sake expression coming randomness realm probably complex real world expression still exists enum x z c boolean b c boolean isenabled boolean def condition1 b def condition2 c def x def z z condition1 condition1 condition2 test kind method read far verbose complete hard understand quite shame small even complex generates awful test tried break boolean expression smaller sub method sometime convenient permutation count still high also usually break expression intermediate variable helping unit test world test something like test matching tested completeness must assert work expected edit retained solution refactoring indeed way go really want unroll combination manually test verbose ugly good hard understand however keep answer preliminary mandatory step break expression smaller piece anything else refactoring done test still result test use solution proposed generate combination declare everything found interesting outdated article test combination groovy tool spoke search engine radar must dead however used pattern assertthat permutation expectation permutation possible value assign property condensed map b expectation combination specific combination checked default