created program restricts mouse certain region based black white bitmap program num functional us inaccurate albeit fast algorithm repositioning mouse outside area currently mouse move outside area basically happens num drawn pre defined static point inside region mouse new position num point intersects edge allowed area found num mouse moved point work work perfectly perfect circle pre defined point set exact center unfortunately never case application used variety rectangle irregular amorphous shape shape point drawn intersects edge usually closest point shape mouse need create new algorithm find closest point mouse new position edge allowed area several idea sure validity may far much overhead asking might help know using objective c cocoa developing o x feel language used might affect efficiency potential method idea using bit trigonometry project line would work would require kind intense algorithm test every point every found edge region seems resource intensive since could something like num line would many num pixel checked black white using something like pathing algorithm find shortest path black pixel however seems resource intensive even though could probably restrict checking roughly one direction also seems like take time effort available spend small portion much larger project working correct wrong would significant amount num line around mapping border region application begin running event tap think could accomplish using current based algorithm find edge point initiating algorithm check num pixel around pixel find next border pixel one direction continues come back starting pixel could store used entire duration program mouse positioning check closest pixel border mouse target position last would presumably execute initial border mapping fairly quickly would map num num num num pixel mean num num num num checked could even permanently store make launching faster however uncertain much overhead would take scan shortest distance every single mouse move event suppose could shortcut restrict number element checked number starting intersecting point original algorithm raise lower number experiment overhead accuracy tradeoff please let know thinking easier way work fine method would able execute something like num time per second keep mouse movement smooth better faster posted relevant part reference included example area might look like check color loaded bitmap black white part run every single time mouse move cgpoint point event float tx point x float ty point area tx ty mouse mask target inside k area nothing else cgpoint target point inside restricted region float ix num inside x float iy num inside delta midpoint ix iy tx ty float dx float dy float accuracy num accuracy reached dx tx ix num dy ty iy num area tx dx ty dy mouse mask ix dx iy dy else tx dx ty dy ab dx accuracy ab dy accuracy target tx ty target area x bool area nsinteger x nsinteger mouse mask pool alloc init nsuinteger pixel num mouse mask getpixel pixel x pixel num num pool release pool release bitmap allowed area allowed area black