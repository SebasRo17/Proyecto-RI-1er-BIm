use case repaired logic repairing best done higher level abstraction throwing exception failure ugly hard pas back stack information needed parent layer know fix explain specific program control multiple piece hardware top layer responsible calculating task piece hardware work together generate path across hardware etc next layer includes thread individual device device thread generates cache device state fetched hardware config file device process request application figure update hardware make request happen modify cached state reflect change made finally plugins send physical request hardware work fine usually request sequential avoid race issue pas information layer way getting async update back layer however unlikely possible someone could physically change hardware without going control system wait plugin detects trying handle request try updating state piece hardware see change caused failure constant monitoring later feature problem change detected one device usually mean change made connected device detect want trace change connected device update state etc found change require updating device connected one device thread responsible one device trace change device without propagating exception layer however need know exactly change detected device know connected device refreshing state throw exception knowledge lost must recalculated small real cost due time take communicate hardware tempting thing call application layer saying change detected go update everything else related however make driver aware layer good another option simply propagate let application layer notice go back device ask changed update state calculate change made make request back device level first obvious smell second seems like redundant logic small speed penalty take little time get state hardware option