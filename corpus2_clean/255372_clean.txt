building multi tier enterprise application using spring different layer controller business provider within application built custom handling mini framework based single runtimeexception discriminate different kind error code enums implementing interface public interface errorcode public getnumber public public public boolean example public enum implement errorcode e unknown num internal e missing argument num missing argument e invalid argument num invalid argument e context tenant num tenant context e context tenant change num tenant change attempt e context already initialized num tenant already initialized e implemented num feature implemented exception look like getters constructor utility method stripped brevity public extends runtimeexception private static final long serialversionuid 1l private final private final errorcode private final map public static wrap throwable exception errorcode errorcode exception instanceof se exception errorcode errorcode se getcode new exception getmessage exception errorcode se else new exception getmessage exception errorcode public static wrap throwable exception wrap exception e unknown using wrap utility easily encapsulate exception different layer without loosing original stack without dirty rethrowing exception try throw new e unknown blah blah blah throw exception checked unchecked exception wrapped inside already catch exception ex throw wrap ex recap layer safety boundary try catch wrap exception rethrowing already question log exception want log exception thinking logging stuff inside constructor bad idea better logging stuff catch block layer boundary also want simply log using log4j want use service service injected spring decide something logging file system since make spring inject something created new instruction