team process updating legacy project decided incorporate repository pattern along entity framework access layer high level view organization enter image description irepository tentity generic interface used perform common operation entity set public interface irepository tentity tentity tentity get set tentity get key insert tentity entity update tentity entity save example employee entity create employeerepository irepository employee used wrapper take care objectcontext generation disposal exception handling public tentity idisposable objectcontext new tentity private bool disposed private context private irepository tentity repository public context new irepository tentity repoistory bool repoistory throw new invalidoperationexception format unable find repository num typeof tentity fullname repository repoistory public context irepository tentity repository context context repository repository public action irepository tentity action try action context repository catch exception ex processexception ex public tresult tresult func irepository tentity tresult action try action context repository catch exception ex processexception ex default tresult private bool irepository tentity repository assembly getexecutingassembly gettypes singleordefault typeof irepository tentity isassignablefrom repository repository irepository tentity activator createinstance context finally use business layer would something like using var factory new mydatacontext employee factory context repository interact repository coworker long conversation whether context exposed underlying layer method see case direct access context could useful example case might want turn lazy loading particular entity set think defeat whole purpose abstracting access layer achieved providing common irepository contract since object directly accessed manipulated objectcontext suggested two different version method one expose repository one expose context repository acceptable approach suggestion appreciated