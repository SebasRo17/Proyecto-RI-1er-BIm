past week mulling researching fill gap testing methodology simplified term unit test small traditional integration test big frequent scenario come b use component c however b slightly different requirement make slightly different assumption c developer test assumption c obviously unit testing mocked assumption c fine testing isolation test assumption another possibility add unit test c however ideal development altering test c evolving assumption excessively clumsy indeed developer might even adequate access unit test c e g external library frame concrete example assume node application b depend c read file among thing store file content passed c first file c handle small read synchronously without significant blocking however developer b realizes file getting huge need switch c async read result sporadic synchronization bug still assuming c reading file synchronously bug notoriously difficult track full integration test may caught integration test also caught unit test assumption mocked however could easily caught mini integration test exercise c found reference testing integration small component integration testing unit integration testing also relates somewhat bdd testing direction rather formal tdd unit testing fill testing gap specifically put test mock input c mini integration test much effort put separating testing concern test unit test better way fill testing gap