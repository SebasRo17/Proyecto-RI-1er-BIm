best practice logging deep within application source bad practice multiple event log entry single example let say etl system whose transform step involves transformer pipeline processing algorithm processing engine brief transformer take file parses record sends record pipeline pipeline aggregate result processing algorithm could serial parallel processing processing algorithm sends record one processing engine least four level transformer pipeline algorithm engine might look something like following transformer process try var parser parse stream var pipeline transform catch exception ex var inner new processexception ex logger unable parse source inner throw inner pipeline ienumerable result transform ienumerable record record note try catch useful information provide point process var result algorithm process record examine useful thing result result algorithm ienumerable result process ienumerable record record var result new list result foreach var engine engine foreach var record record try engine process record catch exception ex var inner new engine record ex logger engine num unable parse record num engine record throw inner engine result process record record num record count try validate record catch exception ex var inner new record ex logger validation num failed record num record important thing notice single deepest level cause three log entry ugly do thrown exception contain important useful information logging happens failure would cause loss useful information lower level thought concern like many log entry want lose important useful exception contain important stacktrace typically thing displayed besides message log different level e g warning informational higher level class completely unaware structure lower level exception may change different implementation replaced information available higher level passed lower level restate question best practice logging deep within application source bad practice multiple event log entry single