trying use functionality expectation probability random graph particular percolation model example would like able compute expected graph distance two fixed vertex complete graph independent exponential edge weight following naive code work n expectation graphdistance completegraph n edgeweight table ew n n table ew distributed exponentialdistribution n n fullform yield graphdistance graph list list null sparsearray automatic list list list list list list list list list list list list list list list list list list list list list list list list list pattern list rule edgeweight list ew ew ew ew ew ew ew ew ew ew rule graphlayout circularembedding indicating random weight actually assigned edge similar example would computation probability two fixed vertex complete graph connected component edge deleted probability p retained probability p following naive code work n p probability graphdistance completegraph n edgeweight table ew n n table ew distributed empiricaldistribution p p n n ideally would like able compute probability polynomial p symbolic p course would also grateful approach problem using expectation probability would feel intuitive update problem circumvented computing probability generic event specified probability applied clear f g n f ewarray graphdistance completegraph n edgeweight ewarray probability g table ew n n table ew distributed bernoullidistribution p n n g f simplify result ubpdqn mc calculation experimented hold release avoid use extra function f know enough function make work