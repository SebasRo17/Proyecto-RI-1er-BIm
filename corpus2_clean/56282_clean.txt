first bit background coding lookup age rate num age bracket lookup table num column rate num row value rarely change rate first third column stayed num year figured easiest way store table without hard coding database global configuration table single text containing csv num num num num num num num num num num tier would stored relatively easy parse use realised implement would create new table repository wrap around layer test repo unit test around csv table test around lookup benefit work avoiding hard coding lookup table talking user currently use lookup table directly looking hard copy opinion pretty much rate never change obviously actually correct rate created three year ago past thing never change habit changing defensively program definitely store lookup table application except think yagni feature implementing specify rate change rate change still change rarely maintenance even consideration feature actually critical enough anything would affected delay rate change updated application pretty much decided nothing lost hard lookup concerned approach particular feature question professional properly justified decision hard coding value bad design going trouble removing value application seems violate yagni principle edit clarify question concerned actual implementation concerned either quick bad thing justify saying yagni take defensive high effort approach even best case ultimately low benefit professional programmer decision implement design know flawed simply come cost benefit analysis edit answer interesting think come individual design choice think best answer corbin e z bring thing considered question dichotomy correctly removing hard coded value moving database v efficiently applying yagni using hard coding third option putting lookup table app configuration incur overhead correct way without efficiency yagni generally limited either decision come cost benefit decision generation reduce overhead moving hard coded value database way also remove engineered decision process csv table potentially also add long term maintenance issue generated basic requirement change lookup affect cost benefit analysis likely automation available even considered hard coding something like marking corbin answer correct change assumption development cost probably add generation tool arsenal near future