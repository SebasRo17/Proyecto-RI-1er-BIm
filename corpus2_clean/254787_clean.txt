architecture design problem think appropriate site note made edit post reflecting latest potential solution problem general problem description primary goal design software library program c automate particular experiment experimental setup consists many distinct hardware device generally fall limited number category point detector xy sample stage autofocus device natural choice design interface basic property shared device e g initialize even design abstract inheriting e g implementing common device likewise also design interface specific device time implementing common stuff might hold e g move ultimately implement interface final class representing specific device think know however device exactly manufacturer offer rich functionality top standard stuff xy stage might e g number optional non standard parameter set e g channel delay pid control value whatever tackle need mechanism add additional property method property suffice specific device class higher level interacting device understand added property able get set however many might much basic design problem exists already o software program micro manager system implemented c full source cannot use sw directly purpose public virtual property virtual gettype num setting getting value virtual bool set double num virtual bool set long num virtual bool set const val num virtual bool get double const num virtual bool get long const num virtual bool get std const num limit virtual bool const num virtual double const num virtual double const num virtual bool double double num stuff left brevity subsequently property implement pure virtual function related limit next stringproperty implement get set method kind property defined enum allows three kind property property next added basically kind dictionary part device work nicely use mm lot lab type experiment trying similar thing c solution stumbled fundamental question quite sure leverage specific feature offered c net generic definitely also dynamic perhaps improve existing c implementation question first question limit type property allowed mm defines enum enum float integer whereas c reflection lot built support type generic therefore considered public interface public get set could next abstract ultimately stringproperty double get trouble trying put collection net following possible dictionary unless perhaps adopt strategy e non generic base return yet base class actually implement property system however seems convoluted better way think utilising generic language feature might allow away needing get set method mm example would able know backing property realise broad question big gap understanding basic language feature able fully make correct design decision outset second question contemplating making final device class inherit kind e g similar one public internal readonly dictionary sourceitems public dictionary sourceitems sourceitems sourceitems public override bool binder sourceitems containskey binder sourceitems binder tolower else sourceitems add binder tolower public override bool binder result sourceitems sourceitems trygetvalue binder tolower result result instead would like use would alias property would correspond design choice q1 would thing make sense design standpoint would actually need add custom property device design time e writing custom device driver runtime would need inspect custom property get set value c mm solves using bunch alias property method device constructor work maybe using dynamic overkill wondering somebody could provide insight possible advantage certainly also disadvantage going dynamic route summarize net feature num could leverage implement mm concept elegant way focus mentioned specific matter realise broad question perhaps possible answer matter taste style anything making question unsuited platform please provide feedback comment adjust accordingly edit spent thinking tried solve following way first enum specifying allowed public enum undefined float integer second interface responsible checking value fed property specific public interface get get bool base implementing public bool gettype public get switch case integer typeof long case float typeof double case typeof default three time property set one enum value add type public interface alias get want limit property discrete value dictionary get bool get bool hasvalue get bool isreadonly get callback hw operation using property func bool set get get set alias numeric property might usefull limit range value stuff hw bool bool setter validation defined almost fully implemented also field get set upon instance creation cannot changed thereafter property cannot change base e g public get set leaf specific class stringproperty one override relies comparison value everything else base public override default make sense impose limit property discrete value count num passed object fact double proceed check order allow comparison need cast object double double double double double lower limit cannot bigger upper limit passed value ok set way think system allows collection actually hold different type float ability implement limit etc e stuff different depending however still impression either better way sort thing engineering thing therefore feedback still welcome edit num searching online believe last bit posted previous edit leaning towards adaptive model pattern really however resource topic seem quite old wondering better way achieve type thing