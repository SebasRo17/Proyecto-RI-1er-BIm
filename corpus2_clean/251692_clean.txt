basically counter decremented frequently polled three option implement think number num private volatile count public finished interlocked decrement ref count public bool done count num number num private count public finished interlocked decrement ref count public bool done volatile read ref count num number num struct atomicinteger private public get volatile read ref method actual private atomicinteger count public bool done count get num first one give warning passing volatile reference hand clear definition accessed concurrently clearly warning sign anybody looking ever decide actually need long work second one give warning reading private count clear used concurrently explicitly stated comment actually bug used normal read assertion instead volatile read easy thing overlook changing long hand introduce additional work like number num result performance overhead compared solution inlining downside duplication every primitive hand simple enough copy pasted without fear problem unlikely ever change comment advantage disadvantage overlooked would considered idiomatic c