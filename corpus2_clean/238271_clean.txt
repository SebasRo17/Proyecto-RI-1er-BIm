scenario project maintain reading working effectively legacy started think would refactor system live environment thankfully system legacy system without documentation extremely tightly coupled database relationship incorrectly modelled e object meant many one mapped one one using duplication allowed pseudo many one relationship business logic stored javascript solely front end tightly coupled presentation example question could exist without table cell database table call store inline cs cell mapped one one question system horrendous mess eventually lead loss complete write end total project loc side note reason system written needed refactoring exposed internet able modify business logic using chrome debugger elevate role inject execute sort undesired function question book used example logic placed middle tier however happens business logic placed front end point view refactor process would go way num refactor front end javascript understand business logic num refactor middle tier include validation num refactor database decouple model num migrate num refactor middle tier decouple model num refactor front end reflect change model read technique factor garbage maintain sanity helpful address order refactoring occur specific scenario process seems add lot redundancy front end middle tier refactored twice live system efficient way refactor system keeping system live