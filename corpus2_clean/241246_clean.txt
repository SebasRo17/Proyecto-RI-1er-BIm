complex chrome extension gotten large maintain current format like restructure num first webapp extension built idea tl dr large complex webapp like restructure know follow current restructure plan sound like good starting point different approach missing thing listed relevant question actual github extension webstore basic structure follows index html html head link href cs style cs rel stylesheet hold app style link href cs widget cs rel stylesheet one hold widget style head body unloaded low level base element hardcoded unloaded used transition removed load e div tab container tabindex num tab nav div template part application widget stored element plan changing script element restructure since template need valid html template id template toolbar template content template template end plugins script text javascript src j plugins j script contains widget plan moving online downloading necessary soon script text javascript src j widget j script contains application j script text javascript src j script j script body html widget j window push new date gettime log kept page load performance analyzed error widget stored extended jquery probably switch underscore using backbone necessary var widget num widget id set widget id id num widget id used widget duplicated detached size num default size medium case order num order shown store weather widget interval num refresh interval weather html j safe widget size tiny small medium available widget size desc short widget description setting widget setting specification stored object used dynamically generate widget setting popups list location label location placeholder enter location press enter config widget setting stored tab see script j storage information size medium location san francisco ca cached widget stored locally let work offline cb widget optionally define custom function part refresh fetch web cache locally call render get called page loaded faster load render render widget using information called page load script j window push new date gettime also end every file plugins extends globals go e number prototype pad var refresh init called refresh refreshing libs status log starting page generation status log defined used place cs dynamically generate cs based setting tab take tab stored storage see fetching render column widget necessary status log tab rendered omitted along excerpt used everywhere check show getting started init run bare minimum required display page set non visible instantly need thing widget dragging timeout settimeout deferred refresh pas refresh along see num deferred refresh call module one next appropriate order finish rendering page search module base init camel cased capitalized search submit val method within module camel cased capitalized extension storage async fetched beginning plugins j stored storage process fetcher check see defined get called otherwise setting left var storage template template read element held cache init called typeof objective restructure num memory usage chrome apparently memory leak extension trying fix memory still keep getting increased every time page loaded app also us lot num readability point follow called rewriting plan properly commenting everything num module right module call lot afaik good since change make one module could affect countless others num fault tolerance little fault tolerance handling right widget causing rest page stop rendering user least able remove speed currently issue like keep way think restructure done using backbone j event call module e storage loaded init module go file thinking set core file module rely call directly everything else event based widget structure kept largely maybe also split file afaik load template folder therefore need stay inline grunt used merge module plugins widget one file template also precompiled question follow current restructure plan sound like good starting point different approach missing thing listed application written backbone tend intensive memory speed one written vanilla j also expect improve proper restructure current good expected