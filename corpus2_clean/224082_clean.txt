appears widespread agreement oop community constructor leave partly even fully uninitialized mean initialization roughly speaking atomic process brings newly created state invariant hold first thing happens per nothing permitted get hold un initialized thus frequent advice perform initialization right constructor reason initialize method often frowned upon break apart atomicity make possible get hold use yet well defined state problem cqrs combined event sourcing cqrs e state change caught ordered series event event stream left wondering actually reach fully initialized state end constructor first event applied note refraining using term aggregate root prefer substitute whenever read example discussion assume uniquely identified opaque id think guid event stream representing state change identified event store id let worry correct event order interface ienumerable id objectid assume two type customer shoppingcart let focus shoppingcart created shopping cart empty must associated exactly one customer last bit invariant shoppingcart associated customer invalid state traditional oop one might model constructor partial shoppingcart public id id get private set public customer customer get private set public shoppingcart id id customer customer id id customer customer however loss model cqrs e without ending deferred initialization since simple bit initialization effectively state change modelled event partial public get private set public customerid get private set note actually required since id must known advance order fetch event stream event store would obviously first event shoppingcart event stream would initialized event applied initialization becomes part event stream playback generic process would likely work whether customer shoppingcart matter constructor parameter less nothing leaving work apply much frowned upon initialize constructor receive event stream play back make initialization atomic mean constructor contains generic play back apply logic e unwanted duplication traditional oop constructor shown properly initializes event first apply expect answer provide fully working demo implementation already happy someone could explain reasoning flawed whether initialization really pain point cqrs e implementation