thinking kanban realized queuing theory behind sw development methodology obviously also applies concurrent software looking whether kind thinking explicitly applied area simple example usually want limit number thread avoid cache thrashing wip limit paper disruptor pattern num one statement found interesting producer consumer rarely balanced using queue either consumer wait queue empty producer produce consumed resulting either full capacity constrained queue unconstrained one blowing eating away memory lean speak waste increase lead time anybody example wip limit reducing eliminating queue pull single piece flow applied programming num pdf