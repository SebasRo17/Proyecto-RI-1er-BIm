let preface question saying get need unit testing painfully get ensure future modification adversely affect application way expect also good practice utilize test driven methodology ensure current modification work expected providing solid testing base adding edge case bug later also understand testing requirement company plan subject audit finally get testable probably written using solid design principle quandary coding interface purpose supporting unit testing alone seems like contrived complexity take case database application requirement database agnostic already coded dal communicates database bl us dal persistence integration test place current architecture utilize development database test support num coverage unit test would need introduce interface dal bl concrete implementation interface use dependency constructor injection utilize interface based context runtime introduce contrived complexity side question guess drawn unit integration testing case certainly feasible model change want integration testing addition unit testing clear unit testing succeed integration testing fail case