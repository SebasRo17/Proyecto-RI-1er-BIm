update num requested brendan developing unix batch application storing million customer record relational database order allow multiple batch job parallel achieve certain amount concurrency processing record distributed work across nine server daemon within lan client responsible isolated task e g store table store address address table etc daemon able accept connection request concurrently multiple client finally whatever communication protocol design adopt must extensible accommodate different kind connection instance like monitor tool able connect daemon port client request statistic send command also eventually different kind client require different function performed daemon word client connecting daemon able declare want post customer record want apply batch change address database want send command think conclusion underlying transport connection tcp finally apart command session multi million record batch job performance critical processing iterative every record layout wrapping one xml say would unnecessary highly wasteful idea enough information someone suggest format protocol use gladly try clarify supply additional detail asked end update num original post may may charge designing application protocol set house batch oriented client server application familiar ibm lu num k advanced program program communication past num year worked unix environment client batch job connects server process turn connects nine sub server process client pass customer transaction record server distributes different portion record sub server sub server process portion independently concurrently pass result back server pass back client tcp connection decided first use newline terminated ascii string call line protocol unit record subdivided tab separated field since process requirement field num every record contain record used key metadata store find field name order expected appear record order know interpret record example metadata prefix first middle last personal suffix professional suffix record chap jr cto use represent tab character represent newline character straightforward far think new arose first instead sending one transaction single large record like possibly use several record record address record email record etc invented block series record preceded special bb record followed eb record bb record first field course bb second field hold block block like record key metadata listing record type required optional block understandably ten process unique requirement led set record type enclosed set block type lot metadata really showstopper next thing requirement emerged special context setting message transmit certain configuration variable would remain constant transaction transaction gave rise new record block well new column block metadata indicated kind block somehow special envisioning circumstance context could change runtime client lifted rule stipulated could one context message beginning connection time realized still need initialization message could come beginning conveying session global parameter thus init block born three flavor block session initialization context switching normal application connection transaction posting rather control session querying health server retrieving statistic changing operational setting init block role became general declaring mode session could either posting control trying wedge single layered application protocol getting hand defining special bb record raised red flag constructed application level object metadata application rather frame application think evolved num layer architecture atop tcp one layer simply provides typed container block record higher layer us container specific purpose posting control something else application protocol however well versed enough design protocol recognize pattern might obvious pro appreciate feedback approach also seems possible someone may written guide designing protocol address concern found apology length post hope none immaterial deep thanks patience chap