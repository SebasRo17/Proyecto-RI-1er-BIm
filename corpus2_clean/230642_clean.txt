building architecture like sw layer view business logic repository view going generate html sent user business logic business logic repository layer access db idea repository us entity basically representation table order perform db query layer communicate using business object object represent real world contain business rule method view build use dtos basically object information required shown screen expect also kind action calling business logic create bo first question overall feeling architecture used similar architecture project always got problem view list show age course date enrolled already paid information different bo think one build structure alternative could think view layer could call method get student course study payment information would cause lot db access view would knowledge act generate information seems wrong could adapter required information would property student course payment would required one adapter similar case may get bad big project still like would idea would change architecture avoid kind problem read cqrs think suit need taken link reference link describing detail cqrs need understand two driving force behind collaboration staleness mean many different actor using collaboration shown user may changed another actor stale staleness problem want show user information different bo would need receive service layer service layer assemble deliver information edit yes understood correctly original idea view layer build bos nice point creation bo inside business layer assuming follow advice move creation logic inside business layer business layer interface would contain dtos instance public foo far understand dto tightly coupled view would reusable second view order use second view would need build specific dto specific view would duplicate business layer correct missing something