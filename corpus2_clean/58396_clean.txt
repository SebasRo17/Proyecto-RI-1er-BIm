need program algorithm recursively make algebraic replacement lead utterly complicated algebraic function x whose final result needed fixed order laurent series x wish use fact make algorithm go faster sample problem mimic realistic problem begin align f n x sum j frac j x n left frac x j f n x right qquad f x tt f f x sum n frac n x left frac n x f n right end align algorithm repeatedly insert first equation second one instance f n x turn f tt f needed end laurent expansion mathcal x need x constant term nota bene sum lengthen expression make mathematica work harder naive implementation result machine implementation f n n sum j x n x j f n j sum n x n x f n n timing series x result implementation performing actual recursion second line lightening fast final step series function painfully slow second since x denominator force mathematica appeal analytical routine expand thing like frac x approx x since need first two term laurent series went ahead hand expanded fraction frac jx approx frac frac j x frac nx approx frac frac n x intention partially freeing mathematica painful analytics implementation f n n sum j x n x j f n j sum n x n x f n n timing series x enter image description time faster save mathematica analytic manipulation faster go need go faster yet carry alogorithm minimize extent mathematica computationally costly analytic work failed attempt ask mathematica drop higher order term stage recursion adding x end line implementation failure f n n sum j x n x j f n j timing sum n x n x f n n x enter image description fast wrong answer get wrong answer drop term like x f n think f n order x reality x part speed