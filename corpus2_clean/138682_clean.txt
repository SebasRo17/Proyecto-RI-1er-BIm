first scenario internal system effectively split num separate part across num sub domain back end administrative system internal access call admin example com public facing interface customer via website let call www example com customer built series apis php back end system public interface access apis split multiple file based around activity performed also used admin interface held admin example com apis activity api php problem also api key use num front end one back end determine access level without thinking second issue know structure application issue using jquery ajax call apis like placing api key publicly visible anyone little programming knowledge able pull huge range time need use note issue public interface thinking calling connecting script php ajax stored locally public facing server would thing num check referrer come example com customer www example com customer continues request killed unauthorized num get variable posted ajax request num variable api e g receives get request reconstructs get req num add api key held within php num us file get content make actual request api would turn populate connecting php script required returned api site question num missed anything concept num flaw thought num compelling reason structure used appreciate done really want thank guy help comment pointed missed purpose posting question first place also helped spot obvious weakness written algorithm taken account hmac principle anything space room unauthorized access believe algorithm minimizes basic process going follows num num key created private public key num public key hashed first num base calculation carried part current time stamp num num random key get request generated used transport access key determine request key mathematical calculation carried base calculation step num result split num part num part verified unique converted final value num part belongs public access key private access key key num num unique public value plus private access key issued taken ordered based final calculation base step num creating signature speak num signature hashed assigned private get key generated step num quick calculation basic testing request valid approximately num second give take millisecond enough time process everything needed enough much calculation fairly basic server load gone inch tested num connection per second num minute however going series load test next num hour range num request per second num request per second compare load test result taken last week new algorithm nutshell public private key hashing however time public access key obvious unless assign algorithm randomize assigns access key random get request key short validity time based request need store cooky session addition exception login api request going via php connector requires user logged spent time explaining actually creating thanks help guy helped open eye bit reminded forgotten