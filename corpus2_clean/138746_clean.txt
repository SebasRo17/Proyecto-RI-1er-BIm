part organization work past year half company basically writes perl large amount legacy originally prevented company moving forward change first observation existing non existence modularity time worked help left company lot modularizing core section application believe num core system modularized coherent layered point time accused complicating system design everything try sort looked suspicion design system applied best design approach pattern methodology solid available known wrote appreciated developer want revert back believe simpler methodology basically involves large single class num thing still believe approach actually going lead simpler design one actually ready listen give example basically load bunch file lifetime traditionally handled lot thing like loading file repeatedly checking file changed right version file loaded etc also load different set file test case ensure working fine done un organized fashion earlier every one created version file lot version file un manageable introduced subsystem load right file version verification given configuration tell version file available eventually ensured two three version file used across test case basically follows facade factory pattern loader create right file interface load save reload eventually even used load content couchdb represent document complicated developer one really read documentation wrote agree going back old system remove one sub system bring back problem un manageable number file juncture find quite unsure thing learnt find really interested suggesting improvement solution accused complicated think point time