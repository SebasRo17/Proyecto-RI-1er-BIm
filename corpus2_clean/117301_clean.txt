lot case might existing behavior lion public eat herbivore herbivore unit test testmethod public lion eat herbivore var herbivore var test test eat herbivore assert iseaten herbivore happens need create tiger behavior lion tiger public eat herbivore herbivore since want behavior need test something like interface eat herbivore herbivore refactor test testmethod public lion eat herbivore eat herbivore public eat herbivore func builder var herbivore var test builder test eat herbivore assert iseaten herbivore add another test new tiger testmethod public tiger eat herbivore eat herbivore refactor lion tiger class usually inheritance sometimes composition lion tiger abstract public eat herbivore herbivore well however since functionality feel like something wrong test behavior subclass yet subclass actually consumed implementation detail happen share overlapping behavior may totally different end us instance seems redundant test multiple time case subclass override functionality base yes might violate lsp let face convenient testing interface may matter end user test think people situation move test base test subclass expected behavior edit based answer pdr think consider signature contract specify behavior instance testmethod public tiger eats herbivore first eats herbivore first testmethod public cheetah eats herbivore first eats herbivore first testmethod public lion eats herbivore head first eats herbivore head first