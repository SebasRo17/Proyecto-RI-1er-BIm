chance try like much thinking using future project like hear critique opinion done little research subject sure seen approach around pretty sure must tried experienced people like avoid pitfall come idea model split num db access layer dal num business logic layer bll num db access layer contains ideally logic db access logic prepared query supplied parameter called result db needed case select query class tested logic inserted since contain throw command num business logic layer contains actual logic app controller see dal call bll turn call dal needed bll need tested use unit testing since kept separate db access read functionality tested db access mocked using dependency injection create mock alternative every dal method load via factory requested bll depending whether call came testing environment load either mock real course case write functionality delete insert testing would include db call case real would called rather mock still useful system read write db call benefit approach num separation keep business logic clean db access improves readability especially big method need make several call db make easier maintain also allows encapsulate db access logic called numer blls also make easier maintain num make easier switch database point something happens often happen easy thing everybody point know talking num testing bll mock class make test faster since call db made significant help tweaking functionality intensively testing along way time make much easier test performance pure logic detached db call drawback num cluttering adding whole new layer class system num slightly lower performance due added dependancy injection take time resolve num mock class nice work created maintained added bureaucracy whole system missing anything prefer system described good ol fashion num layer mvc guru still exploring various architecture like one much would love hear experienced colleague say