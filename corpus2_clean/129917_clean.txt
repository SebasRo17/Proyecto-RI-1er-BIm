noticed redundancy script ran google closure g var k call prototype j prototype e else var c b c c call c new c b c e var f b extend b b var c hasownproperty constructor c constructor b b f g b f new f b prototype k new h h prototype f prototype f k h prototype prototype f prototype b prototype c prototype constructor c var b c c hasownproperty b prototype b b e b c b var h new e decl j extend e extend prototype e prototype g c e g b g g apply argument look like big sea prototype constructor able get num num size original storing constructor prototype string using notation everywhere access prototype constructor size saving grow size script grows look like change b h call b l b f var c call new c f var g c extend c c var e hasownproperty h h c c g b g new g c e b var b g new j j b g b j b e g k e b c k e k e b e b h e k var c hasownproperty c c b c f c c var j new f decl l extend f extend b f b c f prototype constructor b b b apply argument worth damage readability save byte hard know stop hasownproperty appears twice might use replace hasownproperty stop put back way worry extra byte hand maybe damage readability could looked convenient shortcut another alternative would abstracting behavior using macro write prototype converted p build time course declaring p somewhere seems overly complicated relatively minor size optimization speaking wonder closure something like already curious community think reference un minified source size optimization var decl var clone new dummy prototypal cloning datakey property declaration object metadata stored want pas object decl instead function put metadata parent partial etc property datakey decl proto used prototype declaration object property available property inside body declaration proto extend perform prototypal inheritance calling extend within param ctor extend prototype parent ctor extend ctor datakey extend ctor prototype augment finish partial declaration todo test bug possibly retroactively fix child class augmenting parent param ctor augment prototype partial ctor augment ctor datakey augment ctor prototype decl create prototype constructor param declaration decl declaration declaration declaration else declaration call declaration prototype proto declaration prototype datakey declaration set property declaration object metadata stored want pas object decl instead function put metadata parent partial etc property param use datakey decl datakey clone create copy simple param obj clone obj clone var r new clone clone prototype clone prototype r merge merge src property target param target merge property param src merge property target chaining merge target src var k src src hasownproperty k k prototype k datakey target k src k target prepare constructor returned decl param declaration constructor declaration var declaration call declaration new declaration datakey parent extend partial augment ctor user defined ctor hasownproperty constructor constructor ctor already defined partial partial partial generated wrapper parent ctor parent decl wrap parent generated empty new parent constructor use clone prototype copy property current prototype parent ctor prototype ctor prototype clone parent prototype merge ctor prototype merge declaration property constructor allows adding property constructor declaration without defining constructor defining one merge ctor merge declaration object property prototype merge ctor prototype constructor reference prototype ctor prototype constructor ctor decl outside closure wrapper function short lookup chain possible wrap generate wrapper parent constructor param parent constructor wrap child constructor decl wrap parent parent apply argument var decl p c var clone new dummy prototypal cloning datakey property declaration object metadata stored want pas object decl instead function put metadata parent partial etc property datakey decl proto used prototype declaration object property available property inside body declaration proto extend perform prototypal inheritance calling extend within param ctor extend prototype parent ctor extend ctor datakey extend ctor p augment finish partial declaration todo test bug possibly retroactively fix child class augmenting parent param ctor augment prototype partial ctor augment ctor datakey augment ctor p decl create prototype constructor param declaration decl declaration declaration declaration else declaration call declaration p proto declaration p datakey declaration set property declaration object metadata stored want pas object decl instead function put metadata parent partial etc property param use datakey decl datakey clone create copy simple param obj clone obj clone var r new clone clone p clone p r merge merge src property target param target merge property param src merge property target chaining merge target src var k src src hasownproperty k k p k datakey target k src k target prepare constructor returned decl param declaration constructor declaration var declaration call declaration new declaration datakey parent extend partial augment ctor user defined ctor hasownproperty c c ctor already defined partial partial partial generated wrapper parent ctor parent decl wrap parent generated empty new parent constructor use clone prototype copy property current prototype parent ctor p ctor p clone parent p merge ctor p merge declaration property constructor allows adding property constructor declaration without defining constructor defining one merge ctor merge declaration object property prototype merge ctor p constructor reference prototype ctor p c ctor decl prototype constructor outside closure wrapper function short lookup chain possible wrap generate wrapper parent constructor param parent constructor wrap child constructor decl wrap parent parent apply argument