writing parser parser generator peg trying figure report error grammar rule b c question message correct position num given num expected b c num expected c taken account b also expected position 1st expected b c want say b expected optional possibility requirement know possible expected message better correct 1st 2nd version thanks answer second part first case define marker testing limit position testing failure cp offset result limit moved optional expression optional expression testing b expression move testing po add failure second case define marker testing boolean flag testing failure cp offset result b expression case add failure tested inner optional expression think better correct num testing defined specific position expression position testing add failure even inside optional expression num testing defined flag flag set failure take account executing optional expression restore reset previous testing also failure take account rule fails reported parsing fails third part question raised related two different problem first problem parsing expression grammar peg describes three atomic item terminal symbol nonterminal symbol empty grammar use lexer hence concept token apply second problem grammar two grammar considered equal accept produce different result assume two grammar grammar num rule identifier grammar num rule identifier identifier accept produce peg different result grammar num result identifier identifier identifier identifier grammar num result identifier identifier identifier identifier question grammar equal painless optimization grammar answer question negative equal painless may ask happens answer problem feature peg grammar rule always consists part ordered choice sequence expression explanation answer question happens another problem peg token whitespace cannot silently ignored lexer token therefore whitespace considered inside grammar look grammar short program whitespace expr eof expr x whitespace whitespace eof first whitespace beginning whitespace often occurs end rule case peg optional whitespace must assumed expected whitespace mean space x20 also character like n r even comment rule message following possible display expected element possible display least one set expected element correct display anything precisely required display unexpected would display peg message whitespace expected parser expected whitespace parser expected n r start character comment also may part whitespace grammar case optional whitespace reject potential expected element possible correctly display whitespace message whitespace complex display good bad think bad required trick hide nature peg parser peg parser assume inner expression first position optional optional zero expression must treated expected inner except first position must treated expected example num list list ident list first position optional failure taken account reported expected skip enter really optional list move position first next real expected already outside testing position element list testing position inner expression inside optional expression fit limitation continue next position assumed expected assumption asked question must take account talking peg parser message