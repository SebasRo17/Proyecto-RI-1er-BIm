mathematica get slow large symbolic calculation cost putting term common denominator together particular get high occurred one small number variable much faster represent expression array coefficient implemented small package improvement factor speed memory putting together sum rational term less independent size sum seems able better post package hope someone might point glaring performance bottleneck first public initialization usability comment aa usage data structure aa num den store polynomial tensor coefficient basis multiplication tensor product polytoaa usage polytoaa poly var list return aa num sparsearray aatopoly usage aatopoly aa aa var give back rational function polynomial num den actual code begin polprod take care multiplying polynomial setattributes polprod orderless polprod integer time polprod sa sparsearray outer time sa multiplying polynomial tensor product vector space polprod integer sa sparsearray time outer time sa would cleaner object oriented call two instance polprod sa would force pattern matching would less efficient code performs arithmetic operation aa num den data structure aa integer aa num den aa num den absorb integer aa mean sum rule less pattern matching efficient overall efficient aa aa aa aa aa aa num den aa num den aa polprod num num den den aa aa num den aa num den aa num num den check sparsearray co might integer dimensional analysis get two array though aa aa num den aa num den aa polprod num den polprod num den polprod den den together rule recursive implementation treat sum many aa intentional cause minimises number array outer product calculated believe efficient maybe aa aa aa n integer n reverse polprod sequence constantarray ab n aa take care efficiency recursively pattern matching product rule large n dividing aa notice weird syntax bug n reverse two intances also post function go aa polynomial sake clarity completeness aatopoly aa aa var aa l sparsearray dot l sequence constantarray var depth l give rank tensor polytoaa expr n var list polytoaa expr var n polytoaa expr time plus var list polytoaa var expr polytoaa expr var list polynomialq expr var aa last coefficientarrays expr var num den benchmark define random small polynomial var range pol table randominteger randominteger deleteduplicates length first put together using code aa polytoaa var pol togaa sum aa aa length pol absolutetiming bytecount aa sparsearray sparsearray without implementation togpols sum pol pol length pol together absolutetiming bytecount check give result togpols aatopoly togaa last var simplify last togpols togpols together