case source level operator actually describes operation take place future point thunking real operator together operand know kind general perhaps low level design element thought pattern anyway element frequently seen number situation understand correctly frequent c user boost phoenix represent lambda lazy operation e g overloading actually capture argument along real parser combinators functional language something like spirit look like operator actually build parser run later edsls language operator overloading seem lot e g functional reactive programming library tend build procedure operation look like right understand correctly io haskell build imperative computation pure component executed dark magic hidden language runtime looking like executing function place simpler level embedded mini lisp c program could considered thing expression built call c function later last one would probably usually considered antipattern case letting look like passing lambda c really passing interpreter obviously antipattern case way use tool question c might earn one beating though think using generic widely applicable think interpreter pattern although may correctly understood one computation built directly executing host language effectively exists compile time usually first language construct rather parsed runtime loaded case seems happen operation look like one thing necessarily convincingly c need write add instead overloading idea actually packaging action later consumption something like computation builder pattern found term use practical problem solve bugging seems common design element put question originally posted stackoverflow moved hand