disclaimer parallelization cluster question probably interesting probably worth read tl dr search communication model preferably compatible mpi efficiently assures processed read next paragraph well know mean consider following problem algorithm take case integer fixed size produce various line need processed algorithm unique need processed since outcome purely deterministic set unique line finite finite number recursive call algorithm produce whole set goal find set already implemented algorithm also implemented parallelization obviously since need process unique time currently unprocessed line may processed different processor parallel hand parallelization introduces problem keeping different processor redundant work trivial implementation would send line processor collect result distribute may inefficient since possibly large result list merged work may done list returned around time master overwhelmed sheer amount slave idle merging done far think improved communication model still basically master slave master distribute initial chunk line slave least one active slave active slave request slave set slave inactive break else previously processed break endif inactive slave send inactive slave mark slave active send sending slave notification process else notify slave process sent endif endif endfor slave wait request available send wait master say processed process necessary go back beginning else notify master wait master send process received go back beginning endif slave manages local list processed unprocessed line request one element unprocessed one moved processed one unique entry among list stored conclusion master know full set processed line slave process master say previously processed master know result requested available line slave far think model communicating list processed line pretty efficient new world parallelization especially world parallelization cluster way efficiently communicating line among several processor assure processed exactly question basically bound combination c mpi though answer reflecting way message passing interface work greatly appreciated