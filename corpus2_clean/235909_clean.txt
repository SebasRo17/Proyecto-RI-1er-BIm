currently refactoring existing design created without tdd hierarchy one abstract base two subclass original design class mostly holder without much behavior identified functionality implemented base like write test functionality since abstract cannot instantiate obviously note functionality like test invoke pure virtual method base abstract test base possible assert eq amazing result edit clarify thing inheritance actually make sense situation subclass map specific domain concept polymorphism help keep surrounding clean behavior used subclass need common class think make sense put common super think several possible solution none seems optimal add subclass test implement pure virtual function downside hard subclass concise way understanding test becomes harder instantiate subclass instead downside make test pretty confusing add empty implementation base downside abstract anymore tend towards option num make test clear possible really satisfied better way aware