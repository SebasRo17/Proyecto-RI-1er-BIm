start one however work way wanted vendor evaluation beginning project spent time survey existing open source library used building block larger library despite effort number library come across several month project found missed library earlier might made design decision differently architecture compatibility understood beginning single library could satisfied requirement several existing library needed along custom implementation fill gap library would wrapped single architecture user need know internal construction library efficiency multiple aspect summarized cpu time ram disk space wasted driving force architectural design wrapper need equally efficient beginning know open source library would compatible design sense wrapper introduce inefficiency would required pioneering work find quality one open source library num year old another library num year old prevailing thinking open source library older library supposed stable fewer bug eventually discovered opposite ended fix number bug older library original hypothesis take lot intelligence succumb take lot experience reviewing project came conclusion software reuse like matchmaking notion missed opportunity occurs naturally due chance amount intentional effort reduce missed opportunity take succumb invented syndrome order achieve highest degree software reuse time satisfying software requirement perfectly added num num num one reason missed good candidate library ruled early process num library initial list pressure find rule quickly eliminate candidate otherwise would spent much time analyzing analysis paralysis however fast track elimination caused undesirable effect rejecting one good library like hiring