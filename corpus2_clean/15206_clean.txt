large binary data file big endian million row element combination float integer format real real real real real real real real real integer integer question read data file quickly related exactly reading whole file like str openread filename binaryformat true data binaryreadlist str real real real real real real real real real integer integer byteordering requires lot lot memory end throw away data time usually interested th real ndint row would like read th real nd int row possible skip rest tried use skip documentation clear work binaryreadlist get error skip readf real valid format specification documentation describe skip byte byte str openread name binaryformat true count filebytecount name reading table skip str byte binaryread str real byteordering skip str byte binaryread str integer byteordering count absolutetiming edit code work slow minute load file take second binaryreadlist however memory overhead order magnitude lower edit skip appears slow much slower setstreamposition reason wrote new code us setstreamposition precomputed list streampositions byte twice fast skip version okay still x slower binaryreadlist po range filebytecount name data setstreamposition str binaryread str real byteordering setstreamposition str binaryread str integer byteordering po absolutetiming hopefully someone idea improved memory usage still low expected willing tolerate slight slow maybe x x considerable memory saving gained would great process could sped well really easily provide copy data file megabyte tried write code generates random data writes file however binarywrite appears extremely slow fast machine solid state drive going kilobyte per second code regardless maybe someone know faster way make random binary data file make mb file outputstr openwrite randomdata binaryformat true real randomreal ints randominteger flatten transpose join transpose real transpose ints binarywrite outputstr real real real real real real real real real integer integer byteordering close outputstr