simple elegant way implementing rewrite system defined begin aligned sigma n alpha alpha alpha sigma bigcup n f f f f p left begin aligned rightarrow rightarrow alpha rightarrow alpha alpha alpha rightarrow f alpha alpha alpha end aligned right end aligned given set terminal symbol sigma set nonterminal symbol n set function f set rewrite rule p starting arbitrary well formed sentence grammar g sigma n f p system apply rewrite rule non terminal resolved producing sentence like f f f f update specification terminal nonterminal symbol e g string symbol sigma n replaced function f left intact though symbol inside replaced therefore g initial sentence replaced e g g applying th rule g b b function evaluate immediately result non terminal symbol random choice repeate time repeate time f held termination rule applied randomly fit could chosen certain replacement present struggling recursively applying structural replacement held rule becoming complex convoluted must simpler way concerning mathematica design effective rewrite system though idea start exploit e g regular expression update example example follows note used stringexpression replaced list similar terminal b c e f g h nonterminals b c function f g h initsentence g b indicates zero g rule b b c immediately choose terminal rh c e f g h b b b f e f evaluate f choose e f g h c b g c evaluate g c must replaced later b b h e c f f c c g starting initsentence one possible process valid outcome would g b initial sentence g g b g repeated randomly g g b rule applied g g g c b rule b g c applied g g g c b rule applied g g g f f b rule c f f applied g g g f f b c rule b b c applied g g g f f one terminal randomly chosen terminate evaluate g f point grammar represented set rule probabilistic e g random choice applied random way e symbol step random fitting rule applied