planning architecture mid large scale mvc web application implement layer decoupled possible easy test basically follow best practice let say using first access struggle define business logic meant interact layer taking vehicle sale application example would business logic class performed task calculating tax band given vehicle comparing mile per gallon statistic etc business entity e g car motorcycle would put layer along datacontext also would constitute application logic opposed business guessing thing like session user validation example car controller might action view result list top ten car filtered best mpg let say injected controller using repository pattern di filter car action parameter e g var car hatchback kept access knowledge controller using repository keep business logic controller using domain model var result new car let say need calculator need perform additional logic calculate best fuel efficiency loading filtering entity db set view render used repository retrieve access layer domain specific process perform business related task making mistake still need use repository pattern interface decouple orm test topic concrete access classe dbcontext layer interface definition go domain business layer meaning access technology ever changed layer effected studied thus far structure look like mvc internet application standard internet project model viewmodels domain business layer business specific class model controller use process domain entity layer passing relevant view repository abstraction necessary hear lot debate especially using orm layer entity class car van motorcycle dbcontext concrete access technology layer apology example make sense trying learn best pattern without making application unnecessarily complicated