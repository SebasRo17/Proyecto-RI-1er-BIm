like implement franklin reiter related message attack see section boneh paper part implementation require compute gcd two polynomial mathbb z n x n composite integer whose factorization unknown however mathematica built polynomialgcd allows gcd taken mathbb z p x p prime compute polynomial gcds ring composite characteristic think question similarity one earlier question regarding computation inverse polynomial polynomial ring unfortunately enough math background solve question using answer previous one edit example per daniellichtblau request let n time consider following polynomial f x polynomialmod x x g x polynomialmod x x since x divide polynomial expect divide gcd well simply executing polynomialgcd f x g x return compute gcd ring mathbb z x furthermore running polynomialgcd f x g x modulus return error polynomialgcd modp value option modulus prime number zero ring characteristic composite number prime question actually compute gcd f x g x mathbb z x using mathematica edit pointed factorization n unknown therefore algorithm cannot use factor n however know n rsa modulus meaning form p time q p q prime general strategy use extended euclidean algorithm example r g x x x r f x x x find inverse leading coefficient r mathbb z n powermod using extended euclidean algorithm r polynomialmod r r x next inverse leading coefficient r mathbb z n obtained powermod using extended euclidean algorithm r polynomialmod r x r x inverse leading coefficient r mathbb z n powermod using extended euclidean algorithm r polynomialmod r r therefore gcd f x g x equal r x x notice h x gcd f x g x mathbb z n mid n h x also gcd f x g x mathbb z n gcd uniquely defined consequently x valid gcd well note step leading coefficient coprime n inverse would exist case seems reasonable say gcd exist ring