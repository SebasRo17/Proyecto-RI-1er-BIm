usually whenever want fetch aggregate root id use repository findbyid whenever started ddd thought factory pattern build new object meeting aggregate needing one two extra query load realized factory useful also create instance object already existing database tree relationship entity like project task number relation huge framework providing lazy loading since task nested complexity fully retrieved one query made project task different aggregate root retrieve persist task seems solution time project contain whole task tree still want aggregate root like feature project since avoiding query inside entity decided write relationship inside project service aggregate retrieve single project repo findbyid fetching task look like service new someproject task task 1 service task task 1 child 2 service task 1 num puzzled point num service represent entity relationship num declaring many instance service whereas service tended quite unique object num clear tree like project task num subtask num make look like complex necessary basically could summarize question take right approach would greatly appreciate comment reasoning mostly concerned degenerating overblown complexity still think keeping reference query repos outside entity implementation good goal