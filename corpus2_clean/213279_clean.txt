course text suggests creating facade completely abstract user interface domain layer ui us basic type need reference domain know give idea might look like example could equally apply language public facade public customer customer customer customer order note sure whether fact facade pattern heard defined differently elsewhere want get bogged terminology compared nothing ui call domain controller directly see advantage ui much independent change domain model implementation always risk major change anything representing order break thing seems able absorb anything else however seems sacrifice checking mean getting even simple property domain object convoluted need getnumber v facade thought would better ui reference domain object term interface rather plain object example public facade public iorder icustomer customer customer customer customer order even domain controller exposed interface type forgetting facade altogether far see better checking point view major change e g removing order system break thing plain solution method stable e g getnumber specified interface calling ui simpler orientated obviously applies method whose signature stable avoid breaking ui implementation still free change something missing interface solution drawback spotted completely different better solution though