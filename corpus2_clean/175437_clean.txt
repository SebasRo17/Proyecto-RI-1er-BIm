let say test test public point p new point num num p num assert num p test cause create point public point double x double public double throw new ok fails good remove exception get green great course need test change write test call p num check p equal num fails change look like public double great green move tested moving moving positive direction naturally test negative problem test wrote test correctly fail first mean fit principle red green refactor course first world problem tdd getting fail first helpful show test fail otherwise seemingly innocent test passing incorrect reason could fail later written wrong might problem happened num minute later happens poor sap two year later know work negative value test telling really could work bug test think would happen particular case sample simple large complicated system might case seems crazy say want fail test important step tdd good reason