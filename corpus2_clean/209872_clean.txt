lately seem get enough amazing async await pattern c num life absolutely thrilled simple syntax one small difficulty problem async function totally different declaration regular function since async function await async function trying port old blocking async domino effect function convert people referring zombie async get bite keep getting bigger bigger porting process difficult throwing async declaration wrapping task annoying porting old synchronous seems much natural type async plain old sync exact syntax case porting take zero effort could switch painlessly two form think could work follow rule num async function require async declaration anymore type wrapped task identify async compilation task wrapping automatically needed num fire forget call async function want call async need await hardly use fire forget anyways example crazy race condition deadlock always seem based think confusing touch synchronous mindset try leverage num really live without fire forget special syntax case part simple unified syntax talking num keyword need denote asynchronous call await await call asynchronous call plain old synchronous remember fire forget anymore num identify async function automatically since special declaration anymore rule num make simple await call inside async could work missing something unified syntax much fluid could solve zombie altogether example assume async await call inside assume regular sync await call inside let try combination see common synchronous case block b1 common asynchronous case block b2 await choosing call asynchronous synchronous manner block syntax used previously async fire forget synchronous b3 strange combination block since calling synchronous probably show compilation warning though b4 await note continuation interesting related discussion