universal construction wrapper sequential enables strong consistency condition concurrent object instance adapted wait free construction num presumes existence wait free queue satisfies interface requires one time consensus thread assumes sequential interface public interface fifo iteration enqueue return sequence number iterable max iterates sequence max public interface sequential apply invocation argument get response state response apply invocation public interface factory generate generate new default public interface universal extends sequential public implement universal factory extends sequential generator invocation new invocation universal factory extends sequential g generator g public response apply invocation max enqueue sequential generator generate invocation max apply apply implementation satisfying however since presumes determinism sequential really slow attempted add memory recycling public interface extends dequeue n dequeues n tail else assist thread public interface extends sequential copy public implement universal new universal init enqueue init public response apply invocation max enqueue c ctr max max max num c copy dequeue max c apply specific question regarding extension num implementation create multi threaded version num possible extend memory recycling without extending interface perhaps new method trivialize problem num implementation reduces memory thread return strengthened num num provided implementation one exist though correct num herlihy art multiprocessor programming