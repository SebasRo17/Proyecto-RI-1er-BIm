situation earlier evening gave answer question stackoverflow question editing existing done repository layer service example user debt want change debt userrepository service example getting editing saving answer leave responsibility mutating use repository retrieve example situation user private debt debt cent private getters public makepayment cent debt cent userrepository public user get appropriate user database comment received business logic really service model internet say got searching since never really consciously used service layer started reading service layer pattern unit work pattern far say convinced service layer used take example article martin fowler anti pattern anemic domain model object many named noun domain space object connected rich relationship structure domain model catch come look behavior realize hardly behavior object making little bag getters setter indeed often model come design rule say put domain logic domain object instead set service object capture domain logic service live top domain model use domain model logic domain domain logic validation calculation business rule whatever like call seemed exactly situation advocated manipulation introducing method inside however realize given either way probably method invoked using repository also feeling article see service layer considered fa ade delegate work underlying model actual work intensive layer application layer service layer defines job software supposed directs expressive domain object work problem task layer responsible meaningful business necessary interaction application layer system layer kept thin contain business rule knowledge coordinate task delegate work collaboration domain object next layer state reflecting business situation state reflects progress task user program reinforced service interface service expose service interface inbound message sent think service interface fa ade expose business logic implemented application typically logic business layer potential consumer service layer devoid application business logic focus primarily concern wrap business layer call translate domain common language client understand handle communication medium server requesting client serious contrast resource talk service layer service layer consist class method unit work action belong transaction second answer question already linked point application want business logic also might want validate make sure something evil requested logic belongs service layer solution following guideline answer came following approach us service layer usercontroller controller private userservice userservice public usercontroller userservice userservice userservice userservice public actionresult username amount userservice username amount redirecttoaction public actionresult view userservice private iuserrepository userrepository public userservice iuserrepository userrepository userrepository userrepository public username amount userrepository username makepayment amount userrepository public user get appropriate user database user private debt debt cent private getters public makepayment cent debt cent conclusion together much changed controller moved service layer good thing upside approach however look like anything original answer realize design pattern guideline rule set stone implemented whenever possible yet found definitive explanation service layer regarded mean simply extract logic controller put inside service instead supposed form contract controller domain layer domain service layer last least following original comment business logic really service model correct would introduce business logic service instead model