thinking one would go designing descriptive concurrency model oop language help simplify concurrency scenario programmer easy task concurrency hard read bunch software transactional memory actor model immutability etc etc exactly seem offer easy model either functional programming great concurrency parallel scenario time simply need mutate kind state locking considered bad atleast fairly easy reason basic level get deadlock territory anyways one way thought programmer could somewhat easier handle multi threaded scenario responsible thread safety per property basis ie class access property method really lock anything specifically one way make easier though would annotate method property concurrency indent rather locking specific try deduce performing lock assuming atomicity think good annotation would potential problem approach aware solve scenario like transaction help enforce programmer intent might even able warn potential deadlock racing scenario attribute thought far also note none mandatory strictly hint property preference none read write fair get access free exclusive shared load unknown many duration unknown nano brief long set access free exclusive shared load unknown many duration unknown nano brief long property instance get set set shared access might end reader writer lock need attribute control duration write set nano perhaps would use spinlock many read writes perhaps would use different lock many writes read etc etc method coupled read write pair similarly property case need one parameter numeric property typically update based condition also thinking instead passing new could pas operator amount way could lock calculate new see meet internal condition case update anyways struggling bit coming good attribute notation somewhat easy programmer wrap head reason help feedback deeply appreciated sorry long rant said easy topic