personal project tried stick mvc also made aware sticking mvc tightly bad thing make writing awkward force flow program odd way e simple function performed something normally avoid mvc related overhead beginning feel justified compromise manager program way manipulate think count part model part control feel natural separate instance one manager method playercharacter playercharacter skill skill changename playercharacter list playercharacter player player list playercharacter hope name transparent enough need explaining called manager help manage playercharacter model object creates create keep map may also get store information future plan another two similar class sort control orchestrate happens returned via pure controller splitting control informed manager controller opposed operating controller seems like simplify make flow question dangerous choice term making harder follow test fix established good bad neutral find anything similar except idea actor quite trying edit perhaps example needed using controller update view access click add new character player button call method controller go tell create new character instance call playermanager add new character player character map add information database tell view update gui effected sort control sequence hoping create manager class