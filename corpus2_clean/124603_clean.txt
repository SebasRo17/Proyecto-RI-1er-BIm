correct design felix currently us len num var num upto len num println done done inclusive upper bound necessary support full range value typical integer however shown support zero length array hence special test subtraction num work convincingly length equal number integer say convincingly may num num c unsigned sure unsigned without thinking carefully integral promotion actual implementation correctly handle num requires two test implement continue bound goto break body bound goto break goto continue break throw hand coded zero check example three test needed exclusive would handle zero properly avoiding special test way express upper bound maximum size note c way num predicate increment problem predicate tested increment terminating increment universally valid general argument simple exclusive enough promote index large prevent overflow assume one ever maximum entirely convinced promoted c size looped second largest largest get infinite