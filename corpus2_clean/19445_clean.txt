following problem would like control evaluation variable point list example frequently code function form supposed work large list modifying frequently updatelist list newvalue index list index newvalue used many time list updatelist list get immediately list problem list get evaluated immediately one careful assignment statement fails tried solve defining attribute updatelist holdall work realized get complicated since passing list quite bit around rather big package function hold would actually like second third argument holding others tell truth feel control behavior sometimes evaluates sometimes driving crazy reason save memory one could course use following definition updatelist list newvalue index newlist list newlist index newvalue use like list updatelist list effect consume quite bit memory list huge trying control memory usage updating storage guess trying use pointer serious example would updatelist list args block indicies newvalues indicies figureoutindiciestochange args newvalues figureoutvaluestochange args list indicies newvalues even nasty example actually happens updatelist list args block indicies newvalues indicies figureoutindiciestochange args nestedcalltoupdatethelist list newvalues figureoutvaluestochange args list indicies newvalues list third argument even last nestedcalltoupdatethelist list big loop list dynamicindicies dynamicvalues principle open question update long list part efficient way list passed several layer functional call way achieve without using holdall perhaps using direct hold functionality anyway would like learn control edit based comment would like add another requirement assume done within function possible bullet proof way would updatelilst fail please used hold list argument updatelist list hold work list edit way test whether argument evaluated function p tried hold tricky since make assignment held variable