going write code compete performance newpgen goal sieve number small factor mine slow compare newpgen code random randomprime list table k random k counter list index divisible list index prime p list index counter index p improve sieve less time updated timing initial code noticed remove list processing code whopping x speedup would occur timing divisible n prime p list delete list position list n counter n list p second sieve th prime second sieve th prime fold increase achieved speedup small k digit number problem second implementation number k digit guess iterating first loop would make code slow optimize updated timing digit number sieving th prime daniel lichtblau second solution daniel lichtblau first solution simoon wood b gatessucks timing digit number sieving th prime daniel lichtblau second solution daniel lichtblau first solution simoon wood b gatessucks timing digit number sieving th prime newpgen anybody know sieve method daniel lichtblau second solution edit dl hope pardon edit feel free change delete like wondering comparison think number generate k random form actually used newpgen code look like might plausibly get want generate value bit digit seedrandom k random randominteger k k k list table k random k size check length integerdigits first list changed product set simply prepend rather multiply element real difference wanted try npower pprods apply time table prime range j j j npower pprods prepend pprods test timing re last reap gcd n prod sow n break prod pprods n list length re null second also second somewhere around geometric mean actually know newpgen possible involves aggregating prime product way effective end dl edit