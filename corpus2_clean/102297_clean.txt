think programming novice learn object day num seen book object first practical introduction using bluej david barnes think bad idea unfamiliar book list topic discussed chapter chapter num deal fundamental concept orientation object class method give solid hand introduction concept without going detail syntax also give first look source using example graphical shape interactively drawn second example simple laboratory system chapter num open definition investigates source written create behavior object discus define field implement method also introduce first type statement example implementation ticket machine also look back laboratory example chapter num investigate bit chapter num picture discus interaction multiple object see object collaborate invoking method perform common task also discus one create object digital alarm clock display discussed us two number display object show hour minute second major example examine simulation email system message sent mail client chapter num continue building extensive structure object importantly start using collection object implement electronic notebook auction system introduce collection time discus iteration collection first look loop first collection used arraylist second half chapter introduce array special form collection another form discus implementation web log analyzer example use chapter num deal library interface introduce standard library discus important library class importantly explain read understand library documentation importance writing documentation software development project discussed end practicing write suitable documentation class random set map example class encounter chapter implement eliza like dialogue system graphical simulation bouncing ball apply class chapter num titled well behaved object deal whole group issue connected producing correct understandable maintainable class cover issue ranging writing clear understandable including style commenting testing debugging test strategy introduced number debugging method discussed detail use example diary appointment scheduling implementation electronic calculator discus topic chapter num discus formally issue dividing problem domain class implementation introduce issue designing class well including concept responsibility driven design coupling cohesion refactoring interactive text based adventure game world used discussion go several iteration improving internal structure game extending functionality end long list proposal extension may done student project chapter num num introduce inheritance polymorphism many related detailed issue discus simple database cd video illustrate concept issue inheritance subtyping polymorphic call overriding discussed detail chapter num implement prey simulation serf discus additional abstraction mechanism based inheritance namely interface abstract class chapter num introduces two new example image viewer sound player example serve discus build graphical user interface gui chapter num pick difficult issue deal error several possible problem solution discussed exception handling mechanism discussed detail extend improve address book application illustrate concept chapter num step back discus detail next level abstraction structure vaguely described problem class method previous chapter assumed large part application structure already exist made improvement time discus get started clean slate involves detailed discussion class implement application interact responsibility distributed use responsibility collaborator crc card approach problem designing cinema booking system chapter num try bring everything together integrate many topic previous chapter book complete case study starting application design design interface discussing many important functional non functional characteristic implementation detail topic discussed earlier chapter reliability structure design testing etc applied new context