user interface asp net mvc would example need load list product show let u assume call productrepository getproducts layer productdata actual stored product would like seperate frontend ui accessing layer directly would best interface say would implemented productdata productcontroller would interface directly productrepository controller even know productdata frontend exposed interface would make sense model say rather actual interface backend would bridge productdata always like think two seperate entity developing frontend backend case entity developing frontend would know productdata interface model exposed api developed entitiy developing backend make sense taking seperation extra un needed level personally think best scenario would frontend access frontend even know productdata call frontend make backend service would backend would translate result layer model find creates best seperation layer quite cumbersome implement time involves lot redundant copy property layer frontend model