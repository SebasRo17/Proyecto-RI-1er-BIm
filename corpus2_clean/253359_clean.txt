whether handling throwing exception good bad contentious exception control flow considered serious antipattern common exception exceptional circumstance library author decided throw exception library author cannot predict might exceptional circumstance u course cannot rule exception thrown must use permitting exception bubbling top unacceptable must catch exception often however take preventative measure sufficient effort might even able guarantee condition library would throw exception never occur throw still choice eliminate need try catch example std map pretend std map find general wisdom good taste write expectation library occasionally throw client obligated minimize use exception edit try distinguish past question concrete suppose library might throw file found exception client want use library access file client programmed expectation file sometimes exist even circumstance client made able check library throw exception called non trivial client pile additional checking top checking within library client use library generated exception control flow case adding handling top library almost certainly less efficient catching require less coding could argued must try catch anyway hand decidedly control flow mechanism