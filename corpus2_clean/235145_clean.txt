working feature depends time organize unit testing unit test scenario depend way program interprets set second edit couple day reading experience see technique deal situation usually revolve around one three principle add hardcode dependency add small layer time always call datetime layer way get control time test case use mock stay exactly test replace time fake time sometimes solution involves modifying genuine time provided programming language use dependency injection build time reference passed parameter control parameter test technique library specific language welcome enhanced illustrative piece come along interesting similar principle may applied platform yes apply straight away php better better let start simple example basic booking application let say json api two message request message confirmation message standard scenario go like num make request get response token resource needed fulfill request blocked system num minute num confirm request identified token token issued within num minute accepted resource still available num minute passed make new request resource freed need check availability come corresponding test scenario num make request confirm immediately token received confirmation accepted num make request wait num minute confirm token received confirmation accepted num make request wait num minute confirm token received confirmation rejected get program unit test architecture use functionality remain testable edit note shoot request time stored database format loos information millisecond extra maybe bit verbose come detail found homework num built feature dependency time static get time call used call new datetime time allows simulate control time build test like set 21st jan num make request move ahead num minute make confirmation work fine cost dependency pretty num little integrated solution would build extends datetime additional virtual time functionnalities importantly set want making first solution slightly elegant use new instead new datetime end similar build feature using thus creating dependency num though hacking datetime make work dependency need simple neat way replace another though think got answer see namespace num php environment read runkit may allow hack datetime dynamically nice would able check running test environment modifying anything datetime leave untouched production num sound much safer cleaner manual datetime hack num dependency injection clock us time num overkill see environment get usefull num case like much though num remove dependency time function num always feasible see example num using namespaces num num look quite good could mock datetime datetime extends datetime use datetime num num num num num num datetime wait num minute cover pretty much need use time though time function still avoid use original would need make sure php time use overridden test library available would num looking way change system time thread seems none num pity simple php set time 21st jan num thread would great feature kind test num change system date time test using exec work afraid mess thing server need set back system time ran test trick situation feel quite hacky look like standard problem however still miss simple generic way deal maybe missed something please share experience note situation may similar testing need feature work kind timeout e g chess game processing queue trigger event given time scenario could keep going like one day reservation start want send mail user detail test scenario want set test environment collected past would like see like num num num simulate different server datetimes php num num change current time unit testing date function php num num num php mocking built function like time unit test num num change today date time php num unit testing time bound