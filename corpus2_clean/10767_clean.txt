rather specific question apologize spamming lengthy code could interesting reader maybe help please bear using spherical harmonic method solve radiative transfer problem spherical symmetry namely penetration diffuse uv radiation interstellar cloud us expansion legendre polynomial approximate depth angular dependence problem working solution interested additional input elegant simpler way set solution intensity varying value omega scattering albedo g mean scattering angle langle co theta rangle solution monochromatic still relatively slow real application one need perform calculation wavelength grid numerous time speed solution neat mathematica could radiative transfer efficiently higher approximation order solving eigenvalue problem getting list boundary condition becomes extremely slow idea improve got far first definition definition modified spherical bessel function first kind sphericalbesseli sphericalbesseli sphericalbesseli l z sqrt z besseli l z expansion coefficient henyey greenstein phase function l g g l diagonal matrix element h l g h l g l l g low order determinant f g k f g k h g f g k f g k h g h g k f l g k f l g k h l g f l g k l k f l g k helper function access th eigenvalue k kev mmatch inconsistent list eigenvalue kev list list integer module po neg po select sort list positive neg select sort list negative length po length neg length po positive po neg message kev mmatch failed calculate eigenvalue calculateeigenvalues l g nsolve f l g k k r g k r g k r g k r g k k r l integer integer g k r l g k l r l g k r l integer g k r l g k l k h l g r l g k l k r l g k mark boundary condition getangles integer sort select list nroots legendrep x x equal x x negative b integer integer g numberq numberq lmax taumax numberq k angle sum l r l g k legendrep l angle sphericalbesseli l k taumax l lmax procedure set function calculate mean intensity averaged full solid angle function optical depth tau specific intensity function optical depth tau angle mu co theta createsphericalharmonics g taumax l oddq module l angle eigenvalue keigenvalues alist angle boundary condition mark condition angle setprecision getangles infinity calculate eigenvalue recurrence relation f eigenvalue setprecision calculateeigenvalues l g infinity calculate k boundary condition e incoming intensity edge sphere angle equal assuming isotropic illumination give constantarray mmax alternatively could define mu declination dependent alist linearsolve n setprecision table b g l taumax kev eigenvalue angle infinity n setprecision constantarray infinity n prevent linearsolve luc error output two interpolationfunctions mean intensity function tau intensity function angle optical depth tau function tau sum alist r g kev eigenvalue sphericalbesseli taumax tau kev eigenvalue function tau mu sum l legendrep l mu sum alist r l g kev eigenvalue sphericalbesseli l taumax tau kev eigenvalue l l demonstrate solution let assume g albedo omega approximation order legendre polynomial l incoming intensity optical depth cloud center tau c meanintensity intensity createsphericalharmonics polarplot intensity co mu intensity co mu mu epilog dashed line co arccos sin arccos getangles polar plot intensity wavy curve approximated intensity function angle mu surface cloud dashed line show angle used specify boundary condition olive curve show angular dependence intensity tau angular averaged mean intensity plot log meanintensity tau meanintensity tau plotrange plot angular mean intensity pretty sure plenty bug still code point post rather performance coding style