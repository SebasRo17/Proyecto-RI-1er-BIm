working mvvm recently started using want know create view viewmodel presenter app using pattern mvvm would typically build application using hierarchy view corresponding viewmodels e g might define num view follows view view model view would follows public public text get public child1 get set public child2 get set public public text get b public public text get c would template say presented using view b view c datatemplate datatype staticresource local local datatemplate datatemplate datatype staticresource local local datatemplate final step would put would assign value child1 child2 public child1 new child2 new result would screen look something like enter image description would fairly simple simply moving constructor public public viewmodel child1 new viewmodel child2 new want business logic would need problem im sure best place put could store reference presenter child1 child2 e public private private public new new viewmodel child1 viewmodel viewmodel child2 viewmodel solution seems inelegant compared mvvm approach keep track presenter view model ensure stay sync example wanted button view clicked swapped view child1 child2 might command following var temp viewmodel child1 viewmodel child1 viewmodel child2 viewmodel child2 temp would work far swapping view screen assuming correct property change notification place pointing presenter child2 pointing presenter child1 something access change actually happen child2 imagine leading sort debugging fun know may misunderstanding pattern case clarification im wrong would appreciated edit question wpf design pattern asp net mvp