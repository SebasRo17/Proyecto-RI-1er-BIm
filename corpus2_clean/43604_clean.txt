need generate large directed acyclic transitive graph code mathematica get slow large number vertex tried number approach find significant improvement speed graph generated follows given list alist size n randomly generated point tuples real boolean edge function f acting pair point generate graph n vertex labelled integer n whose edge found follows f alist alist j true iff j property f always resulting graph transitive dag explicit example list point tuples case n alist sort table randomreal randomreal n edge function f j alist j alist ab alist j alist want generate graph thought either finding rule edge using reap sow computing adjacency matrix approach tried slow large n different approach r reap f j sow rule j n j timing r paralleltable f j rule j n j timing r paralleltable f j n j timing null null null approach slow n already generate boolean adjacency matrix way c take second instead second way improve performance mathematica perhaps using compile tried tweaking different thing without much success given background motivation like happy explain