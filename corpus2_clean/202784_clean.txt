even reading bunch still falling trap usually enity need implement one similar operation feel wrong seemingly arbitrarily choose one operation belong inside entity push others separate end pushing operation service class left anaemic domain crude example imagine typical employee numeric property hold many paid day employee entitled sickness holiday collection day taken public employee public get set public get set public ienumerable holiday holiday get set public ienumerable get set want two operation one calculate remaining holiday another remaining paid sick day seems strange include say employee bump would end anaemic employee entity seen alternative would put operation employee kick single responsibility curb make particularly maintainable suppose employee initialisation validation logic accepting negative etc maybe stick basic initialisation validation entity happy separate calculator class maybe asking anaemic domain actually causing tangible problem