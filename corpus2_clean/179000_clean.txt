question title want thinking verified experienced people add disregard opinion give reason example requirement suppose required implement fighting game initially game includes attack fighter punch kick block incoming attack various fighting style kung fu simple universe game oo like implemented similar way abstract fighter hp attack punch fighter kick fighter block extends fighter implementation extends fighter implementation extends fighter implementation fine game stay like forever somehow game designer decide change theme game instead simple fighting game game evolves become rpg character fight perform activity e character priest accountant scientist etc point make generic change structure original design fighter used refer person anymore refers profession specialized class fighter create generic named person however adapt change change signature original operation person hp attack list profession skillset abstract profession fighter extends profession punch person kick person block person extends fighter implementation extends fighter implementation extends fighter implementation accountant extends profession calculatetax person p implementation calculatetax company c implementation profession problem num adapt change fix place changed method called refactoring num every time new requirement introduced current structural design broken adapt change lead first problem num rigid structure make hard reuse accept predefined type cannot accept future unknown type written bound current universe way accommodate new type without modification rewrite scratch see lot deprecated method oo extreme case inheritance add complexity general statically typed language type strict contrast dynamic language handle case follow punch defun perform punch implementation kick defun perform kick implementation block attack defun perform block implementation anything long required calculation method duck typing change fighter person case lisp lisp single structure list even easier adapt change however dynamic language similar behavior well work primarily static language mainly c working long time ago started learning lisp dynamic language year see help improving productivity