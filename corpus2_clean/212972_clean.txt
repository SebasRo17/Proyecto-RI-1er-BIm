know question simple answer ask reading tutorial know well known series let build jack nice series gradually learn construct learn thing really second chapter already felt need optimize thing series made order keep thing simple difference lexical scanner although believe introduced later series generation done one go also author heavily relies stack create handle expression also assembly know normal compiler thought mention example parsing expression num num num num num storing result eax result roughly following use x86 asm opposed series assembly gave push num line generated simple number parser push num parser push result stack push num like parsing function pop eax multiplication pop ebx mul ebx push eax push num result parsing number push num pop ebx division pop eax div ebx push eax pop ebx subtraction pop eax sub eax ebx push eax pop eax addition pop ebx add eax ebx push eax see handling addition subtraction multiplication etc stay time operation used convenient course assembly generated slow esoteric writing hand one would rather write something like mov eax num div num mov ebx eax mov eax num mul num sub eax ebx add num question way optimize course specific way make like second ie using stack intensively instead relying register pas value thinking parsing whole expression representing internally tree like structure kind thing lexical parser generating entirely sure proceed hand optimization possibility optimize assembler generated idea effective generating better first place seems logical feasible know many technique available optimize example constant folding would reduce whole expression num deliberately used kind optimization bring point across better hoping single technique well suited kind stuff