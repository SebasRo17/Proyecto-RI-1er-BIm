consider following situation one hardware device two application num c application num firmware c application sends frame firmware firmware executes script c transmit frame x fw receive frame x fw execute script relating frame x fw finished fw event triggered forcing moving part stop safety precaution c requirement event raised poll fw status status stopped send resume fame caveat c logic therefore need adjust restarted situation seeking advice design handle pausing restarting task unlimited number time write convoluted method hard maintain chain logical statement struggling finding design reusable clean scenario num unique task finding solution apply everytime would save lot headache anytime script restarted resumed physical user easily cause safety trigger stop therefore solution need robust sure recursion would first good step worried stack limit potential introduce error clarification bid simplify thing seem omitted much apology firmware software running physical device control hardware control base designed independently allowing usb communication synchronization little synchronization c application firmware c send frame byte match specification document firmware frame valid firmware reply saying received frame begin work direct synchronization task described frame typically two attribute time take execute need manually observe end target status complete status identifier currently poll firmware status target status reached time recursion meant complete pause user done something device wait fix happen time time firmware running job restart user amended state start job beginning left task dependent