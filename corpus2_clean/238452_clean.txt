testing correctness important whether strict tdd test really way project scale size beyond point every team member reasonably keep knowledge loaded brain point test imperative order ensure future modification break old logic burning lot resource thing manually majority people understand stated much argue however without much c background lot open interpretation naively test likely simply mean run paint entire picture without much concern proper testing experience people tend generate bunch integration functional test asked write unit test whether privy testing nuance whether simply choose ignore interest time like testing result get project bunch confused test test really respect unit functional integration style testing word get test clear purpose exercise much possible frustrating becomes increasingly cumbersome parse result test meaningful information test fail remote server logic incorrect unit test failing swap un related system component x component illustrate distinction way someone engineering get done mindset identify essence make people care distinction indeed recent android testing meetup twitter team asserted full blown testing software project project require resource slip testing side think much resource must allocated developer must take seriously good start throw retrospective resource attention already written curious approach work remedy confused test landscape prevent confused test happening first place