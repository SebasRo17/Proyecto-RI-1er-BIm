question programmer seems love concurrency multi threaded program general considering num approach async approach basically based signal async approach called many paper language like new c num example companion thread manages policy pipeline concurrent approach multi threading approach say thinking hardware worst case scenario tested num paradigm async paradigm winner point get people num time talk multi threading want speed thing make good use resource tested multi threaded program async program old machine intel quad core offer memory controller inside cpu memory managed entirely motherboard well case performance horrible multi threaded application even relatively low number thread like num num num problem application unresponsive slow unpleasant good async approach hand probably faster worst either application wait result hang responsive much better scaling going also discovered context change threading world cheap real world scenario fact quite expensive especially num thread need cycle swap among computed modern cpu situation really different memory controller integrated point x86 cpu basically serial machine memory controller work way old machine external memory controller motherboard context switch still relevant cost application fact memory controller integrated newer cpu num core bargain experienced concurrent approach good theory good practice memory model imposed hardware hard make good use paradigm also introduces lot issue ranging use structure join multiple thread also paradigm offer security abut task job done certain point time making really similar functional point view according x86 memory model majority people suggest use concurrency c async approach also considering worst case scenario computer context switch probably expensive computation