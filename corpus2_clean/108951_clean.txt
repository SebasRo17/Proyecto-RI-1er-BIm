traditional gof proxy interface implementation implement interface proxy also implement interface reference instance implementation delegate call interface method method implementation instance say would call interface implementation pair fragment would several different pair imagine create whole interface implemented fragment interface single whole proxy implemented whole interface delegated appropriate fragment implementation instance example fragment interface implement whole interface client use interface extends empty automatically generated proxy implement private impla implement delegation impla fragment b interface implement whole b interface client use interface extends empty automatically generated proxy extends implement private implb implement delegation implb fragment c similar fragment b different added behavior pattern since pattern must common solution common problem got could cleanly defined combination pattern able clearly describe work term pattern would make much easier explain others create compatible help find framework already implement pattern proxy normally delegate single instance facade normally offer different interface multiple object hide bridge also offer different interface single instance hide composite expects component share base interface decorator extends interface wrapped like normally implement additional functionality instead delegating another object whole implement single fragment proxy pattern whole extends another whole closest decorator pattern several reason way firstly client see extending although implementer cannot extend implemented someone else secondly reference stay valid even implementation replaced runtime thirdly share instance