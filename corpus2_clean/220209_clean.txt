project involves validating normalising email address format tld syntactic validation address tld checked exist otherwise validation fails validation normalised num bit numeric id called one part part permanently stored disk new string discovered num byte seems sensible num byte enough around num million registered domain name process list new email quickly using array exact part mapped part id used array know use generally perform well although thread safe slight drawback use mutexes get round collision get hash table reduces complexity somewhat however seem taking much larger proportion memory like question would suggest better storage example case num bit system debian based num num num part averaging around num byte num byte total including num num 1gb used perhaps worth noting email evaluated converted format would come list varying 10k 1m row insert demand new part found assigned part written disk deletes required insert lookup need around 3x memory disk space order convert num byte better structure considering better hope reasonably fast smaller memory footprint preferably something pre written like library update tl dr original question converting length num bit strictly speaking case sensitive understand standard implementation ignore case case pun num valid character either domain part num bit worth thinking sacrifice num bit indicate direct conversion without lookup table allow conversion back bit would switched occur would prevent collision lookup leaving num bit num num id domain part fit messing around fixed length num num num bit length code based least frequent character huffman encoding would seem obviously win long avoids 2nd pas based distribution across part huffman manages yahoo gmail even hotmail squeezed num bit excellent num part mapped way huffman encoding num mapped num bit allow fixed length key list save memory try report back leaf less num part mapped still new layout help lot saving memory thanks suggestion far