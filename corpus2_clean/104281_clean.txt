ive struggled variant problem many time experimenting different solution happy none abstract enumerating list item one item affect others potential caller varying requirement treat error goal api use reduce complexity general case problem occurs would processing list independent item partial success acceptable desired e transaction example scenario dealing low level c style enumeration api like get called stuff item typedef bool stuff item call callback stuff item caller enumeration context callback stuff item num err stuff get next item item err stuff todo handle real error pas item callback stop enumeration requested callback item backward compatibility caller expectation want need preserve pure c style without exception higher level wrapper built top might look like std vector boost shared ptr stuff item caller may need one following strategy enumeration error occur stop enumeration first e g caller ignore entire list enumeration costly c client might want throw exception callback allowed ignore item e g enumerating connected device looking specific one available device found error handled separately ignore log diagnostics caller specific way e caller need know error caller need detailed list error analysis e g item may retried certain type error note caller choice force decision note context example idealized practice multiple enumerator involving different type sometimes provide enumerator sometimes enumerator come o information complex single underlying api involves dozen rather confusing type already want avoid introducing amount additional wrapper type bridging different development style actually part job description opportunity educating either end tricky pick battle idea solution provide separate callback error enables scenario bloat interface replace enumerator stateful increase number type provide backward style compatibility pas error enumerator sometimes bit better previous solution usually requires enumeration context structure instead separate argument go plan avoid additional type enumerator introduce caller either request list error result get stop throw first behavior default used end detailed information typically used build diagnostics liked make complicated deal error question thought idea used approach circumstance would use use approach