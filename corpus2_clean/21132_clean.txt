implementation testing quality random number generator implemented nist test suite mathematica based nice workbook ilja gerhardt however took challenge ilja complaining efficiency mathematica see provided link able speed test considerably using mathematica native function however costly test linear complexity test give trouble test straightforward see nist documentation however us linear complexity function based berlekamp massey algorithm current implementation algorithm look like linearcomplexity compile u integer module len b c p pinit tmp l len length u l c b join table len pinit table len mod u n take c l reverse take u n l n tmp c p pinit p n l n b l c mod c p l n l n l n b tmp n len l faster original cody ilja see link notebook reference example code return linear complexity binary sequence follows seedrandom tst randominteger linearcomplexity tst timing return however large binary sequence code still rather slow aware multiple shortfall would need advice fix first would like get rid loop case good idea within mathematica furthermore would like switch sparsearrays since long random binary sequence reduce size datastructure least random binary sequence one zero one potential implementation sparsearrays following code linearcomplexitysparse seq list module len u b c p pinit tmp l len length seq u sparsearray seq l c b sparsearray len pinit sparsearray len l mod u n mod u n take c l reverse take u n l n tmp c p pinit p n l n b l c mod c p l n l n l n b tmp n len return l memory efficient x slower since compiled seedrandom tst randominteger linearcomplexitysparse tst timing manage implement compile see following code linearcomplexitysparsecompiled compile seq integer module len u b c p pinit tmp l len length seq u sparsearray seq l c b sparsearray len pinit sparsearray len l mod u n mod u n take c l reverse take u n l n tmp c p pinit p n l n b l c mod c p l n l n l n b tmp n len return l since complaining c tensor multiple stuff seedrandom tst randominteger linearcomplexitysparsecompiled tst timing compile cplist c tensor type integer real complex evaluation use uncompiled function compile part part specification b l cannot compiled since argument tensor sufficient rank evaluation use uncompiled function compile cset variable c type integer encountered assignment type real compile cplist c tensor type integer real complex evaluation use uncompiled function compile part part specification b l cannot compiled since argument tensor sufficient rank evaluation use uncompiled function compile cset variable c type integer encountered assignment type real compile cret type return value module len u b c p pinit tmp l len length seq u sparsearray seq l c b sparsearray rule len pinit sparsearray len equal mod mod set set set set n len return l different evaluation use uncompiled function idea improve code get compiled point efficient implementation linear complexity measure mostly welcome