still learning good unit level testing always little sloppy functional testing past want double check right package responsible auto magically updating particular configuration expected change regularly runtime provide list object monitor constructor package point call update go multiple place define configuration detect change update appropriate state object monitoring provide report changed automatic otherwise transparent package inclination test unit pretty big unit num num class fetching multiple file restful interface feel like testing smaller unit would take much longer less flexible refactoring provide slightly higher chance detecting defect could laziness talking would considered better test lower level assuming right test package unit considered appropriate mocking something like method class instantiated ie something pas directly pas mock method want control believe use powermock two case think could research powermock sure transparent enough configuring powermock detect mock file time package try open configuration file even buried deep package logic acceptable considered abusing knowledge implementation specific detail would cleaner actually modify configuration file file system let read normally without mocking would need modify file regularly testing edit clarify question coupling asked one question think class overly coupled effectively three class fetch state b c take state three decides combine correctly ie b match use unless c could easily test b c separately mock test however seems like testing would effectively test comparatively simple interface b c anyways mock thus feel like duplicate work test individually may get slightly better coverage maybe individual testing always nice one test test one thing know worth overhead minor benefit