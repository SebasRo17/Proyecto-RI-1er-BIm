okay sound odd simple explains situation well public virtual async task user role var role await getrolesforuser user role role role role role await replace role know talking kind abstract actual actual production actually asking actually interested actually reviewing correctness vi vi async await pattern encountering pattern often using async await pattern consists following chain event num await initial call get information need work num work information synchronously num await final call save updated work block typically go handling method await first call asynchronous next work need io resource bound async finally save work also async call cargo cult await efficient correct way handle pattern seems could skip await ing last call fails use task continuewith chain synchronous work original call point right sure handling correctly given example better way handle async sync async call chain