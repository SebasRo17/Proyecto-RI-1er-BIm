working plone project team try achieve full test coverage least important product kind test write unit test functional test integration test also stress test scope question goal two fold least facilitate upgrade catch bug sometimes even happens process writing test however plone zope complex system year experience noticed test strategy thought first unit test often require use lot mocking cost efficient mostly easy beneficial core logic heavy functionality written like pure module negligible coupling plone zope database etc rarely seen unit test catching bug except writing usual thing writing view portlets experience much efficient write functional integration test rationale case plone zope change upgrade catch mishap view usually lot algorithmic logic glue together several source like catalog query maybe form handling preprocessing template quite often view call one tool routine job like getting navigation tree looking site root mocking seems unwise example sometimes plone zope change default another mocked test happily continue work fails real instance functional integration test may time fragile html change cheaper produce provide basic coverage trigger alarm underlying system change spotting source mishap usually issue update wrong spotting integration test fails big issue unit test usually help question overlooking something importance unittesting function class require mocking environment heavily instead purely logic heavy find justification writing unit test first even every piece plone zope mean core system addition client make question less opinion based reason mentioned tackled consider writing unit test less integration test situation heavily depends complex somewhat hairy framework serf glue framework subsystem