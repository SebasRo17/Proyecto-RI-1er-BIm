one soa service design principle service composability principle idea composing new service using existing one building block one rapidly develop new service kind analogously call exising method object implement new method much productivity boost soa supposed come enter image description someone really practice seen repeated endlessly written text experienced working real world implementation text also omits mention transaction handling seems biggest obstacle realizing composable service first really need tackle transaction problem compose non trivial service sure example service easy worry transaction real world example know two option num implement real transaction w atomic transaction num implement compensation based solution compensates call somesuch call b fails seem problematic close unusable w atomic transaction lot complexity advice found warns pain as dont support limited example take open source alternative mule support compensation implementing handling compensation seems complex service succeeds never get answer service b know failed succeeded handling logic manually implementor compositing service make want slit wrist kind work tool also dont see compensation method non trivial service say service succeeds action quickly transfer money elsewhere receive seems like big worm seems service composition fundamental soa principle really get benefit soa cannot conveniently compose service reality num soa user use soa without real service user fact use service composition exaggerating difficulty