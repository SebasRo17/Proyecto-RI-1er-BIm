trying test drive least write unit test model class noticed class end coupled since break coupling writing unit test becoming harder harder specific model class class hold application resemble pretty much pojo plain old object also method application big around num model class coupling give example think simple case order header order item header know item item know header need information header performing certain operation let say relationship order item item report item report need item well point imagine writing test item report need order header carry test simple case num class thing get complicated class come decoupled class design algorithm persistence layer ui interaction etc model class think way separate currently sit one big chunk class depend workarounds think num generator package generates sample model class example creates basic use unit test get instance orderheader problem generator get complicated pretty fast also need test generator defeating purpose little bit num interface instead dependency come interface get rid hard dependency example orderitem would depend interface unit test easily mock behaviour orderheader implement interface problem approach complexity model class would end would idea break coupling model class make easier unit test model class update going answer done little thinking problem noticed dependency really necessary answer pointed reason existed ui layer needed basically inserted dependency ui layer easily navigate child header display header field child level view looking look simple however took time figure dependency existed first place ui basically keep header context navigating child level view hand removed dependency via interface dependency mostly one one example header previously depended header retrieving information item date etc made hard test depends interface able achieve complete isolation easy test stub class interface look easy create abstraction ui layer model layer backend layer however reality really take lot practice