abstract trying get head around cohesiveness functionality base approached design different way lately convinced took wrong approach incorrectly applied single responsibility principle issue problem domain well otherwise known round hole ground current look something like set note full name keep thing short public public get set public icollection get set public icollection get set public icollection get set public icollection get set broke functionality operates several small class per public icollection double double depth double double depth double double depth double double depth double double depth public icollection double double depth double double depth public icollection double double depth double double depth etc realized lately looking glue back together make usable need application logic something like public private private private private proxy function glue back together thing led current mess well contains several collection information everything one function operate small subset time felt would create low cohesion month later feel thing actually belong together additionally several class need call one really solve issue thinking reading wikipedia article starting see committed programming sin anemic domain model low cohesion constructor injection try glue thing together giving depends access method need violated interface segregation principle solution looking design give much responsibility one god object yet maintaining good degree cohesion current thought fixing follows move functionality operates well help get functionality closer communicational informational cohesion public public get set public icollection get set public icollection get set public icollection get set public icollection get set operates collection double double depth double double depth double double depth double double depth double double depth operates collection double double depth double double depth operates collection double double depth double double depth next address issue several class needing one could make one separate interface way class need functionality depend interface inherit interface implement tie class functionality thought approach v original approach one thing bother thing way api using bastard injection fulfill required dependency right three required dependency survey calculator special reference different measured depth like move away seems point back toward service lifting