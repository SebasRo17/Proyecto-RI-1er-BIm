bunch class look something like public private graphic graphic private player player public graphic new graphic protected initialize player new player protected update player dostuff reading design pattern come understand good design loosely coupled instead coding interface coding implementation graphic player etc order fix perceived problem start changing dependency interface public private graphic private iplayer player public graphic new graphic protected initialize player new player sure helpful really nice graphic field example tied graphic use instead long class implement still hard dependency graphic player point refactoring actual much complicated also come understand dependency injection good idea try next public private graphic private iplayer player public graphic iplayer player graphic graphic player player look really nice longer hard dependency however dependency still moved instantiates static program static using var game new game new graphic new player game back started loosely coupled point refactoring pretty sure could use ioc container take care dependency somehow would likely add ton complication already complicated project plus moving dependency another stick first place tangible benefit seeing yet