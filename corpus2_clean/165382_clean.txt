tool involved gtk haskell question probably pretty trivial anyone done significant gui work equivalent cgi application whole career building application display tabular display graph form edit field entering new editing existing asking sharing resource decided involved stored every component read current state work time rearrange application interactive mind three widget textview editing treeview displaying displaying graph think need two thing core question right thing better way thing first event handler function called time redisplay needed need written high level passed actually construct widget begin instance core st core st io io io vbox core st core st io field graph area area field num graph num case build vbox contains graph potentially widget attache realize event would something similar treeview completely sure since yet done thinking would involve replacing treemodel every time treeview need updated alternative would core st core st io io vbox case would arrange like core st core st io field graph area area field num graph num graph realize graph field graph graph field sure better lead thing second necessary event system various event send signal way widget going need mediator kind pas event around translate application semantic event actual event widget respond better pas addressable widget call stack level mediator life pas mediator call stack widget register directly summary two question num pas widget call stack global mediator pas global mediator widget register num pas redraw function builder builder attach redraw function constructed widget pas constructed widget back higher level attach redraw function potentially link widget together okay num book wikis gui application architecture preferably coherent architecture people arguing minute detail application current form display write allow much interaction available application going root directory typing src h cabal build dist build fitness fitness may need install library cabal tell one