suppose private datacontext context public customer getcustomers getcontext context customer toarray public order getcontext context customer toarray sake example new datacontext required every public call private getcontext context context dispose context new datacontext thread safe two call getcustomers made time different thread may end using context context could disposed used even bug exist however still smell like bad much better design would getcontext always new instance datacontext get rid private field dispose instance done changing inappropriate private field local feel like better solution looked smell list find one describes past thought temporal coupling wikipedia description suggests term temporal coupling two action bundled together one module happen occur time page discusses temporal coupling example public api question internal design smell simply buggy