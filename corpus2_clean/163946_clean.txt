design question assume still best place ask simple server store mapping certain value uuid used many system across multiple platform accepts connection client creates clientsocket store socket relevant unique connection clientsocket thread block socket waiting read expect little strain system rarely get called get call need respond quickly due risk peak time multiple call coming threaded still better thread reference mapper store mapping uuid reporting others proper synchronization course work add new uuid list happens want report client care particular uuid new one added multicast limitation system running socket send message client established socket however since thread know socket waiting clear looking every thread socket care inform new uuid polling mostly seems little convoluted try maintain list newly added uuid solution parent creates mapper spawn thread pas argument mapper mapper creates new uuid make call parent telling send update socket care change concerned may bad design due use circular reference parent reference mapper pas new clientsocket thread mapper point parent really feel like bad design wanted check since circular reference suppose bad note realize mean thread associated whatever socket originally received request spawned creation uuid going pay cost outputting client care new uuid care said suspect client receive intermittent message unlikely one socket receive multiple message one time many socket take long send message perhaps later fix fact higher work load whatever unfortunate thread get first request think fine