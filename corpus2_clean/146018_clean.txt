context agile development appropriate amount learning engineer engage implementing solution problem engineer know ignorant given topic say compression start implementing go learns think need know implement solution clearly deeper understanding said topic could result better implementation cost agility flip side engineer learns little topic danger implement significantly insufficient broken implementation negatively affect customer immediate near future towards end scale guiding principle agile lead engineer agile leave sliding scale answer may different given situation update clear asking specifically agile say think right amount learning former specific answer latter subjective appropriate programmer update num rephrased question title question question remains note lack change anywhere section title answer insightful answer question appreciated looking understand inside agile development research happens moreover estimate good amount time spend learning topic research phase moving implementing solution understand case lot research required case developer faced topic even senior developer know little nothing answer question includes element scalability meet situation