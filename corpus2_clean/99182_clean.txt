trying learn scala previously glanced erlang haskell ruby similar issue enjoy feel bad thing wonder due time spent c num keeping clean start problem anonymous function loop hidden foreach feel encouraged put everything one quickly end something hideous even worse ruby variable need declared mess wonder guideline followed improve readability something one get use programming concise language num basic control structure foreach map etc method work great simple case fail complex one container preserve order object way method hide order form let say want build b element prime index could var num val b filter e num prime feel right duplication counter one inside filter one see reason know position element processing missing something logic behind feel encouraged use usual c style loop num scala hidden inconsistency scala seems boast much declared library rule scala need make library feel comfortable language becomes big seems like missing point bother dislike tuple special syntax act like language construct rather ordinary feel like scala denying many thing built appreciate someone could explain synthesis library language often implemented scala num efficiency firstly understand benefit immutable object parallel algorithm often actually need concurrency issue shared mutable object point concurrent design limitation using everywhere like functional language seem must terribly inefficient secondly even consider immutable state necessity algorithm seen ludicrous thinking one work list head tail find hard believe algorithm described way efficient feel encouraged write imperative underestimating optimization sensitive algorithm really avoid concept