programming work face problem visitor module project dependency say module x subclass b c module mean module dependent module x want implement visitor pattern hierarchy thus introducing interface handle operation abstract accept get dependency module module x cannot allow architectural reason use direct comparison type e instanceof since program satisfying question would encounter kind problem daily work make poor architectural choice approach solve minimal example illustrate point package classa visitor interface classa hierarchy package pkg public abstract classa extends classa public abstract accept visitor method package pkg import pkg b classb import pkg b classc public interface public abstract handle classb visitee public abstract handle classc visitee package b concrete class extend classa package pkg b import pkg public classb extends classa public accept visitor visitor handle package pkg b import pkg public classc public accept visitor visitor handle package b cyclic dependency