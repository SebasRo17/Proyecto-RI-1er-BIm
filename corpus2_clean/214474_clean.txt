designing rest api three tier system like client application front end api cloud server user home api server home home home device supposed maintain connection front end via websocket long poll first place violating rest get even worse later front end mostly client request home connection handle call sometimes home sends notification client front end home basically api client might connecting home directly lan case home need register client action front end pro rest system rest human readable rest well defined mapping verb like crud noun response code protocol object work http pass possible proxy rest contra need request response communication style also publish subscribe http code might insufficient handle three tier communication error front end might num accepted async call find necessary home connection broken num home need send message client client poll front end maintain connection considering wamp websocket get publish subscribe functionality struck already looking like message queue worth evaluating sort messaging queue transport look like message queue contra need define crud verb code message level read something higher maintenance cost mean serious consideration