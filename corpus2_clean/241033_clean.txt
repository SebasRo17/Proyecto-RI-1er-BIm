implementing binary search tree inside bst protected node case want extend avl tree problem conceptually aesthetically implementing empty node pointer instead opted pattern created also however even though give prettier something conceptually pleasing problem working tree height n many num n num num n instance floating around take space good reason fix avoid overhead still implementing pattern feel like something conceptually similar constant field node implement also feel like one copy referenced anywhere figure implement either help recommendation appreciated protected node key e protected key key protected e protected node key e left protected node key e right protected height protected public node public node key k e v key k v left new key e right new key e height num num public node key k e v node key e l node key e r key k v left l right r height math max l height r height num l height r height public key getkey key public e getvalue public node key e getleft left public node key e getright right public height height public public key k key k public setvalue e v v public setleft node key e l left l height math max l height right height num left height right height public setright node key e r right r height math max left height r height num left height right height public boolean isempty public boolean isleaf left isempty right isempty public boolean left isempty public boolean right isempty protected final key e extends node key e public key left right height num num override public key k override public setvalue e v override public setleft node key e l override public setright node key e r override public boolean isempty override public boolean isleaf override public boolean override public boolean