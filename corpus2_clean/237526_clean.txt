dependency inversion implies practice system high level component depend abstraction low level component instead low level component directly low level component defined term abstraction key point question low level component defined term abstraction defined term high level component meaning high level component define abstraction term would convenient low level component defined according abstraction usually interface high level component car low level component engine interface defined defined according need car engine fit need convenient car able simply start engine would feature start engine would implement question starting programming project designed according dependency inversion principle high level component usually implemented low level one ie top bottom development since principle implies low level component designed according convenient high level component make sense first start programming high level component define interface based learned high level component need programmed example implementing system simulates car car high level component engine low level component engine take care concrete work moving car around car take care coordinating everything creating functioning system designing system according dip mean engine defined term abstraction defined term convenient car would make sense first implement car understand exactly going work high level term need work define interface according car need ofcourse implement concrete class implement interface asking working project designed spirit dip top bottom development approach common work usually done project following dependency inversion principle