studied design pattern oop principle still feel something missing design theory maybe fact theory database design let explain example suppose want model different way produce orange juice let say start orange model lot orange certain variety certain may etc ant orange property continue providing orange squeeze seems correct tie togheter applies precondition achieve encapsulation valuable oop principle quickly come good one way squeeze orange would preferrable whose instance contains detail hand electric including mention mixing different variety orange latter open whole new cathegory possibility available achievable ease orange instance would processed using squeeze say performed refactoring oo architecture move another similar example get u point common practise use orm save instance database get back later similar orange example well whose instance may persisted database allow particular process contain logic actually orm class seems process externalization orange example taken place case question given reduce number attempt refactorings minimum question programmer put order determine externalized another method set core method inherently idea said beginning completely clueless feel like comprehensive theory missing easy put example whose instance represent invoice clearly core method saving invoice database external final answer starting point serf demonstrate method equal method may divided many useful make methodology put question