far understand wide spread opinion within c community certain feature c including feature inherited directly c still usable fit well recent c best practice example read comment site stating new delete avoided altogether favor smart pointer view often wonder backward compatibility c earlier c feature still important knowledge num compatibility c c contained c num subset maybe would possible make sense drop earlier c feature e g mentioned new delete future c standard impossible use new existing could still maintained using appropriate interoperability legacy new would supported separate compilation one could continue use earlier standard adopt recent one mixing two would possible developer team would clearly choose programming style want use flexible solution would option switch certain feature e g new delete allowed would viable strategy encouraging adoption modern c practice technical problem e g compiling existing template abi compatibility make change difficult even impossible edit following suggestion contained comment answer shortened partially reformulated question c versus c question question regarding c best practice promoted edit num number vote suggests point question understood changed formulation stress important point even