reading associating definition different symbol intrigued think upvalues way implement certain aspect object oriented programming symbol like quat represents particular type object various upvalues quat specify method define quat object behave certain operation receipt certain message play idea attempted implement variation list called contiguousorderedintegermap like list attempt get index beyond length return null attempt set index beyond length automatically fill intermediate index null started clearall contiguousorderedintegermap foo bar setattributes contiguousorderedintegermap holdall contiguousorderedintegermap part contiguousorderedintegermap expr length expr expr padright expr null return expr expr contiguousorderedintegermap expr return foo bar contiguousorderedintegermap foo print bar print bar print bar contiguousorderedintegermap foo null however course wrong mistakenly modifying foo instead bar creating nonsense recursion e foo contiguousorderedintegermap foo first thing stuck access symbol passed part scanning mathematica available operator came across pattern seemed like exactly needed applied like contiguousorderedintegermap part symbol contiguousorderedintegermap expr print symbol contiguousorderedintegermap foo wait instead bar got back bar ownvalue ah part evaluates first argument attribute part nholdrest protected readprotected next find way set holdfirst part applying contiguousorderedintegermap even possible instead obvious idiomatic way go question mind e g set separate upvalue set given attempting tagset part set would push contiguousorderedintegermap level deep however end question since stuck probably need edit question time receive help make progress