like describe situation two perspective system called account system made subsystem handle different account based activity example company account company account loan company account transaction perspective one perspective imagine shared access tier company account dataaccess subsystem built seperately account subsystem reference built assembly company account dataaccess subsystem connects multiple table table specific certain subsystem shared separate module use specific subsystem also one two common module multiple subsystem reference common module include lot basic crud activity also good number low medium complexity action perspective would fair keep architecture pull subsystem specific logic subsystem specific access layer way subsystem specific access piece also still reference original access tier common module company account company account dataaccess company account loan company account loan dataaccess company account transaction company account transaction dataaccess company account dataaccess perspective two perspective imagine existing access layer subsystem company account dataaccess company account loan dataaccess company account transaction dataaccess logical layer part subsystem subsystem reference access piece cross reference access layer perform operation specific database table however also perform common operation table shared amongst subsystem account system perspective would fair keep architecture abstract common operation subsystem agnostic access tier way subsystem keep logical layer specific operation also reference externally built tier common operation company account company account dataaccess company account loan company account loan dataaccess company account transaction company account transaction dataaccess company account dataaccess conclusion see ending coming description two different perspective idea two different level access subsystem reference access layer operation also reference common access tier common operation legitimate already pattern named