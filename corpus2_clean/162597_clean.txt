following query memento pattern tried put understanding test memento pattern stand three thing num saving state memento successful retrieval num saving carefully valid state memento num encapsulating saved state change state remains unaltered achieved three design problem zero player game program initialized particular set chess pawn knight queen program need keep adding set pawn knight queen pawn safe next one move every pawn condition either pawn placed none placed chessboard number non conflicting knight queen returned implementation num class num protected chessboard memento private chessboard public chessboard protected protected num public pawn related memento hold info pawn public enum empty num queen num knight num return shown pawn placed safely public bool num public caretaker corresponds caretaker memento double integer keep track state reason 2d keep track many state stored state currently active example num num num num num num current state second index num num num state saved undone private state private chessboard get chessboard position requested assigns originator public chessboard overwrites chessboard given position public chessboard private state num public playgame originator private bool status private chessboard set state chessboard position specified public chessboard get state chessboard position specified public chessboard try place pawn return status attempt public bool pawn edit discussion kevin way trying apply design pattern problem correct way help understand implement yes ideal usage might well simplify learning problem use text book one also refer question programmer stackoverflow discussion