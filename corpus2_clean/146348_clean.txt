task implement state pattern one class assignment referenced suggested implementation upon reviewing implementation confused since believed nonsensical application frankly simply bad design point view since completely dismisses basic design principle software diagram suggested implementation enter image description wonder use implementation imo clearly violates two design principle software engineering make thing easily maintainable easily extensible eye implementation zero easy extensibility change source least two class example implement new state forgot first implementing coupling client seems huge remove anything pattern client break want add anything change client order adapt example new state new state entered via enter concrete state directing injecting controller using changestate bonus one garage door entire world since state practically singleton enter concrete state given public static state enter controller c instance instance new c instance multiple garage door open simultaneously open one would put method abstract state concrete state either empty exception throwing version method nothing state example resulting interface opened lock even though directly lock garage door open close first choose single implement differently concrete state making thing easily extensible also far see really maintainable without lot trouble couple month using garage decide one state fact obsolete wrong going take according state breaking entire base us implementation garage door four state want work thing state situation get confusing look around internet pattern actually seems implemented exactly way lot time example implemented like way national wikipedia german actual question missing anything simply bad since widespread thinking might missing something obvious