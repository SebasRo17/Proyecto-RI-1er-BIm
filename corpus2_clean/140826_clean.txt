using hibernate project num year landed company discourages use want application interact db stored procedure couple week able create rich domain model application starting build application look like horrible transactional script issue found cannot navigate graph stored procedure load minimum amount mean sometimes similar object different field one example stored procedure retrieve customer another retrieve account information plus field customer lot logic end helper class becomes structured entity used old c structs boring scaffolding framework extract result set stored procedure put entity question anyone similar situation agree store procedure approach actual benefit using stored procedure apart silly point one issue drop table way create rich domain using stored procedure know possibility using aop inject daos repository entity able navigate graph like option close voodoo conclusion first thank answer conclusion arrived orms enable creation rich domain model people mentioned simplify amount often repetitive work following detailed explanation conclusion based hard application request send information system create abstraction model term e g business event domain model sends receives event event usually need small subset information model whole model example online shop payment gateway request user information total charge user require purchase history available product customer base event small specific set take database application external system need create abstraction allows u map domain model entity database mentioned using mapper obvious difference need mapping model entity database either legacy schema stored procedure extra pain since two sync one domain entity might map partially database entity e g usercredentials contains username password mapped user table column one domain model entity might map one database entity example one one mapping table want one application entity amount extra work might small need transverse entity increase conditional need transverse entity thus might want implement kind lazy loading application grows entity work increase feeling increase non linearly assumption try reinvent orm one benefit treating db external system around situation want num different version application running application different mapping becomes interesting scenario continuous delivery production think also possible orms lesser extent going dismiss security aspect basis developer even access database obtain information stored system injecting malicious eg believe forgot remove log credit card detail customer dear small update num num num stored procedure least oracle prevent anything like continuous delivery zero downtime change structure table invalidate procedure trigger time db updated application oracle provides solution called edition based dba asked feature mentioned poorly implmented put production db