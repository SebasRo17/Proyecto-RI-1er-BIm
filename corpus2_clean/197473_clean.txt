two year working highly siloed lone wolf development department structure adopting agile scrum great like agile dev keep focused busy productive without myriad stakeholder shoving project project throat expectation done yesterday however one aspect moving scrum versus current model think people outside development going like slightest current ability u small change wait large portion development house consumption mostly building common practice year department lead manager elsewhere come codebase owner particular application ask small stuff sometimes small pretty good taking three week project based drive bys even bos sometimes relay thing brought way often working codebase question time simply pop source file make change looking shoulder verify change want checking subversion inclusion next build basic agile scrum methodology tweak would either logged defect meet requirement specified story previously consumed new small story met stated requirement requirement incomplete vague incorrect changed delivery user saw new feature either way vast majority would one pointer zero relatively low priority system usable current state would much cooler making unlikely brought sprint working backlog top possibility raised dev meeting source active opposition agile process department would see less agile current ability make small tweak request valid concern imo stakeholder behind po always agree thing important point view yet typically manager make final decision therefore bias one show product backlog solution proposed tentatively called candy jar another term thrown gravy boat small tweak requested little guy various department defect existing story estimated consensus within team take less one half developer day would immediate significant positive impact user experience opinion end user put list parallel primary backlog identified story would kept separate primary backlog big story subject prioritization time normal progress sprint happen working area system one tweak made making tweak trivial bring tweak sprint alongside larger story must jeopardize completion larger story committed work po would also access list working upcoming user story touching basic feature involving tweak could fold story requirement meet requirement would thought would make tweak likely worked sooner later triggered reaction among u scrummaster training uh uh one backlog two backlog introduces question num item really important list item determine real velocity two backlog story actually belongs demarcation size complexity going case fall relatively arbitrarily one side let process work said change really significant end user make enough noise get department head making time money decision board get bumped dev team consciousness toward top backlog thought pose question floor opinion would parallel list bite size story getting small useful ultimately low priority change made faster overall better decision fold backlog let basic process govern inclusion sprint