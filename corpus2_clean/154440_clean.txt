based considered idiomatic c num iterator custom container survive container destroyed possible detect iterator becomes invalidated conditional build practice detail recently brushing c learning way around c num part writing idiomatic wrapper around library part wrapping linked list representation parsed path component looking advice idiomatic container one thing worry coming recently garbage collected language ensuring random object go disappearing user make mistake regarding lifetime account pathlist container iterators keep shared ptr actual internal state ensures long anything pointing exists however looking stl lot searching look like c container guarantee horrible suspicion expectation let container destroyed invalidating iterators along std vector certainly seems let iterators get invalidated still incorrectly want know expected good idiomatic c num given shiny new smart pointer seems kind strange stl allows easily blow leg accidentally leaking iterator using shared ptr backing unnecessary inefficiency good idea debugging something expected stl hoping grounding idiomatic c num avoids charge subjectivity