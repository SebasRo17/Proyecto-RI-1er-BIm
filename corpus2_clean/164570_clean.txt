think better place among sibling pose question originally wanted ask pure oo language considering trouble sort discomfort people experience trying define term decided start obtaining clear definition term would rather fair start correspondence dr alan kay coined term note inspiration biological analogy cell living object following way approach task num give comparative analysis listing programming language exhibit fail certain property unique sufficient define term although smalltalk scala possible example imo way seems neither really complete fruitful num give formal definition close e g academic mathematical style num give philosophical definition would totally rely semantical context concrete language priori programming experience must chance successful explanation community current version certain programming formal language grammatically differentiate operation operand well infer operand whether sense oop call language oo language long least one language finally type language also object define language pure strong oo language would appreciate possible improvement see made definition dependent term often fully referenced object edit addition use luckily well understood notion typed language programming oriented programing syntactical interpretation program text e treat certain value literal variable something evolves safety attributed language grammar studied formal way using mathematical logic called system notice requiring particular system called universal one way defining purity oo language way expand semantically nb answer help specify book reference support explains understanding terminology concept usually good definition cover reference depended concept except elementary possible indicate indented category answer definition clear otherwise see num language example num mathematical logic num technical description programming philosophy classification important also term pure oo included term oo answering try element oo paradigm well known methodology mean confuse overlap e g typically element modular programming covered embodied oo programming try distinguish oop including part functional programming logical programming especially strongly specialized type adt modular metaprogramming generic lisp time contract e g eiffel aspect oriented difference declarative functional classification well historical definition dijkstra structured clear difficulty giving formal definition surprisingly enough easy give mathematical description oop form certain logical formal system likely based defining one concept another one even try something practical applying formalism safety checking new language design aspect merely abstract entertainment exercise also lookup formulation oop theory dependent type independently formalism lambda calculus using category theory point unsurprisingly formulation imo strongly biased flawed likely initially incomplete understanding oop computer engineering end almost inaccessible afterwards thus hardly contributing backwards programming world maybe except certain percentage find application back formal world integrated popular language yes difficult give exactly good definition definition positive asking experience direct involvement guy