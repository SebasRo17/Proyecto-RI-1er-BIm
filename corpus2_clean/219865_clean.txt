thinking reason prevent lot programmer first writing clean modular expressive developing example apps discovered top three reason following num ui device specific ui ux general clutter quick fix workarounds num poor controller view decoupling sometimes controller end job view responsible num sparse test harness course problem stem lack discipline habit write clean difficult discipline environment allows easy sort laundry set dedicated drawer one drawer slowly turn mess unless disciplined tried apply idea sorting drawer address problem thought possible sort mvp component follows num model actually framework class responsible dealing model reusable set routine work num view actually framework class responsible presenting information graphically depend much environment definitely reused num controller framework class responsible coordination aforementioned layer working user interaction path application something like big controller since glue together defined set model defined set view reusable depends heavily platform etc given v somewhat reusable c maybe make sense force separation v best way ensure separated put static library linked app contains controller approach seems quite good controller depends something developer write separate test suite module user interface class reused apps easily model class extracted cross platform codebase maintaining old facade commits limited three really distinct module distinct separate library think sound like idea follow