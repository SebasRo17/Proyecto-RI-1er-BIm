see two pervasive form resource management deterministic destruction explicit example former would c destructors smart pointer perl destroy sub whilst example latter would ruby block manage resource paradigm net idispose interface newer language seem opt latter perhaps side effect using garbage collection system non reference counting variety question given destructors smart pointer reference counting garbage collection system almost thing allow implicit transparent resource destruction less leaky abstraction non deterministic type rely explicit notation give concrete example three c subclass single superclass one may implementation need specific destruction perhaps magic another way fact need special destruction irrelevant subclass still used way another example us ruby block two subclass need free resource superclass opts interface us block constructor even though specific subclass might need since require special destruction case latter leak implementation detail resource destruction whilst former edit comparing let say ruby perl might fair since one deterministic destruction yet garbage collected