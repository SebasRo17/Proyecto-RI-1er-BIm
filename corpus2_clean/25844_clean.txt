first started learning rule based programming mathematica tried translate algorithm computing convex hull set point n log n time use rule based replacement convenience paste pseudocode algorithm input list p point plane sort point p x coordinate case tie sort coordinate initialize u l empty list list hold vertex upper lower hull respectively n l contains least two point sequence last two point l point p make counter clockwise turn remove last point l append p l n n u contains least two point sequence last two point u point p make counter clockwise turn remove last point u append p u remove last point list first point list concatenate l u obtain convex hull p point result listed counter clockwise order actually used version algorithm book computational geometry de berg others pretty much thing except counter clockwise turn condition us determinant instead cross product really relevant question implementation end result stated algorithm see operate quite way convexhullpm pt module li isrightturn isrightturn p p p sign det mapthread prepend p p p li sort pt li join li reverse li li pre list b list c list post pre c post isrightturn b c work giving sequence point mathematica convexhull function computational geometry package however slow referring time complexity input size increase timing increasingly larger set input point seem indicate n complexity seems right way constructed rule mathematica start matching start every time replacement made whereas listed algorithm notion current point point removed set need recent point would better rule based implementation