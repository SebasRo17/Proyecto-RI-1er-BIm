trying compute chromatic number graph g import genetic algorithm getting stuck upper bound vertex color timing gacolor g written general ga implementation using naive recombination mutation mathematica code slow question could improve clever choice combine mutate well faster code general mean expert sure many possible improvement theoretically algorithmically gacolor g graph populationsize integer numberofgenerations integer numberofmutants integer mutationradius integer automatic module numberofvertices vertexcount g numberofbreeders permutecolorclasses mutationradius combine mutate populationstep initializepopulation initalpopulation generation bestfitness infinity bestcoloring generationsfitness chromatize adjacency result mutationradius mutationradius automatic numberofvertices mutationradius adjacency last transpose gatherby first arrayrules adjacencymatrix g first numberofbreeders populationsize numberofmutants permutecolorclasses color n module p p flatten position color union color p randomsample p replacepart constantarray length color flatten rule thread reverse p chromatize colorvector module f h min co colorvector f function c v replacepart c v ncols c adjacency v min memberq ncols min min min h function c fold f c randomsample range numberofvertices fixedpoint h co combine colorvector colorvector mapthread randomchoice colorvector colorvector mutate colorvector mr permute colorvector randompermutation mr populationstep population numberofbreeders module fitness max population breeder child mutant min min fitness min bestfitness bestfitness min breeder randomchoice fitness population numberofbreeders child chromatize table combine randomchoice breeder numberofbreeders mutant mutate mutationradius randomchoice breeder numberofmutants join child mutant initalpopulation color chromatize randomsample range numberofvertices table permutecolorclasses color populationsize generation nestlist populationstep numberofbreeders initalpopulation numberofgenerations generationsfitness map max generation bestcoloring extract generation position generationsfitness bestfitness bestcoloring first bestcoloring last first arrayrules adjacencymatrix g failed bestfitness bestcoloring mathematica less code use version graph object pretty much exactly gacolor adjmatrix populationsize integer numberofgenerations integer numberofmutants integer mutationradius integer automatic module numberofvertices length adjmatrix numberofbreeders permutecolorclasses mutationradius combine mutate populationstep initializepopulation initalpopulation generation bestfitness infinity bestcoloring generationsfitness chromatize adjacency result mutationradius mutationradius automatic numberofvertices mutationradius adjacency last transpose gatherby first arrayrules adjmatrix first numberofbreeders populationsize numberofmutants permutecolorclasses color n module p p flatten position color union color p randomsample p replacepart constantarray length color flatten rule thread reverse p chromatize colorvector module f h min co colorvector f function c v replacepart c v ncols c adjacency v min memberq ncols min min min h function c fold f c randomsample range numberofvertices fixedpoint h co combine colorvector colorvector mapthread randomchoice colorvector colorvector mutate colorvector mr permute colorvector randompermutation mr populationstep population numberofbreeders module fitness max population breeder child mutant min min fitness min bestfitness bestfitness min breeder randomchoice fitness population numberofbreeders child chromatize table combine randomchoice breeder numberofbreeders mutant mutate mutationradius randomchoice breeder numberofmutants join child mutant initalpopulation color chromatize randomsample range numberofvertices table permutecolorclasses color populationsize generation nestlist populationstep numberofbreeders initalpopulation numberofgenerations generationsfitness map max generation bestcoloring extract generation position generationsfitness bestfitness bestcoloring first bestcoloring last first arrayrules adjmatrix failed bestfitness bestcoloring sample input graph compressed adjacency matrix test algorithm give chromatic number second benchmark even version mathematica still tool compute chromatic number index graph let alone fast upper bound illustration simulated annealing going inside algorithm g uncompress ejzt get string pastebin link numberofvertices length g color randomsample range numberofvertices numberofvertices n numberofvertices last transpose gatherby first arrayrules g first neighborcomplements function c module p n nc r p flatten position color c n p nc map color n thread p complement range c c nc chromatic g n col range numberofvertices module c col f h slow fast f function c v replacepart c v module com complement range n c v randomchoice join com c v h function c fold f c randomsample range numberofvertices numberofvertices nestwhile h c max n absolutetiming monitor color nestwhile chromatic g n color color n listplot sort color plotrange plotlabel max color optimization problem sure know area intimately run code see plot color class decrease slowly around different color vertex however local minimum global minimum chromatic number graph actually code inefficient design completely new function use opencl javalink ok