programming language said turing completeness successfully simulate universal tm let take functional programming language example functional programming highest priority anything pas function around like primitive object called first functional programming produce side effect e string onto screen change state variable outside scope copy object object passed outside copied object returned finish job written purely functional style completely independent anything outside thus complexity overall system reduced referred referential transparency functional programming local variable kept value even exit done garbage collector reused next time called called memoization usually solve one thing model one algorithm answer problem think functional language property simulates turing machine function algorithm turing machine able passed around returned tm also accepts simulate tm memoization model set state turing machine memorized variable used determine state tm e line execute behavior take give state also use memoization simulate internal tape storage language like c c exit lose internal unless store elsewhere outside scope set symbol set string programming language higher level human readable version machine opcode start state beginning however memoization start state determined memoization want switch else statement imperative programming language final accepting state return reject exception happens thus algorithm tm decidable otherwise undecidable sure think thinking reason bring functional programming think closer idea tm experience programming language make feel idea tm idea computer science general specify think