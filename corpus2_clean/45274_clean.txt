new site french ask indulgence future mistake english would like optimise following code proc v x block listo x f b f b oneseq f b f b oneseq f b f b f b re v f b table partition listo j j length listo f b oneseq partition listo f b sort tally flatten f b f b oneseq tally f b oneseq f b sort f b position f b length length f b join takewhile f b length f b oneseq f b table position f b length f b f b length f b re v f b f b applying absolutetiming different step algorithm f b appeared longest step calculation focus algorithm acting f b responsible determining position various list number stored f b contained f b may noted listo simple list integer real example listo tried using compile work deal list different size know finding alternative position recurring topic stackexchange yet find reliable solution replace f b faster algorithm especially proc v first algorithm broader set therefore difficult change structure data produce edit n better understand project give overview context goal make algorithm detect store sequence detected ordered list number real integer number start got used test code listtest integerpart randomreal therefore proc v must detect different sequence contained inside listtest important note set number considered sequence appears least twice listtest length greater probably perfectible found better yet algorithm create partition different length starting list listtest partition compared sorted f b operation responsible ensuring definition sequence defined respected operation relatively fast operation performed f b turn long rest algorithm wrote need proc v provide position sequence inside f b obviously sequence identified final edit tested function proc v see proc v alt list replacelist list x length x gatherby last case proc v alt list join table list j length list j length list gatherby last case proc v alt list block bigl list z z z z z z z minlength minlength z flatten position true rest listcorrelate bigl bigl x sameq list z split z z deletecases z q list length q minlength z deletecases mapindexed w z w z flatten z w u q list map w bigl first u q z split sort z first first z union last z proc v alt see rasher post proc v personal function proc v alt mr wizard function n proc v alt mr wizard function n proc v alt wouter function proc v alt rasher function test code valeurperftemps table absolutetiming func integerpart randomreal listlineplot valeurperftemps result enter image description enter image description enter image description enter image description enter image description conclusion context original question function n mr wizard suitable nevertheless important note function proc v take place set algorithm specifically dedicated elimination sequence encapsulated ex contained actually use rasher function fast thank help benchmark computer proc v give