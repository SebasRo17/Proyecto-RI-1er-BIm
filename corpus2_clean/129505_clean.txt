going general principle abstraction normally abstract serialized format json pas parameter business logic bl module bl module always see consistent format irrespective underlying storage layer even use orm use serialized format orm feel following advantage serializing would better control parameter developer write bl without thinking much underlying storage wrapper written new database lot ready made wrapper convert json testing could done ruthlessly without database since format serialized functionally easier understand better olap oltp integration also notice following drawback new layer added database bl module orm nowadays come predetermined json format extra call slow application think trade ok compared better testing easy maintenance increased level abstraction may confuse developer make observation mostly context business application follow discussion let example thing could discussed context assume product database column product rate tax need create invoice without database abstraction get rate tax product x database multiply qty rate add tax display invoice database abstraction get rate tax product x database convert json call create invoice calculation display invoice second example would pas argument form product x qty num rate num tax num tax split one category state tax num central tax num discount factor added would increase number parameter bl function database field json key parameter match done automatically serialization orm make easy approach extend function also make module independent since module always know receive even receive new parameter adapt provide underlying intelligent general question num good pattern called abstraction come mind num pro con pattern apart mentioned context business application apps embedded device big num difference pattern orm believe since orm mostly wrapper get database pattern oriented towards structure num good easily understood new developer