trying revise structural design c net based system currently working new design involves rather light weight relational mapping framework trying stay away ado linq2sql sorry came rather lengthy cannot describe shorter bit complex system two primary function num retrieve row sql relational disk based database serve using datacontract marked object via asp web based client well receive update reroute database num read serve kind object server side distributed module work generate result push back database result might ask storing generated module computation stored database due size length computation required obtain retrieved part web client num currently row representing object defined separate c class common trend little inheritance common base want completely break pattern extensive inheritance based tree abstract class possibly interface whipped due test implementation past day concerned sanity design obviously relational impedance mismatch deal initializing database column backed field unless encapsulated object provided constructor concerned issue old system design well far target field defines column field resides database enum backed locally column fixed set database type system designed support whether column nullable read phrase e represent column select query within sql statement generated automatically based column fixed number type accessed conversion involved reading column include otherwise column write wrapper e database convert sent column c appropriate representation also generated based column used within contains method required transfer column field vice verse constructed location used meaning quite static rather based since modifies field derived class field back property well skip brevity used within abstract root hierarchy defines following abstract member provides backing table object read public id property private set id corresponds primary key row table also provides protected static helper retrieve object specific field based linq expression avoid magic string used derived type easily synch database representation specific field column provides delete destructor responsible deleting database representation whole system designed allow asynchrony multiple memory representation unless otherwise specified less sane part designed modify non abstract derived type fully constructed completely right away defined instead filled thread safe manner upon construction first derived inherited contains specific derived required speed construction e construct necessary object hand associate field basically violates c oo model since static respect current hierarchy static whole chain basically make associate particular like convenience structure generated according rule specified base initializes member based field marked column derived instance particular reference know circumvent issue seems best term reuse also seems like violating lot thing idea suggestion question form know better way associate thing type without inheritance accessible instance conforms oo model p looking kind answer since allow u reuse