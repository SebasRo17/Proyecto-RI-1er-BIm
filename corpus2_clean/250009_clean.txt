year back wrote answer question following idea emerged call descriptor never able find pattern documented formally described anywhere confused descriptor c accurate able come bear first attempt formal description descriptor provides meta information another pattern seen alternative time reflection annotation equally applicable language support reflection annotation descriptor particularly useful mean describing aspect model type found example domain view model well specialized type model form model business web application often application many common aspect need label input perform common validation e g required type format etc information required helper object service handle aspect fit comfortably descriptor descriptor mirror shape describes example model user property like id email descriptor must property id email property model various type case example integer property descriptor object provide information property maintaining identical model descriptor shape may seem like duplication term property name identical model descriptor however violate dry principle since model descriptor strictly speaking two different type happen shape overlapping concern duplication property name duplicate program mostly php daily basis used pattern successfully build application following example php though could implemented language capable resolving property time tiny bit framework required implement go model implementing following interface provide descriptor describes model interface typeinfo gettype individual model property described property descriptor descriptor use base along line abstract var public var public label public construct derive property descriptor specific type property example describes property extends var public max length sample user model descriptor usertype user implement typeinfo var public var public email usertype public gettype usertype instance usertype var public var public email public construct new label full max length num email new email email label e mail address email max length num self public static instance static instance instance instance new static see possible get descriptor either user instance e g user gettype notice property name property descriptor descriptor match property name actual model using pattern responsibility make sure model descriptor shape write service helper etc may consume information descriptor working model object example simple form helper var typeinfo public model var public prefix param typeinfo model param prefix public construct typeinfo model prefix model model prefix prefix param prop public text prop prop label htmlspecialchars prop label label text prefix prop max length maxlength prop max length model id would use form helper like user new user user user email u form new user user user gettype echo form text n echo form text email n would something like label full label text user maxlength num id label email e mail address label text user email maxlength num u id email two key reason enjoy working like num pattern like rendering form mapping post model object mapping model object database record performing validation forth performed formal helper service object consume single source information num everything statically typed meaning single unchecked property reference made encapsulated inside descriptor hint inference modern ide phpstorm provide automated inspection development time safely use automated refactorings forth okay rather lengthy discourse boil one question pattern side question constitute reflective meta programming use pattern similar e g using reflection obtain annotation model though find much safer less complicated flexible transparent