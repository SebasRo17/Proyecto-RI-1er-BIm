currently implementing expression evaluator single expression like formula based following entered expression tokenized separate literal booleans integer decimal string function identifier variable implemented shunting yard algorithm lightly modified handle function number argument get rid parenthesis order operator decent precedence order shunting yard simply produce simulated queue token mean powerbuilder classic language define object dynamic array native storage list dictionary evaluate sequentially simple stack machine evaluator working nicely still missing wondering proceed shunting yard stack based evaluation add another part single msgbox ok msgbox ok show message would like show one need evaluate argument already evaluated placed stack could give way implement lazy way though processing kind macro early time yet condition evaluation perhaps need use kind structure queue keep separately condition expression expression parsed evaluation also plan store intermediate representation kind precompiled expression future evaluation edit though problem think could build tree representation expression ast instead linear token stream could easily ignore one another branch