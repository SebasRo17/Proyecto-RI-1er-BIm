bit new ddd bear understanding seems way question udi solution domain event particularly domainevents see excerpt udi life domain model static public static domainevents thread callback private static list delegate action public static icontainer container get set register callback given domain event public static register action callback action action new list delegate action add callback clear callback passed register current thread public static action raise given domain event public static raise container foreach var handler container resolveall handle handler handle action foreach var action action action action action action based order domainevents used domain model must first assembly make domainevents part domain model right may wrong question domainevents break rule ubiquitous language ddd implementation pertain domain concern static member icontainer creates ioc container dependency domain model though really sure udi icontainer interface actual ioc container 2nd question icontainer domainevents truly ioc container break rule ddd infrastructure domain understanding correct ioc container considered infrastructure please correct wrong may find confusing please say edit built project domain model separated assembly call business layer absolutely reference infrastructure component see onion architecture enter image description want incorporate domain event pattern force add infrastructure component business layer component domainevents ioc framework satisfy icontainer relation domain whatsoever one idea ddd separating infrastructure domain play pragmatic programmer wanted know generally ok alternative thought approach missing something basic