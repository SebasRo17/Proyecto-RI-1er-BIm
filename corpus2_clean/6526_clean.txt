prevalence simple technique provide acid property memory model based binary serialization write ahead logging work like start snapshot serialize model write file create journal file every call model serialize call argument journal get big shutting otherwise convenient perform checkpoint write new snapshot truncate journal roll back recover crash power hit load last snapshot execute call recorded journal precaution needed make work let mutable reference escape enter prevalence layer need sort proxy scheme rpc common newbie mistake problem logic reachable call must completely deterministic must perform business logic meaningful o call writing diagnostic log probably ok getting system time launching asynchronous delegate generally journal replay identically even restored different machine different time prevalence provides alternate time call get transaction timestamp writer concurrency introduces ambiguity journal interpretation prohibited people developed bad taste trying use one project well suited klaus advocacy turned people people like imperative programming model dislike separating calculation preferring instead interleave computation threading call prevalence layer conceptually simple intimately bound characteristic framework inhabit usually custom rolled project make alien nonstandard risky hard keep straight careful newbie head seem explode faced something kind two tier database driven app learned write school entire set fit ram need writer concurrency need ad hoc query reporting export warehouse apology sqlite prevalence improvement save file replacement oracle