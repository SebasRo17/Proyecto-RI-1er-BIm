asked look writing simulation code user simulation output x would oscillate three possible state state x x top x bottom true middle simulation essentially boiled following interested computing length run state could easily computed splitby samplesimulation randomchoice runlengths switch sign top length bottom length middle length splitby samplesimulation state however simulation output moved top bottom state either direction without occupying middle state needed information runlengths via string unoccupied middle following code achieves surprisingly performant experimenter happy however feel unnecessary splitby reap sow loop find simulation move seemlessly top bottom would natural less wasteful method solve problem runlengthsfunc list block splitting splitting switch sign top length bottom length middle length splitby list state append flatten reap splitting k top splitting k bottom splitting k bottom splitting k top sow splitting k unoccupied middle sow splitting k k length splitting splitting timing absolutetiming runlengthsfunc samplesimulation null solution choosing thanks three different solution requested focus different methodology rather sheer blistering speed going accept mr wizard answer provided different approach best learning experience well exceptional speed second initial set state however apparently superfluous process unitize list already contained kguler method fall apart element great example pattern matching great see mr wizard solution convergent evolution se toward composition leonid answer introduced linked list useful tool similar problem unfortunately benchmark leonid elected focus methodology rather speed include implementation runlengths linking list much performant reap sow approach