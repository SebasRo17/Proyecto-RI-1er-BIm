working project considering using hybrid interface composition single thing mean contain ee used front functionality implemented contain er container expose public property example pseudocode visibility lambda lambda lambda isvisible public show public hide public property isvisible public event shown public event hidden private member visibility new visibility isvisible public property visibility get visibility private private private isvisible three reason considering num language working f annoyance w r implementing interface way need unless missing something help avoid lot boilerplate num class could really considered property container e e seems fairly strong relationship num class likely implement would pretty much implemented container class one place example would include managing emitting shown hidden event anyone see know better way edit num num seems little background information warranted work bunch application front end limited access system resource need access resource fully remedy back end application access needed resource front end communicate api written front end accessing back end functionality though part front end back end program date functionality incomplete made transition company company couple time even compile anymore trying rewrite spare time trying update thing make nice r interface api front end allowing backwards compatibility older front end hopefully something full goodness thing want write front end api written pretty much f implementing back end planning applying attribute class method property would like api generate f assembly using reflection outlined question possible alternative considering instead implementing straight interface class f kind bear order access something interface implemented explicitly cast instance interface would make thing painful getting call front end want call interface method property outside interface implementation separate regular member call implementation member basically repeating trying avoid