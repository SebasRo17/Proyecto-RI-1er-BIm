one project working online survey engine first big commercial project google app engine need advice collect stats efficiently record datastore without initial requirement user finish survey client sends list pair id double list show close answer user match predefined answer reference answerer identified id call target id creator survey want see aggregated given id last hour particular timeframe beginning survey survey may thousand target reference answerer created entity public implement serializable id transient private long id transient private long version long num transient private long startdate parent transient private key parent fake parent contains target id transient private double private long writing target user would give lot instance survey num target answered num million people within one week 300k people taking survey first day even assume answering evenly num hour would give u num writes second obviously hit concurrent writes limit datastore decided collect one hour save gae instance stateless use dynamic backend instance something like contains stats one hour private shard lock new map integer map new hashmap integer key target id public public long startdate map integer double hit map shard current hour previous hour stay long private hashmap long shard shard new hashmap long shard key startdate per hour dump shard previous hour datastore plus keep map integer memcached map key target id also backend shutdown hook dump stats unfinished hour datastore one major issue one backend instance raise following question like hear opinion without using backend instance one instance enough split multiple dynamic backend instance hard know many google creates new one load increase know launch exact number resident backend instance many num num num load week constantly running num backend instance expensive client backend instance dead restarting one thing note change client much currently javascript embedded web page customer change rpc way architecturally cannot replace client google doc form example