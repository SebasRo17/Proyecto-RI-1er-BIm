note following c num expect move c num next two year must keep mind writing guideline newbie among others write abstract interface c read article sutter subject searched internet example answer made test must compile foo someinterface someinterface b someinterface c must default constructible someinterface must copy constructible b must assignable behavior find source problem slicing abstract interface non leaf hierarchy constructible assignable even derived solution basic interface public virtual solution plain somewhat naive fails constraint default constructed copy constructed copy assigned even sure move constructor assignment still num year figure num declare destructor pure virtual need keep inline compiler digest pure virtual method inline empty body num yes point make implementers virtually rare case num even additional virtual pure majority case would still copy assignable 1st solution boost boost public virtual solution best plain clear c macro problem still work specific interface still default constructed num declare destructor pure virtual need keep inline compiler digest num yes point make implementers virtually rare case another problem class implementing non copyable interface must explicitly declare define copy constructor assignment operator need method class still accessed client interface go rule zero want go default implementation ok able use 2nd solution make protected myinterface public virtual myinterface protected c num method would default myinterface myinterface const myinterface myinterface operator const myinterface pattern follows technical constraint least user myinterface cannot default constructed cannot copy constructed cannot copy assigned also imposes artificial constraint implementing class free follow rule zero even declare constructor operator default c num num without problem quite verbose alternative would using macro something like myinterface public virtual myinterface protected declare non myinterface protected must remain outside macro scope correctly namespaced prefixed company product macro harmless advantage factored one source instead copy pasted interface move constructor move assignment explicitly disabled way future would light change conclusion paranoid want protected slicing interface believe one never know best solution among one another better solution please remember pattern serve guideline newbie among others solution like case implementation viable solution bounty result awarded bounty time spent answer question relevance answer solution problem probably go something like myinterface declare interface myinterface public virtual method following macro define declare interface classname public virtual classname protected classname classname const classname classname operator const classname private viable solution problem following reason cannot instantiated constructor protected virtually destroyed inherited without imposing undue constraint inheriting class e g inheriting could default use macro mean interface declaration easily recognizable searchable factored one place making easier modify suitably prefixed remove undesirable clash note answer gave valuable insight thank gave shot note guess still put another bounty question answer enough see one would open bounty assign answer