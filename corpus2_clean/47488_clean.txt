diving domain driven design concept coming across make lot sense surface think wonder really good idea concept aggregate instance make sense create small domain ownership deal entire domain model however think context web app frequently hitting database pull back small subset instance page may list number order link click open order see order id understanding aggregate right would typically use repository pattern would contain member getall getbyid delete save ok sound good call getall list order would seem pattern would require entire list aggregate information returned complete order order line etc need small subset information header information missing something level optimization would use imagine anyone would advocate returning entire aggregate information need certainly one could create method repository like seems defeat purpose using pattern like repository first place anyone clarify edit lot research think disconnect pure repository pattern different people think repository fowler defines repository store us collection semantics generally kept memory mean creating entire graph evans alters repository include aggregate root thus repository amputated support object aggregate people seem think repository glorified access object create method get whatever want seem intent described fowler pattern enterprise application architecture still others think repository simple abstraction used primarily make testing mocking easier decouple persistence rest system guess answer much complex concept first thought