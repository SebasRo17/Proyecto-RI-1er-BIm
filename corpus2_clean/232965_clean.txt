many project essentially high level requirement test hardware device device different communication protocol requires different test equipment exercise device etc high level test essentially following num obtain handle test equipment num apply stimulus device num measure detect record something measurable num remove stimulus num store result num handle error thus created interface every piece test equipment concrete unique implementation device test considered piece test equipment well using dependency injection driver test equipment allow easy change one driver another keep driver equipment somewhat decoupled instance power supply might use driver visa driver raw serial command project choose applicable change one driver instantiation next created class implement command pattern test equipment device inherits concrete command call execute via receiver call test equipment tx rx method method call underlying driver question problem extract received command right execute argument return nothing concrete command might transmit receive execute interface need either even received way need able access received since command calling tx rx ultimately call driver tx rx package call since driver could take something different contemplated interface various concrete implementation make sure passing concrete match driver caught abstract interface defines execute protected p receiver interface default constructor public constructor r receiver interface p r destructor virtual execute command virtual execute num abstract interface defines command action public virtual flush num virtual rx std vector unsigned v num virtual tx std const num virtual tx p num test equipment driver abstract base public constructor open destructor virtual protected close driver must implemented derived virtual close num get received template typename determine driver open virtual bool isopen open open driver must implemented derived virtual open num receive virtual rx set open closed flag state inline bool const open open open transmit virtual tx std const cmd command transmit private bool open flag indicate protocol open abstract test equipment utilizes constructor di device driver utilizes raii open close public public constructor boost shared ptr const device driver init cnt num open destructor virtual isinitialized close access equipment driver inline boost shared ptr const const decrement initialization count inline init cnt get initialization count inline const init cnt increment initialization count inline init cnt check initialization occurred inline bool isinitialized const init cnt num isinitialized determine driver open inline bool isopen const isopen isopen protected reset equipment virtual reset reset receive equipment inline rx rx set device default state virtual transmit command equipment inline tx std const cmd tx cmd transmit command receive response parsed template typename std const cmd command transmit tx cmd rx protected boost shared ptr const device driver init cnt initialization count public public command receiver execute g cmd g buffer g access buffer p flush p tx cmd p rx buffer extends command interface implement execute invokes receiver public public constructor command receiver execute g cmd p tx cmd