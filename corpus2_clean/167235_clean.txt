read various resource password strength trying create algorithm provide rough estimation much entropy password trying create algorithm comprehensive possible point pseudocode algorithm cover following password length repeated character pattern logical different character space lc uc numeric special extended dictionary attack cover following cover well though perfectly ordering password strictly ordered algorithm pattern spatial anyone provide insight algorithm might weak specifically anyone think situation feeding password algorithm would overestimate strength less issue algorithm password test password length length password unique character count password duplicate discarded number unique lowercase alphabetic character password number uppercase alphabetic character number unique digit number unique special character anything key keyboard number unique special special character alt code extended ascii stuff algorithm parameter total size alphabet space total possible number lowercase letter num total uppercase letter num nd total digit num total special character num something total extended ascii character dont fit idk num algorithm parameter pw strength growth rate percentage per character entropy growth factor lowercase letter num probably good uppercase letter num probably good fd digit num probably good special char num probably good extended ascii char num probably good repetition factor unique letter low factor many unique high num num num num num num fd num num num num digit strength strength nd length log base 2 strength input desired actual entropy bit output desired actual aaa pathetic num aaaaaaaaa pathetic num weak num strong num fu 5 wtf num num pathetic num num num strong num medium num wtf num num password use shortened notation n expands n num correct horse battery staple algorithm realize correctly increasing alphabet size even one digit vastly strengthens long password shown difference entropy bit 6th 7th password consist num second 21st capitalized however account fact password num good idea easily broken weak password cracker anyone watch see algorithm reflect however reflect fact weak password compared despite greater complexity density even thing improve algorithm addendum num dictionary attack pattern based attack seem big thing take stab addressing could perform comprehensive search password word word list replace word token unique word represent word token would treated character weight system would add weight password need new algorithm parameter call lw nw num num fw num factor weight password would weight word search could specially modified match lowercase uppercase letter well common character substitution like e num add extra weight matched word algorithm would underestimate strength bit two per word ok otherwise general rule would non perfect character match give word bonus bit could perform simple pattern check search run repeated character derivative test take difference character would identify pattern aaaaa num replace detected pattern pattern token unique pattern length algorithmic parameter specifically entropy per pattern could generated fly based pattern point take length password word token pattern token would count one character token would replace character symbolically represented made sort pattern notation includes pattern length l pattern order base element b information could used compute arbitrary weight pattern something better actual modified example password tokenized num num num num k h e r p e r p word filtered num num num num pattern filtered p l num num b num p l num num b breakdown num small unique word num pattern entropy num bit per modified algorithm password tokenized c r r e c h r e b e r p l e word filtered breakdown num small unique word pattern entropy num bit per modified algorithm exact semantics entropy calculated pattern discussion thinking something like entropy b l num either zero one modified algorithm would find flaw reduce strength password original table exception fu 5 contains word pattern