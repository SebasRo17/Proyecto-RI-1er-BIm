ago asked question something written c instead getting answer problem hand comment went crazy coding style even indicated wip piece meant clean later base case running got many vote decided pull question rep already near abysmal made wonder people adopt hard noob go attitude accused writing c something cannot understand still baffle programming quite oop language number year albeit interval choose language use term available library optimal execution environment job hand adopt design pattern oop quite confident use pattern sound oo wise hold understand oop toolbox choose use tool think really required use neat trick show coding wit know top notch think n00b level either design write single define test list goal certain test criterion adhere easier create sequence diagram write chose write test interface become obvious must admit piece posted question still using pointer instead using smart pointer use raii whenever know proper raii mean safeguarding work incrementally work progress meant clean later way working condemned strongly view working example first see base case viable way thought also happen think cleaning something typical refactoring phase agile base case proven must admit although slowly getting cxx standard prefer use understand instead taking risk using concept yet master production try new stuff usually play project side purpose edit like clarify gnat suggestion num show search started ask question however although suggestion cover one aspect question question linked answer heart question part question response got coding style professional aspect handling different coding style apparent level skill previous question response case point edit question someone use coding style matter subdivision hand would bad programming practice use prone prototype situation refactoring make robust afterward would program written c like written make bad program considering indicated intent current style planned work improve would bad professional chose use construct used certain programming paradigm e g oop dp num develop fast buggy correct error slow careful