apologize long question read bit rant promise summarized question mvc world thing straightforward model state view show model controller stuff model basically controller state stuff controller dependency web service repository lot instantiate controller care supplying dependency nothing else execute action controller use dependency retrieve update model calling domain service context say like user want see detail particular item pas id item parameter action nowhere controller reference state far good enter mvvm love wpf love binding love framework make binding viewmodels even easier using caliburn micro feel thing less straightforward world though let exercise model state view show viewmodel viewmodel stuff model basically viewmodel state clarify maybe delegate property one model mean must reference model one way another state stuff viewmodel dependency web service repository lot instantiate viewmodel care supplying dependency also state lady annoys end whenever need instantiate called turn returned ienumerable everybody still one thing call new bad imagine num dependency mean need take dependency well also changing constructor painful call create initialize factory func easily generated ioc framework think bad init method leaky abstraction also use readonly keyword field set init sure reason call create pattern abstract factory usually recommended problem though genius since satisfies static typing actually started using amount boilerplate think much know apart ridiculous name get use viewmodel need runtime parameter get two extra file factory interface implementation need non runtime dependency like num extra time time dependency change get change factory well feel like even use di container anymore think castle windsor kind solution drawback correct wrong something anonymous type dictionary like static typing yeah mixing state behavior way creates problem exist mvc feel like currently really adequate solution problem like observe thing people actually use mvvm either care brilliant solution found depth example mvvm wpf example sample project immensely helped understand ddd concept really like someone could point direction something similar mvvm wpf maybe mvvm wrong turn design upside maybe problem well know people asked question think one summarize correct conclude viewmodel integration point state behavior reason difficulty mvvm pattern whole using abstract factory pattern best way instantiate viewmodel statically typed way something like depth reference implementation available lot viewmodels state behavior design smell