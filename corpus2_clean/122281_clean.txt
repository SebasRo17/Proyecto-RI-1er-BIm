read facade pattern found example client user computer invokes call complex stuff source wikipedia complex part cpu public freeze public jump long position public execute memory public load long position byte harddrive public byte read long size facade computer private cpu cpu private memory memory private harddrive harddrive public computer cpu new cpu memory new memory harddrive new harddrive public cpu freeze memory load boot address harddrive read boot sector sector size cpu jump boot address cpu execute client public static computer facade new computer facade see client creating new facade calling instantiates several object invokes method encapsulating inside facade glue together question num exactly different layer abstraction yesterday made login functionality web application dologin username password encapsulated complex lower layer call updated login info user set session log instantiated several object etc job layer would also call another even lower level would deal crud like operation checking activation status account existance thing like processing string hashing algorithm model level look layer overview would either success key message key acting boolean sort layer calling understand known abstraction layer hiding complex procedure higher level architecture read facade pattern seems like using along question num would approach abstracting login mechanism bad choice mvc architecture please give example taken consideration easy decide end result go html ajax etc wise choice avoid alot ifs dealt controller layer layer overview controller layer model dologin post variable model layer facade set session update login information database etc call independent component information user id user getid session independent layer layer independent little coupling would layer job build application lend api control question num facade pattern used routing call sub class api like form perhaps commonly mean instantiates b lends control b method php private objectb public construct objectb new b public objectb methodb b public methodb die objecta instead objecta objectb methodb