looking architecting new solution modular nature would like create structure support design allow easy future expansion clear separation concern licensing module etc found web modular composite application ui centric focused silverlight wpf etc case developing wcf service application consumed developer working various ui project background goal project create centralized source business domain logic support several business application currently duplicate process rule etc every benefit modularity achieved like opportunity establish framework leverage part take advantage started design looking api exposed service application clear service segregated along modular line considering instance inventoryservice etc service group service operation provide high cohesion api keeping coupling low client consume service pertinent application make sense separate module service myapp finance myapp inventory personnel cross cutting concern shared type would myapp shared assembly get little tied oh mention using ioc container dependency injection keep application loosely coupled mention one want open pandora box myapp servicehost create service host file svc corresponding module svc example service host need service corresponds information configuration file contains interface defining service contract ioc configuration used map concrete implementation interface use num service layer implement api delegate module module self contained contain everything related module including service implementation one way approaching problem myapp service module contains implementation service contract service simply delegate another eh appropriate module contains domain logic operation example wcf myapp service delegate another interface implemented finance module carry operation would allow maintain thin service facade plug implementation service implementation eliminate need module worry wcf instance hand maybe preferred module self contained interface implementation service host refers service contract interface found module ioc configured use appropriate implementation module well mean adding new module done change service layer adding new svc file ioc configuration information thinking impact switch standard wcf restful service interface maybe go ria service something module contains implementation service contract make change every module change service technology approach facade module swap part make change module would implement different set contract interface possibly defined shared assembly num best way handle sharing resource module dependency module take instance receiving operation first blush make sense go inventory module receiving good inventory however also financial aspect need generate receipt authorize payment one hand would expect use domain event messaging communicate operation inventory module raise handled financial module generate receipt initiate payment process however mean financial module need know inventory item received simply refer id need additional information receipt description unit cost etc make sense module version inventory item designed suit need module case financial module would perform lookup inventory item handling put domain object shared location point lose cohesion used example purpose worked lot various erp system know designed modularity know also explicitly mention prefer follow domain driven design principal architecting solution believe modularity fit right area help getting head wrapped around greatly appreciated