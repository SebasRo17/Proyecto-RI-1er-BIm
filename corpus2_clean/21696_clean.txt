idea need generate sequence event run propagator list event propagator update state following event write function tally result make visualization following mix code found example short prof concept clear circleminus sys circleminus sub sub sys sys circleminus sub n sub sys n sys circleminus sub f function module select sub sys f remove redundant x list x clear keypos local function keypos key module v v flatten position map key length v v null clear ud ud sys sub val module po sysin sysin sys po keypos sys sub po null appendto sysin sub val sysin po sub val return sysin clear propview propview dt x v x v dt dt list action minimal input action po vec starttime dtime state pen color dtime state pen color dtime state pen color dtime state pen color notice need include information action state change example step action acceleration propagator po action circleminus po vec action circleminus vec st action circleminus starttime dt action circleminus delta time action circleminus action ud action po propview dt po vec action ud action vec propview dt vec action ud action starttime st dt length action point action list filled state information event key value pair po etc simple example show main idea real problem action list much complicated would like level information like shown action list state key example used modified state key value question easily modify key value lower level simple ud function work ud action circleminus state color would love able something like action circleminus state circleminus color color would created exist would sub structure state exist would prefer solution involve coping action list operation function also open solution idea take initial thought update partial solution accessing data clear circleminus sys circleminus sub sub sys sys circleminus sub n sub sys n sys circleminus sub f function module select sub sys f remove redundant x list x code found website sorry could find reference next part extension istv n zachar dynamic part answer istv n zachar clear ud ud obj obj ud obj field val module po listq obj po position obj field infinity po po listq obj join obj field val field val replacepart obj first first po val ud obj field field val ud obj field ud obj circleminus field field val ud obj field field field val ud obj field ud obj circleminus field field ud obj circleminus field circleminus field field val easy add update key value pair third level however consider addition good code generalized updating n text th level