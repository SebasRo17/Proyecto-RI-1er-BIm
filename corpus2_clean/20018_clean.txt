first bit introduction interested code skip section following question drawn dennis e shasha puzzling adventure listed question strategic bullying set entity power represented number coalition power sum member power coalition destroy coalition b power greater b back b obtain enough new ally b power greater equal coalition beaten destroyed wealth proportional power distributed among winner winner lose power entity play selfishly striving avoid certain destruction also acquire wealth based description question set entity stable strong enough coalition prevent war every member coalition interest participating coalition mathematically speaking set entity distinct integer power unstable powerful entity half total power entity since would destroy entity without challenged stable powerful entity exactly half total power entity since would able destroy entity incentive form coalition stop powerful entity otherwise stable subset entity formed removing coalition entity less half power entity unstable thanks xerxes pointing error original formulation efficient code write check stability given set entity written function check stability given set entity fstable max total max total true bitxor max fstable subset length edit code cover case question assumed one needed consider stability subset formed removing one element look xerxes answer correct faster implementation example implementation fstable fstable however function run fast fact even checking stability set entity take time timing fstable range way improve require additional mathematical insight allow u eliminate specific case note question author actually asks u find largest set entity distinct integer power powerful entity power solve problem brute force would define function using idiom f x f x make use mathematica ability store function evaluation however total number function evaluation solved quite large sure whether cause kernel run memory