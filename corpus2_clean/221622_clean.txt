relatively new tdd thinking lot manage perpetually growing pool test come one biggest concern positive experience uncommon feature undergo fairly massive change time implement change would first write test many test new behaviour change ideally test would pas feature change correctly implemented test covered first incarnation feature guarantee num still relevant num still pas num pas fail status even correct reviewing updating deleting test relatively small pool test may manageable thousand ten thousand test seems big risk collection test eventually contain many positive considering test form system documentation pretty bad question mitigate risk accumulating positive test applying tdd bdd anything eventually lead massive collection test