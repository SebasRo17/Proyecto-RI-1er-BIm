designing consistency behaviour favoured common programming practice give specific example common convention owns e g created responsible cleaning done specific example would net owns idisposable dispose end life touch look streamwriter net find documentation close underlying stream closed disposed necessary case streamwriter instantiated passing file writer creates underlying file stream therefore need close however one also pas external stream writer also close annoyed heap time yes know make non closing wrapper point apparently microsoft made decision consistent always close stream matter came come accross pattern one class usually create flag get set case foobar injected via constructor otherwise way responsibility cleaning passed caller pass instance explicitly wondering maybe consistency favour best practice maybe best practice good argument edit clarification consistency mean consistent behaviour always taking ownership closing stream v best practice take ownership created explicitly transfered ownership example assume two given class 3rd party library accept stream something like creating processing public dataprocessor public result processdata stream using var reader new streamreader public datasource public getdata stream using var writer new streamwriter want use like result datasource source var processor new dataprocessor var m new memorystream source getdata m processor processdata m fail exception cannot access closed stream processor bit constructed illustrate point various way fix nevertheless feel work around something