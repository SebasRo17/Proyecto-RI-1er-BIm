understand top design refining abstract high level concept smaller concrete comprehensible part smallest building block defined hand bottom defines low level part gradually build higher level block whole system formed practice said best combine two method start high level specification fully specify domain knowledge relationship constraint problem well understood smallest building block created build system process creating requirement spec create design spec diagram implement deliver repeat iterative development rather whole chunk phase little bit repeatedly got daily meeting adapt customer dynamic requirement look perfectly normal spec plan flaw got iterative development instead spending time one phase say requirement analysis study every possible thing domain knowledge subjected change possibly daily little bit analysis little bit design implement another way iteration mini waterfall fashion analysis done day week applies design rest time spent implementation something inherently wrong top approach combination iterative development essay programming bottom paul graham seems encourage build bottom completely program bottom requirement analysis design phase experienced lisp programmer divide program differently well top design follow principle could called bottom design changing language suit problem far get meant lisper still performs top design program bottom another point wrote worth emphasizing bottom design mean writing program different order work bottom usually end different program instead single monolithic program get larger language abstract operator smaller program written instead get arch mean period writing program lisp end generic tool