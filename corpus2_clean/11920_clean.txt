plagued much less nord companion decided try fight root comparison operator noticed typically bad value contains indeed evaluating give less nord unevaluated equation interestingly give true give lessequal nord evaluate despite equal part give true therefore written following code according test seems completely eliminate less nord companion nminimize despite fact handle special case two element comparison min max definition eliminating comparison nord got max nord nminimize two argument definition seem suffice unprotect module op rep true numericq b numericq rep block rep false im im b b b protect less lessequal greater greaterequal unprotect min max min numericq b numericq b b max numericq b numericq b b protect min max use complex expression nminimize without problem least admittedly test call nminimize b b b b verythinspace b apart performance cost undoubtedly measure though course fact possible case covered might one day get non prevented nord case would gotten anyway could definition unexpected consequence especially wrong result course also improvement welcome edit unfortunately reaction basically general override built in course good general guideline really answer question let remind another rule thumb absolute wrong ask general good bad idea overload built function general indeed bad idea asked unintended consequence case apart already mentioned question asking question already explicitly acknowledged might unintended consequence blindly assumed none would asked question hand given limited nature overload cannot imagine way might lead wrong result wrong result concerned asked make sure lack imagination however reaction conclude nobody even closer look code otherwise would example obvious lessequal already covered code concrete point raised point already acknowledged question give performance hit hand performance hit save working time may well worth especially given fact mathematica work work something different tweak code code write especially code using optimization routine production code reused one time code get single result generally ever run course overload nothing belongs init file applied selectively might catch case indeed already acknowledged catch case intentional catch exactly many case stop problem really occurring catching case possible also reduces risk introducing bug performance hit every calculation go code cannot affected performance hit case reduced determining code used also merely limitation code calculation get caught overload still give nord would also gotten nord without therefore overload worse case without might find another specific overload catch one well note btw sign method comparison work correctly box unless test result inequality operator overload suggestion paper problem quiet concerned message concerned wrong result often occur case quieting message fix instead remove sign something bad happens indeed irony suggest solution known sometimes give wrong result solution might possibly give wrong result however one constructive suggestion leonid shifrin unfortunately buried comment therefore quote get lost actually good advice least would create local environment use internal inheritedblock localize effect redefinition leonid make one separate answer accept assuming also suggest answer use quiet fight fire deactivating fire alarm yes even state general overloading built function bad idea