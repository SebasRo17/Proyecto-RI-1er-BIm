using ninject ninject specific question wondering advanced flexible capability ioc container giving enough rope hang bad application design got service interface public interface create category clientid lean ninject factory extension create guess call proxy implementation runtime binding like kernel bind unbound category kernel bind kernel bind kernel bind kernel bind clienta kernel bind unbound client etc experimenting custom instance provider binding generator ninject guessing ioc container may similar construct overriding basic binding behavior two distinct binding scenario goal num category binding cannot resolved create category argument resolved default binding case num clientid binding cannot resolved default client implementation like category resolved default binding case situation unknown category request expected seems shame use expensive exception handling something know happen often want fallback behavior handle unhandled plain way case would unknown category unknown client known category two distinct fallback behavior two different type unknown behavior trouble keeping two fallback behavior mapped respective scenario given pause think friction feeling fleshing design flawed design default binding logic used determine one needed contained ioc custom implementation rather exception thrown mi use ioc container