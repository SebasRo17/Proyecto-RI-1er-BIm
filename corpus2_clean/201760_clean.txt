duck typing duck typing aided habitually testing argument body relying documentation clear testing ensure correct use argument validation eafp easier ask forgiveness permission adapted example considered pythonic def self key try self dict member except typeerror something else mean anyone else using use real dictionary subclass use implement mapping interface unfortunately practise simple member example might integer integer immutable perfectly reasonable use dictionary key however also used index sequence object member happens integer example two could let list string well dictionary assertive programming assertion systematic way check internal state program programmer expected goal catching bug particular good catching assumption made writing abuse interface another programmer addition act documentation extent making programmer assumption obvious explicit better implicit mentioned concept sometimes conflict count following factor choosing validation strong validation use asserts num strong validation strong validation mean raising custom exception example part public api better validate argument show good message unexpected checking mean using isinstance also passed support needed interface duck typing document api specify expected user might want use unexpected way feel safer check assumption usually use isinstance later want support type duck change validation logic num assertive programming new use asserts lot advice later remove asserts num part api pass argument written studied tested lot asserts according called interface logic behind better fail somewhere num level deeper stacktrace incomprehensible force lot later add assert anyway comment advice use use validation asserts sorry best formulation question example consider following customer sqlalchemy declarative model def add customer self customer save new customer database param customer customer instance whose id none merged global session customer validation let hope sqlalchemy session break customer model instance customer self session add customer self session commit customer several way handle validation def add customer self customer api let validate isinstance customer customer raise invalid customer id none raise id none customer self session add customer self session commit customer def add customer self customer internal want sure customer model instance assert isinstance customer customer assert customer id none customer self session add customer self session commit customer would use context duck typing checking validation