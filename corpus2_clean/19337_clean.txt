assume following situation wolframlibrary function get parameter integer tensor simplicity rank function return integer list mathlink question used type function start function could look like following use wolframlibrary function declared wolframlibrary h extern c dllexport mint func wolframlibrarydata lib mint argc margument args margument return value mtensor tensor u margument getmtensor args mint u lib mtensor getintegerdata tensor u full declaration last function mint mtensor getintegerdata mtensor array u contains linear data tensor let say worked array used consistently mint procedure want send mint result array back mathlink mathlink api several function sending integer list int mlputinteger list mlink link short int n int mlputinteger list mlink link int int n int mlputinteger list mlink link mlint int n usually use mlputintegerlist us integer type machine unfortunately since version mathlink integer type wolframlibrary integer type differ machine additionally type used mathlink seem completely unrelated wolframlibrary type use type pure wolframlibrary function consistently hopefully portable mixing two technology seems possible easily would look underlying type mint long machine int window machine colleague probably long long window bit box select appropriate mlput function special system portable basically repeat system dependent ifdef already mathlink h friend question missing must portable consistent way cast type