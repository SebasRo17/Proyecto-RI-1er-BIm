problem let say called datasource provides readdata maybe others let keep thing simple read mdb file var source new datasource myfile mdb var source readdata year later decide want able support xml file addition mdb file source implementation reading quite different xml mdb file thus design system scratch define like abstract datasource abstract readdata static datasource filename xmldatasource appropriate datasource override readdata implementation num xmldatasource datasource override readdata implementation num great perfect implementation factory pattern unfortunately datasource located library refactoring like would break existing call var source new datasource myfile mdb various client using library woe use factory first place solution solution could come num make datasource constructor subtype xmldatasource would solve problem unfortunately c support num use different name abstract corresponds datasource example datasource corresponds example obsolete new use instead datasource filename xmldatasource ended using since keep backwards compatible e call new datasource myfile mdb still work drawback name descriptive num make datasource wrapper real implementation datasource private impl datasource filename impl new filename new filename readdata impl readdata abstract private private private drawback every source readdata must routed boilerplate like boilerplate redundant clutter elegant solution missed