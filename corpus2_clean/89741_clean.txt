inherited existing base product sloppy fundamental design woefully inadequate unfortunately little without complete refactor high coupling low cohesion rampant duplication technical design documentation integration test instead unit test product history high exposure critical cash cow client minimal tolerance risk technical debt make blush large codebase complexity battle weary defeatist approach bug team old team jumped ship another division opportunity ruin another project rare experience technical incompetency project failure opposed project management failure indeed one case moment lot time freedom decision future direction ability build team scratch help question gather opinion low impact refactoring project like free time functional requirement gathering phase thousand warning almost unused import unread local variable absence checking unsafe cast formatting unreadable sloppy look like coder suffered disease control amount time space bar pressed given database file resource typically opened never closed safely pointless argument duplicate method thing etc waiting requirement next feature cleaning low impact low risk thing go wondered wasting time right thing new feature mean ripping spent time earlier going start agile approach understand acceptable normal constantly refactor agile development think positive negative impact would like add