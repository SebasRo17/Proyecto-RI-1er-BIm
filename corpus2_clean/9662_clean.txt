background word string letter alphabet square free word adjacent repeating substring example ternary alphabet word square free contain repeated subwords word like square free code test string alphabet square free slow reverseword w string stringreverse w permuteword w string stringreplace w subwords w string len integer module union table stringtake w len stringlength w len nosquare w string mod stringlength w stringtake stringlength stringtake stringlength w squarefree w string apply table apply map nosquare subwords w k k stringlength w squarefree return false squarefree return true sure wizard know fastest way big squarefree word test fast function benchmark uncompress ejzt sejgdaqrnguoh sbinagq isyiqqosvzj uiknm azhue lkcxcws jpup bvurhtdj p vd n fn rpnz rq gl oj dh qf sv vt en p x f ot dh z ot dh z ot eh qf cv nr uj p x f p pt ah ab cv nz uj nz uj r wp uyjwieq problem ultimate way determine square freeness word enumerate real problem generate ternary squarefree word length n efficiently original implementation function extendsquarefreeq w check word w squarefree assuming stringtake w squarefree starting list allsquarefree build next allsquarefree forth iextendsquarefreeq compile str integer module sl length str floor sl take str take str return false true compilationtarget c runtimeoptions speed runtimeattributes listable parallelization true extendsquarefreeq str string iextendsquarefreeq tocharactercode str distributedefinitions extendsquarefreeq extendallsquarefree list module cand sfcand cand flatten map function w function stringjoin w complement stringtake w list sfcand parallelmap extendsquarefreeq cand pick cand sfcand allsquarefree temp allsquarefree bytecounts time monitor table time temp absolutetiming extendallsquarefree temp temp compress temp appendto time time appendto bytecounts bytecount temp n listplot time bytecounts mesh full plotrange automatic filling axis axeslabel n none interpolationorder joined true plotlabel text row n tostring n count tostring length temp time tostring n time mem tostring n bytecounts last mb time memory complexity way high n much efficient way perform search perhaps storing list string special data structure traverse fancy way take solution linear quadratic complexity reach n main difficulty storing word length mathematica run memory hoping brilliant optimized data structure guess might use tree