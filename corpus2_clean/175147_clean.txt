easier way process multiple state using nested statement think would create sequence state use like determine state drop asking question make sure preferred clojure way background problem application depends quite file application depends csv report column header report csv file also sequence sequence sequence zipped together column purpose creating smaller sequence column file use following function find file present defn kind filename let f file filename cond isfile f file isdirectory f directory exists f else cannot found defn look filename expected let find status kind stat filename expected find status first line multiple look ugly hard maintain defn extract value plain old fashioned sub routine process real estate value 3rd q bill extract opts utl look opts f num got column utl look opts f num got utl look opts f num got value column utl look opts f num got mixed use ratio column let col first utl fetch csv opts utl fetch csv opts val col first utl fetch csv opts mu val col first utl fetch csv opts result utl seq len col first rec count looking discussion best way clojure facilitates solving problem like