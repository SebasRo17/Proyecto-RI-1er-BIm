working refactoring service would appreciate critique general approach working three back end system need expose authenticated front end api http binding json rest internal apps well 3rd party integration got rough idea hybrid intend wind intend build guidance extension support architecture devs build quickly current idea structure num front end wcf routing service spread across multiple ii server via hardware load balancer load balancing service behind routing handled within routing service probably round robin one service token multiple binding per service exposed address json rest whatever else come later handled via poco dtos use unity scan service available expose num front end service behind routing service nothing expose api conversion dto entity unity inject service implementation allow mocking automapper dto entity conversion invoke wf service response required immediately queue esb async wf esb invoke wf later num business logic wf layer expose api front end service implement business logic wrap transaction context needed call composite atomic service num composite atomic service exposed wcf one service per back end system standard atomic crud operation plus composite operation support transaction context question separation concern outlined beneficial current thought layer project except backend stuff system get one project project servicehost service service folder interface live separate project layer dto entity two separate project shared folder currently planning build dedicated service shared functionality logging overload thing like call service valid approach suggestion comment