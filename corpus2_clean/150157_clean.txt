new team manage majority platform tcp socket http networking c originated developer left team current developer team smart mostly junior term experience biggest problem multi threaded concurrency bug library written asynchronous use thread pool class method library often enqueue long running taks onto thread pool one thread callback method get invoked different thread result lot edge case bug involving incorrect threading assumption result subtle bug go beyond critical section lock guard concurrency issue make problem even harder attempt fix often incorrect mistake observed team attempting within legacy includes something like following common mistake num fixing concurrency issue put lock around shared forgetting happens method get called expected order simple example foo statuscode status status foo shutdown cleanup delete nullptr bug shutdown could get called occuring tester find bug capture crash dump assigns bug developer turn fix bug like foo statuscode status lock c status foo shutdown lock c cleanup delete nullptr fix look good realize even subtle edge case happens shutdown get called get called back real world example team even complex edge case even harder spot review process common mistake num fixing deadlock issue blindly exiting lock wait thread finish enter lock without handling case got updated thread common mistake num even though object reference counted shutdown sequence release pointer forgets wait thread still running release instance component shutdown cleanly spurious late callback invoked state expecting call edge case bottom multithreaded programming plain hard even smart people catch mistake spend time discussing error developer developing appropriate fix suspect often confused solve issue enormous amount legacy right fix involve touching going shipping soon sure patch applying hold upcoming release afterwards going time improve base refactor needed time write everything majority bad looking refactor threading issue avoided altogether one approach considering significant platform feature dedicated single thread event network callback get marshalled onto similar com apartment threading window use message long blocking operation could still get dispatched work pool thread completion callback invoked component thread component could possibly even share thread library running inside thread written assumption single threaded world go path also interested standard technique design pattern dealing multithreaded issue emphasize something beyond book describes basic mutexes semaphore think also interested approach take towards refactoring process including following num literature paper design pattern around thread something beyond introduction mutexes semaphore need massive parallelism either way design model handle asynchronous event thread correctly num way diagram threading various component easy study evolve solution uml equivalent discussing thread across object class num educating development team issue multithreaded num would