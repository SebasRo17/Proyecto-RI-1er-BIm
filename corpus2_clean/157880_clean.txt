wrote little app manage arbitrary series task e g call sql sproc capture var another app ssis package dependency task task status waiting start failed waiting retry failed abandoned succeeded etc internally task field enum taskmanager start task monitor success failure dashboard winform display progress expose task status enum throughout app taskmanager always expose approach expose status enum mean taskmanager also dashboard dependency possible value almost posted question review balance think fit better sense mostly matter principle dashboard interacts task status two place first displayed datagridview summarizes task really use text instead allow prettier value second status value compared status column sorted obviously work either way taskmanager iffy part example taskmanager prop originally task exposing status directly put logic taskmanager public get task count isenabled status running status aborting status public get task count isenabled status succeeded status public get task count isenabled status waiting could move logic property task protecting taskmanager needing know enum public bool isrunning get status running status aborting status public bool iscomplete get status succeeded status public bool get status waiting however place much simpler taskmanager see task status directly public abort exception ex state aborting foreach task task task task status running task task abort ex course could add new property task maybe called mean task aborted principle separate one several touch point end isx property every possible really made easier maintain app personal use choice really matter like know right way consensus