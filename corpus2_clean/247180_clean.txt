building asp net web api num solution learning purpose hit snag wondering anyone could tell exactly missing web api solution num layer contains model pocos fluent api mapping ef context migration seeding repository implement crud model return business model domain service business supply irepository interface hold service implement application business logic also contains business model web web api controller di ioc tie everything together reference follows repository domain web reference num layer di idea behind separate domain layer completely oblivious anything happens repository layer simply outline requirement providing irepository repository layer business model want get result repository layer meet domain layer request since domain tie know anything structure model mean repository layer need convert everything business model returning suppose could generic map generic business model inside domain layer would appropriate since domain know anything model pas expression apply set repository mean every property want create poco specific repository matching outline requirement implement requirement quickly get though call bunch monkey central want create composite business model requires complex query hydrate option create yet another matching repository write complex query repository layer case feel like service layer mostly another step pass along non crud request specific repository proper web api controller send request directly repository would seem pretty silly route crud request service layer pass request repository layer anyway service layer entry point operation web acting consumer service offered currently use unit work lot mixed opinion come uow ef yet experienced enough either side fence would uow helpful scenario feel like missing vital part make pattern layer approach tick know could easilly proceed cheating e give service access specific stuff like context interested learning proper way research done far yielded result vary wildly repository using automapper change business model without actually executing query allowing service layer pas business model expression applied running query returning mapped result sound great except approach seem work due automapper able deal model recursive nav property service layer interfacing directly pocos thus direct access dal missing edit explain generic repository github contains crud method like one public abstract repositorybase tid irepository tid entitybase tid new tid new private readonly shortstuffcontext context public repositorybase shortstuffcontext context context context public ienumerable getall context set linq extension either grab entity take expression fetch single entity us valueinjecter map model domain model repository method requested domain layer via interface public interface irepository tid entitybase tid ienumerable getall repositorybase extended repository individual pocos currently sit empty providing tid repository base public userrepository repositorybase entity user user decimal public userrepository shortstuffcontext context base context requested domain layer via constructor injection irepository user decimal userrepository ninject binding