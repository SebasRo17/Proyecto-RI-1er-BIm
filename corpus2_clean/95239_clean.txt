looking doc posix pthread mutex window mutex critical section noticed easy way checking whether current thread hold specific mutex posix pthread mutex tested reentrant artifact non reentrant mutex ofcourse checking whether another thread hold mutex trivial allow checking whether current current thread hold monitor thread advised used debugging likewise interface util concurrent lock lock also provide checking implementation however imagine quite easily implemented alongside lock even required implementing reentrant mutex would require unique handle thread already available threading library could even tl pointer whichever smaller num extra field one handle one num locking lock acquired increment set handle current thread handle num unlocking unlocking decrement set handle nil num num testing get handle compare current thread handle may possible without long simultaneous write mangle bit read way handle read written e reading thread handle race condition possible num rest happens lock held may irrelevant depending memory model given size read one word edit atomic read write scheme used even solved entirely even necessary mutex reentrant making reentrant edit2 want clarify would used debugging purpose asserts example ensure need lock held caller actually race condition irrelevant num first requirement need way write read concurrently way would get value actually written num second test handle would treat nil handle another thread way num way would equal handle current thread written locking