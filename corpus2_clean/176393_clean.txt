service endpoint initialized using di following style end point used across app public customerservice private get set private icustomerrepository repository get set public customerservice icustomerrepository repository repository repository public save customerdto customer valid customer repository save customer changing requirement going different type customer legacy regular requirement based customer validate persist customer different way e g legacy customer persist wrong way break di somthing like public save customerdto customer customer legacy valid customer save customer else valid customer repository save customer option seems like num di possible icustomerrepository switch based seems wrong num change service signature save validation icustomerrepository repository customerdto customer invasive change num break di use strategy pattern approach something like validation customer validation valid customer static need know initialize different service sure common problem right way solve without changing service signature breaking di