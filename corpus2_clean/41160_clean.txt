know question already closely related subject none take ubiquitous language starting point think justifies question know ubiquitous language concept defining spoken written language equally used across developer domain expert avoid inconsistency miscommunication due translation problem misunderstanding see terminology show conversation team member functional spec whatnot wondering deal ubiquitous language non english domain personally strongly favor writing programming english completely including comment ofcourse excluding constant resource however non english domain forced make decision either num write reflecting ubiquitous language natural language domain num translate ubiquitous language english stop communicating natural language domain num define table defines ubiquitous language translates english thought based option num strong aversion mixed language coding using member name etc non english programming language breathe english large extent technical literature design pattern name etc english well therefore case way writing entirely non english language end mixed language anyway num force domain expert start thinking talking english equivalent ul something probably come naturally therefore hinders communication significantly num case developer communicate domain expert native language developer communicate english importantly write using english translation ul sure want go first option think option num much better option num think missing option update today year later dealt issue daily basis say option num worked pretty well tedious initially feared translating real time talking client problem either also found following advantage based experience translating ul make pay attention defining ul even domain especially know translate term start looking dictionary etc even caused reconsider domain modeling decision time help make knowledge english language profound obviously much pleasant look instead mind boggling obscenity