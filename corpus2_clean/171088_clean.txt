writing c managed wrapper around native dll dll contains several hundred function case first argument opaque handle internal dll obvious starting point defining class wrapper would define class corresponding opaque type instance holding managing opaque handle passed constructor thing little awkward dealing callback dll naturally callback handler wrapper static callback argument invariable contain opaque handle order get static callback back instance created static dictionary associating handle instance constructor entry put dictionary entry removed destructors receive callback consult dictionary retrieve instance corresponding opaque reference obvious flaw something seems problem existence static dictionary mean garbage collector act instance otherwise unreachable never garbage collected never get removed dictionary dictionary grows seems might manually dispose object something absolutely would like avoid anyone suggest good design allows avoid