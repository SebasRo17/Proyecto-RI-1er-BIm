following problem scenario text file read split line line might need dropped according criterion fixed line dropped must parsed predefined record record valid must dropped duplicate record may exist case consecutive duplicate multiple record exist one item kept remaining record grouped according contained one field record belonging group appear one another e g record group numbered num num num num group numbering start num record must saved somewhere consumed order produced implement c first idea define function method like one get line file one filter unwanted line one parse filtered line valid record one remove duplicate record one group record number problem going read big might fit memory cannot construct list apply function one hand think need fit memory record consumed underlying basically line text previous record current record record disposed little knowledge haskell immediately thought kind lazy evaluation instead applying function list completely computed different stream built top moment needed portion stream materialized memory implement c question design pattern technique allow implement lazy processing stream one language