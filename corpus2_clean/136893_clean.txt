context developing application using domain driven design approach want use design pattern wherever appropriate apply solid principle scenario order want allow client add order line consider following pseudo order orderlines readonly orderline orderline product amount orderline create product amount save orderline let add orderline order order create product chocolate cake amount num way case relatively complex logic involved creating order line one reason applying factory pattern problem problem could instead orderline create product chocolate cake amount num save orderline get around order effectively short cutting check performed e g protecting duplicate limiting order amount working towards solution argument could save orderline aggregate root would like want render client incapable storing bare orderline except adding order saving order consequently however save repository concern non root aggregate allows saving change made directly orderline get num orderline amount num save orderline able save orderline would require something like order orderrepository num order orderlines num amount num orderrepository save order efficient practical could add requirement provide actually redundant order id well would put unnecessary burden client let say want stick save still find way stop client able get around order think dropping creating domain service combine creation assignment orderservice order product amount order orderrepository get num orderservice order order product chocolate cake amount num orderrepository save order really like service combining multiple concern though creation assignment would call factory okay let consider private factory one available client domain service alone case would get stuck unit testing inversion control creating dependency since client able register non public factory summary want client able create order line order way want mangle multiple concern single want keep orderline creation outside order like keep using factory little stuck trying find best way deal suggestion