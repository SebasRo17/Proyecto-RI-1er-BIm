recently noticed implementing pattern similar one described starting interface public interface user getuser userdata getuser pure job somehow user would operation speaking composite term might many implementation thing user basing really matter leaf composite term fairly simple leaf used one composite moment follows implementation public interface predicate userdata predicate provider public public user getuser public predicate userdata predicate provider idea behind simple register provider act reusable entry point calling getuser use whatever registered provider match predicate requested user help store key map predicate provider internally confuses whether brings mind composite add operation part kind expands responsibility providing user also managing provider collection far understanding go violates single responsibility principle wrong thought extracting register part separate entity inject composite long look decent paper term srp feel bit awkward would essentially injecting dictionary key map silly wrapper around nothing adding following composite anymore add part composite exactly presented pattern called composite felt natural compare realize exactly one however nothing else ring bell approach would take stick srp stick composite pattern design flawed given problem done better way