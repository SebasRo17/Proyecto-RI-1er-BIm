consider fold f z b c f f f z b c looking way write general using map mapthread perhaps flatten thinking monadic bind la haskell using mutable variable word following easy module result z map v function result f result v b c last following even wrong mapthread f z f z f f z b b c last following even even wrong invoking haskell state monad although could written recursively general recursive form would simulacrum fold functional garbage around binding function return v function v bind fv function v v v v fv v bind bind bind return z v function return f v v function return f v b v function return f v c z first beginning think fold critter kind state monad disguise inherently recursive representable map friend inherently iterative yet able prove possible even though found solution anyone happen know edit reason looking build reactive version around observable observer pattern formally dual iterable iterator pattern replaces map subscribe sort know reactive partner fold ultimate objective