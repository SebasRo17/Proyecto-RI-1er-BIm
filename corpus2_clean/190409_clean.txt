desiging file format want right since binary format first byte byte file form valid textual character like png file header1 allows tool recognize format still see text file looking first byte codepoint 0x7f invalid u ascii easy unicode whole different story apart valid unicode character private use character sentinel found unicode private use character sentinel faq would sentinel sequence byte use start file would result invalid u ascii utf num utf utf obviously first byte cannot 0x80 would valid u ascii control character 0x00 cannot used also since private use character valid unicode character use codepoints either since must work little endian big endian utf num also possible reverse valid unicode character mentioned faq suggests using would still result valid unicode sequence something like also picture would future proof sentinel value left use num png format first byte non ascii followed png tool read first byte png may determine binary file since cannot interpret gif file hand start directly valid readable ascii gif followed three valid ascii character gif tool might determine readable text file wrong idea starting file non byte sequence came designing file format andy