new ddd ioc di trouble figuring design entity need use state pattern manage status transition somewhat complicated using finite state machine fsm handle state using stateless complicate situation fsm need loosely coupled entity e know state entity must handled fsm necessarily know exactly fsm e entity know state trigger transition might go user use term workflow define fsm state trigger transition rule etc workflow change independently entity might want add new state change rule trigger etc independent change entity handling dynamically loading assembly contains definition fsm implement known interface using service injected entity entity call service get fsm using involves potentially loading assembly caching factory creates fsm assigning fsm appropriate state entity finally fsm set valid trigger provided ui one trigger selected fired actual workflow completely encapsulated externally entity currently entity look something like public private readonly public order service status service status status note two lambda used retrieve set state entity workflow service status status public get set public workflow get private set public status get private set concerned design basic understanding domain entity dependency injected yet injecting one also understand entity need handle state hesitant move workflow completely entity idea like init would move injection injection would clean way design entity requirement ok inject dependency situation