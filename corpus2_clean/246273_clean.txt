originally asked question stackoverflow directed think problem perhaps much conceptual technical go defining hierarchy abstract c creating concrete subclass implementation could end abstract class something like say b1 b2 concrete class inherit like b1 b2 b1 b2 c1 c2 d1 d2 fine dandy cn dn implementing interface bn say c1 c2 implement interface differently however want shared functionality c1 c2 come interface put go abstract dn inheriting seems like notional c implementation belong another ancestor composed sibling b1 c b2 v b1 b2 c c1 c2 c1 c2 c1 c2 c delegate first one seems conceptually accurate requires virtual inheritance second requires delegation impose performance hit despite real ambiguity reading around web website find said people believe purpose inheritance reuse c wrong stated plainly inheritance reuse implementation shared thought found relevant discussion question concept favor composition inheritance come interface inheritance best world real reason multiple inheritance hated think answer much point helped mentally cut lot question answer discus inheritance agreeing fulfil contract multiple inheritance fine subclass really guarantee fulfilling parent contract implementation however really concern final yes might convenient inherit implementation sometimes actually orthogonal interface various technique pulling implementation default v table based approach including crtp per answer template pattern think equivalent except one compile time one time