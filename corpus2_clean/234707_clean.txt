got project wherein basic created various different attribute modified given via thought good example strategy pattern silly game enemy multiple different potential pattern movement enemy basic pattern movement default otherwise strategy pattern implemented randomly choose different one game progress enemy obj update something like def update self self unique action self check shooting self find new rect replacing self unique action fly strategy pattern using think called higher order function def new pattern movement obj func def inner kwargs different stuff intentionally returning idea replace default unique action inner eventually generating bad guy level enemy new ai random choice new pattern movement pattern pattern etc etc unique action new ai unique action thought self change attribute part wrapper well change method set point graphic dumb stuff like def alt action obj def inner kwargs unique action returning obj unique action obj point num obj color color yellow obj speed num inner evidently regarded javascript find terribly simple though preferable stringing along bunch object inherit long chain ancestor job anything situation really critical split separate class first example least seems fine really replacing one another second example definitely redefining attribute go bit depicted replacing self draw method necessary might bad stupidly easy good example implement strategy pattern