working idea seem find good answer though hour hour searching planning small canvas webgl application application using websockets talk game server syncing think mmo service im planning queuing system load asset e g make request get model1 texture q p get asset model 1 model num num num get asset model 1 texture num num num get asset model 1 model num num num get asset model 1 texture num num num get asset model 1 model num num num get asset model 1 texture num num num key q quality modifier p priority lower better status num started num downloading num complete client processing download que however going another player come view need player model texture add que end like q p get asset model 1 model num num num get asset model 1 texture num num num get asset model 2 model num num num get asset model 2 texture num num num get asset model 1 model num num num get asset model 1 texture num num num get asset model 2 model num num num get asset model 2 texture num num num get asset model 1 model num num num get asset model 1 texture num num num get asset model 2 model num num num get asset model 2 texture num num num wanting cache file browser cache tied using database compressing using something like putting asset online using loading question load asset though browser normally http request browser keep image memory longer rendered use javascript hold base64 remove javascript delete know would free memory holding would free memory used would browser still keep copy image generated base64 memory possible write content loading websockets e g base64 websocket server one found better compression system javascript planning compressing using application server side limit compression javascript supporting