question writing transaction like function execute sequence action may fail related general c principle destructors throw fail property maybe also multi phase transaction exception safety however thinking language neutral term concern correctly designing handling c function must reliable would like know concept called learn sorry ask question directly since know area provided example explain question question end go consider sequence step action executed sequentially action belong one two class always succeed may fail example stand action always succeeds called fail setting f stand action may fail example might fail allocate memory could fail consider sequence action executed sequentially left right since action sequence succeeds whole sequence succeeds hand following sequence may fail last action may fail f claim sequence fail property action fail interested action sequence form atomic transaction failure atomicity e either whole sequence completes successfully effect e action fails earlier one must rolled back requires successfully executed action prior failing action must always able rolled back consider sequence f example first row forward path transaction second row inverse action executed right left used roll back final top row action fails seems transaction support failure atomicity following invariant must hold claim support failure atomicity either successful completion complete roll back failure action preceding latest f action forward path marked example must fail inverse following example sequence support failure atomicity f f f want transaction able attempt cancellation mid way still guarantee either full completion full rollback need following property claim support failure atomicity cancellation mid way execution face error inverse cancellation path action following earliest f inverse reverse path marked must fail f f f f f believe two condition guarantee cancelable transaction never get stuck question study theory property called claim correct else know update num updated terminology previously called robustness called atomicity database literature update num added explicit reference failure atomicity seems thing