building wpf client application using mvvm pattern provides interface top existing set business logic residing library shared application business library followed domain driven architecture using cqrs separate read write model event sourcing combination technology pattern brought interesting conundrum mvvm pattern us command pattern handling user interaction view model net provides icommand interface implemented mvvm framework like mvvm light relaycommand prism example view model would expose number command object property bound ui respond user performs action like clicking button many implementation cqrs use command pattern isolate encapsulate individual behavior business library implemented write model command command handler pair want work create new order issue command routed command handler responsible executing command great clearly explained many source good however take scenario expose property icommand bound button ui clicked ui command creates issue new domain handled difficult explain developer finding getting tongue tied everything command sure first developer pattern overlap like naming terminology also overlap approached distinguishing command used ui used domain edit mention business library ui agnostic e ui technology specific exists exists library