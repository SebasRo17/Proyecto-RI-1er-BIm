company work want improve way write software designing application solid new project week tried apply good practice design example loose coupling programming interface instead concrete dependency injection inversion control seperation concern etc meant springboard test driven development far future application developing need calculate score depending filled survey user survey category question answer splitted calculation multiple class subsequent interface calculating score question category survey etc also front end asp net web form splitted many part page seperate user control example widget show score application widget showing file related application seperate user control week project find co worker especially one older age complaining able find implementation interface directly needing search implementation needing time find implementation particular markup front page also see point splitting seperate functionality user control sometimes usually user control used one page opposite find work better since keep behind page tight lean question apply good practice wrong way simply take time get used note recently developed software tight coupling e g static class never use interface use user control necessary