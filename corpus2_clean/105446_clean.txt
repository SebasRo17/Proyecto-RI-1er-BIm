quite new l design principle understand cause benefit yet fail apply smaller project want refactor practical exercise use solid principle know need change application work perfectly want refactor anyway gain design experience future project application following task actually lot let keep simple read xml file contains database table column view etc definition create sql file used order create oracle database schema note please refrain discussing need use xslt reason topic start chose look table constraint ignore column could state following way constraint part table precisely part create table statement constraint may also reference another table first explain application look like right applying solid moment application table contains list pointer constraint owned table list pointer constraint referencing table whenever connection get established backwards connection established well table turn call constraint said use connection owner table referenced table order retrieve name obviously apply solid example circular dependency bloated term add remove method required large destructors couple question num resolve circular dependency using dependency injection suppose constraint receive owner optionally referenced table constructor could list constraint single table num table store state e g table table comment etc link constraint one two responsibility thinking single responsibility principle num case num right create new logical business layer manages link num would obviously longer relevant num method part table constraint class move well one manager per storage e table constraint rather create manager per link similar num whenever try answer one question find running circle somewhere problem obviously get lot complex include column index guy help simple table constraint thing maybe work rest