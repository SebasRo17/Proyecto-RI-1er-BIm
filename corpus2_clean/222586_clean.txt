learning long time ago nearly beginning stumbled simple question set restriction limitation property without making difficult description problem search method control type also example let creating classical educational circle circle three property two origin coordinate x radius human visible world x real numerical radius real positive numerical somehow solved task circle def setattr self def setting isinstance float radius num raise valueerror attribute radius negative self dict else raise typeerror attribute numerical len self dict num number attribute setting elif self dict raise attributeerror circle attribute else setting nevertheless utterly displeased way done huge small conception almost reusable know descriptor give near result would prefer declarative starting search alternative first thought add operator hard googling realized impossible make still wrong please newbie entering developer team forked way gave thought another possibly path declarative writing something like radius radius isinstance radius float else raise typeerror attribute numerical radius radius radius num else raise valueerror attribute radius negative course work ability use raise able calling error brought reality simplest way wrote raised like def exception exception message something well isinstance exception tuple raise exception else raise exception message allow write radius radius radius num else valueerror attribute radius negative also thought followed form isinstance radius float attribute numerical radius num attribute radius negative def fun radius x x small problem approach complex less evident outing first message lead fake raised place oops actually occurred second line goal make possibility raise exception lambda function line like showed make evident create exception call implemented problem inherited see call self raise self yes ha ha give result typeerror call missing num required positional argument self question simple possible make callable yes read also someone solve small problem would happy p know sample radius declaration showed implemented circle give example show thought track please pick thank much wrote voted topic readed answer thought long finaly raised add augment topic even entail risk rule first people wrote dont need care error creation state even need control type implemented default although long time oriented programming still work calculation technical process device confident word possible localized soon possible say improved many algorithm calculation real physical process use iteration recursion slip later handle occurred mistake could brought hard detectable final result point view duck typing great quick prototyping simplifying applied programming duck typing religion demand nevertheless bizarre thing add control think need style impose perform differ style static language c etc control control point guide u system oriented programming principle mine check exist press may differ meaning another author mean may also another set control point outlet element system system element space interact outside method also simplest version controlling element def func b c like b str b c list c interesting approach shown checking decorator num separately suggested co author property decorator use method descriptor emulate attribute method mode used carefully object shared space let rewrote programm wrote izkata setattr filter radius lambda num else valueerror radius cannot negative circle def init self x num num radius num self x x self self radius radius def setattr self radius filter radius self dict need another perhaps complex negative radius circle need inherit redefine change filter advantage style may obtain using setattr creating metaclass thank answering