designer like providing interface cater power simplicity balance example think linq designer followed principle offered dot notation query notation first powerful second easier read follow disagree assessment linq please try see point anyway linq example post linq call principle dial able power like know people call certainly say kiss common term see kiss superset practice using linq example view team programmer always try use query notation dot notation practicing kiss thus linq designer practiced dial able power whereas linq consumer practice kiss two make beautiful music together give another example imagine c logging tool two signature allowing two us write message write func purpose two signature fulfill need every day simple usage nothing special mylogger write something happened tostring performance critical call tostring logging disabled mylogger write something happened tostring overload represents dial able power consumer choice simple interface powerful interface kiss loving consumer use simpler signature time allow busy looking signature power needed also help self documentation usage powerful signature tell reader performance critical logger powerful signature would dial able power come full circle happy keep dial able power none yet exists help think missing obvious industry standard designation practice none dial able power work p another example related dial able power scott meyer principle make interface easy use correctly hard use incorrectly