question unit testing framework question writing unit test question put ut written compile working effectively legacy michael feather asserts good unit test fast unit test take num 10th second slow unit test think definition make sense also think imply keep set unit test set test take longer separately guess price pay calling something unit test run fast obviously problem c unit test num edit production unit test depending cycle num compile num link num start unit test executable edit weird close vote going detail try summarize point c unit test effectively organized efficient edit test test first problem decide put unit test natural edit view combination associated production easy quick start compilation cycle unit currently changing second related problem compile feedback instantaneous extreme option unit test test unit life separate cpp file cpp file compiled linked separately together source unit file test single executable run one unit test minimizes startup compile link time single test unit test run super fast test one unit executing whole suite need start process problem manage overhead process start become visible side would still one cpp file per test test cpp file together test linked one executable per module per project pick choice compile time still would ok changed compile executing whole suite easy one exe suite take age link recompilation trigger link suit take longer although unit test fast time ok real world c unit test handled stuff nightly hourly second part really matter first part namely couple ut production natural developer keep focus always matter think developer ut focus want brings u back part two real world story experience appreciated note question intentionally leaf unspecified platform make project system question tagged ut c great place start unfortunately many question especially answer heavily focused detail specific framework ago answered similar question structure boost unit test find structure lacking real fast unit test find question narrow hence new question