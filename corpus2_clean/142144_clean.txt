consider following public dosomething break assume process involves finite dependent number step designed terminate result algorithm designed indefinitely cancelled outside event test see end middle logical set step currently check anything meaningful check instead performed proper place within conceptual algorithm told bad bug prone due ending condition checked structure difficult figure exit could invite bug breaking condition might bypassed omitted accidentally given future change could structured follows public dosomething however duplicate call violating dry later replaced call would found changed fact two may less obvious complex piece could also write like public dosomething var complete complete complete complete whose purpose shift condition checking structure also checked multiple time provide behavior original logic part say given algorithm implement real world original readable going way think would intuitive people familiar algorithm better better give responsibility condition checking structuring logic around better structure logic natural way indicated requirement conceptual description algorithm even though may mean bypassing built capability