question good algorithm solving stochastic differential equation implement simple code mathematica efficiently exploiting mathematica programming methodology hopefully may useful stochastic process course instance simple langevin eq single random variable x additive noise read begin equation dot x f x zeta end equation f x arbitrary function zeta gaussian white noise satisfying begin equation e zeta qquad text qquad e zeta zeta gamma delta end equation solve discretize time n dt write begin equation x n x n f x n dt sqrt gamma dt xi n end equation xi n sim n best implementation thus far langevin x f g tf n dt n tf n n sqrt tf g n xx table x transpose nestlist dt f randomvariate normaldistribution xx n take input initial condition x function f x spectral density gamma written g final integration time f number integration point n time step dt f n also take optional argument corresponding number realisation output consists vector x x x ldots x n representing stochastic realisation program applied famous bi stable potential given v x frac x frac x f x v x x x simulates cold gamma data hot gamma data condition first absolutetiming data langevin data langevin analyse steady state discard initial point example show particle remains distributed close potential minimum cold spread hot show histogram flatten data flatten data automatic pdf plot z z z plotstyle red axesorigin plotrange enter image description question immediate improvement function better way different approach compile function gain speed parallelisation follow would extend system langevin equation replacing x f zeta vector valued function loose advantage computing many realisation within nestlist think problem come idea update question thank advance hope may use researcher well note example using idea r generate random number use index iteration move along langevinbad x f g tf n block dt n tf n r randomvariate normaldistribution n sqrt tf g n n xx table x transpose nestlist dt f r xx n maybe coding good version really bad actually nest probably internal variable keep track iteration step idea possible access acl version acl came really efficient code copy completeness originally called l acl langevinacl fn f fn compile x real g real tf real n integer module dt state r dt n tf n n sqrt tf g n state constantarray n state x r randomvariate normaldistribution n state nc state nc dt f state nc r nc nc n state compilationtarget c compile given function use langevinacl absolutetiming dat table code always faster originally posted allows easy parallelisation vector equation vector equation two possibility either particle fluctuating property case usually write e zeta zeta j gamma delta j delta component fluctuating vector particle specific fluctuation e zeta zeta j gamma j delta gamma j entry covariance matrix two implementation former equation fluctuation first simple variation original code suggested acl instead computing several realisation function call evaluates single realisation vector system langevinvec x f g tf n dt n tf n n sqrt tf g n length x nestlist dt f randomvariate normaldistribution x n everything exactly langevin except input x array number note also failsafe check function f correct dimensionality mapping mathbb r rightarrow mathbb r length x second implementation motivated acl code langevinvecacl fn f fn compile x real g real tf real n integer module dt state r length x dt n tf n n sqrt tf g n state constantarray n state x r randomvariate normaldistribution n state nc state nc dt f state nc r nc nc n state compilationtarget c application model ferromagnetism reminiscent ising system random variable vec x x x ldots x representing spin linear chain atom interaction potential given begin equation v vec x sum frac x frac b x c sum x x end equation refers bi stable potential previous example variable representing magnetic order plus harmonic type interaction corresponding force begin equation f x bx c x x end equation matrix notation write begin equation f vec x vec x b vec x end equation vec x stand x x ldots time tridiagonal matrix form begin equation left begin array ccccc c c c c c c c c c c end array right end equation note using periodic boundary condition x x thence c upper right lower left corner f x mathematica b c sparsearray c c band band c band c f x x b x choice parameter somewhat arbitrary perhaps definition f x fastest due dot product use acl version langevinvecacl faster first compile llvec langevinvecacl f two data set gamma pretty cold gamma pretty hot x constantarray absolutetiming data llvec x data llvec x following code show steady state distribution single realisation graphicsgrid map listplot plotrange floor min ceiling max filling axis frame true basestyle framelabel position magnetization last data last data imagesize enter image description seen cold temperature system tends divide domain spin chunked either conversely high temperature domain configuration clearly degraded following function animates time evolution system animatespinchain data animate listplot data plotrange floor min data ceiling max data filling axis length data floor length data