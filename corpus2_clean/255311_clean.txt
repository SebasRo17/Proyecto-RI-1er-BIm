today realized painfully decision need good overall understanding system otherwise risk high assumption turn wrong imagine developer online web shop understand system understand many connected subsystem example num receive process product information various supplier num customer search order product web shop num order processed managed customer service num sap system handle invoicing process num larger system becomes understand knowledge lacking sub optimal solution developed specialized team worked together specialized team understood part system detail deal problem company changed strategy one development team always responsible aspect feature even involves complete process chain kind feature team team working different subsystem effective strategy developer keep system operational process knowledge date think good system documentation key afraid point human mind cannot scale fast system involves point simply simplified assumption turn costly mistake implement maintain know exact detail developer currently face difficult conflict interest num need spend time understand system operational process num need develop maintain time limited num mostly win result mostly gain deeper knowledge along way half knowledge casual conversation know huge company like amazon solve problem would assume single human capable understanding complex process able contribute multiple subsystem time