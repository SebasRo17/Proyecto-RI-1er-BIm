given sort widget based web app lot j functionality high coupling communication callback widget widget draw certain widget need complete fairly expensive redraw every time one dependency changed problem complicated dependency chain becomes difficult make sure redraws happen per user action example need redrawn b c change b dependent c state c change b may end causing redraw happens time easy solve happens becomes nightmare engineer make maintenance even worse assume somewhat common problem must dealing design flawed way suggestion either design pattern algorithm deal limiting redraws would much appreciated edit alright based randall suggestion thinking semaphore like global without multi threading stuff basically global count let would one per widget requires expensive redraws signal wait signal increment wait decrement initialized callback draw widget every time something triggered user event ajax etc signal called event finished changing thing within callback made wait called wait decrementing check count num redraws c change c run signal num c make change callback b b run signal num b make change b run wait num redraw b finish c start c run wait num redraw like dirty flag dirty count think easier implement extended additional functionality fairly easy reason want optimize everything redrawn certain case add flag represent thing redrawn reset every draw also could replaced stack basically thing better extension capability edit num izkata solution turned trivial implement slightly less flexible num change needed add property widget need redrawn wrap redraw timer j draw var cleartimeout settimeout draw num draw old draw go could made private nested draw change needed interface stay work unless need work async like ajax call