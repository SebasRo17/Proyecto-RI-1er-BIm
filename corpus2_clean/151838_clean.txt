first understand folk oppose use singleton think appropriate use case constant state information open differing opinion solution see singleton pattern singleton pattern used second broader audience c cli similar keyword readonly strictly c question literal field versus constant c cli sidenote discussion nuance using const readonly question singleton anchor together different structure part expose singleton list object represent necessary key column order connect linked structure doubt anyone would try change object different module want explicitly protect risk currently using readonly modifier object using readonly instead const list read using const embed item referencing assembly therefore trigger rebuild referencing assembly list modified seems like tighter coupling would want module wonder obsessing moot point question num alternative see using readonly make variable private wrap public get struggling see advantage approach seems like wrapper provide much additional benefit question num highly unlikely change content format list compilation thing avoid using magic string place unfortunately converted using singleton presentation string likewise know change container class list normally argue encapsulation advantage get wrapper provides feeling case representative sample singleton public sealed private static volatile private static new public readonly dictionary mydict new dictionary index display public enum abc num def num fgh num public readonly list new list abc fgh public static instance get lock new private dosomething question num taking reasonable approach case num worrying const v readonly num better way providing information