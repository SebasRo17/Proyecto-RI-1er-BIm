solution project bookstore solution bookstore project bootstrapper c bookstore domain project c c c ivalidator c icommandhandler c bookstore infrastructure project c c bookstore web project global asax bookstore project program c bootstrapper c public static bootstrapper c using di container public static initialize container container container typeof icommandhandler typeof assembly container typeof icommandhandler typeof container typeof servicetype container servicetype typeof assembly container typeof ivalidator typeof c public public ienumerable validate book book author evan yield new validationresult evan cannot author p p author book price num yield new validationresult price less zero p p price c public ivalidator private readonly ienumerable validators public ienumerable validators validators validators public ienumerable validate instance var new list foreach var validator validators var result validator validate instance addrange result c public interface ienumerable validate instance ivalidator c public interface ivalidator ienumerable validate instance icommandhandler c public interface icommandhandler handle command c public icommandhandler private readonly bookstore public bookstore bookstore bookstore public handle command var book new book author command author command price command price bookstore book c public icommandhandler private readonly icommandhandler decorated private readonly ivalidator validator public icommandhandler decorated ivalidator validator decorated decorated validator validator public handle command var result validator validate command result isvalid throw new validationexception result decorated handle command global asax inside app start var container new container bootstrapper initialize container mvc specific bootstrapping container like wiring controller filter etc program c pretty much global asax sorry long setup problem better way explaining detailing actual problem want make public would rather internal make internal able register di container reason would like internal project notion implementation bookstore domain project project need consume ivalidator resolved fulfill validation use dependency injection without breaking encapsulation going wrong