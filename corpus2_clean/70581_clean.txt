note bit c heavy syntax convention citing fxcop rule background intent discussion language agnostic example used generally regarded pseudo mike think would agree class generally designed instance immutable wherever practical result calling member free side effect much possible historical naming convention however tend use active voice getsomething etc good state clearly action member going take beginning think however member might sometimes possibly often benefit named past tense returned without affecting referenced example current naming style would probably called transpose member return new without transposing referenced think calling transposed would accurate make clearer programmer working transpose one might accidentally try use following myarray new myarray transpose transpose return new without affecting referenced nothing myarray would quietly transposed suppose transpose property would catch legal fxcop guideline state member performs conversion named past tense transposed would clearer user following syntax required myarray new myarray transposed name think would fit category would member named resized v resize shifted v shift etc present tense would used member affected referenced past tense would used member returned new without affecting referenced another approach common currently prefix get think add unnecessary weight changing past tense communicates meaning effectively make sense programmer past tense idea sound awkward reading edit great discussion thank everyone lot point like summarize based comment revised thinking follows chaining fluent syntax based discussion use past tense probably used mutable order make clear member affect internal state referenced however immutable class majority case one would hope think use past tense make syntax unnecessarily awkward example fluent syntax created chaining use past tense would make less readable e g using linq via c typical chain could look follows datasource sort take num select x x tostring changed past tense would become awkward datasource sorted taken num selected x x tostring mind datasource sorted actually clearer meaning datasource sort linq expression always create new enumeration without affecting source however since fully aware using paradigm use past tense redundant make fluency reading awkward real gain use property v method key issue brought regard fxcop guideline use get method v read property e g fxcop rule although explicitly mentioned fxcop rule use method would seem apply rationale well since method conversion method case toarray conversion return use past tense boolean property suggested past tense boolean e g succeeded connected property believe retort emphasizing use boolean property field correct past tense help regard nearly much using prefix feel free use past tense boolean property field help think even important prefix overall conclusion issue v transposed think got right suggesting transpose mutating action v non mutating result make num clear think might apply immutable class especially fluent chaining syntax might used think syntax would become unnecessarily awkward example compare var v myobject transpose resize num num shift num var v myobject num num num hmmm actually even seems make num clear result affect source sure guess paradigm like linq well known use get past tense necessary new api might first api contains immutable object user understands use get past tense reduces readability think easy answer guess one need think entirety api choose carefully mike