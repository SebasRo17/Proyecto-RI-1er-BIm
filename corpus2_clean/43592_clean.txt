using mathematica fit multidimensional observation gaussian mixture first adapted step ensure mixture parameter well defined see runing time unacceptable waited hour aborted afterwards tried fitting matlab matlab instantly retrieved error message clustering algorithm state ill conditioned covariance created iteration overcome tried solution concerning covariance matrix definition following suggestion reproduce problem illustrate experiment enclose data part original data sample dimensional try fit gaussian mixture data data matrixform dimension data ndim last nmixtures one solution use single covariance matrix mixture follows implementation mathematica k k nmixtures k k table mm k ndim mean k k nmixtures k w k exp ww k exp ww k nmixtures mixture weight c table j cc j ndim j ndim triangular matrix c transpose c covariance matrix append array w nmixtures total array w nmixtures weight sum q nmixtures q insert q multinormaldistribution mixture share covariance matrix corresponding fitting take second pc using following command edf shared estimateddistribution data mixturedistribution q timing implementation matlab take second data edf shared gmdistribution fit data nmixtures sharedcov true another way go around problem instead using covariance matrix gaussians add small epsilon diagonal covariance matrix mathematica take second hour k k nmixtures k k table mm k ndim mean k k nmixtures k w k exp ww k exp ww k nmixtures mixture weigths k k nmixtures k c k table j cc k j ndim j ndim triangular matrix epsilon epsilonmatrix diagonalmatrix constantarray epsilon ndim diagonal matrix k k nmixtures k k c k transpose c k epsilonmatrix covariance matrix append array w nmixtures total array w nmixtures q nmixtures q insert q multinormaldistribution mixture regularized covariance matrix edf epsilon estimateddistribution data mixturedistribution q timing corresponding implementation matlab take second edf epsilon gmdistribution fit data nmixtures regularize e neadless say evaluating estimated distribution function point execution time also issue implementation using shared covariance mathematica requires second matlab second first approach involving shared matrix applied new point take second mathematica second matlab also tried playing estimateddistribution function parameter workingprecision accuracygoal parameterestimator etc see substantial improvement reduced workingprecision managed cut estimation time second question whether better way mean estimate parameter gaussian distribution mathematica coping ill conditioned covariance matrix better mean faster keeping relatively good accuracy estimation matlab direction enclosed perhaps issue code approach intrinsically inconvenient mathematica suggestion welcome thanks advance