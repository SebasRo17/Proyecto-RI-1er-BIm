know interface abstract class serve base reading loose coupling come decent solution property change new need implemented class using updated example simplified representation real life situation invoice contains contact address property abstract contact get set address get set customer contact customernumber get set invoice get set customer customer get set next decide upgrade contact contain multiple address invoice need one address street get set abstract contact get set list address address get set logically invoice need changed something like invoice get set customer customer get set address get set problem immediately see everywhere used property address change occurence address stated simplified example real life problem would much much bigger contact used throughout entire software conclusion want develop software principle keep software light new version certain module decide create new contact module impact module close non existing added functionality implemented gradually want know tackle versioning problem project currently still architectural design stage want sorted continue