new lower level notation readily used within package code notational addition might improve code base sure end trouble worth example take first step attempt implement natural efficient struct using makeexpression makeexpression rowbox lh x centerdot rh standardform makeexpression rowbox lh rowbox x rh standardform yield oo like notation obj field field obj field field mimicking mma centerdot se let newbie post image frontend package development however placing obj field field within initialization cell cause exact form placed corresponding file form subsequently loaded get e without frontend parsing provided makeexpression definition hence intended notation take effect package instead centerdot centerdot obj field field becomes unintentionally defined priori want avoid overloading centerdot efficiency inheritance encapsulation reason one hack forcibly activate frontend parser loading package invisibly opening file evaluating initialization cell something along line parsingget pathtomfile nb notebookopen pathtomfile visible false frontendtokenexecute nb evaluateinitialization notebookclose nb creates messiness explicitly integrate get package name argument multi argument beginpackage call stub symbol avoiding developmental surprise obj field field reflecting package update single frontend test parsingget mfilepath obj field field kernel grab obj field field let go bit wary going path seems quickly set series cascading hack hand wondering missed something initializioncell like option value anyone extensively used notational perhaps accurately language change package development one might expect able play nicely together since whole package devoted lower level notation mma jason harris notation package anyone going involved notational route would surely want harness package point