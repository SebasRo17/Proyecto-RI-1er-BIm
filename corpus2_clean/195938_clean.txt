writing objective c apps o x io currently implementing service shared across service intended fairly self contained current functionality envisioning one client call fairly complicated series step using private method passing bunch mangling class arrive end result gist fetch log change stored service internal store occurred since particular time simplify log include last applicable change attach serialized value affected object client question unit test entry point obviously would thorough unit test ensure functionality work expected entry point seems harder disconnect rest world would rather send internal class ioc style small made class satisfy single responsibility principle see couple possibility num create private interface header test method call internal class test method separately test entry point make partial mock service private method mocked test method called right argument num write series fatter test entry point without mocking anything testing entire functionality one go look like integration testing seems brittle satisfy test via public interface principle num write factory return internal service take initializer write factory return mocked version use test downside making construction service annoying leak internal detail client num write private initializer take service extra parameter use provide mocked service public initializer back end one would ensure client still see easy pretty initializer internals leaked sure way solve problem thought yet question appropriate approach according unit testing best practice especially considering would prefer write test first meaning preferably create service indicates need