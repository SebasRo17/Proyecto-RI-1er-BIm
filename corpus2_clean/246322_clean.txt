working app talk bluetooth low energy ble device exchange customized team defined model parse payload assign value corresponding characteristic work fine introduced new firmware new firmware value payload defined offset specific changed parsing need updated written according new payload definition come problem two version firmware need supported course could write lot else parsing right happend num firmware update arrive one imagine become hard read lose simplicity wondering elegant way manage co existence firmware version maybe design pattern adopted make specific model temperature following property property nonatomic readonly float temp outside property nonatomic readonly float temp inside library support num different firmware version v1 support temp outside v2 support temp outside temp inside v3 support temp outside temp inside temp inside obtained differently compared v1 v2 assuming firmware provides information within manufacturer raw v1 firmware num num 0a byte num sw id byte num protocol id byte num temp outside v2 firmware num num 0a num byte num sw id byte num protocol id byte num temp outside byte num temp inside v3 firmware num num num 0a byte num sw id byte num protocol id byte num temp inside byte num temp outside best way implement several thing consider num model value might filled specific firmware separate model per firmware make sure supported property accessed num responsible parsing byte model support firmware one parser several condition based protocol id several parser class num usage library within view controller convenient possible