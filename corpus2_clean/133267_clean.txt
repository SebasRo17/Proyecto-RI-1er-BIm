one thing like make sure refactored manageable piece however come building software find whatever build automation software end using lately gnu make scons end becoming complete mess file look like long script seem defy easy refactoring like able refactor way concept quite behave way build automation software programming language find difficult write manageable makefiles file project moderately complicated anyone advice writing manageable file build automation software software agnostic advice would best even advice specific build automation tool would helpful particularly make scons since using project edit thorbj rn pointed add context usage example finishing phd chemical engineering research computational science pro mod se visit project typically involve mix compiled language c c fortran heavy lifting scripting language perl prototyping occasionally domain specific language prototyping technical purpose added two example roughly num range problem generally lack modularity project organized modular unit nice abstract part build along line make easier future maintainer keep track breaking script multiple file one solution toying around head second example particularly important going large number file soon num makefile might look like taken actual project organized best usr bin make directory containing library folder root library root lib wrapper root wrapper c header parser h h f77 header f f header f includes usr include glib num usr lib glib num include usr include libxml2 usr include usr include gtest fortran num environment variable f77 gfortran cpp second underscore coverage common large pg fortran num environment variable gfortran cpp second underscore coverage common large pg c environment flag cc gcc cflags coverage includes large library linking libs l library sparse lm file objs mod model sl parser shell environment definition model sl parser libs misc table size f flag static analysis fortran num declare include library style block distinct enddo end goto labeled stmt structured end exe exe exe exe exe exe check style lexical analyzer echo checking program style rh f f re f f f set baseline coverage file echo set baseline coverage file c info unit test echo running unit test generate test coverage echo generating test coverage test c info unit test echo running unit test generate test coverage echo generating test coverage test c info unit test parser c library echo running unit test parser c g slice always malloc g gc friendly valgrind v tool leak check full show reachable yes leak resolution high num caller num log file exe log generate test coverage parser wrapper c library echo generating test coverage parser c c info unit test c library echo running unit test library c exe generate test coverage c library echo generating test coverage c library c info unit test echo running unit test generate test coverage echo generating test coverage test c info combine test coverage echo combine baseline test coverage info info info info info info info post process remove coverage statistic automatically generated source echo removing coverage statistic automatically generated source r info fun f f fun c fun f f f f f f f f f f testrunner info generate html report coverage echo generate html report coverage info echo open index html browser coverage result exe header f77 header c header exe libs f77 header header c header c exe header f77 header c header exe libs c header f77 header c exe header f77 header c header exe libs c header header f77 header c h parser c header header c h parser c header header c h parser c header header c c h c cc cflags c c exe cc cflags exe libs c cc cflags c c f f f77 c f exe f77 exe f f77 c f recursive makefile inherited previous graduate student model sl f77 header f cp wrapper makefile model mk make f model mk model sl c f h cpp f perl p bak f f perl p bak f echo f echo perl p bak integer integer f perl p bak end f h cpp f perl p bak f c mod c c c num bit version wrapper underscore cc cflags lex c c num bit version wrapper without underscore c interoperability cc cflags lex c c num bit version wrapper cc cflags c c mod mod c mod parser parser c c header cc cflags c parser parser c exe parser cc cflags exe parser libs cpp parser cc cflags c cpp clean rm bak rm f77 rm log rm rm f rm f make clean f model mk rm model mk rm rm mod rm misc rm exe clean rm rm rm info rm png rm html rm cs rm rf html rm pyc rm lst num file currently trying organize project roughly complex file brief compiles library compiles test import scons brief build directory name coin library package name version overall scons environment env environment flag compile using version flag compile google test scratch num num gtest include env library lib gtest num num src gtest cc flag env library lib gtest num num src gtest cc flag include gtest lib gtest gtest pthread armadillo matrix library armadillo quick reminder scons flag path header include directory path library libs flag library c compilation flag location library installed system standard location usr include usr lib configuration information coin library num num num num num num num num standard directory location coin library slash added convenience usr local coin include coin lib clp osi cbc build include directory name coin project constituent part build library name coin project constituent part opt ibm ilog studio include lib x86 64 4 num static pic gurobi opt linux64 include lib osi clp cbc pthread gurobi c pthread env cpp flag env program cpp cpp libs flag env depends source directory file paper f f f filename filename env depends f f include usr local include lib user transport converter gfortran usr local include env program cpp cpp libs flag flag flag env depends env num env alias test env program f gtest gtest pthread env program cpp libs flag env depends env program cpp libs flag