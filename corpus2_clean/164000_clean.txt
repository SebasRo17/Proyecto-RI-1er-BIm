reading article advantage creating generic repository new app example idea seems nice let use repository several thing several different entity type irepository repo new would normally pas ioc constructor var c1 new country united state countrycode u var c2 new country canada countrycode ca var c3 new country mexico countrycode mx var p1 new province country c1 abbreviation al var p2 new province country c1 alaska abbreviation ak var p3 new province country c2 abbreviation ab repo add country c1 repo add country c2 repo add country c3 repo add province p1 repo add province p2 repo add province p3 repo save however rest implementation repository heavy reliance linq iqueryable query ilist find expression func bool predicate get expression func bool predicate first expression func bool predicate repository pattern worked fantastic entity framework pretty much offered num num mapping method available dbcontext dbset given slow uptake linq access technology outside entity framework advantage provide working directly dbcontext attempted write petapoco version repository petapoco support linq expression make creating generic irepository interface pretty much useless unless use basic getall getbyid add update delete save method utilize base create specific repository specialized method handle clause could previously pas predicate generic repository pattern useful anything outside entity framework would someone use instead working directly entity framework original link reflect pattern using sample updated link