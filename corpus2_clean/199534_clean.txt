reason choose homogeneous v heterogeneous ast representation implementing complex domain specific programming language clear asking extra background homogeneous mean tree constructed node single generic example think question really language independent using c like struct illustration consider minimal homogeneous abstract syntax tree node struct node tag node first child node next sibling heterogeneous mean tree constructed node multiple individual type e g one grammar production example want assume particular language using c like structs illustration consider type part hierarchy used build heterogenous abstract syntax tree tree struct node struct integer node node struct plus node node node right node left struct statement node node condition node expression node else expression type depending language year implemented several small special purpose compiler usually ad hoc way never used much real ast usually syntax direct translation good enough process designing implemented new much complex language building ast walking multiple pass verification semantic analysis forth example seems using homogeneous scheme reduces amount front wonder heterogeneous scheme pay better long reason considering hand heterogeneous scheme seems like allows benefiting static checking virtual dispatch etc wonder really useful developing semantic pass forth basically hoping gain insight may real experience read many book moderate amount basic writing experience seen particular dichotomy addressed literature get hand