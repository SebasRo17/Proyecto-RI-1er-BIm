manager push use self defined best practice practice based assumption disagree would like feedback well experienced people practice would prefer answer people involved maintenance huge product people maintained product year developer num year experience preferred manager much experience num year experience practice want use never extends class use composition interface instead extending class unmaintainable difficult think extend needed respect liskov substitution principle never stuck problem prefer composition decoration know serious project banned inheriting sometimes impossible use e ui framework design pattern unusable php simple use case example user need web interface view database table best practice copy random php wich paste modify put html php file never use class php work well small job fact work well good tool work copy paste php good practice maintenance script independent bug somewhere fix without side effect think never ever copy five minute deliver something refactoring copy paste beginner error everywhere time pasted nightmare maintain open close principle rarely get edge effect use unit test afraid small job php use least something get write html separately php reuse time need class php mature mature language like usable tool work class php like zend studio work well use class depends language use programming paradigm choosen oop developer use php5 shoot foot find simple bug fix simply working found never fix even take num second say best practice driven fact lot experience maintaining software production num year know work work community say fad people advocating principle never copy paste evolved maintaining application think find bug fix quickly inform people touched check introduced new bug ideally add unit test currently work web commerce project serf 15k unique user per day base maintained maintained way since num ideally include short description position experience term year effectively maintaining application production real