service app working graph place complex graph memory caching tier single item avoid length time retrieve every individual item disk storage order build entire hierarchy mean whenever item change cache event triggered reloading everything hierarchy storing newer version cache recently made tweak service increase concurrency asynchronous operation mostly network observed contention behaviour multiple incoming request made update item essentially graph update operation unaware concurrent update storage persistence level infrastructure timestamps row allowing u apply optimistic concurrency technique ensuring nobody writing outdated version back storage change child cause root increment version number thus cache event concurrent update may happen child even make difficult tell particular version root supposed really point update time worse concern due concurrent thread contention processor attention caching attempt older version happen caching attempt newer version right minimised behaviour verifying root version cache event still match version saved update operation version number mean another concurrent update since changed cache proceed let last update operation perform cache course minimises chance eliminate outright still possible root retain original version number fetch fetching child object another update happens stroke ill luck manages complete cache ongoing caching attempt completed round complicate issue service deployed cluster server knowledge sibling wondering effective way manage concurrent update across multiple thread server ensure cached copy indeed always latest copy