graph g may directed wondering efficient way using say breadthfirstscan findshortestpath count number path source vertex v sink vertex v b certain length right simply sequentially running vertex graph applying findshortestpath determine distance vertex source sink vertex seeing total distance total path distance fact put path list later pruned redundant path path revisit vertex assuming plenty memory spare better faster solution let better specify looking provided undirected directed graph g want count number possible ordered set q q n unique vertex v source v sink q one must visit move source vertex v source sink vertex v sink q q e total number vertex along path q including source sink two path q q b may common vertex individual q cannot redundant vertex e multisets please note however would open elegant nice solution allow repeat vertex visit forbid repeat edge traversal