long list number interested finding length sublist total list would get length total total total last two number total ignore easy imperative solution thresholdfor nums list module sum k reap length nums sum nums k sum sow k k sum thresholdfor addition kind ugly needing also pretty slow function index list often take second process list random number picked uniformly futzed around lengthwhile takewhile like deciding tha really needed full generality fold accomplish needed thresholdfold nums flatten last fold sum length acc sum acc length sum length acc nums arguably idiomatic even bit slower thresholdfor speed thresholdfor lot compilation suitable adaptation get rid reap sow pair little wrapper handle empty list properly compiledbody compile nums real n length nums module result constantarray n sum k fill n sum nums k sum result fill k k sum take result fill thresholdcompiled nums list compiledbody nums thresholdcompiled dramatically faster compilation run m list number time slower mean total data still always think going bit blind alley start using compile make imperative list processing algorithm fast enough use finally come something mathematica esque actually much slower compiled solution taking m thresholdclip nums difference flatten position foldlist clip plus randoms tried couple tweak speeding thresholdclip including one replaces position pick compile whole thing seem lot good