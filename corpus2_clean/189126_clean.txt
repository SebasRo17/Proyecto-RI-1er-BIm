trying figure good practice designing many optional component specific example say interested designing feature extractor take document return list feature extracted document question many optional component kind approach would considered good practice scalable couple option able think though may approach considered approach num based extract feature text use classification def init self term frequency consider negation po tag self term frequency term frequency self consider negation consider negation self po tag po tag could many def extract self document extract feature document feature self term frequency feature extend self extract term frequency document self consider negation feature extend self extract negation document self po tag feature extend self extract po tag document feature def extract term frequency self document pas def extract negation self document pas def extract po tag self document pas extractor term frequency consider negation po tag extractor extract document approach num argument def extract document function extract feature document feature function feature extend document feature def extract term frequency document pas def extract negation document pas def extract po tag document pas extract document extract term frequency extract negation extract po tag approach num mixins multiple inheritance something combination first second approach though sure would done idea direction head would greatly appreciated