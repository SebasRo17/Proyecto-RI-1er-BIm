wanted ask people case make sense unit test statically typed functional written haskell scala ocaml nemerle f haxe last really interested wanted tap knowledge bigger community ask understanding one aspect unit test spec runnable form however employing declarative style directly map formalized spec language semantics even actually possible express spec runnable form separate way add obvious aspect unit test track error cannot revealed static analysis given safe functional good tool extremely close static analyzer understands would seem shift lot safety towards static analysis however simple mistake like using x instead coordinate cannot covered otoh mistake could also arise writing test sure whether worth effort unit test introduce redundancy mean requirement change implementing test covering must changed overhead course constant one could argue really matter fact language like ruby really compared benefit given statically typed functional programming cover lot ground unit test intended feel like constant overhead one simply reduce without penalty deduce unit test somewhat obsolete programming style course claim lead religious war let boil simple question use programming style extent use unit test quality hope gain way round criterion qualify unit statically typed functional covered static analyzer hence without need unit test coverage