working code numerically integrates function let call g call another function f defined according several model one model analytic expression f model f need defined loading data file interpolating different data file model analytic one one way tried switch statement f get choose whether use analytic expression take data file time called based option provided load data file interpolate ffromfile filename ffromfile filename module fanalytic b c b c f b c optionspattern switch optionvalue model file ffromfile optionvalue source b c expr fanalytic b c g e f phi opts optionspattern block g h bunch calculation figure g h f g h opts calculation involving generatedata phi opts optionspattern nintegrate g x z phi opts x x z method quasimontecarlo precisiongoal unsurprisingly turned slow another method tried predefine f since model used throughout integration load data file interpolate ffromfile b c module v v readlist filename fanalytic b c b c switch themodel file f ffromfile expr f fanalytic g e f phi block g h bunch calculation figure g h f g h calculation involving generatedata phi nintegrate g x z phi x x z method quasimontecarlo precisiongoal filename themodel would defined prior running code snippet way faster though turn kind inconvenient sometimes want run calculation compare two different model example two different file requires run one save data file quit kernel ensure definition cleared start run plus method passing information function defining variable advance filename themodel make kind queasy way get best world namely able specify model passing option generatedata still retaining speed benefit predefining f