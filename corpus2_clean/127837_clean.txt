considering add task android activity flexible way use implementation inheritance one thing would like use use something else think need draw domain first bit activity ui window basically intrinsic lifecycle responsibility enforced api task speak ui visible offline stuff disappear stem asynctasks problem already even pretty generalized interface looking design improvement make many activity could work type task instance search window would task add one search result let say book collection book application allows add multiple hence window display collection task let export book external file format stop browsing collection yet need display progress bar may take export specific task exists nested specific activity need saved away restored along lifecycle event onsaveinstancestate bundle onrestoreinstancestate bundle among others activity list active task member one task ui event create new task add list la onclick atask task new atask task execute something considered far implementation inheritance move task business abstract super specific activity decorator pattern create would add responsibility activity decorator would mimic entire activity interface provided api mostly though may already bit heavyweight would also need add ui event button launch task may always possible action consequential biggest problem could come android us manifest loosely couple activity together therein need declare every specific activity used problem decorator would work runtime composition declare decorator add information need wrap specific activity android seem end implementation inheritance lot like hence much coupling duplication activity always easily grow big fat class correct say partly existing design choice android framework manifest taking away composition solution context correct say get go cut away significant amount established design pattern key area including mvc pattern decorator wrapper specify decorator specific activity applies together manifest mean create class represent arrange composition could course create many class also implement activity interface act like decorator wrap real specific activity sure solves problem though seems like lot work lot rubbish class take far original goal strategy pattern skin activity better outsource part gut give yet connection though activity need know strategy strategy however lightweight decorator yet feel much like strategy choice one rather moving part another would call taskmanager would still pull strategy knowledge activity super pattern pattern best choice shun opinion specific android case need talk task specifically