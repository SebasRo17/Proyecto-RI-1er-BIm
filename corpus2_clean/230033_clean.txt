looking datastructure handle cycling large number ordered subroutine active thinking need implementation set like remains ordered modified easily iterated care actual work long simple efficient way read element order notably modified iterated allow implementation specific form subroutine program unfortunately cannot use built subroutine module program emulating behaviour legacy system precisely need finer control effectively list subroutine referenced index number dictionary subroutine iterated ascending order last reached point lowest number one however large number subroutine time active one active skipped order running considered simply giving routine active flag would tested running however enormous number potential routine compared tiny number active one make much slow subroutine occasionally activated deactivated running must fast looking keep list key active one iterate adding removing activated deactivated looking reasonably efficient way maintaining list two system seem feasible sorted set however sure support modified iterated using two heapq shifting item order definitely support modification time would require lot manual work would probably slower however somebody may much better answer either appreciate idea achieve reasonable efficiency ideally pythonic way though deal little ugly job