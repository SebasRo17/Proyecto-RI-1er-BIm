like tdd started everything mocking object creating interface stubbing great design seems work implement stuff lot used stub going reused real implementation yay duplicate test use real implementation keeping mock sensitive stuff like database service context http call etc change mock stub actual test use real object question keep two test replace stub mock keep designing mock stub go real object making clear keep mock sensitive stuff like database service context situation edit fact public change status var dbcontext var repository irepository foo var predicate func foo bool repository expect x x get predicate foo repeat dbcontext expect x x commit var stub x x fooview whencalled delegate var foo repository get predicate foo status status rejected fooview status status rejected tostring fooview repository dbcontext assert fooview status rejected assert result count num test mock repository context stub facade trying say change stub facade use real tested fact public change status var dbcontext var repository irepository foo var predicate func foo bool repository expect x x get predicate foo repeat dbcontext expect x x commit var new var result repository dbcontext assert result leave everything mocking stubbing test design create new one test implementation edit thanks answer think understand better must know sut test mock stub sut component help sut pas test