enum x c enum x c num hidden inner field hold addition number predefined constant x defined enum possible cast enum integer vice versa c c num c enums used hold individual value also hold bitwise combination flag per microsoft recommendation enums usually necessarily decorated flag attribute make life developer easier bitwise operator etc overloaded easily something like c flag sign experienced c developer programming c couple day known c convention intend use c num enum exact way used c c num bitwise operator scoped enums overloaded wanted overload solicited debate opinion seem vary three option num enum used hold bit field similar c flag operator overloading sign without operator overloading static cast static cast sign static cast would counter strongly typed enum philosophy c num scoped enums num use plain integer want store bitwise combination enums flag static cast sign static cast would reduce everything leaving clue supposed put num write separate overload operator hold bitwise flag hidden integer field unsigned flag public flag num flag static cast unsigned define bitwise test set operation flag sign full intellisense whatever support hint possible value know subjective question approach use approach widely recognized c approach use dealing bit field course since three approach work looking factual technical reason generally accepted convention simply personal preference example c background tend go approach num c added benefit development environment hint possible value overloaded enum operator easy write understand quite clean signature show clearly kind expects people disagree probably good reason