implementing swap algorithm binary matrix generate matrix permutation maintain row column total problem matrix large sparse e g x fill standard algorithm pick two row two column random examine x sub matrix define either flip entry otherwise nothing try another combination row column version optimized swap matrix module r c submatrix rowschoice colschoice outout r c dimension matrix submatrix submatrix submatrix rowschoice randominteger r colschoice randominteger c submatrix extract matrix flatten outer list rowschoice colchoice output replacepart matrix mapthread submatrix optimization aside obviously large sparse matrix overwhelming majority random submatrices satisfy swap criterion process quite slow trying come efficient algorithm shoot dark simple possibility constrain row column choice example making sure least one submatrix another idea working first make list submatrices satisfy swappable condition one simply chooses one making first list fairly easy slow given matrix sparse allsubmatrices matrix module one fill onecorner otheronecorners onecorners othercorners cornerfill one position matrix fill length one case flatten table onecorner one otheronecorners select drop one onecorner onecorner table onecorners onecorner otheronecorners j othercorners onecorners onecorners onecorners onecorners cornerfill extract matrix othercorners cornerfill onecorners onecorners onecorners onecorners j length otheronecorners output list pair row column define swappable submatrices harder trick swap modify list reflect new set submatrices swap change four matrix entry remove valid submatrices depended entry relatively easy find existing list swap potentially add number newly valid submatrices need found well yet figured find quickly go rabbit hole wondering stackexchange genius suggestion best way speed swap algorithm stick basic algorithm work optimizing compile known obvious efficient algorithm sparse case missing thanks gareth