problem reuse thinking question software delivery kept coming back issue reproducibility matter repeat project becomes difficult improve process used build project engineering involves constantly improving process involved design construction order produce higher quality project software rely heavily upon reuse due digital form instead rewriting module call copy system example authentication login perhaps logging many well known example category conventional wisdom reuse exists instead rolling comparison discipline construction contrast construction physical system building bridge nowhere near reusable blueprint house reused many time build copy house construction must performed time cut paste work like analog world bridge blueprint less reusable house site condition vary master builder expert recognized designed built ten hundred thousand thing area example frank wright world renowned architect designer designed num num structure completed num work contrast anders hejlsberg designed five language turbo pascal delphi j c typescript many way unfair comparison domain different broad level quantifiable production two intelligent people vastly different martial art martial artist say mastery move come thousand repetition good portion repetition put many martial artist surprised previously perceived complex kata form become simple instructor student also notice motion becomes fluid well economy motion likewise experienced martial artist able pick complex katas quickly less experienced student experience repetition given framework process allows learn quickly woodworking experience similar transformation hobbyist always refer back first project required lot drawer complete project gain new appreciation efficiency assembly line produce benefit better understanding lay drawer part sheet stock order maximize use wood compared hobbyist professional able quickly design start construct item made many time also gain ability see inherent issue within someone else design made mistake work software reuse prevent software developer becoming proficient many way software design construction always new repeat past work reuse module library system extend existing system rewriting entire thing scratch repetition allows u find efficiency design construction anyone practiced sport physical activity tell repetition key becoming good practitioner question software ability reused prevent necessary process improvement efficiency come repeating project