functional programming feel like add extra layer abstraction seems like onion layer encompassing previous layer know going oop principle worked year anyone explain functional accurately depict encapsulation abstraction inheritance polymorphism think say yes encapsulation via tuples tuples count technically fact functional programming utility language know haskell meet interface requirement certain fact functional guessing fact functors mathematical basis could say definite built expectation functional perhaps please detail think functional fulfill num principle oop edit understand difference functional paradigm oriented paradigm fine realize plenty multiparadigm language day really looking definition outright fp think purist like haskell num thing listed cannot e encapsulation done closure wrong belief please state