parsing set xml file different kind kind known advance requirement want represent xml document xml mapping rather different kind identifying xml file equivalent looking instance know kind advance want specific behaviour sake simplicity let consider need open different number two know kind even number odd number term design pattern use variation factory design pattern init top level set correct implementaion changing dynamically number def init self val common implementation case xml recursion xml import self val also point discover hence constuctor also factory appropriate val num num self elif val num num self else keep default number implementation pas number def half self specific behaviour even number self num number def next self self x number num number num algorithm processing depends isinstance x x half elif isinstance x x next think approach knew could read surprised also written think changing dynamically well known design pattern factory pattern state pattern strategy pattern even seems related edit real use case want open taxonomy made xml except generic xml want handle precisely xml label xml definition etc substance done xml elementtree generic def init self filename parse xml self definition self elif self label self property def self self find xpath expression tag property def label self find appropriate element return list label property def definition self return definition alternatively could used factory think something like look elegant first approach xml elementtree generic def init self tree self tree tree property def self get self property def label self find appropriate element return list label property def definition self return definition def build file tree parse file get tree defintion tree elif get tree label tree else tree def get tree tree find xpath expression tag