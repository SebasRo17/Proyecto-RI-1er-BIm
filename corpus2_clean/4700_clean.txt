epilogue paper answer used published answer cited among reference background fit objective function datasets near real time near real time order second compile huge objective function take microsecond execute using nelder mead method average converges step mean one minimization take miliseconds microsecond whole fitting could done second eight core problem matter quickly objective function calculated nminimize always take least m mean fitting take minute eight core question somehow get rid m delay nminimize otherwise rewrite program c delphi like much better still looking forward toy example illustrates problem regardles value loopcount deadtime always similar clearall hi p loopcount hi p numericq b numericq co loopcount co b b sin b n tt hi p n absolutetiming print timeperfunctionevaluation tostring n time sol point reap absolutetiming nminimize hi p b b method neldermead postprocess false randomseed maxiterations precisiongoal accuracygoal evaluationmonitor sow b time sol length point deadtime time n length point print deadtime tostring deadtime timeperfunctionevaluation b deadtime edit thank almost solved real problem struggling technical detail stem fact completely understand lineable apply work problem also sure separate question objective function set take number data point apart parameter fit number data point data set change experiment way compile objective function data set fit way neldermeadminimize set compiles algorithm different dataset non negligible overhead especially compiling c toy example clearall f toy bench toy objective function take microsconds run toy compile b c x z co randomreal x b c z runtimeoptions evaluatesymbolically false comparewithtolerance false compilationtarget c setattributes bench holdfirst bench expr n module tt tt expr n absolutetiming n bench toy randomreal toyf evaluate toy sequence sequence x z compile c neldermeadminimize toyf x z compilationtarget c absolutetiming bench neldermeadminimize toyf x z compilationtarget c x z compile vmw neldermeadminimize toyf x z compilationtarget wvm absolutetiming bench neldermeadminimize toyf x z compilationtarget wvm x z seem get compiled every time bench neldermeadminimize evaluate toy sequence sequence x z x z compilationtarget wvm bench neldermeadminimize evaluate toy sequence sequence x z x z compilationtarget c benchmark one see compilation c much slower wmv already known matter much whether algorithm compiled c wmv last benchmark one see algorithm compiled every time minimization take half second way compile minimization algorithm whole data set code similar would get compiled instead time bench neldermeadminimize evaluate toy sequence randomreal sequence x z x z compilationtarget c edit managed hack version work great purpose compile like hi first take varaibles data point spectrum constant var int p lm lm bl bl symbolicspectrum array unique length spectrum cm neldermeadminimize dump compiledneldermead hi evaluate var symbolicspectrum compilationtarget c absolutetiming call compiled function time different spectrum jsut call cm time spectrum cm initialpoints spectrum take m per dataset computer m spent evaluation objective function think simply amazing oh setting need ccompilerdriver ccompiler ccompilerdriver intelcompiler intelcompiler got free factor take m per data set