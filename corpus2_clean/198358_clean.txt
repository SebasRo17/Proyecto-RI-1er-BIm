want save user generated signature user generated let say user fill form want sign written server side random server language big enough library cover everything need client side javascript webapp spa single page application client machine cellular fairly new smartphone still slow cpu compared standard desktop laptop db backend insecure possible tamper many person access machine perhaps cloud strong sequential continuous backup difficult tamper already written something similar secured sequential log perhaps digest log shipped continuously secure server sequential log kept another cloud totally separate first one save hash even random machine want able make difficult third party read write access db machine read access server machine add modify record created user deletion program real update delete operation every update delete simply add new version mark old old hash continuously saved tamper proof backup even protect update old thing protect adding new spoofing existing user use secure transmission certificate bought ssl cert authority know really secure site javascripts go user weak point someone could install keylogger directly javascript watched around seem possible sign javascript send client let client check signature probably javascript dynamic language would let malicious javascript inject signed random piece javascript base library would difficult firewall everything pre existing environment could check signature server side server program signed sends javascripts signed want use client side ssl certificate difficult use user user change computer reinstall certificate user forgets certificate computer possible steal solution thought use generate public private user password plus client sign user client side public private key generation happens client side user created password chosen client generates public private tell server generated public key user need remember password clearly weak point someone could add new public key user server sign something new public key would quite easy spot would new public key something clever would change old public key resign everything user signed new key would impossible show tampered tamper proof log another weak point would user side someone could install keylogger steal password problem standard password scheme add totp authentication see end password recovery would handled manually super user would confirm identity user sign change password super user key let make little complex private key generated pbkdf2 salt unique user sent server plus user password sadly make software compatible cell phone need keep iteration pbkdf2 low mmmh old w num iteration require num second s3 nearly instantaneous num iteration strong perhaps could use instead pbkdf2 resistant gpu attack end would user insert username password press button client asks server salt number iteration hashing time day stop attack based reusing signature calculates hash password using pbkdf2 regenerates ecc private key sign message contains operation requested time day received server sends signature server must remember challenge given replied exhausted could add two step verification using algorithm used google authenticator example key would shared user server one time password could inserted various message signed client server could save calculated time totp would easy verify later time question everything ok pre made solution everything hole reasoning