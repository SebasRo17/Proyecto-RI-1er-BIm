draw delegation encapsulation business logic seems delegate anemic become however delegation also promotes reuse dry principal appropriate delegate remain domain model take following concern example authorization domain responsible maintaining access control rule property delegated another component service solely responsible managing access e g combination two perhaps domain property delegate internal perform actual work validation discussion relates validation maintains rule responsible evaluating one hand state belong validity state want rewrite used evaluate rule every domain could use inheritance case creation factory versus factory method versus newing instance use separate factory able isolate encapsulate creation logic expense opening state factory managed domain layer separate assembly exposing internal constructor used factory becomes problem multiple creation pattern factory calling right constructor point factory factory method eliminate issue opening internal state since static able break dependency injection factory interface like separate factory persistence one could argue domain going expose delegating responsibility perform authorization check another party save domain thing would allow u evaluate internal state determine operation performed without breaking encapsulation course requires inject repository instance domain smell bit raise domain event instead allow handler perform persistance operation see going great discussion reason going charge route csla framework bit history framework see idea business object domain object many way trying become adherent good ddd ideal wondering collaboration becomes much end ivalidator ifactory irepository aggregate root left publish change state draft published enough consider non anemic domain thought