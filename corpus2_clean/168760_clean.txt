case want use referentially transparent coding goal help handling concurrency memoization unit testing verification correctness want write clear rule developer follow would ensure referential transparency mind enforce rule trust follow note never modify function method place e hacking bytecode would following make sense callable c c referentially transparent num whenever returned c depends instance attribute global variable disk file attribute variable file must change duration program execution exception instance attribute may changed instance initialization num c executed modification program state occur may affect behavior accessed public interface defined u put restriction public interface includes rule num becomes c executed object modified visible outside scope c call note unsuccessfully tried ask question hoping appropriate site