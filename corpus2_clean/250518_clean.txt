question title probably abstract let provide particular example mind webservice encapsulates process changing password user distributed system webservice accepts user login old password new password based one following three result num case user found old password match simply http num forbidden num otherwise take new password make sure conforms password policy e g long enough contains proper mix letter number etc xml describing password conform policy num otherwise change password xml containing expiration date new password like design ideally single encapsulate working webservice first shot public public changepassword login oldpassword newpassword result send important contain response webservice var throw new else result new else result new result public abstract public abstract bool get public abstract public httpresponse initialize public override bool get public datetime get private set public abstract public httpresponse initialize public override bool get public bool get private set public bool get private set etc see decided use separate class case num num could used single boolean feel like smell would clear purpose two separate class user know class inherit cast correct one based property nice laser focused class made life user difficult case num decided throw exception could created separate exception case num something password successfully changed however feel right think new password invalid state exceptional enough warrant throwing exception sure would design thing two un exceptional result type webservice probably would change property boolean enum rename resulttype adding dedicated inherited possible resulttype finally actual question design approach e one abstract forcing client cast correct result based property correct one dealing problem like yes way improve perhaps different strategy throw exception v result would recommend