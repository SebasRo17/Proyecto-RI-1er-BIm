realize question probably raise let try explain trying wrap head couple related concept basically saga pattern combination event sourcing ddd concept good post wrap together num num cqrs saga event sourcing part ii ii getting question minute think try summarize understand first might well wrong please correct case since might well impact asking question begin num saga pattern sort broker given action end user automated etc essentially anything going change divide action business activity sends activity message message bus turn sends respective aggregate root taken care num aggregate root operate completely autonomously nice separation concern great scalability etc num saga instance contain business logic contained aggregate root sends activity logic contained saga process logic often implemented statemachine determines based action received well follow event e activity send num saga pattern implement kind distributed transaction pattern e one aggregate root work autonomously without knowing eachothers fails entire action might rolled back num implemented aggregate root upon completion activity report back saga case success well num case aggregate root success internal statemachine saga determines next decides done num case failure saga issue aggregate root took part last action called compensation action e action undo last action aggregate root num might simply minus num vote action plus num vote could complicated like restoring blogpost previous version num event sourcing see blogpost combining two aim externalize saving result activity aggregate root undertake centralized event store change called event context num event store single version truth use replay state entity simply iterating event stored essentially like event log num combining two e letting aggregate root use event sourcing outsource saving change reporting back saga enables lot nice possibility one concern question felt needed get shoulder since lot grasp one go given context mindset please correct wrong question aggregate root receives compensate action aggregate root outsourced state change using event sourcing compensate action situation delete last event event store given aggregate root assuming persist implementation allows deletes would make sense lot would another great benefit combination said might making assumption based incorrect incomplete understanding concept hope get long winded thanks