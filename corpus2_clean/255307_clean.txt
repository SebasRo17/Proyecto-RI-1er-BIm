trying implement domain event system fire event associated unit work commits successfully reason want sub system read database expect change place handling event also want event handler work send email etc commit fails system multiple asp net application webforms mvc webapi public order private payment payment public id get private set public decimal amount get private set public processor payment throw new invalidoperationexception pay order twice process may also raise domain event payment processor process amount raise save event static queue domainevents raise new public private readonly iunitofworkfactory unitofworkfactory private readonly public iunitofworkfactory unitofworkfactory unitofworkfactory unitofworkfactory public fulfill orderid using var unitofwork unitofworkfactory create var order unitofwork ordersrepository getbyid orderid order unitofwork commit want event raised commit succeeds current implementation problematic right domain raising must put queue must fire immediately queue static cause problem multi user system want accidentally fire event another user definite problem user access queue list solution investigated work scenario num non static get passed passing difficult domain object sometimes event raised changing property passing around cumbersome num entity contain event enumeration read unitofwork commit call discussed num num num better domain event pattern tracking every single entity possibly changed difficult loading change tracking orm also clutter domain object num using httpcontext current item store user specific event currently best suggestion however possible unit test lock domain using asp net plan future release desktop app question queue dispatch event multi user environment reliably taking consideration want fire event overall unit work succeeds