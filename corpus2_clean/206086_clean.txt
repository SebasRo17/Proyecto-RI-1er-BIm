confused post mark seeman comment problem initialize property injection k setter injection creates temporal coupling initialize member unless truly invoke member without first invoking initialize api design deceitful lead time exception also becomes much harder ensure always consistent state time writes issue similar issue invoking virtual member constructor conceptually injected dependency equivalent virtual member think statement admit constructed initialized get injected constructor recommended use initialize phase brings complexity avoided contradictory imagine need set state using provided dependency loading saved setting example init bad constructor bad perform operation another point method like connection open another initialize question anyone describe good initialization pattern context dependency injection address concern mark seeman brings