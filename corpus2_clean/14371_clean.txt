would like analysis grain size distribution monte carlo grain growth simulation implemented based nice example rituraj nandan see link result calculation integer matrix every point represents certain grain orientation thus cluster similiar value represents grain converting information graphical representation assigning similiar color every similiar integer give image show grain distribution simulation clearly example simulation result converted initial implementation java mathematica syntax enter image description code used generating image follows see link java implementation detail physic behind meshgen xmax ymax nx ny module hx hy hx xmax nx hy ymax ny return xmax ymax nx ny hx hy table hx nx table j hy j ny temperature mesh torch vel module x xc yc nx ny rad al q net power thickness plate rho density cp specifc heat capacity k thermal conductivity initial temperature quasi steady thermal profile al k rho cp thermal diffusivity nx ny mesh x mesh xc yc torch rad outer norm x xc yc table q pi k e vel x xc al besselk vel rad j al j ny nx return tmc mesh vel module k model constant n model constant accommodation probability capitalnu average number atom per unit area grain boundary b na avogadro number vm h planck constant b kg r gas constant j molk capitaldelta sf activation entropy grain boundary migration j molk q activation enthalpy grain boundary migration j mol gamma grain boundary energy j b lambda grid size l initial grain size dt time expt c x nx monte carlo time location j x mesh nx mesh lambda mesh l mesh c gamma capitalnu vm na h e capitaldelta sf r time x vel dt append difference time time expt table exp q r dt nx expt reverse accumulate reverse expt return sqrt c expt l k lambda k n energypart indx nx ny reflect true module ii jj ib jl jr get part specification nearest neighbour location ii jj reflect set true array boundary reflecting boundary condition assumed otherwise periodic boundary condition used ii indx jj indx row top bottom neighbour reflect ii ii ii ny ii ib reflect ii ny ny ii ii ny ii row left right neighbour row top bottom neighbour jl reflect jj jj jj nx jj jr reflect jj nx nx jj jj nx jj ib jl jr pottsenergy osub total map kroneckerdelta osub osub potts function x array relevant grain center total array give energy grain energy indx nmax reflect true pottsenergy sequence energypart indx nmax reflect select relevant block center element neighbour apply potts function result function give energy grain position indx removenoise frame limit module emap nx ny result nx ny dimension frame set grain size orientation grain consist one two pixel set limit e equal color function defined set black emap mapindexed energy frame nx ny frame emap nest replacepart position emap limit correct lower number neighbour boundary emap nx nest replacepart position emap nx limit emap ny nest replacepart position emap ny limit emap nest replacepart position emap limit result nest replacepart position emap frame limit return result grainsize mesh module dist table avg size sum num nx ny hx hy j k xmax ymax measurement grain size distribution average grain size xmax ymax mesh nx ny mesh hx hy mesh nx measurement average grain size using mean lineal intercept method j j ny j j mod j ny ny periodic boundary num avg nx ymax num average grain size nx grain size distribution j j ny j j mod j ny ny sum size sum hy avg sum k k k size k k size k dist k print grain size distribution print n n dist print average grain size avg return avg routine grainsize one still optimized since much conversion far finally following statement graph generated mesh meshgen temp temperature mesh yc tmcs tmc mesh temp table randominteger mesh mesh frame fileexistsq notebookdirectory graingrowth dmp tempc printtemporary frame tostring tempp printtemporary arrayplot removenoise frame plotrange colorfunction function v v black hue v potts mesh tmcs appendto frame transpose notebookdelete tempp notebookdelete tempc appendto frame transpose dumpsave notebookdirectory graingrowth dmp frame get notebookdirectory graingrowth dmp arrayplot removenoise frame plotrange colorfunction function v v black hue v export notebookdirectory finalgrainstructure png colorfunction function v v black hue v course multiple source web psd analysis however find detail potential using mathematica application interesting reference wolfram library could manage get hard soft copy work guess statistical routine within mathematica would make perfectly suitable analysis idea help advice