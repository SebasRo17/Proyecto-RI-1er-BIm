thinking language design lately reading new thing haskell always nice source inspiration struck many odd us left right arrow operator guess many different usage come prior art math language regarding arrow syntax reason try make usage consistent clear maybe seeing big picture right arrow get used constructor function separator argument body lambda expression separator case statement used pattern view form e p left arrow get used notation something similar binding list comprehension assuming list comprehension look like condensed block pattern guard form p e last example arrow silly understand guard view serve different purpose almost identical form except one mirror also always found kind odd regular function defined lambda use arrow equal also get pretty odd consider comparing calculated constant nearly half dozen way test x x num f x test x g x else h x f num g num f x h x f x test g x f h x f x test x g x otherwise h x f x case x num g x h x variety spice source though right