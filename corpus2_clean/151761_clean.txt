context using hierarchy object expression tree pseudo visitor pattern pseudo use double dispatch public interface myinterface accept someclass public myinterface public accept someclass dosomething dosomethingelse design however pretty comfortable since number implementation myinterface significant num need add extra operation implementation unique different expression operator composite ie operator node contain operator leaf node traversal currently performed calling accept operation root node tree turn call accept child node turn time come need add new operation pretty printing public myinterface property come myinterface public someproperty get set public accept someclass dosomething dosomethingelse public accept printer printer prettyprint someproperty basically see two option keep design adding new operation derived expense maintainibility option imho use visitor pattern expense extensibility option expect implementation coming along way num overload visit one matching specific implementation question would recommand using visitor pattern pattern could help solve issue