one tenet functional programming use pure function pure one side effect free referentially transparent getters referentially transparent setter called call getter getter change even though parameter typically parameter setter produce side effect calling setter typically manipulates fact traditionally setter return nothing know scala kind accept fact together two paradigm functional oriented use getters setter would language like language like haskell fluent told hold truer pure functional language curious would model property object getters referentially transparent setter side effect free would solution pas back copy setter invoked setter copy contains change property