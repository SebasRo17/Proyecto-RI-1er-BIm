say model mean model information never lost deletes never destroy row update always cause insert somewhere else preserve row previous state update read heard colleague num trigger database reason like approach depend trigger enforce revision integrity application becomes tied database server using orm different provider oracle mysql sql etc may need alter sql switch num human readable trace log last year played business analyst project new developer one sister department slammed important deadline insisted despite requirement gathered schema modeled would insert stored procedure executed create update delete statement sproc would write old formatted save error log table database goal help debugging application case anything went wrong wanted trace num creating sister table approach like num database living context table person would table product would schema would identical time change happened entity table previous state would inserted application want allow user restore previous version entity num seems like workable solution however since pair entity history model schema fact combined adding bool bit property like isdeleted slice single entity set different state within clause consider example num one disadvantage num database table become hard read select row mining db server ide would require pretty extensive use view cause problem option num looking different state together table make much difficult read approach num need look different table find previous version deletes using approach num success supertype property indicate changed changed whether deleted archived modified update occur row would normal circumstance however part action corresponding insert made table entity set insert contains value update updated updated row addition whatever change made user also update property question belong domain repository implementation certain aspect storage dependent hint putting orm coupling however aspect domain application layer able trust maybe domain entity manage integrity maybe factory coordinate