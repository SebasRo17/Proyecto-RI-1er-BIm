consider following example replaced dollar sign output x rule var x x ruledelayed var x x function var x x hold compile var integer x x hold setdelayed var x x hold set var x x hold tagset var x x hold upset var x x hold upsetdelayed var x x hold tagsetdelayed var x x hold var b x x hold module var b x block x hold block var b x dynamicmodule x tostring hold dynamicmodule var b x table family x hold table x var function x condition var x replaceall interacts condition use function rulecondition function x hold rulecondition var x vard vard function vard hold compile vard integer hold vard hold vard hold vard hold vard hold vard hold vard hold vard b hold module vard b vard one replace replace x rule var x replaceall replaceall x rule var x replacerepeated replacerepeated x integer rule var x x rule var x module module x rule var x block block block x rule var x dynamicmodule tostring dynamicmodule x rule var x inputform example work assignment function set clear f replacement evaluation set f x ruledelayed var x f function slot function rule var functionnamedarg function x rule var x replace vard replaceall vard replacerepeated vard vard module vard dynamicmodule dynamicmodule x vard dynamicmodulevalues replacement evaluation var x vard functionnamedarg vard general explanation example found q called enforcing correct variable binding avoiding renamings conflicting variable nested scoping construct answer however felt bit could said first list example basically list function could considered inner scoping construct inner scoping construct searched outer scoping construct body outer scoping construct listed second set example note second list example example set labeled replacement evaluation example different others set function look scoping construct body rather appears whenever kernel evaluates expression x emulates searching scoping construct x kernel already lot kind bookkeeping maybe big performance hit example use set appears definition made using assignment function setdelayed set tagset upset tagsetdelayed upsetdelayed cause replacement variable replacement happen definition corresponding downvalues upvalues well subvalues cannot happen definition correspond ownvalues possible create ownvalues pattern lh generated rule think interaction inner outer scoping construct depends combination scoping construct kind independent manner e outer scoping construct strategy resolve conflict local variable second argument rule true interaction inner outer scoping construct illustrated example would consider list exhaustive case variable replacement happens predicted list inner outer scoping construct present question example exhaustive related stringreplace replaceall rule interact bizarre way answer leonid