software unlike physical product buy sold warranty vendor get away developer seems reasonable considering quality almost software ever used think anything unintuitive idiom via undocumented feature missing handling concurrency double escaping user floating point number decimal would avoid long term build error plain crashing bug production database corrupted equivalent several affected company wasted recovery reactionary implementation safety measure bit like building skyscraper straw hoping survive time someone else problem replaced entirely situation hypothesize company trust software enough provide even minor warranty damage incurred would software task gain enormous advantage user trust could put google microsoft apple shame quality software hoarding money talent familiar current status software verification requirement gathering research know whether possibility around corner whether hacking mountain certainly existence serious company organization providing warranty even working guideline warranty would extremely interesting follow developer user therefore international guideline providing software warranty example test succeed long system stay defined state warranty cover cost recovery case loss long widely recognized set security guideline followed handled system readable third party warranty could cover anything price software legal cost handling privacy related lawsuit