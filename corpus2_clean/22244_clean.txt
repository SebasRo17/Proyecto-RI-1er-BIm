proving difficult entertaining task attempting adapt meshing algorithm created matlab port mathematica understand meshing function already exist mathematica purely fun learning paper describes great detail algorithm created matlab term non code specific logic step code intend modify question suggestion made show progress start simple box creating random selection meshing point within modify using delaunay triangulation algorithm create initial triangular mesh next imagining point joined magic spring length l spring less certain chosen scale length l exerts force joining point direction increasing separation proportional l l thus create new set point later artificial timestep due effect psuedoforces point outside original box drag em back repeat process sort equilibrium condition met code done far seedrandom bboxl bboxh nnodes p table nnodes p randomreal bboxl p randomreal bboxh nnodes timestep need computationalgeometry dt delaunaytriangulation p topairs n list map n edge flatten map topairs dt graphic graphicscomplex p line edge red pointsize medium point p l displacement n list total map norm p p bboxl bboxh nnodes p p n p p timestep map displacement dt p max p p max p p min p bboxl p min p bboxh nnodes dt delaunaytriangulation p edge flatten map topairs dt graphic graphicscomplex p line edge red pointsize medium point p start mesh iteration get like next instead meshing boring old square like able mesh geometry whether given functional form array point anybody suggest proceed maybe simple circle would nice next step practice everyone feel free edit post join fun many thanks help also many thanks go markmcclure helping getting stage