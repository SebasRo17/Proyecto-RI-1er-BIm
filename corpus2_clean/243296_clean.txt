assignment use local search heuristic solve multidimensional multiple choice knapsack problem first need find feasible solution start example problem tried far problem l1 l2 l3 num num num group g1 num num num num num num num num g2 num num num num num num num num g3 num num num num num num num num sorting strategy find starting feasible solution local search decided ignore gain try fit resource requirement decided sort choice strategy group comparing distance multidimensional space origin thus calculating sqrt r1 num r2 num rn num felt like keen solution somehow privileged choice usage closer e g r1 num r2 num r3 num r1 num r2 num r3 num even total sum selecting best choice group proved sufficent find feasible solution many num different benchmark problem course knew luck came problem presented sort like l1 l2 l3 num num num group g1 num num num num select num num num num g2 num num num num select num num num num g3 num num num num select num num num num feasible resource r1 num r2 num r3 num easy solution pick one second best choice group num num need kind iteration local search find starting feasible solution local search solution option came option num iterate choice tried find way iterate choice specific order something like g1 g2 g3 num num num num num num num num num num num num num num num feasible solution far away unfeasible one start thus number iteration keep quite low make sense yes iterate choice grouped combination group keeping near possibile previous iteration option num change term tried think find better sort choice thought measure precious resource based supply demand demand precious resource push list help also thought probably gonna comparsion assures feasible solution first strike better sorting criterion anyways option num implement known sub optimal fast solving algorithm unfortunately could find algorithm online suggestion edit note updated previous description using label l1 l2 l3 problem resource limit place r1 r2 r3 indicate resource requirement strategy choice j trana decided go try genetic algorithm problem setup seemed quite fitting problem structure group gene solution chromosome strategy also modified distance expression fit better heterogeneous resource limit distance sum rn ln give lower distance e higher priority strategy lower resource requirement portion since part intended solving initialization chose genetic function fitness solution feasible enough greatest fitness possible solution integer max arraylist integer new arraylist integer integer limit problem add num add resource group group g gene num g size set get g get arraylist double new arraylist double ratio total limit actual consumption way consumption limit greater num rise fitness else less num lower fitness j num j size j double problem limit get j get j add double fitness num double sf fitness sf fitness resource requirement lesser limit rise fitness requirement greater limit lower fitness mutation mutation found feasible solution contain strategy smaller distance considering solution far ordered distance list slows evolution time mutation negative effect public mutate double choice mutate strategy size num need something keep first position list eventually higher mutation go greater index solution work well benchmark num lot choice per group lot resource per choice simply find feasible solution could implement mutation algorithm num benchmark convert feasible solution improvement put fitness strategy ordering speed solving path