early stage designing client server application client batch program read file customer contact address email address phone pas component server add already present corresponding mysql table id component order boost performance server spawned four manager server tasked looking possibly adding new row pas four component via ipc manager work concurrently word one master server nothing listen connection batch job fork exec slave process four manager read socket table lookup possibly add row write back id one slave process connected client spawned master new connection arrives client batch job receiving customer contact record sending component manager waiting manager respond id computed sending summary record back client looping back receive next record processing bit involved described actually eight manager result first four need completely gathered invoking next three manager turn must complete calling final manager simple process several sequential stage involves concurrent work waiting finish discussing another member team asked master server slave server client make separate connection directly manager process got really good objection client could essentially implement slave logic directly create eight simultaneous connection manager server feeling best approach somehow might important centralized control robustly deal failure error accumulate statistic server whole prior experience building full scale production worthy client server app interested hearing opinion prior experience building apps nature update num one advantage client process abruptly crashed canceled slave process would stay alive could detect client gone away would complete knowledge job state could ensure integrity completing backing current unit work could bring orderly end failure