producing predictable possible responsibility module example c logger public writer get set private uint counter summary writes message special format return number total message written summary public uint message message throw new argumentnullexception message writer throw new invalidoperationexception writer set writer write format num hhmmss num datetime message counter logger module quite verbose exception call depedency returned predictable obvious argument state one possible use case bother writer set weird implementation somehow call logger first possible consequence stackoverflow due infinite recursion second unpredictable possible bug obvious situation must controlled somehow want predictable logger control double entry private bool enter public uint message message throw new argumentnullexception message writer throw new invalidoperationexception writer set enter throw new invalidoperationexception double entry enter writer write format num hhmmss num datetime message enter counter seems every external call call component must wrapped flag look crazy good written normal beleive system circular call missing something important please advise update even worse guy private bool enter public uint message message throw new argumentnullexception message writer throw new invalidoperationexception writer set enter throw new invalidoperationexception double entry try enter writer write format num hhmmss num datetime message finally enter counter beleive catching exception duty higher level module one created exception must follow way state call must remain correct exception end world module possibly used