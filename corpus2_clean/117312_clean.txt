currently working new product project client server application directed towards certain specific industrial service enterprise building server c language linux running custom protocol top tcp front end num coding work faced situation choose micro monolithic kernel architecture aware micro v monolithic usually relation kernel architecture specifically talking server custom server something existing ui need significant dynamic thus web web browser based solution appropriate statistical processing significant client end therefore browser little help course could processing server end pas processed client would imply lot load server wastage client resource moreover atleast three technology j html cs manage even single event make whole experience like sweeping house midst desert storm sweep n time dust accumulates n num time micro monolithic server talking consider following hypothetical client request request id num request service request message fetch record upto year num receving request server typically ignoring concurrency technique like thread fork simplicity parse request identify action fetch limit year num case interact persistance layer oracle let say example fetch format per protocol ex response id num success response text datasets respond client thus formatted calling monolithic server akin monolithic kernel o working done kernel space consider request receipt time server assumed shared memory ipc simplicity put request shared memory parser process parser parses identifies task directs process execute task pass process formatting protocol return server server dispatch client response course instead parser formatter could single separate process calling micro server akin micro kernel barely minimum required server effectively listening responding whereas step taken care different process e one pick confused monolithic server tried tested http web server easier program handle concurrency quite well micro server prima facie seem swift unix principle one program one task also complicated develop esp keeping concurrency mind question possibly could pro con approach use could also interpreted general question use ipc micro kernel chosen function need part core server similar related question danger huge monolithic application external v embedded browser tangential advice converting monolithic app multithreaded tangential information may helpful prospective customer divided two category large num num num num request per minute small num num request per minute volume per request cycle request subsequent response assumed normally distributed mean num mb worse case num num mb product concept relatively new capability impacting core operation therefore expect customer budget flexible post certain lag num num month post deployment limit amount hardware client willing commit esp small one customer client server stack server running customer hardware managed customer team client deployed machine functional employee remote update client server application must real time push service server may highly desired product click