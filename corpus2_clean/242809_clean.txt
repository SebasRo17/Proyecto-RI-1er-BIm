designing master composed multiple class base c four class absolutely use outside master meant split functionality manageable logically divided package also provide extensible functionality case base inherited client maintain encapsulation master design far got two approach far perfect num replicate accessors write accessor method accessor method class master composed lead perfect encapsulation implementation detail master visible extremely tedious make definition monstrous exactly composition prevent also adding functionality one even word would require write method master additional problem inheritor base could alter add functionality num use non assignable non copyable member accessors accessor copied moved assigned override operator access underlying shared ptr call like master made possible problem kind break encapsulation would unable change implementation master use different functionality still closest gotten without using ugly first approach also fix inheritance issue quite nicely small side question would already existed std boost edit wall post header file class discussed may bit hard understand give best explaining num gametree h foundation basically doubly linked tree holding gameobject instance later get also custom iterator left brevity enum value success failed really important gametree public static method root one root allowed exist time static seed seed unsigned depth inline static bool static cast bool rootobject inline static weak ptr gametree root rootobject delta m used velocity collision tick unsigned delta interaction tree inline weak ptr gametree parent const parent inline unsigned const static cast unsigned child size weak ptr gametree getchild unsigned index const template typename weak ptr gametree addchild seed seed unsigned depth num new seed unique ptr gametree new gametree std move depth moveto weak ptr gametree erase iterators begin std move make unique child begin end std move make unique child end unloading used object far away unsigned num unsigned num inline const const gameobject getter underlying gameobject tested template version weak ptr gameobject gameobject gameobject template typename weak ptr gameobject dynamic cast weak ptr gameobject weak ptr physicsobject physicsobject gameobject physicsobject private gametree const gametree copying allowed internally gametree shared ptr gameobject unsigned depth num pointer root static shared ptr gametree rootobject internal management child weak ptr gametree shared ptr gametree removechild unsigned index private member shared ptr gameobject gameobject shared ptr shared ptr tree stuff vector shared ptr gametree child weak ptr gametree parent unsigned used deletion necessary unsigned depth construct child num gameobject h bit hard grasp gameobject basically work like constructing gameobject construct basic attribute instance contains vector unique ptr construction construction struct contains information needed construct gameobject seed applied construction factory enables dynamic loading unloading gameobject done gametree also mean define factory inherit gameobject inheritance also reason gametree template gameobject gameobject contain physicsobject later get anyway gameobject typedef unsigned long seed declaration magic mean inherit gameobject template typename struct template struct gameobject virtual unique ptr gameobject construct seed seed const num template typename struct gameobject gameobject unique ptr gameobject construct seed seed const unique ptr new seed factory important storing vector template typename struct construction template struct construction gameobject virtual unique ptr gameobject construct const num template typename struct construction construction gameobject construction seed seed func construction gameobject seed seed func func unique ptr gameobject construct const unique ptr gameobject gameobject factory construct seed func dynamic cast gameobject get std move gameobject seed seed func typedef struct construction construction std move construction operator unique ptr construction gameobject child construction construction push back std move child template typename push back seed seed func construction push back make unique construction seed func vector unique ptr construction gameobject construction finally gameobject gameobject public gameobject seed seed gameobject const gameobject virtual tick unsigned delta inline physicsobject getter inline seed seed const seed inline property property inline const const inline weak ptr physicsobject physicsobject physicsobject protected virtual construct seed seed num property shared ptr shared ptr physicsobject physicsobject seed seed num physicsobject bit easier responsible position velocity acceleration also handle collision future contains three transformation object two optional going include accessors physicsobject tried first approach pure madness way num function also missing named constructor construct physicsobject different behaviour transformation translation rotation scaling public transformation translation num num num rotation num num num scaling num num num transformation translation rotation scaling inline translation translation inline translation float x float float z translation x z inline translation translation inline translate float x float float z translate x z inline translate translation inline rotation rotation inline rotation float pitch float yaw float roll rotation pitch yaw roll inline rotation rotation inline rotate float pitch float yaw float roll rotate pitch yaw roll inline rotate rotation inline scaling scaling inline scaling float x float float z scaling x z inline scaling scaling inline scale float x float float z scale x z scale factor scaling num factor num scaling num factor num scaling num factor num matrix translation translation rotation rotation scale scaling physicsobject typedef physicsobject self unsigned delta physicsobject physicsobject const transformation transformation nullptr nullptr tick nullptr physicsobject physicsobject transformation transformation std move std move tick tick transformation transformation unique ptr transformation unique ptr transformation tick public tick unsigned delta tick tick delta num inline transformation matrix num base different type thing could rendered e mesh light source sprite disclaimer write working project someone else public float virtual float const float rd rd protected float struct public num f light public public light num f mesh public public mesh unsigned seed num f num num seed num model em heavy else model cube unsigned const unsigned const private unsigned unsigned guess show issue quite nicely see accessors gameobject weak ptr access member member really want also please keep mind mean finished production merely prototype may inconsistency unnecessary public part class