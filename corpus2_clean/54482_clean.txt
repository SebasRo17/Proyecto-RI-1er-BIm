trying develop kind nonlinear fem application using mathematica solve bvp like following gamma u u iv gamma u u u u f x u tilde u x gamma tilde gamma u denotes derivative respect function variable thus u frac text u x text x quad quad gamma frac text gamma u text u next step getting weak form int omega left gamma u iv gamma u u u right psi int omega f x psi omega domain psi tilde psi x test function code using cubic hermite shape function approximate function read follows hat u sum alpha psi beta psi b psi psi b piecewise function alpha beta coefficient related value function first derivative respectively let bear mind chain rule frac text gamma u text x frac text gamma u text u frac text u text x gamma u calculation weak form assumes following form int omega gamma u iv left left gamma u frac gamma u right psi left gamma psi right u right partial omega int omega frac gamma u psi frac gamma u psi gamma u psi int omega gamma u u psi left gamma u psi right partial omega int omega gamma psi u psi gamma u psi starting point however using linear equation setting gamma u end procedure simple equation u iv f x longrightarrow int omega u iv psi int omega f x psi left u psi u psi right partial omega int omega u psi int omega f x psi domain discretised n point n element equation represents system n non linear equation let suppose apply bcs function first derivative edge system read follows r alpha u x r beta u x r int omega u psi int omega f x psi r n alpha n u x r n beta n u x domain omega x x goal solving system general nonlinear trying using findroot thus defined following function integration forcing term funff x f module f n n length x f constantarray n jr j f jr jr f jr jr flatten nintegrate f x nn x x j x j x x j x j j n f assembly system sys x u vectorq rh fun module eq x x f p f p f p r n n length x value function f u length u value first derivative p u length u initialitazion eq constantarray n starting loop jr j value current element x x j x x j length f f f f f non constant f f j f f j length p p p p p non constant p p j p p j j th equation eq jr jr eq jr jr flatten nintegrate fun x x x f p f p x x x j n assembly system r eq rh boundary condition r u wf r u wp r n u n wf r n u n wp output r assumed w x exact solution thus wf w x wp w x wf w x wp w x forcing term f x w x integration forcing term f funff xx f function integrated fun x x x f p f p ne x x x f p f p nn x x x solution u uu flatten findroot sys xx uu f fun uu u xx grid u alpha beta alpha beta guess ne contains interpolation inside element nn contains four shape function fun integrand element e u psi simple example work really slow even linear case improve optimize code new kind programming sure missing speeding trick suggestion appreciated best petrus