generic design question relates enterprise application think software developer type project may experience well scenario following database write application provides access database also contains user account role authorization problem process accessing database well one process may change moment e g delete user project used exclusive access database usually wrapped database layer exposed related domain functionality soa style wrapper rich domain model could utilize caching database aware potential change intercepting domain event cqrs could modify shared database know approach design imagine situation num http request arrives application authenticate request num query database claimed user account login supplied credential match session established e g asp net secure cookie sent client num subsequent request user arrives problem instead something useful moment seems like one need check whether associated user account still exists database information stop valid point process may alter database course generic problem may change request even two separate database call easy answer use lock transaction truth would require huge change database schema example every user account would require additional column simple scenario imagine completely new table would need created also transaction would typically span across many http request thus render database useless long period time user read book well aware various synchronization technique looking generic technique methodology achieve called good enough design require change database schema handle mentioned situation anything change two request right think go following approach authenticate user perform subsequent check ensure deleted meanwhile perform operation relies existence user receive exception deduce user must deleted response kind message page sure common problem many must encountered appreciate solution even reference book paper thanks