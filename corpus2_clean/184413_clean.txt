working command application run simulation heavily configurable user able provide large number num parameter mandatory optional obviously parameter used variety class application see two approach use one better design long approach num text file directly control creation application example user would provide following root simulation time num local specie sentient strength num intelligence num invading specie primitive strength num num application would recursively create object specified rh equal sign passing constructor argument provided relevant sub branch file using support keyword argument default argument value argument provided hope question terribly language specific example num would tell app create simulation three constructor argument first constructor argument time num second argument instance sentient created passing simulation constructor argument strength num intelligence num third argument instance primitive created passing constructor argument strength num num whole creation handled automatically line recursive highest level instance simulation case would passed visualization layer approach num file still look however application class full control interpret user lh rh value may may correspond keyword parameter class example may result application creating instance argument strength local num intelligence local num strength invading num invading num calling set runtime time num passing visualization layer one obvious advantage approach num user remain stable even application completely redesigned internally think nothing wrong designating subset class public api therefore ensuring change future hand application internally follows something quite similar approach num anyway feel approach num requires adding lot redundant instead automatically interpreting user need hand additional consideration would much appreciated name approach search