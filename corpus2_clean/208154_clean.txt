watched stuart sierra talk thinking took one idea design principle game making difference working clojure working javascript see major difference language clojure idiomatically functional programming state immutable took idea slide everything map num minute num second num minute thing say num whenever see take num num argument make case turning map passing map lot advantage num worry argument order num worry additional information extra key really concern flow interfere num define schema num opposed passing hiding make case hiding cause problem overrated num performance num ease implementation num soon communicate network across process side agree representation anyway extra work skip work num relevant question num minute make function composable sample us explain concept bad defn complex process let get component global state b subprocess one c subprocess two b subprocess three b c reset global state good defn complex process state state subprocess one subprocess two subprocess three understand majority programmer familiar clojure rewrite imperative style good def complex process state state state subprocess one state state subprocess two state state subprocess three state state advantage num easy test num easy look function isolation num easy comment one see outcome removing single step num subprocess could add information state subprocess one need communicate something subprocess three simple adding key num boilerplate extract need state save back pas whole state let subprocess assign need back situation took lesson applied game almost high level function take gamestate contains game eg list list menu loot ground etc example update update gamestate gamestate gamestate gamestate gamestate ask created abomination perverted idea practical functional programming language javascript idiomatically functional though written way really challenging write immutable structure one thing concern assumes subprocesses pure assumption need made rare function pure idea fall apart immutable worried one day wake realize whole design really implementing big ball mud anti pattern honestly working month great feel like getting advantage claimed super easy reason one man team curse knowledge update coding num month pattern usually time forget done write clean way come play really struggle far struggling understand another set eye would necessary validate maintainability say care maintainability first foremost always loudest evangelist clean matter work want reply directly already bad personal experience way coding know think really talking two different way writing way done appears structured others experienced someone bad personal experience everything map talk hard maintain num never know structure map requires num mutate way never expect look base find particular key got map disappeared experience perhaps base everything take num n type map mine everything take num num map know structure num know structure everything course structure usually grows time one place look reference implementation ie schema reference implementation game us get date second point add remove key map outside reference implementation mutate already also large suite automated test architecture eventually collapse weight add second update otherwise assume everything going well