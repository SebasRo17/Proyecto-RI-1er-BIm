web based project allows user work online offline looking way generate unique id record client side like approach work user offline e unable talk server guaranteed unique secure secure specifically worried client submitting duplicate id maliciously otherwise thereby havoc integrity googling hoping already solved problem found anything definitive especially term approach use production system found example system user access created e g todo list accessed multiple device user created unfortunately need something bit sophisticated find really good idea thinking thing might work proposed solution requirement num id globally unique least unique within system num generated client e via javascript browser num secure outlined otherwise num viewed edited multiple user including user author num cause significant performance issue backend db mongodb couchdb proposed solution user create account would given uuid generated server known unique within system id must user authentication token let call id user id token user creates new record generate new uuid javascript generated using window crypto available see example id concatenated id token user received created account new composite id server side id token client side uuid unique identifier record user online submits new record backend server server would num identify insert action e update delete num validate part composite key valid uuids num validate provided id token part composite id correct current user e match id token server assigned user created account num everything insert db careful insert id already exists update existing record mistake query update deletes require special logic would simply use id record manner traditional application advantage approach num client create new offline know id record immediately considered alternate approach temporary id would generated client would later swapped final id system online however felt brittle especially start thinking creating child foreign key would also need updated mention dealing url would change id changed num making id composite client generated server generated user effectively creating id sandbox intended limit damage done malicious rogue client also id collision per user basis global entire system num since user id token tied account id generated user sandbox client authenticated e user successfully logged intended keep malicious client creating bad id user course user auth token stolen malicious client could bad thing auth token stolen account compromised anyhow event happened damage done would limited compromised account entire system concern concern approach num generate sufficiently unique id large scale application reason think result id collision javascript generate sufficiently random uuid work look like window crypto fairly widely available project already requires reasonably modern browser question separate question num loophole missing could allow malicious user compromise system num reason worry db performance querying composite key made num uuids id stored best performance two separate field single field would different best approach mongo v couch know non sequential primary key cause notable performance issue insert would smarter auto generated primary key store id separate field question separate question num strategy would easy determine particular set record created user since share publicly visible id token see immediate issue always better leak info internal detail needed another possibility would hash composite key seems like may trouble worth num event id collision user simple way recover suppose client could generate new id seems like lot work edge case really ever happen intending leave unaddressed num authenticated user view edit acceptable limitation system conclusion reasonable plan realize come judgement call based understanding application question