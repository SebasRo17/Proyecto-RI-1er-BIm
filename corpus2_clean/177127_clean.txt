failed interview question c year ago converting hex decimal exploiting ascii table num hex rise unicode made question pretty silly point interviewer valued raw execution speed readability handling tell review algorithm textbook prepare interview yet textbook tend favor implementation fewest line even rely magic number like infinity slower memory intensive implementation like linked list instead know right coding algorithm within space interview least num constraint time elegance readability efficiency execution trade offs appropriate interview much follow textbook definition algorithm better eliminate recursion unroll loop use array efficiency better use recursion special value like infinity integer max reduce number line needed write algorithm interface make self contained bullet proof interface sloppy fast one extreme sorted might public static extreme might need passed allowing method called individually different thread different purpose appropriate use linked list structure item traversed one direction v using array doubling size full implementing singly linked list interview often much faster easier remember recursive algorithm like mergesort thread safety document unsafe say verbally much interviewee looking opportunity parallel processing bit shifting appropriate x num x num polymorphism safety generic comment name q p q r v quicksort thearray much use existing apis obviously use util hashmap implement hash table using util list accumulate sorted result guiding principal would answer question guiding principal ask interviewer maybe basis discussion writing interviewer answer one question tip information