comparison parallel kernel launched mathematica v v identical current r mac pro update valerio commented issue arises macbook air v processorcount issuing launchkernels launch kernel actually us notice paralleltable time speed table construct table pause f absolutetiming f f f f f f f f f f f f paralleltable pause f absolutetiming f f f f f f f f f f f f perform operation parallel result v time speed single kernel result v half potential processing power gone processorcount even though running identical machine know mac pro actually processor run thread v yielded processor kernel mma v yielding kernel machine real effect effectively reduces maximum potential power mac launchkernels launch kernel kernel v compare performance paralleltable pause f absolutetiming f f f f f f f f f f f f new v getting half parallel performance half kernel got v even perplexing worked fine earlier pre release version v confused anyone idea get missing kernel back decision may made hobble performance mac pro v addendum noticed go evaluation menu parallel kernel configuration automatic setting number kernel use set automatic mma set change manual setting set seems use still confused mathematica actually support kernel machine would wolfram set use half default v supported default reply szabolcs real world test szabolcs suggests mathematica may practically use kernel physical core even processor support virtual core real difference reply quick timing test real world application kernel density estimation mathstatica benchmarking test suite task plot kernel density estimate corresponding different bandwidth bandwidth result running v default kernel second v default kernel second v manual overide kernel second know changed cause performance hit v even point point v default kernel setting fails take advantage power mac pro result worse performance typical parallel processing application extensive real world test update august opportunity run full mathstatica primarily symbolic benchmark suite default v parallel setting kernel manual override v setting kernel result result fall category problem separate component problem using kernel always unambiguously faster significantly problem less separate component instance example broken symbolic component benefit parallelism max kernel case automatic kernel case sometimes marginally faster kernel case presumably due running overhead etc difference tiny essentially unnoticeable summary problem benefit kernel default mma automatic setting kernel mac pro appears sub optimal fails take advantage full capability machine problem new v occur v