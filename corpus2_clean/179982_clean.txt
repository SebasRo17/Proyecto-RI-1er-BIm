often encounter following statement argument num pure functional programming language allow side effect therefore little use practice useful program side effect e g interacts external world num pure functional programming language allow write program maintains state make programming awkward many application need state expert functional language understood topic regarding point num interact environment purely functional language explicitly mark function introduces side effect e g haskell mean monadic type also far know computing side effect updating also possible using monadic type even though preferred way working regarding point num far know represent state threading value several computation step haskell using monadic type practical experience understanding rather vague two statement correct sense misconception purely functional language misconception come could write possibly small snippet illustrating haskell idiomatic way num implement side effect num implement computation state