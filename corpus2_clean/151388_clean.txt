almost num month io programming confused right approach maybe language oop principle confused know trying c year back field private variable private getters setter method exposed something world property exposed thing liked elegance solution example could would property called float private called field single transaction revenue getter property calculated revenue transparently somehow internals daily revenue calculation would change would affect somebody consumed property way since would getter implementation understood sometimes sometimes num num relationship field property depending requirement seemed ok opinion property way access know difference private protected public keyword let get objective c factor base decision making something ivar making property mental model describe know ivars protected default private c thats ok think big deal present level understanding whole io development point ivars accessible outside given make public thing cloud clear understanding iboutlets ivars seeing internal ui ok hand make iboutlet property make readonly anybody change ok let say would use built foundation framework called obviously utilize capability also additional work question initialize way make reference need parse something num default init possible ivar ivar num getter required b pas reference num custom initializer parser creating a1 problem create parser waste memory yet needed however sure method part use ivar safely since exists a2 problem exposed outside world although could read would want parser exposed scenario b1 could maybe useful would want use type parser know understand architectural requirement language clearly two relation get mess please bear able come single ultimate question secondly better scare talk crazy internals edge case