given integer element num num start 1st position reach end minimum move index move num position back forward e num num jump index index time limit num second max size num tried solve problem use single source shortest path approach using breadth first search though bfs v e run time adjacency list creation take n2 time therefore overall complexity becomes n2 way decrease time complexity adjacency list creation better efficient way solving problem vector v str vector set num cin str num str length str num v push back set push back n v size n num cout num n num v num v n num cout num n num vector adj num num num j num j set size j set j num adj set j push back set j num set j n num adj set j push back set j num k j num k set size k ab set j set k num adj set j push back set k adj set k push back set j queue q q push num dist num bool visited num dist num num visited num c num q empty q front q pop c num adj size visited adj dist adj dist num visited adj q push adj cout dist n num n num