test driven development tdd big day often see recommended solution wide range problem programmer se venue wonder work engineering point view puzzle two reason num write test refactor till pas approach look incredibly anti engineering civil engineer used approach bridge construction car designer car example would bridge car high cost result would patched mess well thought architecture refactor till pas guideline often taken mandate forget architectural design whatever necessary comply test word test rather user set requirement situation guarantee good outcome e final result correct also extensible robust easy use reliable safe secure etc architecture usually num testing cannot guarantee system work show word testing may show system contains defect fails test system pass test safer system fails test coverage test quality factor crucial safe feeling green outcome produce many people reported civil aerospace industry extremely dangerous may system fine really mean system good testing strategy often testing strategy checked test test summary concerned driven bit tdd test bit testing perfectly ok get driving design would like see answer containing reason tdd software engineering good practice issue explained relevant relevant enough case software thank