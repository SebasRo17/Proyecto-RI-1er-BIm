rough sketch high level model iterative tdd letting object emerge refactoring increase complexity whole approach may discussion argument another day case point looking refactor block currently else block separate object another another combination creates new set logical sub branch specific trading system feature buy order different behavior sell order response order numeric indicator field describes event occurred e g fill cancel combination numeric indicator field plus whether buy sell require different processing buy creating family object separate unique handling combination num field seems like good choice point way would normally create factory called num relevant parameter indicator would correct subclass time pattern map allows look live instance constructor use via reflection sometimes hard case factory reason feel like good design e g one know subclass interface parent bit clumsy better pattern solving kind problem factory approach make sense anyone suggest nicer design