design wondering appropriate way access variable demonstrate example since seem describe better title term representing bunch time repeating duration time defined bunch attribute term functionality implement function rather passed anonymous function parent would similar shaders passed renderer rather defined renderer container let call box schedule understand use term object box creates term object pass schedule required box also defines function stored term usually take argument us based argument term internal sometime could also use stored schedule though calling shared question best way access shared lot option since j closure familiar enough know using avoiding case option num create local reference term used lightly shared primitive defining accessing shared schedule box example var schedule var sched schedule var t1 term x term x sched format num bind term explicitly pas term constructor something bind sched box pass access attribute term num pas time x passed sched familiar way feel right given j closure ability num something weird like bind context argument hoping correct answer purely subjective guess answer whatever work feel like significant difference approach could large impact stretched beyond small example edit post solution using still welcome criticism function take argument anything term way term coupled schedule way obviously schedule still dependent term though allows term initialized constructed anywhere without needing knowledge schedule term init might take look something like inc moment duration num period num long text weekly moment duration num attr increment period moment start add inc product increment add add product period format datetime datetime format increment period datetime would passed whatever using term method schedule case