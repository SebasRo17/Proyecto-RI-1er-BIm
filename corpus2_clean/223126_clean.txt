normally post stackoverflow design theory question rather question give shot application currently use core model originally wrote num year ago grown needed stuff coded without thinking design first part inflexible part poorly designed yet clunky decided start scratch rather trying retrofit new api top existing one also decided actually map full api first upfront write far approach paying suppose nice little model brewing however one quandary new design consider automation model offered thing like microsoft word primary object property named application point back core existing model follows pretty much principle using new one current api however mix approach object store reference root others property simply look singleton service heart look registered object yes service locator get passed constructor others look store reference normally like consistency mess new design changing approach object still property back root idea object behave manually go hunting application writing given implementation background information way question hold reference root store direct reference look somehow ie singleton service locator former approach going use memory num byte extra per per currently compiled everything 32bit sound lot sure going creating many thousand object sort want base api efficient possible doubt apps stick top approach also mean going pas reference around every single constructor much problem real make writing test bit complicated latter approach mean save memory continue use bad practice service locator supposed least hint performance issue lookup reference quite going quick returning direct one another approach large model use considered mentioned normally dive make something work leave alone break need something else guessing answer going store reference stop complaining better get feel people opinion