imagine series particle floating around mathrm r given time particle pop existence number time point dot n generate unordered list position particle present chamber p k p k dot l k set list particle position l dot l n l list corresponding time point would like generate set pruned list q dot q n q q subseteq l consists set particle position l likely arose measuring particle existed measured alpha previous time point example set alpha measure particle time would place measurement q similar measurement made time also existed measured next beta time point example set beta measure particle time would place measurement q similar measurement made time particle frozen place generating q subseteq l would simple matter calculating intersection l using intersection function mathematica assumption probability one particle pop existence another arises exactly place measurement arbitrarily small however particle moving need guess measured particle position time either time delta delta small enough delta corresponds particle euclidean distance measured position threshold tau set beta would need see particle move threshold distance tau current time point next move distance tau interval time point one e time point k require lvert p k dot p k dot rvert leq tau lvert p k dot p k dot rvert leq tau said another way let l l dot l n l array list alpha beta like remove element l within threshold euclidean distance tau element previous list element next list array set beta would like prune away element element p j list l euclidean distance tau away element list l euclidean distance tau away p j provided set list l dot l n l value alpha beta tau elegant fast way generate pruned list q dot q n q beyond writing bunch loop happy handle boundary list e l l n whatever manner convenient let generate simple example let l l l l let k alpha beta tau looking list l notice element l within euclidean distance tau element l p displaced position p l need look l check whether element within euclidean distance tau p indeed find p next need check exists p l within euclidean distance tau p indeed find p l satisfies requirement looking rest l find element satisfy set requirement therefore write q p repeat procedure generate pruned list q l handle boundary condition whatever manner easiest please note set tau could easily write q intersection l l l l see try q intersection round l round l round l round l expected result want grab non rounded value l corresponding result use script q realdata flatten table nearest l q k k length q return dealing tau manner described efficient way rather perhaps extending rounding trick tricky part question