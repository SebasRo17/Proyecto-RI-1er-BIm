I applied principles of the GRASP and ended up having a class called Environment. This class's responsibilities are to:   * Keep information about services in the environment,i.e. environment definition (Service is another class)   * Start/stop services meeting some criteria   * Apply configuration changes to different service and keep list of updated services   * Restart services with configuration change   * Revert configuration changes at the end of session   * Search/Give Service class based on criteria (name etc.) According to OOD, this is not a problem: _very cohesive responsibility is assigned to this class_.   But on the other hand it's a problem since the _class is too big_ , even though all responsibility assigned to it makes sense. If I want to divide this responsibility to between separate classes, then all these classes need to know about "environment definition", which makes coupling worse and those classes will have _"feature envy"_. What design patterns are applicable for such situation? Or what other principals can be applied to have cohesive, less coupled classes? Thanks in advance.