I have a massive amount of code with lots of `Table` and `Sum` inside a `Module`. Each with their own iterators, and I have completely lost track of all of them. But if the user calls the function with an argument matching the name of the iterator, the code no long works as intended. An example is this function that is supposed to return a list of three repeated symbols:               function[x_] :=      Module[{},       answer = Table[x, {i, 1, 3}];       Return[answer];     ]      For example:               function[a]     (*{a,a,a}*)      But this can be broken by               function[i]     (*{1,2,3}*)      Obviously, `Table` is confusing the input `x=i` with its own iterator `i`. What is the fool-proof fix for this? Is there a solution without:   1. Finding the names of all the iterators and listing them all as private variables inside `Module`?   2. Finding all the iterators and renaming them `longAndComplicated1`, `longAndComplicated2`, etc.?