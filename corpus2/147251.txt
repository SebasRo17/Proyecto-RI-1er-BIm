For a company that makes the same type of software over and over again, a custom MVP/MVC-like framework has been built. The obvious advantage is that it enables them to create their software faster, easier and cheaper. However, what worries me is that such framework ( and this in particular ) hides a lot for the developers who use this framework but not actively develop it. Those developers:   1. do not learn the itty gritties of the framework behind it ( ASP.NET MVC/WPF/Silverlight/... )    2. cannot transfer this knowledge to other companies, which might cause devs who have become less motivated to stay anyway So, my question: do the benefits of a corporate framework outweigh the disadvantages for your developers in the long run? Are there yet other things that must be considered? **EDIT (for clarity)** The key difference here is   * frameworks that are industry standards, if only a little bit (.NET, Ruby, assembler, C#, ...)   * frameworks that are not, **ie** : limited to a single corporation, proprietary, non-OSS, ... I'm talking specifically about the latter.