I am trying to learn more about the various ways that the problem of a Distributed Queue may be solved. So I would like know what products, services, implementations and research papers that are already out there. An implementation will face many challenges and will be forced to make tradeoffs:   * Does it have strong or loose ordering?   * Does it have idempotent put?   * Can we have more queues than what can fit on a single machine?   * Can we have more data in a queue than what can fit on a single machine?   * How many machines can crash before we potentially lose data?   * Can it tolerate net-splits?   * Can it automatically reconcile data when a net-split is fixed?   * Can it guarantee delivery when clients can crash?   * Can it guarantee that the same message is not delivered more than once?   * Can a node crash at any given point, come back up, and not send out junk?   * Can you add nodes to, or remove nodes from, a running cluster without down time?   * Can you upgrade nodes in a running cluster without down time?   * Can it run without problems on heterogeneous servers?   * Can you “stick” queues to a group of servers? (example: “these queues are only allowed in the european datacenter”)   * Can it make sure to put data replicas in at least two datacenters, if so available? I have no illusion that any implementation will be able to say “yes” to all of that. I am merely interested in hearing about the various implementations; how they work, what tradeoffs they have made and perhaps why they decided on their particular set of tradeoffs. Also if there are any challenges that I may have missed in the above list.