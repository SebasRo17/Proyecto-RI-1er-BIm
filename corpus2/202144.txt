I'm struggling to find pragmatic real-world advice on function naming conventions for a medium sized C library project. My library project is separated into a few modules and submodules with their own headers, and loosely follows an OO style (all functions take a certain struct as first argument, no globals etc). It's laid our something like:               MyLib       - Foo         - foo.h         - foo_internal.h         - some_foo_action.c         - another_foo_action.c         - Baz           - baz.h           - some_baz_action.c       - Bar         - bar.h         - bar_internal.h         - some_bar_action.c      Generally the functions are far too big to (for example) stick `some_foo_action` and `another_foo_action` in one `foo.c` implementation file, make most functions static, and call it a day. I can deal with stripping my internal ("module private") symbols when building the library to avoid conflicts for my users with their client programs, but the question is how to name symbols in my library? So far I've been doing:               struct MyLibFoo;     void MyLibFooSomeAction(MyLibFoo *foo, ...);          struct MyLibBar;     void MyLibBarAnAction(MyLibBar *bar, ...);          // Submodule     struct MyLibFooBaz;     void MyLibFooBazAnotherAction(MyLibFooBaz *baz, ...);      But I'm ending up with crazy long symbol names (much longer than the examples). If I don't prefix the names with a "fake namespace", modules' internal symbol names all clash. Note: I don't care about camelcase/Pascal case etc, just the names themselves.