So, I have an authentication module I wrote some time ago. Now I'm seeing the errors of my way and writing unit tests for it. While writing unit tests, I have a hard time coming up with good names and good areas to test. For instance, I have things like   * RequiresLogin_should_redirect_when_not_logged_in   * RequiresLogin_should_pass_through_when_logged_in   * Login_should_work_when_given_proper_credentials Personally, I think it's a bit ugly, even though it seems "proper". I also have trouble differentiating between tests by just scanning over them (I have to read the method name at least twice to know what just failed) So, I thought that maybe instead of writing tests that purely test functionality, maybe write a set of tests that cover scenarios. For instance, this is a test stub I came up with:               public class Authentication_Bill     {         public void Bill_has_no_account()          { //assert username "bill" not in UserStore         }         public void Bill_attempts_to_post_comment_but_is_redirected_to_login()         { //Calls RequiredLogin and should redirect to login page         }         public void Bill_creates_account()         { //pretend the login page doubled as registration and he made an account. Add the account here         }         public void Bill_logs_in_with_new_account()         { //Login("bill", "password"). Assert not redirected to login page         }         public void Bill_can_now_post_comment()         { //Calls RequiredLogin, but should not kill request or redirect to login page         }     }      Is this a heard of pattern? I've seen acceptance stories and such, but this is fundamentally different. The big difference is that I'm coming up with scenarios to "force" the tests out. Rather than manually trying to come up with possible interactions that I'll need to test. Also, I know that this encourages unit tests that don't test exactly one method and class. I think this is OK though. Also, I'm aware that this will cause problems for at least some testing frameworks, as they usually assume that tests are independent from each other and order doesn't matter(where it would in this case). Anyway, is this an advisable pattern at all? Or, would this be a perfect fit for integration tests of my API rather than as "unit" tests? This is just in a personal project, so I'm open to experiments that may or may not go well.