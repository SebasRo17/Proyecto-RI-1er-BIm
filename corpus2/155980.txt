Recently I have often read that, since the trend is to build processors with multiple cores, it will be increasingly important to have programming languages that support concurrent and parallel programming in order to better exploit the parallelism offered by these processors (see e.g. this video for some background.). In this respect, certain programming paradigms or models are considered well- suited for writing robust concurrent software:   * Functional programming languages, e.g. Haskell, Scala, etc.   * The actor model: Erlang, but also available for Scala / Java (Akka), C++ (Theron, Casablanca, ...), and other programming languages. My questions:   * What is the state of the art regarding the development of concurrent applications (e.g. using multi-threading) using the above languages / models? Is this area still being explored or are there well-established practices already?   * Will it be more complex to program applications with a higher level of concurrency, or is it just a matter of learning new paradigms and practices?   * How does the performance of highly concurrent software compare to the performance of more traditional software when executed on multiple core processors?   * For example, has anyone implemented a desktop application using C++ / Theron, or Java / Akka? Was there a boost in performance on a multiple core processor due to higher parallelism? **EDIT** NOTE that I am not asking for your opinions or for debate but for concrete experiences or information. For example, has anyone written a Scala or Haskell program, compiled it with existing state-of-the-art compilers, and   1. Run it on an Intel Core i3 and measured a certain performance (e.g. 10 seconds on certain input data).   2. Run **the same** bytecode or binary on an Intel Core i5 and observed a performance boost (e.g. 6 seconds running time) due to the parallel computation of sub-expressions which is possible in functional code? **EDIT 2** SUMMARIZING. Up to now making faster processors meant increasing the clock speed, and no changes in programming paradigm were needed. In the last few years making faster processor has meant adding more cores but this requires we write software differently. My question is whether software developers are starting to switch to new programming paradigms and whether this is bringing the expected performance boost on multiple-core processors.