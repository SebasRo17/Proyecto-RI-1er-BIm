In this question I presented an idea I have for a simple programming language. The way programs written in this language will be run, is inside an interpreter written in Java, which will interpret the source code directly and execute it. I would say that there is no doubt that this language would be considered a 'programming language'. It is capable of producing programs that can run, and there exists a platform for them to run on (the interpreter). However, most answers on my question said that this interpreter won't be considered a VM. I am used to thinking that all programming languges create programms that are most commonly either compiled to machine code and executed natively, or compiled to some kind of bytecode or IL and interpreted (executed) on a VM. (Or like in the rare case of the Dart language, interpreted and executed by a VM which interprets the source-code directly, no IL or bytecode). But in my case - **if it's true that my interpreter isn't considered a VM** \- programs written in my language do not run on a VM, and do not run natively, but rather run on an interpreter. My question: Are there programming languages in existence, that their programms are most commonly executed similarly? Not on a VM, and not natively, but **rather run on an interpreter? (which is not considered a VM** \- _although I must add I still don't understand why an interpreter that's used as a platform for other programs to run on isn't considered a VM_ ).