(Originally asked on StackOverflow - http://stackoverflow.com/questions/14896121/what-is-a-practical-level-of- abstraction-in-a-web-application) I still consider myself a newcomer to OO programming, especially in php, so forgive me if I have missed some fundamental principle! Say I have an intranet application with a `staff` object with properties and methods unique to being a member of staff:               class staff {         ...         private $job_title;         private $start_date;         etc...     }      In the quest to keep the maintainable parts of my code in one place, make my data model more intelligent and make my code less tightly-coupled, is it reasonable to abstract each object property to another level? For example, I expect each property to have a `value`, but to complicate matters, I'm also interested in what `label` and `description` to use when referring to it in human-readable applications. More of interest is which `type` it is, as well as the capability of the object to validate itself, if its member properties can validate themselves also. It seems then, that properties of the majority of objects have a lot in common. So, the `$start_date` property might actually be an object in itself:               abstract class property {         public $value = NULL;         protected $label; // A simple label which can be used on user forms, reports, etc.         protected $description; // Some detail to describe what this property is used for         protected $type; // Helps choose the right HTML form control and validate user input         protected $regex; // Regular expression to prompt user entry and validate return value         protected $unique = FALSE; // If TRUE, check for duplicates in the persistence layer         protected $default_value; // Prompt the user when entering new values         protected $HTML_form_element; // Which form element suits this field best?         etc....     }          class start_date extends property {         ...         public function __construct(){             ...             $this->label = 'Start date'; // Might be an i18n entry             $this->description = 'Enter the date on which the contract starts for this staff member'; // Might be an i18n entry             $this->type = 'VARCHAR(512)'; // Better to use persistence layer's requirements?             $this->regex = '/^([0-9]{1,2})[/.-]([0-9]{1,2})[/.-]([0-9]{2,4})$/'; // UK date             $this->default_value = date('Y-m-d'); // Depends on the business policy of the company             $this->HTML_form_element= 'datepicker'; // Chooses the correct HTML element when building forms automatically             ...         }         etc...     }          class staff {         ...         public function __construct(){             ...             $start_date = new start_date();             ...         }         etc...     }      In previous applications, these related things have lived in different places; random global variables, commented code, decorator objects, a config file, embeded in HTML, a database table, a scrap of paper. It makes sense to bring all an objects properties together in one place, but is this the right way?