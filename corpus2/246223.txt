I am currently studying the refactoring methods defined by Marting Fowler (http://refactoring.com/catalog/). He states a tip for replacing chunks of code by a single method that does that job. So far, I agree, as we all learned about the downsides of Spaghetti-code. But the example for this rule looks as follows: Replacing                   void printOwing() {           printBanner();                //print details           System.out.println ("name:  " + _name);           System.out.println ("amount " + getOutstanding());         }      by                   void printOwing() {           printBanner();           printDetails(getOutstanding());         }              void printDetails (double outstanding) {           System.out.println ("name:  " + _name);           System.out.println ("amount " + outstanding);         }      Is the readability and thus, the immediate understanding of the code really better in the latter example? There is no indication about what "details" are in reference to "owing". For example, will the name be listed or is there another method printName()? Is the interest listed as well? I would need to search for the printDetail() method's implementation to find out about that. The method printOwing() itself is already a print-method. Would it not be easier for maintaining the code to just list the System.out.println()'s in this method commenting the purpose as in the first example instead of "scattering" the code this way? Is there a rule of thumb about when to stop "methodizing" and when it still makes sense?