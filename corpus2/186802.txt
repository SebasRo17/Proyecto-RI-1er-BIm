I'm a complete beginner to Java, only in my second quarter of classes. I'm having trouble understanding our current chapter about calculating big-O for methods. So I thought I was right in saying that the big-O for these two methods is simply O(N), since there is only one loop that loops through the entire list, but apparently they're either O(NlogN) or O(logN). I really can't see why. Can anyone help me understand? 1)               public static int[] mystery1(int[] list) {         int[] result = new int[2 * list.length];         for (int i = 0; i < list.length; i++) {             result[2 * i] = list[i] / 2 + list[i] % 2;             result[2 * i + 1] = list[i] / 2;         }         return result;     }      2)               public static void mystery2(int[] list) {         for (int i = 0; i < list.length / 2; i++) {             int j = list.length – 1 – i;             int temp = list[i];             list[i] = list[j];             list[j] = temp;         }     }      These aren't homework problems, they were on a test I just took and miserably failed since there were only 4 questions and these two were wrong. I just want to understand why these two aren't O(N) complexity (professor won't give out the answers since someone hasn't done the test yet). These questions were taken straight from the book for the test... which is why I was confident I was right since I had done them already. It was a multiple choice test, and the only options were `a)O(1) b)O(N) c)O(logN) d)O(NlogN)`.