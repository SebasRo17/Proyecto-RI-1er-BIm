I have a linear equation system `Q.m = t`, with `m` unkown and where `Q` has dimensions `{(n-1)²,n²}`, `t` has dimensions `{(n-1)²}` and `m` dimensions `{n²}`. I'm trying to find a way to find a (possible) solution `m1` such that `Norm[Partition[m1,n]]` is less or equal to 1. My idea goes something like this: Somehow optimizing using the solution given by `LinearSolve[Q,t]` and `NullSpace[Q]`. I got some help with the code from a friend, he gave this suggestion:               ns = NullSpace[Q];     vars = Array[p, {Length@ns}];     sol = Partition[m + vars.ns, n];     NumericMatrixOnly[f_][args_?(MatrixQ[#, NumericQ] &)] := f[args]     AbsoluteTiming[     res = FindMinimum[Max[NumericMatrixOnly[Norm][sol], 1], vars];]     m1 = sol /. Last@res;      This solution isn't as fast or accurate as I would want, in what other ways could I optimize this? I could do it with alternating projections, but I wanted to see if Mathematica have any nice built-in methods.