Let's say we're writing a simple JSON parser and we've fully covered the code with unit tests:   * it can parse primitives `"0", "123", "-456", '""', '"asd"', true, false`   * it can parse arrays `"[]", "[1, 2, 3]"`   * it can parse nested arrays `"[[]]"`   * it can parse objects `"{}", '{ "a": 1, "b": 2 }'`   * it can parse nested objects `'{ "a": {} }'` Every possible JSON can be either a primitive or an array/object holding other primitives/arrays/objects - this is what I mean by inductive data structure (is 'recursive' a better term?). It seems to me that any JSON parsing can be reduced to these few cases and if the parser passes these tests then it is fully correct (unless it was explicitly hard-wired to break when you try to parse special numbers). Is there still any point in creating a random tester that generates random stringified JSON in hope that one of them will break this parser? Would this random tester find anything interesting? P.S. I chose JSON just as an example of an inductive data structure; I'm not interested in writing a JSON parser.