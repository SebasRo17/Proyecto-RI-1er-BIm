Here are the two approaches to writing OOP (as in "we have objects and we can instantiate any number of them, each having it's own private data"). The language is C and the platform is embedded bare-metal. Simply, which is better. Is any of the two approaches sensible at all? Or, is there a third, canonical, way to do this in C? ## Approach I: Module.c               struct inputs{};     struct outputs{};     struct scratchpad{};     struct module{         struct inputs i;         struct outputs o;         struct scratchpad private;     }      main.c               main(){         struct module obj;         module_init(obj);         module_do_fancy_stuff(obj);     }      ## Approach II: Module.c               #define OBJ_COUNT 5     struct inputs{};     struct outputs{};     struct scratchpad{};     struct module{         struct inputs i;         struct outputs o;         struct scratchpad private;     }          static struct module obj[OBJ_COUNT];      main.c               #define COOL_MODULE 3     #BORING_MODULE 4     main(){         module_init();         module_do_fancy_stuff(COOL_MODULE);     }