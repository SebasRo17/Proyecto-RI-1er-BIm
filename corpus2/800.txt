In an earlier question the brainteasing fourth syntax variant of `Flatten` was discussed. I see that with               Flatten[{{{1, 2, 3}, {4, 5}}, {{6, 7}, {8, 9, 10}}}, {{1}, {2, 3}}]      I can `Flatten` the lists at level 2 (i.e., Merge `{1, 2, 3}` with `{4, 5}`, and `{6, 7}` with `{8, 9, 10}`) to `{{1, 2, 3, 4, 5}, {6, 7, 8, 9, 10}}`, something that I expected `Flatten` to be able to do with the usual level specification. But that convention doesn't work here. `Flatten[{{{1, 2, 3}, {4, 5}}, {{6, 7}, {8, 9, 10}}}, {2}]` returns `{{{1, 2, 3}, {6, 7}}, {{4, 5}, {8, 9, 10}}}` With that introduction, now to my question: How would I use `Flatten` to flatten the slightly differing               {{{1, 2, 3}, {4, 5}, 11}, {{6, 7}, {8, 9, 10}, 12}}      to               {{1, 2, 3, 4, 5, 11}, {6, 7, 8, 9, 10, 12}}?      If that's not possible I'd have to resort to using an additionally `Map`, but I really would like to avoid that, as I just feel that `Flatten` or another single function ought to be able to do this on its own. In this case, a simple               Flatten /@ {{{1, 2, 3}, {4, 5}, 11}, {{6, 7}, {8, 9, 10}, 12}}      would do, and since `Map` does follow the level specification conventions I can use it to `Flatten` other depths in more complex constructions.