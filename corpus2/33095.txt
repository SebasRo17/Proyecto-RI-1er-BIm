Assume that I have some function for transformation mathematica expressions to strings. For simplicity, just assume it is an identity:               mytostring[e_] := ToString[e]; (* In reality, much more complicated... *)      What I want to take various permutations of variadic rules syntax and apply this function to create a string for the function. e.g. assume my basic test is:               rulestostring[rule_????] := ???     testrules = {f[x,y] -> x, f[x_,y_] -> x, f[x,y] :> x, f[x_,y_] :> x};          (* Create a function rulestostring where all of these give the same output as a string:     ==>    "f = @(x,y) x"     Where the f is actually generated from mytostring[f], x is from mytostring[x], etc.     *)      I need it to support variadic arguments and a few other things:               otherrules = {f[x_] -> x, f[x[bar]] -> x[bar]};     (* ==>   {"f = @(x) x", "f = @(x[bar]) x[bar]"     where in reality both x[bar] would be transformed by mytostring     *)      (you can probably guess that what I am doing is extending the http://library.wolfram.com/infocenter/MathSource/577/ package to generate matlab functions. If anyone has an updated version of this package it would be appreciated)