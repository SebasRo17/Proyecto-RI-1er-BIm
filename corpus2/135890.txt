Let's say I'm designing a custom data structure like a stack or a queue (for example - could be some other arbitrary ordered collection that has the logical equivalent of `push` and `pop` methods - ie destructive accessor methods). If you were implementing an iterator (in .NET, specifically `IEnumerable<T>`) over this collection that popped on each iteration, would that be breaking `IEnumerable<T>`'s implied contract? Does `IEnumerable<T>` have this implied contract? eg:               public IEnumerator<T> GetEnumerator()     {         if (this.list.Count > 0)             yield return this.Pop();         else             yield break;     }