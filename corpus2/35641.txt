I'm trying to create a modified version of the `Default.nb` StyleSheet that adds a docked cell to act as a status bar along the top of every notebook to display some basic information (user login name and login time, generated when my set of packages is loaded). My current implementation, which isn't functioning as I want it to, assigns the cell data I want to display in the status bar to a variable in the `Global` context:               $StatusBar = ToBoxes[Dynamic[Row[{           Item[            If[ValueQ[$PersonID],             Style[$PersonName <> " logged in at " <> $LoginTime,               Darker[Darker[Green]], FontFamily -> "Arial"],             Style["Not logged in!", Darker[Red], FontFamily -> "Arial"]             ]            ]           }],          TrackedSymbols :> {$PersonID, $PersonName, $LoginTime}]];      I've created a new stylesheet that inherits everything from `Default.nb`, but with modified Notebook Options Settings to add the desired `DockedCells` (I've omitted the non-relevant Options):               Cell[StyleData["Notebook"],           DockedCells->Cell[BoxData[$StatusBar]],           <...>     ]      Unfortunately, the `DockedCells` Option defined in the `StyleSheet` doesn't seem to recognize the `$StatusBar` variable I've created to populate it. All I get is a docked cell displaying `$StatusBar` (verbatim). I'm not sure if this is a context issue, an evaluation order issue, or something else altogether. It would be even more convenient if I could define the `$StatusBar` variable within the stylesheet so that it doesn't have to be recreated when my packages are loaded. However, I'm skeptical that this is possible. Is there any way to actually evaluate code within a StyleSheet?