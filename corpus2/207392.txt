I have a server application that distributes stock quotes to a number of clients on our internal network. As the number of clients has grown, unicast (TCP) connections between the server and the clients do not scale anymore. Hence, I have been looking into multicasts. Because of the inherent unreliability of IP multicast, I have been looking into reliable multicast and found Pragmatic General Multicast (PGM). Things like NAK suppression, forward error correction etc. sound like just the things I need and would have to implement myself when using raw UDP. Before I convert a mission critical application to this protocol, there are a couple of questions:   * **How widely used is PGM?** There aren’t many hits for it on Stack Overflow, Server Fault or the new Network Engineering Stack Exchange site. The RFC is from 2001 and a paper on the Microsoft Research site is from 2003. Why hasn’t this been adopted as a standard already?   * **How viable is the Microsoft implementation of PGM?** The documentation is extremely sparse and most projects using PGM (e.g. zeroMQ) seem to be built on top of OpenPGM. But using a socket API that comes with the operating system and that I am already familiar and that has good support in Delphi and C# (the languages I use) seems better than having to rely on additional libraries that need to be built separately and have their own dependencies. Are there any drawbacks of MS-PGM that I should be aware of?   * **What are the alternatives?** Are there other protocols that bring reliability to multicast programming, but e.g. allow for reordering of packets? That wouldn’t be a problem but actually a feature, because it would allow me to continue processing some instruments even when packets for others have been lost.