I have a lot of functions to use in a iterative way, and I need some of the calculation results. For example:                func = Function[{s}, s Sin[#] &] /@ Range[100];      ComposeList[func, x][[1 ;; ;; 10]]       Apparently, this code calculates much more than necessary. Especially, a lot of time is needed for the calculation when the length of `func` list is very long and when the `Function` is very complicated (e.g. `Length@func = 1024` and the function is `Fourier`); **Is there any elegant way to reduce the calculation?** _**Edit_** Perhaps I should say more about the fact that this code calculates than necessary. For example,                 func = Function[{s}, s Sin[#] &] /@ Range[10];        result=ComposeList[func, x][[1 ;; ;; 5]]      (* {x, 5 Sin[4 Sin[3 Sin[2 Sin[Sin[x]]]]], 10 Sin[9 Sin[ 8 Sin[7 Sin[6 Sin[5 Sin[4 Sin[3 Sin[2 Sin[Sin[x]]]]]]]]]]} *) Now we can see that result[[2]] (i.e., 5Sin[4 Sin[3 Sin[2 Sin[Sin[x]]]]]) is also appeared inside result[[3]] (i.e., 10Sin[...5Sin[4 Sin[3 Sin[2 Sin[Sin[x]]]]]], so the evaluation for 5Sin[4 Sin[3 Sin[2 Sin[Sin[x]]]]] is repeated twice here. The repetition will be very large with an increase of Length[func], which will be much more time-consuming than it is required. This is my point here (Up to now, Rojo has gotten the point and solved it ).