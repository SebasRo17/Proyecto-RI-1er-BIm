I'm trying to lead a charge for re factoring our rather bloated controllers. We currently have a BaseModel from which all our other models inherit. The BaseModel contains things common to all pages, such as the page title, css files needed, current user. Each constructor has a private method to construct a particular ViewModel (essentially a factory method) BaseModel.cs               Class BaseModel {         public string title {get; set;}         public List<String> cssFiles {get;set;}         // More Properties     }      HomeModel.cs               Class HomeModel : BaseModel {         public List<News> LatestNews {get;set;}     }      ExtendedHomeModel.cs               Class ExtendedHomeModel : HomeModel {         public List<RSSItem> Twitter {get;set;}     }      HomeController.cs               public ActionResult Index(int userid) {         return View(MakeExtendedHomeModel(userid));     }          private ExtendedHomeModel MakeExtendedHomeModel(int userid) {         var model = new ExtendedHomeModel();              InitialiseBaseModel(model, userid);         InitialiseExtendedBaseModel(model);              model.Twitter = DomainModel.Twitter.GetLatestItems();     }          private HomeModel MakeHomeModel() {         var model = new HomeModel();         InitialiseBaseModel(model);         InitialiseHomeModel(model);     }          private void InitialiseHomeModel(HomeModel model) {         model.LatestItems = DomainModel.GetLatestItems;     }          private void InitialiseBaseModel(BaseModel model, int userid) {         model.PageTitle = "Home"         model.UserId = userid     }      So, my question is: what is the best way of initialising these kind of base models? As far as I can tell what the constructor essentially does is the factory method, and at the very least it should be moved out of the constructor. However, I'm convinced there is a more elegant way of doing this. The main problem that I see is that the code is thoroughly depended on you calling the initialise methods in the correct order. One idea I've had is to use constructors, passing necessary parameters down the chain as necessary. Are there any pitfalls to this approach I havent seen? (Bearing in mind I've only started asp mvc six months ago). Are there any better ways? Thanks for reading