_Mathematica_ has a built-in function `ValueQ`. Quoting the docs, > `ValueQ[expr]` gives `True` if a value has been defined for `expr`, and > gives `False` otherwise. > > ... > > `ValueQ` gives `False` only if `expr` would not change if it were to be > entered as _Mathematica_ input. This works nicely with symbols that only have `OwnValues`:               x = Print["boo!"]     ValueQ[x]          (* ==> True *)      It doesn't work so nicely with functions, though:               f[x_] := Print[x]     ValueQ[f[1]]          (*          1      ==> True     *)      This gives `True`, but also evaluates `f[1]` completely, printing `1`. This is clearly dangerous, and it is important to be aware of this. Unfortunately, the docs make no mention of this under the "Possible Issues" section! Why this happens is clear if we look at the implementation of `ValueQ` for non-symbols:               ValueQ[expr_] := ! Hold[Evaluate[expr]] === Hold[expr]      **Question:** Is it possible to implement a more robust version of `ValueQ`, which does not evaluate its argument in an unexpected an possibly dangerous way?