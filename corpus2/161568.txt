The `IO` monad in Haskell is often explained as a state monad where the state is the world. So a value of type `IO a` monad is viewed as something like `worldState -> (a, worldState)`. Some time ago I read an article (or a blog/mailing list post) that criticized this view and gave several reasons why it's not correct. But I cannot remember neither the article nor the reasons. Anybody knows? **_Edit:_ The article seems lost, so let's start gathering various arguments here.** I'm starting a bounty to make things more interesting. _Edit:_ The article I was looking for is Tackling the awkward squad: monadic input/output, concurrency, exceptions, and foreign-language calls in Haskell by Simon Peyton Jones. (Thanks to TacTics's answer.)