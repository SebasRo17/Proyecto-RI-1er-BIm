Consider an application that displays only Foobars belonging to themselves to normal users, and all Foobars to admins:               -- Normal users:     SELECT * FROM Foobar WHERE user_id=:user_id;          -- Admins:     SELECT * FROM Foobar;      Currently, this how the queries are represented in the codebase:               $sql = "SELECT * FROM Foobar";          if ( $user['type']!='admin' ) {         $sql.= ' WHERE user_id=:user_id';     }          $stmt = $pdo->prepare($sql);          if ( $user['type']!='admin' ) {         $stmt->bindValue(':user_id', $user['id']);     }      I do not like this dual-branching approach from a maintainability standpoint. For instance, a bug like typing `$user['type']=='admin'` instead of `$user['type']!='admin'` would have to be found and fixed in two places instead of one. However, I also don't like the idea of separate functions for each case: admins and regular users. A third approach would be to branch once and there create the SQL to add and the values to bind:               $sql_to_add = '';     $array_to_bind = array();          if ( $user['type']!='admin' ) {         $sql_to_add = ' WHERE user_id=:user_id';         $array_to_bind = array( ':user_id'=>$user['id'] );     }          $sql = "SELECT * FROM Foobar {$sql_to_add}";     $stmt = $pdo->prepare($sql);          foreach ( $array_to_bind as $k=>$v ) {         $stmt->bindValue($k, $v);     }      However I find this approach cumbersome. **Is there a design pattern for this situation?** What is the canonical way to handle situations where the code must branch in two separate locations on the same `if` condition?