The following works:               list = {6, 7, 8, 9};     FreeQ2[n_Integer] := FreeQ[Last@Transpose@FactorInteger[n], _?(# >= 2 &)]     FreeQ3[n_Integer] := FreeQ[Last@Transpose@FactorInteger[n], _?(# >= 3 &)]     FreeQ4[n_Integer] := FreeQ[Last@Transpose@FactorInteger[n], _?(# >= 4 &)]     a = FreeQ2 /@ list /. {True -> 1, False -> 0};     b = FreeQ3 /@ list /. {True -> 2, False -> 0};     c = FreeQ4 /@ list /. {True -> 3, False -> 0};     Transpose[{a, b, c}] /. {{1, 2, 3} -> 1, {0, 2, 3} -> 2, {0, 0, 3} -> 3}      but of course is very inefficient coding. I was wondering what approach I should really be taking here.