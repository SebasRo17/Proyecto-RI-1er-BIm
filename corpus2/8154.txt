I am a newbie, so please point me in the right direction if you feel this question has been answered somewhere else before. Here goes: Suppose I have a list like this:               {{a, b}, {b, c}, {a, b, c}, {a, b, e}, {a, c, e}, {a, e, d, f}}       I want to strip this list of all its non-minimal sublists, by which I mean that I want to check whether each set contains a subset that's already somewhere else in the set. So, in this case, the output would need to be:               {{a,b},{b,c},{a,c,e},{a,e,d,f}}      Where {a,b,c} is dropped either because it contains {a,b} or {b,c} and {a,b,e} is dropped because it contains because it contains {a,b} **Edited to add:** I have found one solution so far which works like this:               list = {{a, b}, {b, c}, {a, b, c}, {a, b, e}, {a, c, e}, {a, e, d, f}}     Intersection[DeleteDuplicates[Apply[Intersection, Tuples[list, 2], {1}]], list]      which generates the desired result:               {{a, b}, {b, c}, {a, b, c}, {a, b, e}, {a, c, e}}      What this does: It generates all 2-tuple subsets of the list with itself. Then, the intersection of all these tuples are calculated and all duplicates are deleted. Finally, the resulting list is compared with the original list: the intersection is than the desired result. But: this list has length 6, so the tuple-list is 6^2 = 36. I would like this formula to also work on lists of lengths around 500 to 1000, which would mean the tuple-list is between 250 000 and 1 000 000. If anyone is able to point me to an easier way to do this calculation, I would be very much obliged.