I am trying to implement a model predictive control scheme in _Mathematica_ , e.g. I optimize input sequences by predicting future outputs. So every time I call the cost function it will simulate the system and produce the desired function value. Since the cost function has to call `NDSolve`, there is no symbolic representation and trying to call the cost with symbolic variables will not produce any results. Now, whenever I try to minimize my cost function, _Mathematica_ tries to evaluate the cost function symbolically:               FindMinimum[J[As, bs, cs, x0s, predY, Table[u[i], {i, 10}], 49, g, .1], Table[{u[i], 0}, {i, 10}]]     (* NDSolve::ndnum: Encountered non-numerical value for a derivative at t == 0.`. >>        ReplaceAll::reps: {NDSolve[{(x[1]')[t]==0. +1. x[2][t],(x[2]')[t]==0. +1. x[3][t],(x[3]')[t]==0. +u[1]-7.90817 x[2][t]-7.5181 x[3][t],x[1][0]==6.29161,x[2][0]==7.04417,x[3][0]==6.94553},{x[1],x[2],x[3]},{t,0,0.1}]} is neither a list of replacement rules nor a valid dispatch table, and so cannot be used for replacing. >> *)      and a couple of more like that telling me that _Mathematica_ doesn't know what to do with nonnumerical values. How can I force _Mathematica_ to initialize the minimization numerically, without trying to find some gradient symbolically?