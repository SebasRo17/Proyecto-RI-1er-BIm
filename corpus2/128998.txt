I'm currently in the process of what I hope to be a career change into the programming field. Despite my wide range of knowledge in the field and additional exposure to concepts in college (which in the end left a lot to be desired), I feel I might be missing out on what really matters when appealing to employers. I found this post http://stackoverflow.com/a/1991453 to be specific to my predicament. Importantly: > _I've seen a lot of terrible C++ code and it's not just from people who > don't understand the concepts. I've seen a lot of coders who know exactly > what an object is and can explain polymorphism and all those technical OOP > terms perfectly. But if they don't know when to use it, they'll never be > able to take full advantage of it. I know because I was like this myself. I > had read a book on OOP in high school which explained all the concepts, but > I went years before I actually used them because I didn't see when they'd > actually benefit my code._ I am comfortable with OOP concepts but a little rusty with supporting languages like Java, C# (my favorite for OO), and even C++. The reason I can't claim to be at least proficient in this area is because I'm not really sold on OO design; everytime I set out to solve a problem that can be done in OOP, I find myself forcing its use and end up making a procedural solution in C which I believe to be a much more elegant program. I guess this involves three questions: Can I still (honestly) sell myself as being valuable to an employer given my skill-set strengths and weaknesses as explained above? Is there any projects or problems I can tackle solo (for practice) that is just smarter to do with OOP? And given an object strong project, what language should I concentrate on?