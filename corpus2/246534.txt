I know output to the console is a costly operation. In the interest of code readability sometimes it is nice to call a function to output text twice, rather than having a long string of text as an argument. For example how much less efficient is it to have               System.out.println("Good morning.");     System.out.println("Please enter your name");      vs.               System.out.println("Good morning.\nPlease enter your name");      In the example the difference is only one call to `println()` but what if it's more? On a related note, statements involving printing text can look strange while viewing the source code if the text to print is long. Assuming the text itself can't be made shorter, what can be done? Should this be a case where multiple `println()`calls be made? Someone once told me a line of code shouldn't be more than 80 characters (IIRC) so what would you do with               System.out.println("Good morning everyone. I am here today to present you with a very, very lengthy sentence in order to prove a point about how it looks strange amongst other code.");      Is the same true for languages such as C/C++ since each time data is written to an output stream a system call must be made and the process must go to kernel mode (which is very costly)?