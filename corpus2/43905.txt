I have a list of the form `{{1,1,1}→1.2, {1,1,2}→20.2, ..., {m,n,p}→0.3}` and I want to create an $m \times n \times p$ array, $A$, where the value of $A[[i,j,k]]$ is as specified by the list (e.g., $A[[1,1,2]] == 20.2$ in the example above). This array represents a series of $p$ matrices, each $m \times n$, and each of which represents two-dimensional imaging data. The array $A$ can be formed by `Normal[SparseArray[{{1,1,1}→1.2, {1,1,2}→20.2, ..., {m,n,p}→0.3}]]`. However, I'm looking for the fastest way to create the array $A$. Specifically, I'm looking for a method that minimizes runtime (see below). Is the above approach the best, or is there a faster one? Typical values for $m, n, p$ are 320, 320, 20, respectively. The values to be stored are machine-precision numbers. The array is not particularly sparse (perhaps as much as 20% of the elements will be zero). I need to create many such $A$ arrays within an optimization (each instance of $A$ will differ from the previous one as the optimization proceeds). Once the array has been created, further processing will be applied (the first thing that will be done is to apply a two-dimensional discrete Fourier transform to each of the $p$ matrices. I assume for this reason that it makes sense for the array $A$ to be dense rather than sparse (or, at least) for each of the $p$ matrices to be dense.