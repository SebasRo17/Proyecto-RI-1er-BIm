Something mysterious is going on when exporting images. I'm using Mathematica 9.0.1 on Windows 7 (64 bit), and find that the memory use is excessive when exporting to a bmp. But it doesn't happen with other image formats. For example, running the following (with different values for `k`):               k = 1;  extensions = {"png", "tif", "jpg", "bmp"};  SeedRandom[42];     image = Image@RandomReal[{0, 1}, {1500, 1500, 3}];     base = MaxMemoryUsed[];     Export["C:\\mem." <> extensions[[k]], image];     {extensions[[k]], (MaxMemoryUsed[] - base)/1024.^2}     Quit[]      gives               {"png",  79.987}     {"tif",  28.617}     {"jpg",  60.453}     {"bmp", 927.602}      file sizes ( _added by s0rce_ ):               png: 12.8 MB     tif: 12.8 MB     jpg: 1.29 MB     bmp: 6.43 MB      Why does exporting a bmp require over 10 times the memory of other image formats? And what can I do about it? ## EDIT: Here's the results of some more testing (code at the end).               format  texture  type    memory(MB)  time(s)  size(KB)          png     random   real        89        3.4     15 028                      bit16        0        2.6     15 028                      byte         0        1.5      7 515             smooth   real        75        1.3        726                      bit16        0        1.2        726                      byte         0        0.5         85          tif     random   real        17        0.2     15 000                      bit16        0        0.1     15 000                      byte         0        0.1      7 500             smooth   real        17        0.3     15 000                      bit16        0        0.1     15 000                      byte         0        0.2      7 500          jpg     random   real        68        0.4      1 500                      bit16        0        0.8      1 503                      byte         0        0.7      1 500             smooth   real        68        0.3         50                      bit16        0        0.3         50                      byte         0        0.3         50          bmp     random   real      1069       25.3      7 500                      bit16      967       22.8      7 500                      byte        69    $Aborted         0             smooth   real      1055      100.8      7 500                      bit16      953       32.4      7 500                      byte        71        1.4      7 500      **Notes:**   * By default Mathematica will treat the image type as _Real_.   * When exporting, a _Real_ type image will need to be converted to an integer type. This requires extra memory and time.      * _tif_ and _png_ support 16 bit pixels, so this will be used by default for _Real_ images.     * _jpg_ and _bmp_ only support up to 8 bits per pixel.   * My computer was thrashing the memory disk cache for the _bmp smooth real_ , so it took extra time.   * The _bmp random byte_ was using 100% for 5 minutes before I gave up. **Conclusions:**   * Use **tif** for **speed**.   * Use **png** for saving **disk space**.   * Never use **jpg** because it is **lossy**.   * Never use **bmp** because it is **broken**. **Code:**               k = 1; (* 1 .. 24 *)     {e, t, c} = Tuples[{Range[4], Range[3], Range[2]}][[k]];     extensions = {"png", "tif", "jpg", "bmp"};     types = {"real", "byte", "bit16"};     compress = {"random", "smooth"};     res = 1600;     SeedRandom[42];     data = Switch[compress[[c]],       "random", RandomReal[{0, 1}, {res, res, 3}],       "smooth", Table[{i, j, 1 - i j}, {i, 0., 1, 1/(res - 1)}, {j, 0., 1, 1/(res - 1)}]     ];     image = Switch[types[[t]],       "real", Image@data,       "byte", Image[Round[(2^8 - 1) data], "Byte"],       "bit16", Image[Round[(2^16 - 1) data], "Bit16"]     ];     filename = "C:\\_" <> types[[t]] <> "_" <> compress[[c]] <> "." <> extensions[[e]];     base = MaxMemoryUsed[];     time = AbsoluteTiming[Export[filename, image]][[1]];     CellPrint@TextCell[ToString@{       filename,(MaxMemoryUsed[] - base)/1024.^2, time, FileByteCount[filename]/1024.     }, "Text", CellAutoOverwrite -> False]     Quit[]