Note that my question is referring to those attributes that even on their own already represent a _concept_ ( ie on their own provide a _cohesive meaning_ ). Thus such attribute needs no additional functional support and as such is _self-contained_. I'm also well-aware that even with _self-contained_ attributes the _custom types_ may prove beneficial ( for example, they give the ability to add new behavior later, when business requirements change ). Thus, my question focuses only on whether _custom types_ for _self-contained_ attributes really enrich Ubiquitous Language **UL** a) I've read that in most cases, even simple, _self-contained_ attributes should have custom, more descriptive types rather than _basic value types_ ( _double, string_ ... ), because among other things, _descriptive types_ add to the **UL** , while the use of _basic types_ instead weakens the language. I understand the importance of **UL** , but how does having a _basic type_ for a _self-contained_ attribute weaken the language, since with _self-contained_ attributes the name of the attribute already adequately describes the _concept_ and thus contributes to the **UL** vocabulary? For example, the term `person_age` already adequately explains the concept of _quantifying the number of years a person has_ :               class Person     {            string person_age;     }      so what could we possibly gain by also introducing the term `ThingAge` to the **UL** :               class person     {           ThingAge person_age;      }      thanks