I've been working on a dynamic task scheduler based on a Calendar Queue structure and I've hit a bit of a wall. The Calendar Queue lets me enqueue and dequeue events, however I think I might not be understanding the pseudo code correctly, but it can't seem to find any pseudo code referencing the application loop and how the application waits for the correct time before executing the task. Heres a naiive solution for what I'm talking about: Let calQueue be a CalendarQueue populated with events.               while(1){         time = DateTime.now         nextTask = calQueue.dequeue()         if(time!= nextTask.time){             sleep(nextTask.time-time);             executeTask(nextTask)         }     }      Obviously this has many problems:   1. many events may occur at the same exact time   2. the executeTask method may take a significant amount of time to execute, which means events might be missed.   3. I'm using a database backed CalendarQueue, and so the dequeue method may take a not insignificant time to complete.    4. This also ignores tasks that were added to the calQueue that must execute before the next task, ie the task was added while it was sleeping, for immediate execution.  Other considerations:   1. I would like to eventually make this a distributed (clustered) scheduler.   2. I've looked at cron and fcron but honestly they are both pretty large applications, and somewhat difficult to trace.  Basically what I'm looking for is how I could design a CalendarQueue scheduler.