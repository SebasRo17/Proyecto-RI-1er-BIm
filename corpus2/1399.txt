I am using an overloaded version of the `StringJoin` function since years now, without any problem, as I've invested a lot of time and effort earlier to make its behaviour consistent and predictable (see discussion here). I am fully aware that modifying built-in symbols is not a good idea. The new `StringJoin` automatically converts any non-string input to `String` thus I don't have to type `ToString` every time. It still threads over lists, i.e. `StringJoin[{"1", "2", "3"}]` returns `"123"`. Also `StringJoin[{1, 2, 3}]` returns the same, but `StringJoin[{1, 2, 3}, "s"]` gives `"{1, 2, 3}s"`. The code is:               toString[expr_String] := expr;     toString[expr_] := ToString@expr;     Unprotect[System`StringJoin];     Attributes[System`StringJoin] = {};     System`StringJoin[expr___] := StringJoin@{expr};     System`StringJoin[expr_List] :=        Fold[StringInsert[#1, toString@#2, -1] &, "", expr];     Protect[System`StringJoin];      For me, it works as expected, and I am really happy to use it as it saves me a lot of typing. Though there is one minor annoyance I cannot track down. Consider the following example:               Append[test, 1];      ![Mathematica graphics](http://i.stack.imgur.com/MjEPz.png) Note, that the message is printed with `List`-s wrapping each argument of the printed `StringForm` (that is: `1` and `Append[test, 1]`). Interestingly, `StringForm` on its own works as expected:               StringForm["Test variable insertion: `1`, `2`.", 111, 222]      ![Mathematica graphics](http://i.stack.imgur.com/j6WDp.png) **Question** : Can anyone explain why `Message` fails to print its result correctly? **Caveat:** Modifying `System`` symbols could have many unexpected side-effects. It happens for this modified `StringJoin` too (apart from the above example): as `Import` uses `StringJoin`, the modification causes a massive performance drop when importing e.g. images. For details, see this post.