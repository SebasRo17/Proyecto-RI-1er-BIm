In this example, `Block` is used to localize the variable cache as used in the function `g` when called from the function `f`. In `f`, the cache symbol to use is passed in as the second parameter `z`:               f[a_, z_] := Block[{cache = z}, g[a]];     g[a_] := (Print["hash" -> Hash[cache]]; cache[1] = a; cache[1]);      Everything works as expected:               Hash[z]      2065959314 (your number may be different)       Calling `f`:               f[1, z]      hash->2065959314 (same)      1       The symbol `z` now has a single downvalue:               DownValues[z]      {HoldPattern[z[1]] :> 1}       However, what if I use the **actual symbol cache** as the cache symbol (say. by accident; not knowing that is the symbol name used inside `Block`):               Hash[cache]      1028301578 (your number may be different)       Calling `f`:               f[1, cache]      hash->1028301578 (same)      1       But nothing stored in the cache this time?               DownValues[cache]      {}       My (partial) theory is that `Block[{cache = cache}, ...]` may have used a temporary variable `cache$xxx` after `cache=cache` collapses, but that doesn't explain why we still see the correct hash for the symbol inside `g`. This is an awkward, but OK situation **if** you know the name of the variable used inside `Block`, but could conceivably lead to some very puzzling bugs (as it did for me) if you chance upon the same symbol name.