I have a scenario where I will be receiving messages through a socket connection. I also need to keep a list of 100 messages (such as List) and periodically toss out old messages from the list when a condition is met.               List<Message> MessageList = new List<Message>();     Message CurrentMessage = new Message();          public void ReceiveSocketMessage (SocketMessage Message) {              if (Message.Type == duplicate) {             CurrentMessage = MessageList.FirstOrDefault(x=> x.MessageText == Message.Text);             CurrentMessage.Time = DateTime.Now;         } else {             MessageList.Add(Message);         }     }      Since the socket sends messages very quickly, it seems like any other method that attempts to access MessageList will cause a problem. Other methods will need to access the list at many random points in time. I just can't get my head wrapped around working on the list of objects without causing trouble. What is the traditional method of handling this? UPDATE: Would it be simpler just to maintain a list of items in a database table instead of a list of c# objects? A database would surely have all the major locking problems ironed out to a point where I shouldn't need to worry about it.