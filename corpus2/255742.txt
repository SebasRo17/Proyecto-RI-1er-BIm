We are planning to use a setup that uses several modules to complete a whole application, example modules include:   * The core (code shared by all other modules)   * The server   * The client (Windows, OS X, Linux)   * The client (iOS)   * The client (Android)   * Tool #1   * Tool #2 And now while we preparing to deliver our first release, it is a good time to think about the numbering scheme. We have defined to use a major.minor.patch format, but we are struggling about one question: **Should every module have the same version number as newest release, and consequently, should we bump version numbers if there has been no update to them?** Example to illustrate: 1) Assume all our components are running on version 0.1.0 (early development), once we do a significant update, should then all components be bumped to version 0.2.0? It also works the other way around: 2) Assume again every component is running 0.1.0 initially, and now we introduce a signifcant update (could be a GUI rework) on the Android client, should we then release a version 0.2.0 for _every_ component, even though the other versions have not received any update? And perhaps the most tricky one: 3) Assume that we still run 0.1.0 one very component in the start, and we figure out Tool #2 has a bug and we need to hotfix it to 0.1.1, should we also then update every component to 0.1.1? * * * I am currently doubting whether we should pursue correct versioning, or should go for compatability? People outside to the development team will most likely expect that all modules run on version 0.3.0 for example, while we as developers are a bit confused and perhaps feel uneasy with bumping a version number up, while the module did not have any change to it. What is the best way to deal with this? * * * **Edit** , something I have forgot to mention, but which may change opinions is that all releases will be done in automated way. On Github/git a specific commit will be tagged being version major.minor.patch and after that the build system (here: Travis CI) will pick up the tag and automatically build every release and publish it somewhere if necessary and/or wanted.