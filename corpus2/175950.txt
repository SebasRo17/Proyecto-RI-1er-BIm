I have seen various arguments against the DAO being called from the Controller class directly and also the DAO from the Model class.Infact I personally feel that if we are following the MVC pattern , the controller should not coupled with the DAO , but the Model class should invoke the DAO from within and controller should invoke the model class.Why because , we can decouple the model class apart from a webapplication and expose the functionalities for various ways like for a REST service to use our model class. If we write the DAO invocation in the controller , it would not be possible for a REST service to reuse the functionality right ? I have summarized both the approaches below. **Approach #1**                 public class CustomerController extends HttpServlet {              proctected void doPost(....)  {                      Customer customer = new Customer("xxxxx","23",1);                 new CustomerDAO().save(customer);              }                }      **Approach #2**                 public class CustomerController extends HttpServlet {              proctected void doPost(....)  {                      Customer customer = new Customer("xxxxx","23",1);                 customer.save(customer);              }                }           public class Customer {             ...........             private void save(Customer customer){                  new CustomerDAO().save(customer);             }          }      **Note** \- Here is what a definition of Model is : Model: The model manages the behavior and data of the application domain, responds to requests for information about its state (usually from the view), and responds to instructions to change state (usually from the controller). In event-driven systems, the model notifies observers (usually views) when the information changes so that they can react. I would need an expert opinion on this because I find many using #1 or #2 , So which one is it ?