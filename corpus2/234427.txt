The situation: **System A** Huge, complicated system. Uses an important Message object with many other Message objects attached, many of which have further Message objects attached. In total, this is about twenty different objects. Due to awkward timing with releases and introduction of code churn, System A cannot have its Message object hierarchy touched. **System B** Needs to use the same important Message object to communicate with System A to make use of one of its services. However, since the messages it will send off are going to be invariable, it only uses a very small portion of the Message object hierarchy. The Question: How could I allow System B to make use of the important Message object without (a) touching System A, or (b) including a hierarchy of nearly twenty objects, almost none of which are used at all? Is there a more advanced Design Pattern which could be put to use in this scenario?