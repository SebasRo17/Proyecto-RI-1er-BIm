The commentator here offers the following criticism of green threads: > I was initially sold on the N:M model as a means of having event driven > programming without the callback hell. You can write code that looks like > pain old procedural code but underneath there's magic that uses userspace > task switching whenever something would block. Sounds great. The problem is > that we end up solving complexity with more complexity. swapcontext() and > family are fairly strait-forward, the complexity comes from other unintended > places. > > All of a sudden you're forced to write a userspace scheduler and guess what > it's really hard to write a scheduler that's going to do a better job that > Linux's schedules that has man years of efforts put into it. Now you want > your schedule to man N green threads to M physical threads so you have to > worry about synchronization. Synchronization brings performance problems so > you start now you're down a new lockless rabbit hole. Building a correct > highly concurrent scheduler is no easy task. Another critique is here: > A single process faking multiple threads has a lot of problems. One of them > is that all the faked threads stall on any page fault. My question is - **arego-lang's goroutines (for a default pool) just green threads? If so - do they address the criticisms above?**