What are the best practices of compiling functions? I understand that this is a vague question, but let me list some aspects that might trigger useful answers. Some of these have already been answered (these don't need answers) but I included them for sake of clarity and completeness:   1. Which functions are allowed in `Compile` (see these lists: functions, distributions)?   2. There are structures which are not allowed by the _Mathematica_ virtual machine, e.g. boolean tensors are not supported (see this question, particularly Oleksandr's comment). Are there other disallowed objects?   3. Which operations should be left for the main evaluation to do? (e.g. `x = x + c1[y]` or `x = c2[x, y]`, where the compiled function `c2` contains the addition inside).   4. Which practice is better: partition a large computation into smaller compiled functions, or wrap the whole into one big function? What factors should be considered when making a decision? One such factor is for example that a large compiled function cannot easily return intermediate values (at least it is not trivial how to do this, see this post, and perhaps it also decreases performance).   5. Type-conversions: `Compile` silently converts `Integer`/`Real` input to the appropriate type, and it also packs non packed arrays, but I'm not sure what the cost of it is. Is it efficient/safe to leave the compiler to deal with type-conversions?   6. How to call for custom functions in the compiled code? This involves calls for external user functions, recursive calls (perhaps recursive calls passing arguments by reference), or directly injecting code into a held `Compile`.   7. Anything else...? As I'm in the process of understanding `Compile`, I have a very basic understanding at the moment. Please feel free to add any knowledge to this post.