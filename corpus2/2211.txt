> For an input vector $\\{a_1,a_2,\ldots,a_n,b_{1},b_2,\ldots,b_{m}\\}$ and a > list of ordered positions $\\{k_1,k_2,\ldots, k_n\\}$, such that $1\leqslant > k_1 < k_2 < \ldots < k_n \leqslant n+m$, I would like to output a vector > where each $a_i$ are located at $k_i$-th position, and for every $1 > \leqslant s<t \leqslant m$, $b_s$ precedes $b_{t}$ in the resulting list. My implementation of this is based on the observation that $\\{k_1,\ldots,k_n\\} \cup \\{k_1,\ldots,k_n\\}^c$ is the inverse of the needed permutation, where complement is understood in the set of natural numbers from 1 to $n+m$.               Reshuffle[ab_, kvec_] := ab[[Ordering[Join[kvec, Complement[Range@Length[ab], kvec]]]]]        Reshuffle[{a1, a2, b1, b2, b3}, {2, 4}]         (* Out= {b1, a1, b2, a2, b3} *)      I am somewhat dissatisfied with this solution, as it has sub-optimal complexity. I am hoping there is a direct way to construct the permutation to transform input `ab` into the result, that does not use `Ordering` or `Complement`. Thanks for reading.