I have some confusion regarding the use of static variables/references in a class. It feels like I may not have entirely figured out the implications of keeping something static. When I say a variable is public static, is it one instance of the variable per class or one instance per assembly? For example, I have a user control (say, for a WPF app). This user control has a public static variable that coordinates various things within the control. If there is a form in a client application that uses this user control, with multiple instances of this control per form, how many instances of the public static variable are created? (My guess is only one, and it is modified by every control). Now, I actually need each instance of the control to have one such variable, not one variable across all the instances of the control in that single form. Does using a singleton pattern, with a "lock" keyword solve this issue i.e will it create one variable per instance of the user control? If not, what issue does the singleton pattern solve? What are the options in solving this design problem? (Note: I have resorted to creating an internal non static global variable and passing it around carefully, instead of going the static route and its working fine. I am looking to see if there is another option.) (Please bear with me if the question sounds very naive or unresearched, I did read a bit before posting, but seem stuck on finding an answer that explains it very clearly to me.)