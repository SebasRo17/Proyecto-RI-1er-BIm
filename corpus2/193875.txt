I'm currently working on a project which will have client applications (desktop & android & web) communicate with varies processes running on a server(s). My question is how much should I be thinking about load balancing and the like? All projects which I have worked on before consisted of creating applications for internal use within companies so the number of connections was alwyas very low (probably no more than 50 at a time). However in my own time I decided to start creating a piece of accounting software, just because. So what I have ended up with is a WPF desktop application, and ASP.NET MVC web site and an Android App which all connect to various processes/data running on my server. On the server there is an SQL database (MS), various WCF services for communication from client to server and a few services running cleanup stuff. This works fine when I'm testing and its just me connected. However I have no idea how it will scale if a few people start connecting at once. I'm not even sure if I will release the software, let alone anyone use it! However as part of a learning exercise how should I be developing the system so that it could take on a large load and not crash/delay. I'm aware this could be a very open question and could be subjective to a lot of things, but as I say I have no experience in this department and it's something I would like to learn.