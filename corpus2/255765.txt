**My background is as follows:** I have almost no programming experience to speak of (I programmed a game mod in Jr. High and have since been dormant for 15 years). I'm quite comfortable with both vim and emacs (having used them general purpose text editing in the past). I have a graduate degree in mathematics with research experience in logic. I've read from cover to cover _The C Programming Language_ (doing about 1/4 of the exercises) and _The Pragmatic Programmer_. I felt that the concepts discussed in these books came quite natural to me, although I suspect _reading_ about programming is akin to reading about how to have sex (i.e., next to worthless in practice). **My primary programming goal is to be able to construct rough software prototypes as rapidly as possible.** I'd also like to understand the big picture of how things are operating at the software level. Unfortunately, I don't yet know if our first prototype is going to involve an iOS application or a web app. With this in mind, what's the best technical content I can consume in the short-run (with an eye towards rapid prototyping) before I know what it is I'm actually trying to build and test?