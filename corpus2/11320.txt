This is a kind of a followup to my previous question. I am starting with a long list of plane coordinates, like this one:               lst = {{0.399933, 0.0904781}, {0.449966, 0.545239}, {0.724983, 0.27262},            {0.362492, 0.13631}, {0.681246, 0.0681549}, {0.840623, 0.0340774},            {0.920311, 0.0170387}, {0.960156, 0.00851936}, {0.480078, 0.00425968},            {0.240039, 0.00212984}, {0.370019, 0.501065}, {0.18501, 0.250532},            {0.0925049, 0.125266}, {0.546252, 0.0626331}, {0.273126, 0.0313166},            {0.636563, 0.0156583}, {0.568282, 0.507829}, {0.284141, 0.253915},            {0.39207, 0.626957}, {0, 0}};      Then I apply `Tally[]` as follows:               lst2 = Tally[Map[Round[#/(0.5)^2] &, lst]];      (The particular values 0.5 and 2 above are just examples) The result is a "ragged" list of the kind that compilers do not like:               {{{2, 0}, 3}, {{2, 2}, 2}, {{3, 1}, 1}, {{1, 1}, 3}, {{3, 0}, 3}, {{4, 0}, 2},      {{1, 0}, 2}, {{1, 2}, 1}, {{0, 1}, 1}, {{2, 3}, 1}, {{0, 0}, 1}}        My question is: What would be the most efficient way (compilable) to get the same result but in two separate uniform (tensor) lists rather than in one ragged list?