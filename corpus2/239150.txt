As the title says, is Resque appropriate for an evented application that requires a decent amount of speed? I'm working on a server application that emulates the default Minecraft server, and I was wondering whether Resque would be more of a hinderance or a help for managing events (such as firing an event when a certain network packet is received), or whether it would be better to use a synchronous approach (i.e, Wisper). Example - let's say the `:player_move` packet is received. In this packet we have an x, a y, z. We should then notify the `WorldController` that `player` has moved to x y and z. The `WorldController` then does it's own thing - such as notifying appropriate players in an area around the actor. However I don't want to manually hard code that the `:player_move` packet maps to `WorldController#move_player`, so I am currently using Wisper to publish a `:player_moved` event. This is great, however the events are handled synchronously, and there is no guarantee of order - This is something I'd like to have, so I could implement cancellation of events. Obviously the pros and cons of Resque over Wisper is that: **Pros**   1. Tried and tested (no need to roll your own with Wisper)   2. Asynchronous processing   3. No need to write large amounts of boilerplate to tie each subscriber to each publisher.   4. Guaranteed ordering of jobs (and the ability to cancel jobs) **Cons**   1. Slower (likely, due to having to interface with a database)   2. Reliance on Redis as a cache (not that that's really a con)   3. No guarantees of if or when something will occur (nature of threading)   4. Memory usage (process splitting) Thoughts?