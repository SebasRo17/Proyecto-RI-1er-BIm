I have a web service (axis2) and the server performs 4 primary operations: createX, removeX, getX and updateX Where X is represented by a combination of 4 values: id1, id2, id3 and id4 So, to simplify developer life, we created 3 extra helper functions: removeXForId, getXForId and updateXForId where we represent the set of 4 values as 1 Identifier so that the developers who are calling us do not need to pass all those 4 values again and again and just store the unique identifier on their end. But, we cannot also completely remove removeX, getX and updateX operations completely abd just rely on the unique identifier as some use cases need to pass all 4 set of values. **So, now we have around 7 operations where half (3) of them are duplicate operations with different input values.** Operations:               /createX     /getX {input: id1, id2, id3, id4}     /getXForId {input: id1234}     /removeX     /removeXForId     /updateX     /updateXForId      Is this a good practice? **UPDATE:** _getX is exactly the same as getXForId in terms of behavior except the input arguments._ getX takes in 4 inputs: val1, val2, val3 and val4. But getXForId takes in just 1 ID which represents (val1, val2, val3 and val4) val1, val2, val3 and val4 are some how related to each other, they in combination represent a unique link to a product in our system. So we tried to club them together.