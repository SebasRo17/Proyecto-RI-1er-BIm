I have set up my ASP.NET MVC project as follows: Presentation Layer : ViewModels, Views, Certain logic to handle service responses Business Logic / Service Layer : Services that work with data from either database or presentation layer. (Domain models is EF entities) Database Access Layer : Entity Framework. according to http://www.asp.net/mvc/tutorials/getting-started-with-ef-using- mvc/advanced-entity-framework-scenarios-for-an-mvc-web-application#repo a repository/unit of work pattern is no longer needed with EF6. And working with ASP.NET Identity creating a interface for DbContext is hard, making all services have a tight coupling to the ApplicationDbContext. Is this okay? in the scenario you have to change database to NoSQL, you would have to change all the Services code instead of just the "middleware". Any comments to architecture is welcome aswell. I am trying to find a good stand point for creating an application.