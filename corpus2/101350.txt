I've been reading about systems that employ transactions to provide fault- tolerance -- SQLite, for instance, implements a journal that allows the database to be rolled back to a known state in case of a failure. Most of the systems I've been reading about write the _current_ state to the journal and use this to roll back when required. I have found far fewer examples where the _next_ state is journalled and used to complete the transaction after a failure. Are there some good examples out there of systems that employ roll-forward transactions? Are there reasons to choose a roll-forward design over one that rolls back?