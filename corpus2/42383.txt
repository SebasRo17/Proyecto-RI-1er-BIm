I'm trying to integrate the rotational equations of motion               jTime = 1.0;     jMass = {{2.6666, 0, 0}, {0, 2.6666, 0}, {0, 0, 2.6666}};     jForce = (time^2*{-1.0, 4.0, -10.0}) + {2.0, -4.0, 10.0}     jAccel = jForce . Inverse[jMass]     jVel0 = {1, 1, 1};     jOri0 = {1, 0, 0, 0}     solOri =        NDSolve[{         jOri''[time] == jAccel,          jOri'[0] == 0.5*Join[{0}, jVel0]*jOri0,          jOri[0] == jOri0},jOri,          {time, 0, jTime}]      But I get the error > NDSolve::ndincd: "Initial conditions for derivatives of the function > jOri[time] do not have consistent dimensions." Well, this makes sense. The angular acceleration and velocity are 3D vectors while the orientation is a quaternion. Its also a little tricky to go between an angular velocity and an orientation, so we can't expect _Mathematica_ to work that out by itself. My question is how to explain this to _Mathematica_? EDIT: I tried doing everything as Euler angles               jForce = Cross[{1.0, 0.0, 0.0}, {0.0, -0.5*[Pi], 0.0}]     jRot = RotationMatrix[Pi - jOri[time][[3]], {0, 0,    1}].RotationMatrix[jOri[time][[2]], {1, 0, 0}].RotationMatrix[Pi - jOri[time]   [[1]], {0, 0, 1}]     jAccel = jForce. Inverse[Transpose[jRot].jMass.jRot]     jOri0 = {0, 0, 0}     solOri = NDSolve[{jOri''[time] == jAccel, jOri'[0] == jVel0, jOri[0] == jOri0}, jOri, {time, 0, jTime}]      This was OK until I tried rotating the inertia tensor into the current frame. Now I have an error saying jOri[time][[2]] doesn't exist. This seems contrary to all my initial conditions being 3 vectors