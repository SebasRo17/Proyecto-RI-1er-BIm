I write code in C. I have been striving to write more testable code but I am a little confused on deciding between writing pure functions that are really good for testing but require smaller functions and hurt readability in my opinion and writing functions that do modify some internal state. For example (all state variables are declared static and hence are "private" to my module): Which of this is more testable in your opinion:               int outer_API_bar()     {        // Modify internal state        internal_foo()     }          int internal_foo()     {       // Do stuff            if (internal_state_variable)       {          // Do some more stuff          internal_state_variable = false;       }     }      OR               int outer_API_bar()     {        // Modify internal state             internal_foo(internal_state_variable)             // This could be another function if repeated many        // times in the module        if (internal_state_variable)        {           internal_state_variable = false;        }     }          int internal_foo(bool arg)     {       // Do stuff            if (arg)       {          // Do some more stuff       }     }      Although second implementation is more testable wrt to internal_foo as it has no sideeffects but it makes bar uglier and requires smaller functions that make it hard for the reader to even follow small snippets as he has to constantly shift attention to different functions. Which one do you think is better ? Compare this to writing OOPS code, the private functions most of the time use internal state and are not pure. Testing is done by setting up internal state on a mock object instance and testing the private function. I am getting a little confused on whether to use or whether to pass in internal state to private functions for the sake of "testability"