For example consider:               int index = 3;     int array[4] = {0, 1, 2, 3};      then both `index[array]` and `array[index]` are valid expressions, much like `*(index + array)` and `*(array + index)`. In C arrays why is this true? array[5] == 5[array] explains how it works. My question is: Why did the language designers choose to allow this? Why not just enforce that `index[array]` is invalid, for clarity's sake?