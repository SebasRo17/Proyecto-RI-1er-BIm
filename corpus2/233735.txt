So i understand the semantics of derivations as far as Backus Naur Form goes. One thing I cannot find in any text book or the various lecturers' notes that are on-line is this. When would a right most derivation be beneficial over a left most derivation? Would a compiler or generator always use either left, or right, or would it use both? So here's an example: Suppose we had the following language sentence: A = B + C * A Example Language Grammar Permitting the Above:               <assign>  <id> = <expr>      <id>  A | B | C     <expr>  <expr> + <term>             |<term>     <term> <term> * <factor>             |<factor>     <factor>  ( expr )             | <id>      Left Most Derivation:               <assign>   => <id> = <expr>                   => A = <expr> + <term>                   => A = <term> + <term>                     => A = <factor> + <term>                    => A = <id> + <term>                    => A = B + <term>                    => A = B + <term> * <factor>                   => A = B + <factor> * <factor>                   => A = B + <id> * <factor>                   => A = B + C * < term>                   => A = B + C * <factor>                   => A = B + C * <id>                   => A = B + C * A      Right Most Derivation:               <assign>  => <id> = <expr>           => <id> = <expr> + <term>           => <id> = <expr> + <term>   * <factor>           => <id> = <expr> + <term> * <id>           => <id> = <expr> + <term> * A           => <id> = <expr> + <factor> * A           => <id> = <expr> + <id> * A           => <id> = <expr> + C * A           => <id> = <term> + C * A           => <id> = <id> + C * A           => <id> = B + C * A           =>  A = B + C & C