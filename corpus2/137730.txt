Rule 9 in Object Calisthenics by Jeff Bay (RTF) is: > **Rule 9: No getters/setters/properties** > > The last sentence of the previous rule leads almost directly to this rule. > If your objects are now encapsulating the appropriate set of instance > variables but the design is still awkward, it is time to examine some more > direct violations of encapsulation. The behavior will not follow the > instance variable if it can simply ask for the value in its current > location. The idea behind strong encapsulation boundaries is to force > programmers working on the code after you leave it to _look for_ and _place_ > behavior into a single place in the object model. This has many beneficial > downstream effects, such as a dramatic reduction in duplication errors and a > better localization of changes to implement new features. > > Another way this rule is commonly stated is “Tell, don’t ask”. I get the point of the rule. But I find it only useful in garbage collected environments where modifying a reference is very simple. Will this be of any help in Objective C? Because it's always important to let only setter change the ivar and let it also take care of retaining new value and releasing the old one. and use the setter anywhere inside methods to alter ivars which are pointers.