I keep seeing it all over the place. I think it is an anti-pattern, it requires partially instantiated business object to be able to find the full one in a dictionary. Am I correct? Why would people love it so much? I dislike:               class Thingy {       Id id; // first component of the key       SubId subId; // second component of the key       Data data; // useful payload       public Thingy(Id id, SubId subId, Data data) {...}       // equality & compare & hash override     }          Set<Thingy> things;      I like:               class Thingy {       public static class Key {         Id id; // first component of the key         SubId subId; // second component of the key         // equality & compare & hash override       }            Key key;       Data data; // useful payload       public Thingy(Key key, Data data) {...}     }          Map<Thingy.Key, Thingy> things;