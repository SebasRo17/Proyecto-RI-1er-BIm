Can you recommend a design pattern/approach to exposing/tolerating/recovering from system errors, Exception handling (Java, C++, Perl, PHP)? Some errors need to be reported. Some errors can be handled internally (by a retry or are inconsequential (can be ignored). How do you structure the code to catch them? But all errors need to be logged. What best practises are there? And for simulating them to be able to fully test components that are impacted by them? General non-programming-language specific question applicable to several modern programming languages but would welcome example illustrations of patterns, approaches and philosophies in Java, C++, PHP and Perl. (Also asked in stackoverflow: http://stackoverflow.com/questions/7432596/recommend-a-design-pattern- approach-to-exposing-tolerating-recovering-from-system but I thought it should be asked on programmers too because I think the programmers Q&A covers wider software/programming issues whereas stackoverflow is more about technical implementation IMHO).