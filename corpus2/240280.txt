I have a problem when designing any application that is either greenfield or a refactored brownfield due to often finding a potential flaw or an uncertainty with the design or architecture that I think up. I waste a lot of time trying to construct a design that I am confident in without a lot of time invested from the beginning. I feel that mistakes early on lead to big issues later in development (especially when refactoring brownfield apps). I want to minimize this, but am unsure how to do it without an optimal solution or bothering the senior devs or the architect. For example, there is a legacy application that needs to be refactored. I can rewrite it in a new project and reduce the lines of code from 12k to 2-3k. The application's purpose is to generate HTML pages, but is done in a console application in C#. I have not done any web development until now, but I am unsure if ASP.NET MVC would be a good choice, and even if so, if my design or architecture is a good choice. I understand when working in a team I can receive good and solid advice, but how do I become less reliant on my team's thinking and more on my own without wasting the company's time researching every technological possibility? Does this just come with time and experience? If trial and error is the true and tried way, can architecture and design really be done in an agile way with minimal time wasted?