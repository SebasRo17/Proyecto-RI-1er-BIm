I saw, here on Programmers, the answer to this question: How does thinking on design patterns and OOP practices change in dynamic and weakly-typed languages? There I found a link to an article with an outspoken title: Are Design Patterns Missing Language Features. But where I found snippets that to me seemed very catchy and that can be probably verified against experience given there is an incentive for that , like: > PaulGraham said "Peter Norvig found that 16 of the 23 patterns in Design > Patterns were 'invisible or simpler' in Lisp." or another sentence that confirms what I recently seen with people trying to simulate classes in JavaScript: > Of course, nobody ever speaks of the "function" pattern, or the "class" > pattern, or numerous other things that we take for granted because most > languages provide them as built-in features. OTOH, programmers in a purely > PrototypeOrientedLanguage? might well find it convenient to simulate classes > with prototypes... I am also taking into consideration that design patterns are a communcation tool. Because even with my limited experience participating in building applications I can see as an anti-pattern(ineffective and/or counterproductive) for example, forcing a small PHP team to learn GoF patterns for small to medium intranet App. I am aware that scale, scope and purpose can determine what is effective and/or productive, but still I didn't managed to find an technical overview about that. I saw small commercial applications that mixed functional with OOP and still be maintainable, and I don't know if many would need for example in python to write a singleton , but for me a simple module does the same thing. ### So are there studies, exhaustive articles or other form of exposition that takes into consideration design patterns vs. workarounds vs. simpler ways to do it, or replacements by language features ?