I have an array A of n integers, sorted from min to max, and two numbers a<=b, which are known to be in A. I would like to write a pseudo-code for a procedure whose running time is c1+c2log(n) and which returns the number of elements in A which satisfy a<=A[i]<=b. I wrote the following but am not sure it satisfies the requirement for the running time and would appreciate some help: _NB <\- denotes an arrow_               LBound(Input: integer n, sorted array of integers A, integer a) {       min  ← 1       max  ← n       while (min <= max) {     mid  ←  |_(min + max) / 2_|         if (A[mid] < a)           min  ←  mid + 1     else           max  ←  mid - 1       }       output(min)     }     LBound(Input: integer n, sorted array of integers A, integer a) {       min  ← 1       max  ← n       while (min <= max) {     mid  ←  |_(min + max) / 2_|         if (A[mid] > b)           max  ←  mid - 1     else           min  ←  mid + 1       }       output(max)     }     Range(Input: integer n, sorted array of integers A) {      output (1 + UBound(n,A,b) – LBound(n,A,a))      }