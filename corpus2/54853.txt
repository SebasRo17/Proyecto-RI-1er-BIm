Disconcertingly I have discovered that the new (v10) `PositionIndex` is horribly slow. Using Szabolcs's clever `GatherBy` inversion we can implement our own function for comparison:               myPosIdx[x_] :=       <|Thread[x[[ #[[All, 1]] ]] -> #]|> & @ GatherBy[Range @ Length @ x, x[[#]] &]      * * * **_Edit:_** I should have used `AssociationThread` in defining my function as it performs better:               myPosIdx2[x_] :=        x[[ #[[All, 1]] ]] ~AssociationThread~ # & @ GatherBy[Range @ Length @ x, x[[#]] &]      Timings below and Taliesin Beynon's analysis refer to the original version; changes would be minor. * * * Check that its output matches:               RandomChoice[{"a", "b", "c"}, 50];          myPosIdx[%] === PositionIndex[%]      > >     True >   Check performance in version 10.0.0 under Windows:               a = RandomInteger[99999, 5*^5];     myPosIdx[a]      // Timing // First     PositionIndex[a] // Timing // First      > >     0.140401 >   >     0.920406 >   Not a good start for the `System`` function, is it? It gets worse:               a = RandomInteger[999, 5*^5];     myPosIdx[a]      // Timing // First     PositionIndex[a] // Timing // First      > >     0.031200 >   >     2.230814 >   With fewer unique elements `PositionIndex` actually gets _slower!_ Does the trend continue?               a = RandomInteger[99, 5*^5];     myPosIdx[a]      // Timing // First     PositionIndex[a] // Timing // First      > >     0.015600 >   >     15.958902 >   Somewhere someone should be doing a face-palm right about now. Just how bad does it get?               a = RandomInteger[9, 5*^5];     myPosIdx[a]      // Timing // First     PositionIndex[a] // Timing // First      > >     0.015600 >   >     157.295808 >   Ouch. This has to be a new record for poor computational complexity in a System function. :o