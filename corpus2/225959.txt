I am an algorithm novice and am faced with a rather difficult problem. I am working with contests. There are   * **contestant** - individual player   * **entry** - contestants can have multiple entries into a tournament   * **contests** - abstract - has a max number of entries property   * **contests instances** - contains entries My requirements are:   1. all contestant's entries must only be grouped into one instance (they cannot span instances)   2. minimize the number of instances created.   3. If multiple instances are required, distribute the contestants among them to get as close to equal entry distributions as possible (if there are 120 entries and 2 instances selected should be distributed as close to 60 / 60 as possible while keeping each contestant's entries in only 1 instance, whoa)   4. If all entries cannot be fit into the number of instances allotted alert user.   5. There is a hard limit on the number of instances. An example end user scenario is:   * client selects a contest that has 100 max entries   * the client then selects they will pay for up to 200 entries (2 instances)   * the client registers contestants and grants entries   * suppose the client has 22 registered contestants and grants them each 9 entries (198 total entries)   * then the client registers another contestant and grants them 2 entries.   * In the above scenario the contestant/entry combination will not fit into exactly 2 instances, so we must detect that. The difficulty is fitting these blocks of contest entries into only 1 instance while respecting the hard limit on the number of instances. My current solution is extremely lackluster, right now (from what I've read I'm solving it as more of a bin packing style) I am putting the blocks of entries into the a first instance and spilling over into the remaining available instances. If there is no available space in either instance I remove single entries and merge the instances. This was working because we would only need to generate 1 instance maybe 2 every now and then and there were quite a few single entries, But now that we need to generate many instances, this completely fails. Is this an example of a multiple knapsack problem? It certainly seems like it, but I want to make absolutely sure before I start diving into solutions like http://www.or.deis.unibo.it/kp/Chapter6.pdf , because papers like that are a struggle for me and it is going to take a very large time investment to work through something like that.