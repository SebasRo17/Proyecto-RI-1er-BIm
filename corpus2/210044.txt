When faced with (even a small) project, I tend to fall into the following bad practice. I think about the structure of the problem. Then I create some base classes, derive from them and then derive from those my actual useful classes. I almost never have a chance to write code inside those base classes, they are just too broad for the concrete problem I am solving. The problem is not limited to inheritance. If I need to do something very simple, I make a class to do it, then a class to hold an instance of the "doer", and then a Manager to ... call methods inside the wrapper of the "doer". IMHO this is different form directly breaking YAGNI as I do not build unnecesery features for the end user. What term best describes this anti-patern? Any tips how to change my design process in order to avoid it?