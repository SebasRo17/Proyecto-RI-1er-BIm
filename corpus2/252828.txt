I was looking to an alternative to Repository Pattern and I've read about "Query object pattern" (http://lostechies.com/jimmybogard/2012/10/08/favor- query-objects-over-repositories/). However the implementation provided in the link above is not exactly what I was looking for - I look for something that can be easily injected, easily tested and easily extended/changed (only last point holds in the link-implementation). I thought a bit and I think "I have invented" solution. Suppose I have controller `BlogEntriesController` (i'm talking about `mvc asp` application with ORM) and I inject to constructor class:               public class BlogEntriesQueries     {         IRetrieveQuery<BlogEntryEntity> PageBlogEntries { get; set; }         IRetrieveQuery<BlogEntryEntity> ProposedBlogEntries { get; set; }         IAddQuery<BlogEntryEntity> CreateNewBlogEntry { get; set; }         ... etc..     }      where `IRetrieveQuery<T>` is smth like:               public interface IRetrieveQuery<TEntity> where TEntity : EntityBase          IQueryable<TEntity> CurrentQuery { get; }          IRetrieveQuery<TEntity> InvokeQuery(IRetrieveQuery<TEntity> subQuery);          IEnumerable<TEntity> GetQueryResults();     }      Then all the work I'd have to do is proper configuration of IoC container to inject queries into controller and proper calls in controller like: `_blogQueries.ProposedBlogEntries.GetQueryResults()` The question is - it is good solution - are there any drawbacks that I don't see? I think i'd get testability (don't even have to mock `ISession` in case of `NHibernate`) and it'd be easily extensible but I'm not an expert (especially at database applications) by any means.