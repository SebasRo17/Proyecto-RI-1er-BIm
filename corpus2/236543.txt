Based on the same example for this question. Within the Pro ASP.Net MVC 4 by Adam Freeman, there is a discussion on aggregates and aggregate roots with a simple auction system. There are members who bid, items that are bidded upon, and bids. The author says that there would be an aggregate of Item and Bid with Item being the aggregate root. The author then mentions that aggregates roots can be used to do a cascading delete, which for this example means that if an item is deleted, all bids on the items are deleted. This makes sense. The problem is, bids only belong to the item/bid aggregate, and not to a member/bid aggregate. If I delete a member of the system who places bids, it would seem reasonable that all their bids are deleted as well. Yet, I can't do that without 'break' the aggregate. I also can't simply get a members list of bids. My level of confusion, given how simple the example is, makes me a bit worried. Is this just a bad example, could member/bid be a valid aggregate instead and there is some level of arbitrariness in making the choice of your aggregates that is acceptable as long as you make a choice, is there some way to have models belong to multiple aggregates, or am I just missing something? P.S. The answer in the question I linked says that domain driven development is just very tricky, but it doesn't go into enough details as to how it is tricky and why the trickiness induces confusion and as such my questions about it still remains.