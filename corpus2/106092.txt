We initially wanted to implement a Strategy pattern with varying implementations of the methods in a commmon interface. These will get picked up at runtime based on user inputs. As it's turned out, we're having **Abstract classes implementing 3 - 5 common methods** and **only one method left for a varying implementation** i.e. the Strategy. _Update: By many abstract classes I mean there are 6 different high level functionalities i.e. 6 packages , and each has it's Interface + AbstractImpl + (series of Actual Impl)._ Is this a bad design in any way? Any negative views in terms of later extensibility - I'm preparing for a code/design review with seniors.