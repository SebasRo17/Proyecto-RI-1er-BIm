I have seen many CS curriculums and learning suggestions for new programmers that call for the aspiring programmer to study a lisp interpreter that is specifically written in lisp. All these sites say things similar to, "its an intellectual revelation", "it is an enlightenment experience every serious programmer should have," or "it shows you hardware/software relationships," and other vague statements, particularly from this article taken from this reputable how-to. The general sentiment of my question is, how does lisp achieve the above goals and why lisp? Why not some other language? I am asking this because I just finished writing a scheme interpreter in scheme (taken from SICP http://mitpress.mit.edu/sicp/ ) and now I am writing a python interpreter in scheme and I am struggling to have this legendary epiphany that is supposed to come specifically from the former. I am looking for specific technical details between the two languages that I can exploit in their scheme interpreters to gain understanding about how programs work. More specifically: > Why is the study of an interpreter that is written in the language it > interprets so emphasized - is it merely a great mental exercise to keep the > original language and built language straight or are there specific problems > whose solutions can only be found in the nature of the original language? > > How do lisp interpreters demonstrate good architecture concepts for one's > future software design? > > What would I miss if I did this exercise in a different language like C++ or > Java? > > What is the _most used_ takeaway or "mental tool" from this exercise? ** ** I selected the answer I did because I _have_ noticed that I have gained from this exercise more skill in designing parsing tools in my head than any other single tool and I would like to find different methods of parsing that may work better for the scheme interpreter than the python interpreter.