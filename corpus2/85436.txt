Do you bother typedef'ing most of your number types like this? Or do you just use "int" in most places? It might be more important in my current project with is client / server based and the types have to match when transmitted through the wire as binary data - but I just wondered how far people go with this generally:               types.h:          typedef int16_t Version;     typedef int32_t PacketLength;     typedef int32_t Identity;     typedef int32_t CabinetNumber;     typedef int64_t Time64;     typedef int64_t RFID;     typedef int64_t NetworkAddress;     typedef int64_t PathfinderAddress;     typedef int16_t PathfinderPan;     typedef int16_t PathfinderChannel;     typedef int64_t HandsetSerialNumber;     typedef int16_t PinNumber;     typedef int16_t LoggingInterval;     typedef int16_t DelayMinutes;     typedef int16_t ReminderDelayMinutes;     typedef int16_t EscalationDelayMinutes;     typedef float CalibrationOffset;     typedef float AnalogValue;     typedef int8_t PathfinderEtrx;     typedef int8_t DampingFactor;     typedef int8_t RankNumber;     typedef int8_t SlavePort;     typedef int8_t EventLevel;     typedef int8_t Percent;     typedef int8_t SensorNumber;     typedef int8_t RoleCode;     typedef int8_t Hour;     typedef int8_t Minute;     typedef int8_t Second;     typedef int8_t Day;     typedef int8_t Month;     typedef int16_t Year;     typedef int8_t EscalationLevel;      It seems logical to try and make sure the same type is always used for a particular thing to avoid overflows, but I do often see code where "int" has just been used pretty much everywhere instead. The typedef'ing often does lead to code that looks a bit like this though:               DoSomething(EscalationLevel escalationLevel)     {         ...     }      Which then makes me think which bit is actually describing the parameter - the parameters type or the parameters name?! Thanks.