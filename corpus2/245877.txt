We have application written entirely in Django, which consist of three separate components. Admin, Service for generating invoices + API and UI for users. Problem is, that they are very tightly coupled (even they're kind of split, each components has it's own settings, and can run 'standalone' - well, this is often not really true, since they all share same models and some functionality from the views, ie. error on the UI means most of the time that invoice generating service is down also. Problem is, that generating invoices is very crucial part of our business. We also push some data to the client, and we use AMQP, websockets, tornado and celery to do this. I looked on Erlang and found out, that it's exactly perfect fit for our invoice generating service. We could exchange Celery, Tornado and AMQP (it is written in Erlang anyhow as far as I know), just for Erlang. We are at very early stage, where only one invoice is created every few hours, so it's not that big of a deal now, but I can imagine how big problems this might cause in the future. My question is, whether it's good to do such decoupling now (when the problem really does not exist), or focus on the adding new features to the product and start to solve this once this will start being an issue? Part of the problem is, that quite big part of the application logic is in the Django models itself. We use quite a lot signals, pre/post save hooks etc., so we would lost this functionality by for instance writing to the database directly from Erlang, but I feel, that this might save us a lot of pain in the future.