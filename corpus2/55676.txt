I have written some functions that take a matrix and find its minimum inner product with a specific set of vectors               LowerBound3d[M_] :=      NMinimize[{1/4 xy3d[\[Alpha], \[Beta], \[Gamma], \[Delta]].M.xy3d[\[Theta], \     \[Phi], \[Chi], \[Eta]], \[Alpha] >= 0 && \[Alpha] <= Pi && \[Beta] >=       0 && \[Beta] <= 2 Pi && \[Gamma] >= 0 && \[Gamma] <=       Pi && \[Delta] >= 0 && \[Delta] <= 2 Pi && \[Phi] >=       0 && \[Phi] <= 2 Pi && \[Theta] >= 0 && \[Theta] <=       Pi && \[Chi] >= 0 && \[Chi] <= Pi && \[Eta] >= 0 && \[Eta] <=       2 Pi}, {\[Alpha], \[Beta], \[Gamma], \[Delta], \[Theta], \[Phi], \     \[Chi], \[Eta]}]      I am trying to find matricies that are "positive definite" for these vectors "xy3d" (which are product vectors in two spherical subspaces). In the above function, I scan over all values the left and right vectors independently, but this of course should contain the case where one vector is the same as the other. I used this code to get a list of "positive definite" matrices. The problem is, the minimization is completely untrustworthy. When I rewrite the function with the vectors being the same (i.e. the same polar variables)               LowerBound3dtest[M_] :=      NMinimize[{1/4 xy3d[\[Alpha], \[Beta], \[Gamma], \[Delta]].M.xy3d[\[Alpha], \[Beta], \[Gamma], \[Delta]], \[Alpha] >= 0 && \[Alpha] <= Pi && \[Beta] >=       0 && \[Beta] <= 2 Pi && \[Gamma] >= 0 && \[Gamma] <=       Pi && \[Delta] >= 0 && \[Delta] <= 2 Pi}, {\[Alpha], \[Beta], \[Gamma], \[Delta]}]      Suddenly, matrices that worked before (inner product always positive) no longer work. This confused me because the second code is a special case of the first code, and they should give the same results (i.e. positive definite). Im a physics phd so woefully untrained in coding - any advice would be massively appreciated. Ive been stuck on this for weeks! UPDATE: thanks for all the comments. Here is a sample matrix to try out {{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1}}