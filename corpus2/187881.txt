Fully automated memory management increases productivity and integrity greatly, but usual implementation (GC) has a critical problem. It's non- deterministic, and not controllable. This causes many problems such as burst CPU load which is critical for realtime applications. Some kind of optimizations (incremental/concurrent GC) can reduce those problems but still non-deterministic and can't eliminate the problem completely. I have been thought GC never can solve this problem, but recently, I learned and realized that GC operation doesn't need to be fully hidden. GC also can be deterministic and CPU burst-free by exposing some properly designed behavior controls. I think (RC + manually invoked cycle detection) can do this. But this doesn't look efficient. Is there any better approach for deterministic and controllable fully automatic memory management implementation? Or can I get some link to example implementations? **Edit** I added these lines to make my question more clear.   * _deterministic and controllable_ in this context means user can track and run code at object creation and destroying explicitly. And also controls amount and time of memory management operation load.   * _fully automatic_ means it allocates and clears memory as like GC without extra concern.