Functional Programming in Scala explains a side effect’s impact on breaking referential transparency: > side effect, which implies some violation of referential transparency. I’ve read part of SICP, which discusses using the “substitution model” to evaluate a program. As I _roughly_ understand the substitution model with referential transparency (RT), you can de-compose a function into its simplest parts. If the expression is RT, then you can de-compose the expression and **always** get the same result. However, as the above quote states, using side effects can/will break the substitution model. Example:               val x = foo(50) + bar(10)      If `foo` and `bar` **do not** have side effects, then executing either function will **always** return the same result to `x`. But, if they do have side effects, they will alter a variable that disrupts/throws a wrench into the substitution model. I feel comfortable with this explanation, but I don’t fully grok it. Please correct me and fill in any holes with respect to side effects breaking RT, discussing the effects on the substitution model as well.