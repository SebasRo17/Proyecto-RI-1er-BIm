I'm using `NMaximize` on a function that calls `NDSolve`, and running out of memory. I created the following minimal example that (I think) recreates the problem I'm having, but on a smaller scale.               f[t_?NumericQ] := Block[{sol, s, x},       sol = First[NDSolve[{x''[s] + Sin[x[s]] == 0, x[0] == 0, x'[0] == 1}, x, {s, 0, t}]];       x[t] /. sol]          memInit = MaxMemoryUsed[];     ListPlot[Reap[NMaximize[       {f[t], t < Pi, t > 0}, t,       Method -> "NelderMead",       EvaluationMonitor :> Sow[MaxMemoryUsed[] - memInit]]][[2]]]      On my machine, with a freshly launched MathKernel, the memory usage increases badly after a run of not increasing at all. Here's the plot: ![Memory usage after each evaluation of f](http://i.stack.imgur.com/fIkpy.png) If I run `NMaximize` on `Sin[t]` instead of `f[t]`, the memory usage does not increase. Can anyone explain the difference in behavior or suggest how to reduce memory usage?