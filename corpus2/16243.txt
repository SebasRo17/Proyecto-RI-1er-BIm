Anyone who has used R# or CodeRush knows how fast you can put together simple constructs (and refactor complex ones) with a simple keyboard shortcut. However, **do these productivity plugins cause a false evaluation of ability during interviews?** Part of being a productive code writer (and making a good first impression in an interview) is writing good code - fast. If I had two candidates:   1. Doesn't use plugins. She thinks about the problem, sits down at a stock IDE at the interview PC that looks exactly like hers and types out the code in a minute or two, as usual. Done. Pass.   2. Uses plugins. He thinks about the problem, sits down at a stock IDE at the interview PC and realizes "fe + tab" no longer writes a foreach loop automatically, and all the shortcuts are gone. He then bumbles around the keyboard hitting his normal hotkeys and popping up strange windows and getting flustered. It takes him 3 minutes to write what normally would take 30 seconds. Done. Looked like they didn't know their way around the IDE at times. Must be new to this IDE and thus not had much experience with it or maybe the language. Pass, but a 'meh' mark beside their name. In your experience, how do you handle plugins during interviews as the interviewer or interviewee? What are the best practices to getting what the candidate really knows? There can be candidates who don't understand code, and use R# as a crutch. There can also be candidates who know the code in and out and use R# because it's just plain faster than the built in VS or Eclipse templates. Is it best to just not use an IDE at all? Let them bring their own PC? Others?