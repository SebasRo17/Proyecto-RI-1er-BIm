I'm reading algorithms and I understand most of it, one thing that I can still struggle with a lot is something as simple as running times on different for- loops. Everyone seems to have easy with that, except for me and therefore I search help here. I am currently doing some excercises from my book and I need help completing them in order to figure out the different running times. The title of the exercise is: "Give the order of growth(as a function of N) of the running times of each of the following code fragments" a:               int sum = 0;     for (int n = N; n > 0; n /= 2)       for(int i = 0; i < n; i++)         sum++;      b:               int sum = 0;     for (int i = 1; i < N; i *= 2)       for(int j = 0; j < i; j++)         sum++;      c:               int sum = 0;     for (int i = 1; i < N; i *= 2)       for(int j = 0; j < N; j++)         sum++;      We have learned different kinds of running times/order of growth like n, n^2, n^3, Log N, N Log N etc. But I have hard understanding which to choose when the for loop differs like it does. the "n, n^2, n^3" is not a problem though, but I can't tell what these for-loops running time is. Here's an attempt of something.. the y-axis represents "N" value and the x axis represents times the outer loop has been run. The drawings in the left is: arrow to the right = outer-loop, circle = inner loop and the current N value. I have then drawn some graphs just to look at it but I'm not sure this is right though.. Especially the last one where N remains 16 all the time. Thanks. ![My drawing](http://i.stack.imgur.com/35QwR.jpg)