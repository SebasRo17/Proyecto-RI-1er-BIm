I have a class that is 99% identical to its counter part. Sample code goes below:               public abstract class BaseClass     {         void Method1() { }         void Method2() { }         void Method3() { }         public void MainMethod(List<Object1> listObject)         {             Method1();             Method2();             Method3();             Method4();         }              abstract internal void Method4();          }          public sealed class DerivedClass : BaseClass     {         internal override void Method4()         {             throw new NotImplementedException();         }     }          public class BaseClass2     {         void Method1() { }         void Method2() { }         void Method3() { }         public void MainMethod2(List<Object2> listObject)         {             Method1();             Method2();             Method3();         }          }      As You can see that BaseClass and BaseClass2 are almost identical with Method1 ... Method3. Is there a better alternative that can be used to minimize duplication of code. * * * I initially started this polymorphism as an encouraging stuff, I have over 11 derived classes on BaseClass, and because of the second implementation of MainMethod2, I am stuck with duplication of code. I just cannot think of any clever way to get out of it. * * * **Update:** So this question is potentially containing two parts: **1. How to avoid duplication of code?** I solved this by using Composition successfully as suggested by wonderful answers below. **2. How to avoidleaky abstractions?** With this I am still struggling...