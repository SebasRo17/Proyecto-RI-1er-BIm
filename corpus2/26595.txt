**Update/Re-write** There has been a lot of ambiguity over what i'm am trying to do with this question so I have decided to give it a full rewrite. I'm _really_ sorry for the confusion. If you want to see the background please see the edit history. I hope things are clearer now.. I have some data made up into the following fashion:               datac =       {        data1 = RandomReal[1, {7, 3}],        data2 = RandomReal[1, {13, 3}],        data3 = RandomReal[1, {19, 3}],        data4 = RandomReal[1, {16, 3}],        data5 = RandomReal[1, {5, 3}]        };      `data1` through `data5` are subsets of a multivariate dataset with 3 _independent_ variables. `data1`, for example, is composed of 7 individual data points (each with 3 variables). If I use the following function:               Needs["StatisticalPlots`"]     pairwisecol[data_, col_] :=      PairwiseScatterPlot[data,                            PlotStyle -> col,                            DataTicks -> True,                             DataLabels -> {"x", "y", "z"}]      I can create a _combined_ plot comparing the various subsets. E.g.               Show[{pairwisecol[data1, Red],            pairwisecol[data2, Blue],            pairwisecol[data3, Green],             pairwisecol[data4, Purple],            pairwisecol[data5, Orange]}]      ![enter image description here](http://i.stack.imgur.com/KAXLy.png) This curently has the major drawbacks that each subset has to be defined and have a colour explicitly assigned to it. Also, `Show` in this instance overlays all of the `DataTicks` etc, rather than just the elements from the first plot (as is normally the case with `Show[{Plot1,Plot2}]`). What I'm looking for is a way to use the whole (partitioned) dataset `datac` to generate such a plot/diagram. i.e. something like,               Show[pairwisecol[#, Red] & /@ datac]      but, with `Red` being replaced by a series of colours to represent each subset (like in the plot shown). ...Alternatively, starting with a 2-level list e.g.               datap = RandomReal[1, {60, 3}];      and a definition of sublist partitions,               parts = {7, 13, 19, 16, 5};      or               partspos = {[[1;;7]], [[8;;20]], [[21;;39]], [[40;;55]], [[56;;60]]};      then defining a function something like:               pairwiseP[data_, partlist_] := ...      that would partition `datap` into appropriate sublists, create a series of `PairwiseScatterPlot`'s (each with a different plot colour) and then combine them using `Show`. Note that this example has n = 3 independent variables. I am looking for a method that works for 1 < n < ~20. Can anyone suggest how to do this?