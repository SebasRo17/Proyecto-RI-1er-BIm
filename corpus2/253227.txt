I've come to a point in re-design of my code where I face an imminent Poltergeist Anti-Pattern threat. A master application object has two "eye" objects. Eye objects have a "RenderHUD" function, which is supposed to use (a) the state of the eye object, and (b) the state of the application object to render the HUD at each frame. I have a function right now that derives the HUD info from the application object, and then passes these as arguments to the "RenderHUD" function of each eye. The problem is that these argument lists are reeaaaaly loooooong. Obvious solution is to put them all into a struct, e.g. HUD_Info. But that would be a new poltergeist that would be created and destroyed with each frame, right? Any easy way to avoid that?