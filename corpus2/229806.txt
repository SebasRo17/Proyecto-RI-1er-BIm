I'm trying to clarify the design of a C++ application, and would like to define a clear classification among classes to aid clarity. However I'm struggling to find any literature to help me, probably because I don't really know what I'm searching for. To help, here is what I've got so far. Classes can be one of a number of types:   * Value object. Here I mean things like std::string, std::vector. These are concrete classes that are typically instantiated on the stack, can be copied etc.    * Service objects. Clients will interact with these through a pure virtual interface, and these will typically be injected, DI style. A persistence service might be a good example here. There would typically be once instance of a service, either injected or accessed through a ServiceLocator (yeah, I know).   * (Domain object?). Clients interact with these through a pure virtual interface, but these represent abstract domain objects and are constructed using an abstract factory, which itself will be a service. These would typically have identity, but you want to interact with them in an abstract way. So a database connection might be a good example (note that this is different from a persistence service -- the concrete implementation of persistence service may use a database connection, but the database connection would represent one actual connection, and there would be subclasses for Mysql, SqlServer etc). There will be many instances of such objects, they have identity.   * Other things that don't fit into the above, but which I've failed to come up with any clear classification.  Now someone must have documented this kind of taxonomy, but so far I can't find anything. Does anyone have any good references? Thanks.