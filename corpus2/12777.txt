I've heard it said that the inclusion of null references in programming languages is the "billion dollar mistake". But why? Sure, they can cause NullReferenceExceptions, but so what? Any element of the language can be a source of errors if used improperly. And what's the alternative? I suppose instead of saying this:               Customer c = Customer.GetByLastName("Goodman"); // returns null if not found     if (c != null)     {         Console.WriteLine(c.FirstName + " " + c.LastName + " is awesome!");     }     else { Console.WriteLine("There was no customer named Goodman.  How lame!"); }      You could say this:               if (Customer.ExistsWithLastName("Goodman"))     {         Customer c = Customer.GetByLastName("Goodman") // throws error if not found         Console.WriteLine(c.FirstName + " " + c.LastName + " is awesome!");      }     else { Console.WriteLine("There was no customer named Goodman.  How lame!"); }      But how is that better? Either way, if you forget to check that the customer exists, you get an exception. I suppose that a CustomerNotFoundException is a bit easier to debug than a NullReferenceException by virtue of being more descriptive. Is that all there is to it?