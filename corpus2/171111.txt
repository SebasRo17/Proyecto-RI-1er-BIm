In Scrum/Agile, the complexity of a user story can be estimated in story points. After completing some user stories, a programmer or team of programmers can use those experiences to better estimate how much time it might take to complete a future user story. **Is there a methodology for breaking down the complexity of user stories into quantifiable or quantifiable attributes?** For example, User Story X requires a rich, new view in the GUI, but User Story X can perform most of its functionality using existing business logic on the server. On a scale of 1 to 10, User Story X has a complexity of 7 on the client and a complexity of 2 on the server. After User Story X is completed, someone asks how long would it take to complete User Story Y, which has a complexity of 3 on the client and 6 on the server. Looking at how long it took to complete User Story X, we can make an educated estimate on how long it might take to complete User Story Y. I can imagine some other details:   * The complexity of one attribute (such as complexity of client) could have sub-attributes, such as number of steps in a sequence, function points, etc.   * Several other attributes that could be considered as well, such as the programmer's familiarity with the system or the number of components/interfaces involved   * These attributes could be accumulated into some sort of user story checklist. To reiterate: **is there an existing methodology for decomposing the complexity of a user story into complexity of attributes/sub-attributes,** or is using completed user stories as indicators in estimating future user stories more of an informal process?