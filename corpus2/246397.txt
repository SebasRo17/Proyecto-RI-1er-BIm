Is there any legitimate use for bit manipulation hacks in higher-level languages such as Java? I can see them being useful in speed-sensitive low-level and computation- intensive programs, e.g. graphics processing or crypto functions. I guess that's why all collections of them are in C. However, getting to think about them in terms of higher-level design I cannot think of any point where I would, for example, write the following in a Java program:               r = y ^ ((x ^ y) & -(x < y));      rather than:               r = (x < y) ? x : y;      The first line looks more like an obfuscation than an improvement. And most applications have different kinds of bottlenecks - most commonly networks or disc access, so much so that any potential improvement gained by using a bitwise hack would be so tiny that it is completely ignorable. This line of thought was provoked by a recent SO question in which someone was asked about a bitwise hack in Java during a interview. I agree as much as anyone that it's always better to write faster code, but considering that it becomes much less readable, especially by someone not familiar with bit hacks, is there any kind of application in which it is legitimately worth it? This question is not about bitwise _operators_ in general, but more specifically about bitwise _hacks_ , and even more specifically about bitwise hacks _in Java_. By _bitwise hack_ I mean a manipulation that has a trivial and/or obvious implementation, but which can be done slightly faster/better with some clever bitwise manipulation -- which in most cases makes it _near-unreadable_ to someone not used to bitwise hacks. * * * There are similar looking questions: Importance of bitwise thinking and What are bit operators good for? The answers in these questions talk about bit manipulations in general, which yes, have a lot of clear and useful applications; especially in _other_ languages like C. While this may seem similar, my question was about having them _versus_ using the non-bitwise technique in Java. In the other questions this is not addressed at all.