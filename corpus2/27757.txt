At times I'll find myself building a some interface component where I want to have some localized dynamic variables, and while testing I might realize that some bit of the code needs to change, which means I lose the current state of all the localized variables, some which might be bothersome to set once again. In such case my typical solution is something like:               DynamicModule[{       persistant = 21,       transient = 2},           Column[{               InputField[Dynamic[persistant]],               InputField[Dynamic[transient]],               Dynamic[persistant*transient],           }],       Deinitialization :> (saveVar = persistant),       Initialization :> (FinishDynamic[]; If[ValueQ[saveVar], persistant = saveVar])     ]      Which will retain the value of `persistant` even if I rerun the code. However if you have a bunch of variables that you want to retain it becomes bothersome to save each and everyoen and reload them, and what more you might want to save `DownValues` as well as `OwnValues` so I thought that I'd make a bit more general solution using `DumpSave` or `Save` to save definitions and load them in using `Get`:               Deinitialization :> (If[FileExistsQ["tempfile"], DeleteFile["tempfile"]];            Save["tempfile", {persistant}]),     Initialization :> (FinishDynamic[]; If[FileExistsQ["tempfile"], get["tempfile"]])      But when trying this I've run into problems since the names that are saved are the local temporary names eg. `FE`persistant$$161`instead of just`persistant` which means the values aren't loaded back again correctly. So my question is whether theres either another way to achieve a similar result or if the naming problem can be resolved