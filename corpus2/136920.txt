I was reading Paul Graham's essay - Beating The Averages (2003) and here's what he had to say: > The more of an IT flavor the job descriptions had, the less dangerous the > company was. The safest kind were the ones that wanted Oracle experience. > You never had to worry about those. You were also safe if they said they > wanted C++ or Java developers. If they wanted Perl or Python programmers, > that would be a bit frightening-- that's starting to sound like a company > where the technical side, at least, is run by real hackers Now, this is a dated essay. However, I fail to see how using a non-commonplace language (C/C++/Java, C#) would be _'less dangerous'_. If the programmers of an organization are very fluent with the development language they should be equally adept at cranking out code at a decent pace. In fact if you do use a non-commonplace language won't maintenance/enhancement problems hit you in the face since not too many programmers would be available, in the long run? For making quick-n-dirty systems I agree, that some languages allow you to take off relatively sooner than others. But does Paul Graham's essay/comment make sense in 2012 and beyond? If a startup were to use _typical IT_ languages for development, why should it's competition be less worried? I fail to see how the language itself makes a difference. IMHO it's the developers experience with the language that matters and the availability of frameworks so that you DRY (do not repeat yourself) not just coding in a particular language. What is it that I'm missing? Does it imply that startups better choose non IT- flavored languages (even if the developers may be extremely adept at them)? What are the (programming) economic/market-forces behind this claim? PS: 'lingua obscura' is not meant to hurt anyone's feelings :)