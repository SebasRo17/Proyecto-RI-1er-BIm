In Mark Seeman's Dependency Injection in .NET he injects a repository into his UI layer. I believe that he is doing this so that he can store everything in the UI configuration, however this just strikes me as bad design. Wouldn't it be better to pass the service reference into the UI? What is to stop a future developer from using the repository directly? Also, he says that he is building this as an n-tier architecture. But, he has now coupled the data layer to the UI layer (no matter if DI is used or not). What if he wants to host all three layers on different self-contained servers. While his approach COULD work, it just seems wrong to me. So, I wanted to see what the general community has to say. Am I right in my thoughts, or am I missing something? Simplified version of the code:               public class UI     {       IRepository _repo;       public UI(IRepository repo)        {         _repo = repo;       }            public stuff UIMethod()       {         var svc = new Service(_repo);         return svc.GetStuff();       }     }          public class Service     {       IRepository _repo;       public Service(IRepository repo)       {         _repo = repo;       }            public stuff GetStuff()       {         var persistenceStuff = _repo.GetStuff();         //Do some business logic here         return persistenceStuff.ToServiceStuff();       }     }