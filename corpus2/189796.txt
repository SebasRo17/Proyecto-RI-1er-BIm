I'm currently implementing an undo/redo mechanism using the Command Pattern. Everything works so far. My problem now is to implement the undo/redo functionality in a way that it is bound to a given context. Assume the following situation:   You have _win1_ and _win2_. In _win1_ you execute _action1_ ; then you switch to _win2_ and you execute _action2_ and _action3_. You "undo-stack" would look as follows   * action3   * action2   * action1 Now what happens if _win1_ gets closed/removed and you start performing undos. At _action1_ the program would probably crash as the context is has been executed against previously (i.e. _win1_ ) doesn't exist any more. As such, when _win1_ gets closed, all the corresponding actions should be removed from the "undo-stack". My question is on whether there exist already implementations/best practices for implementing such scenario properly? Or do you have any ideas?