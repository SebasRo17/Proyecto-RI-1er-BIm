While learning SRP and LSP, I'm trying to improve the design of my code to comply best with both of these principles. I have an employee class that has a calculatePay method on it. Firstly, I believe following OOP SOLID Principles, calculatePay() method should not be an employee objects responsibility. Common responsibilities of employees would be to performDuties(), takeLunchBreak(), clockIn() and clockOut() etc.. Am I right in thinking this way? That's why I feel calculatePay() should belong in some other class. Okay so that's my SRP insecurity. Coming to LSP: I have subclasses like accountants, salesman, and directors. These are all employees that get paid. How would I change this design to better support volunteers? Volunteers don't get paid.               public class Employee {              private String name;         private int salary;         private boolean topPerformer;         private int bonusAmount;                   public Employee(String name, int salary, boolean topPerformer, int bonusAmount) {            // set fields etc..         }              // This method doesn't seem to belong here.         public int calculatePay(){             if(topPerformer)                 return salary+bonusAmount;              else{                 return salary;              }         }     }