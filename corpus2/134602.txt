High performance mysql book suggests that for sharding a blog application, one may want to put comments data across 2 shards: first, on the shard of a person posting comment, and on the shard where the post is stored. So this raises the question how to reliably duplicate this data. Which of the following data duplication options across shards is recommended?      _Option 1:_ Make 2 separate inserts from the PHP script.   _Pros:_ a) Logic is in application layer.   _Cons:_ a) User is held for 2 inserts. b) This logic will need to be duplicated in every client trying to insert similar data.   Conclusion: Seems reasonable. _Option 2:_ Form federated tables and use some trigger to handle the insert of duplicate.   _Pros:_ a) App layer doesn't need to worry about multiple inserts   _Cons:_ a) Every shard need to have federated connection to every other shard; b) Federation will work on machines in LAN, but what about at 2 different sites. c) what if connection to federated server fails.   Conclusion: Doesn't seem like a sound idea. _Option 3:_ Messaging such as RabbitMQ   _Pros:_ a) Different clients can insert data at one place, and all subscribers can consume the insert.   _Cons:_ a) Complex; b) may impose overhead in order to host messaging server, and clients; c) not sure how will it work with a look-up service to locate appropriate shards   _Conclusion:_ Not sure   _Option 4:_ your suggestion? I will greatly appreciate your help.