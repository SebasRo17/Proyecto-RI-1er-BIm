How should I count the lines of code in a project? In C++ for example, should I count the lines of the header files with my class definition? Should I count the header of a (non standard) library I am linking against? In Qt (or any other GUI framework), should I count the lines of the form's design? Should I count the Makefile too? I ask because it is a simple way to measure the size of the project and/or effort involved. Even though a GUI file is not code _per se_ the programmer might have spent hours doing it. **EDIT** Most of you did not understand the question and/or are assuming that I want to use the magical number of LOC as the ONE AND ONLY metric to rate a project or even a day of work. I consider a negative LOC day a very nice day. It means I've somehow managed to understand and model the problem better and more efficiently. Comments like "Why do you need this" are not interesting. Like it or not, the number is out there, Wikipedia says Windows XP is rated at 45M LOC, Linux 2.6.35 at 13.5M, I could go on. Maybe I could have asked better. Anyway, my original intent was to know how those numbers in Wikipedia were calculated and not the subjective nature of them. I found this in a MSDN blog, very useful as it shows how VS2008 does it: ![enter image description here](http://i.stack.imgur.com/KKXGQ.png)