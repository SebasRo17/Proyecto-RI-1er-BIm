I have a function that takes an `OptionsPattern` and I want to access several options, say `a`, and `b`. This works great:               f1[OptionsPattern[]] := Block[{},        {OptionValue[a],OptionValue[b]}       ];     Options[f1] = {a -> 1, b -> 2};      Calling `f1[]` returns `{1,2}` as expected. The problem is that I don't know in advance which options I'll want to access. So I thought about trying this:               f2[OptionsPattern[]] := Block[{list},        list={a,b};        OptionValue /@ list       ];     Options[f2] = {a -> 1, b -> 2};      `f2` doesn't work, and neither do `f3`:               f3[OptionsPattern[]] := Block[{},        OptionValue /@ {a,b}       ];      They both return `{OptionValue[a], OptionValue[b]}`. However, this **_does_** work:               f4[OptionsPattern[]] := Block[{},        OptionValue[#]& /@ {a,b}       ];      > **Question** : Why on earth do `f2,f3` not work, while `f4` does, and what > is the difference between `f4` and `f3` anyhow? _PS_ These also these don't work:               f5[OptionsPattern[]] := Block[{},       Evaluate[OptionValue /@ {a, b}]       ];          f6[OptionsPattern[]] := Block[{},       OptionValue /@ Evaluate[{a, b}]       ];