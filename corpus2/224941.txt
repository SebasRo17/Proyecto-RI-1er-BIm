This question might seem strange, but it's something I've faced sometimes. I've been trying to adopt DDD, however I'm always facing the problem of anemic domain models. The problem is that when I start to think about what should be the behaviors of the domain objects, nothing comes to mind. I've started then to seek on the internet what should be put inside the behavior of the domain objects and many people say that are rules and validations. The problem is that I've faced the situation many times where to customer who wants the system doesn't want any validation. Once I've asked a customer: "what are the required properties for this object?" and he said "no, I don't want anything like that, sometimes I want to just place one property and leave the others because I'm without time". Then I've asked: "and what sould be the format of data for this property?" and he said "I don't want anything checked, I want to be free to put as I like". So the customer _didn't want_ validation at all, so I coudln't implement it. In that case, there's no validations, there are no rules in place. Then I've looked at the controllers (it was built with MVC) to see if there was any logic specific to the domain entities, and there wasn't any. Just logic to read and write data. So in cases like that, is it a problem to have anemic domain models? Also, I'm working with .NET. In .NET we can put validation with Data Annotations, and we can write getters like properties. So methods to do validation when setting data aren't requireds, because the Data Annotations do the job, also methods to calculate data aren't required, because properties with just a special get can do the job. So what the behaviors become after all?