I'm writing a huffman encoding program in C. I'm trying to include the least amount of information in the header as possible, I know the simplest way to decompress the file in the header would be to store the frequencies of each character in the file, but for a large file with 256 characters it would take 2304 bytes ((1 byte for character + 8 bytes for `long` frequency) * 256), which I don't think is optimal.   I know I can reconstruct a tree from a preorder scan and an inorder scan of it, but that requires having no duplicate values. That is bad because I now have to store each node in the tree (in a huffman tree: `n*2 - 1` with `n` being the number of unique characters), twice, having each node be a `long` value (which could take `((256*2 - 1) * 2) * 8 = 8176` bytes. Is there a way I'm missing here, or are those my only options? Thanks.