If a project was coded without much (or any) formal documentation and is without unit tests, does it make any sense to use tools like Fitnesse and SpecFlow to write automated acceptance tests as the documentation, the specs, for the code? To use unit tests as the means of being specs would come at too high a cost. I'm all for adding them as new functionality comes or bugs get fixed, but not for retroactively "spec-ing" and testing a system. Could such an approach with Fitnesse, SpecFlow, or other tools work with what amounts to the BDD approach in reverse? Or would it be a BAD idea (pun semi-seriously intended: **B** ehavior **A** fter **D** evelopment)