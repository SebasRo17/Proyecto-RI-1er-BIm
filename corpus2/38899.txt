I'd like to write a function that would perform a loop, I guess `Do` or `While` should be helpful here. I've simplified the problem, so that it is clear what I'd like to achieve. First, I have a simple function:               f[{x_, y_}] := {x + 1, y + 1};      Then I'd like to have another function to perform `Nest` operation on a given list.               f1[{a_, b_}] := Block[{c, d},      c = Sqrt[a];      d = Nest[f, {c, b}, 10];     ];      Now I'd like to develop `f1` in the following manner - if `d[[1]]` does not lie within a certain interval, let's say {49.5,50.5}, I'd like the function to perform `Nest` operation again, this time with starting value of `c=c+1` or `c=c-1` depending on whether `d[[1]]` was below or above the given interval. This should go on until `d[[1]]` lies within this interval, and the function should return list `{c,b}` with that value of `c` that enabled `d[[1]]` to lie within the interval. The algorithm is pretty simple, but since I'm not a programmer, it is quite difficult for me to execute in _Mathematica_. If anybody is interested, it's about counter current heat exchanger - I know the inlet temperature value, but I perform calculations backwards, `c=Sqrt[a]` is my initial guess on the temperature at the outlet. Thanks for any advice! **Update:** So far I developed something like this, which actually works:               f1[{a_, b_}] := Module[{c, d, abc},       c = Sqrt[a];       d = Nest[f, {N[c], b}, 10];       abc = Interval[{49.5, 50.5}];       While[Not[IntervalMemberQ[abc, d[[1]]]], If[d[[1]] < Min[abc], c = c + 1, c = c - 1];        d = Nest[f, {N[c], b}, 10]];       d     ];      I'm not sure if it's the best way to do that. Thanks for any comments.