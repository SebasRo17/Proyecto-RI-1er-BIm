I'm seeing a lot of people say you should never use raw pointers. What about in the case where you store the raw pointer in a class but how they get populated is from getting the pointer of an object that wasn't dynamically created? I'm curious about if this is bad practice and if so how to make it better. This seems ideal to me as I'm not required to delete anything myself so limited/no chance for a memory leak? The idea of "if you didn't create it you don't delete it". I can control everything by the scope of the variable I'm passing in right? If it goes out of scope then what it points to won't be valid anymore and it'll throw an exception if I try to access it and I'll be able to catch it and handle it. Curious on thoughts/comments/concerns on this.               class Object     {     private:        Object* object;     public:        void Object() { object = NULL; }        void AddObject(Object* obj)        {           object = obj;        }            Object* GetObject()       {          return object;       }     };               int main()     {        Object obj1;        Object obj2;             // obj2 wasn't dynamically created so no need to use a smart pointer        obj1.AddObject(&obj2);             return 0;     }