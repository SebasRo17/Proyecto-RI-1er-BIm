I have three questions about REST API design that I'm hoping someone can shed some light on. I've searched relentlessly for many hours but haven't found answers to my questions anywhere (maybe I just don't know what to search for?). **Question 1** My first question has to do with actions/RPC. I've been developing a REST API for a while and I'm used to thinking of things in terms of collections and resources. However, I've come across a couple cases where the paradigm doesn't seem to apply and I'm wondering if there is a way to reconcile this with the REST paradigm. Specifically, I have a case where modifying a resource causes an email to be generated. However, at a later point the user can specifically indicate that they want to resend the email that was sent earlier. When resending the email no resource is modified. No state is changed. It's simply an action that needs to occur. The action is tied to the specific resource type. Is it appropriate to mix some sort of action call with a resource URI (e.g. `/collection/123?action=resendEmail`)? Would it be better to specify the action and pass the resource id to it (e.g. `/collection/resendEmail?id=123`)? Is this the wrong way to be going about it? Traditionally (at least with HTTP) the action being performed is the request method (GET, POST, PUT, DELETE), but those don't really allow for custom actions with a resource. **Question 2** I use the querystring portion of the URL to filter the set of resources returned when querying a collection (e.g. `/collection?someField=someval`). Within my API controller I then determine what kind of comparison it is going to do with that field and value. I've found this really doesn't work. I need a way to allow the API user to specify the type of comparison they want to perform. The best idea I've come up with so far is to allow the API user to specify it as an appendage to the field name (e.g. `/collection?someField:gte=someval` \- to indicate that it should return resources where `someField` is greater than or equal to (>=) whatever `someval` is. Is this a good idea? A bad idea? If so, why? Is there a better way to allow the user to specify the type of comparison to perform with the given field and value? **Question 3** I often see URI's that look something like `/person/123/dogs` to get the `person`s `dogs`. I generally have avoided something like that because in the end I figure that by creating a URI like that you are actually just accessing a `dogs` collection filtered by a specific `person` ID. It would be equivalent to `/dogs?person=123`. Is there ever really a good reason for a REST URI to be more than two levels deep (`/collection/resource_id`)?