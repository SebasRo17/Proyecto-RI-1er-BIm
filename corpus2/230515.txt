I am currently trying to understand more deeply the 4 principles of OOP: Abstraction, Encapsulation, Inheritance, and Polymorphism. After studying the four principles, I don't fully understand why Encapsulation is considered one of the four primary principles of OOP. Encapsulation is extremely common and useful in OOP, but it seems to me as more of a technique or strategy to use as part of Abstraction. A good definition for Abstraction: _'Abstraction is the concept of **moving the focus from the details** and concrete implementation of things, **to the types (i.e. classes), the operations available (i.e. methods)** , etc, thus making the programming simpler, more general, and more abstract.'_ Encapsulation, on the other hand, is this: _' **Hiding the internal implementation details of a class** from the outside software world, and prividing an interface for other software entities to communicate and manipulate that class.`_ If so, it seems to me that Encapsulation is mostly a technique to make things more abstract in the software system. Thus, it acts more of a strategy that implements the concept of Abstraction, rather than a primary principle by itself. It could be considered a 'principle' and not only a technique, but it still would be a part of the more general Abstraction principle, and not a major principle by itself. Does anybody agree? If I'm wrong, please explain why.