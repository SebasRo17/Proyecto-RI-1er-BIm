Recently we developed a web app that uses the following tech stack:   * hibernate as orm   * spring   * extjs (MVC javascript front end) For 1 business object, let it be a Personnel, we have: 1) a Personnel class (hibernate) 2) PersonnelDTO (will explain why we needed this) 3) a Personnel javascript model for Extjs (I don't know may be other javascript UI frameworks does not need a model defined) Need for number 2 arised when we couldn't deal with sending hibernate objects back and forth, dealing with sessions and circular references etc. etc. Plus, in some cases you need a fully filled Personnel object (full fields joined), sometimes just a few fields and a relation. Sometimes you need all the info to process a Personnel but you can't send it all the way to the client (security, privacy reasons). So we used DTO's to decouple model objects and objects that will be sent through the wire. Adding-removing a field in such a project design becomes very tedious and error prone. Adding a field requires:   * add to DB tables   * add to model object   * add to DTO   * add to model -> DTO converter (when it's a field that can't be automatically mapped) regarding different scenarios that requires different amount of information about model   * add to Extjs model   * add to CRUD forms on the page   * add to client and server validators... Isn't there a better approach to building similar applications? We are thinking of starting a new project and don't want to make the same mistakes.