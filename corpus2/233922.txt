I've been reading Clean Code: A Handbook of Agile Software Craftsmanship by Robert C. Martin. One point he makes: > G34 Functions should descend only one level of abstraction However, I'm wondering about the functions that actually create the objects for an application. Say we have dependencies               App -> Book -> Database      Then using dependency injection, App would need to create both a Book and Database instance, and inject the database instance into Book.   * Is this an acceptable breaking of the mixing level of abstraction rule?   * If yes / no, why?