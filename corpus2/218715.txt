I'm writing a simple chess engine in LISP. I actually know how the engine decide the move, it evaluates and reads some opening books. But that's not what i mean. This is my design.               57 58 59 60 61 62 63 64     49 50 51 52 53 54 55 56     41 42 43 44 45 46 47 48     33 34 35 36 37 38 39 40     25 26 27 28 29 30 31 32     17 18 19 20 21 22 23 24     09 10 11 12 13 14 15 16     01 02 03 04 05 06 07 08      I looked at more complicated solutions but i came out with what i believe is the simplest one. Say the bishop is on the square 23, it could move 4 possible moves, (to 16 or 14 or 32 or 30), so it moves -7 or +7 or +9 or -9. I create an array               (make-array '(8 8) :initial-contents     '((R B N Q K B N R)      (P P P P P P P P)     (NIL NIL NIL NIL NIL NIL NIL NIL)     (NIL NIL NIL NIL NIL NIL NIL NIL)     (NIL NIL NIL NIL NIL NIL NIL NIL)     (NIL NIL NIL NIL NIL NIL NIL NIL)               (P P P P P P P P))               (R B N Q K B N R)))      And move the pieces from index to index. My question is, i cannot simply tell the bishop to move +7 or whatever, if it's an open diagonal. I need to tell it to move +9 * 1 or +9 * 2 etc. and you bishop have to decide which one to go to. I cannot write a condition and a loop for every possible square