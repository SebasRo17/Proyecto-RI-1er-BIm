In the code I am working on, there are a lot of really small objects like:                   class HasFieldLameSetter         {          public:             HasFieldLameSetter(field& p_):m(_p){}             void set(bool p2)             {                 m.hasLame = p2;             }               field& m;         };      Having lots of small classes creates a hard-to-read and complicated "code pasta". Sometimes, reading it is really really hard because I spend a lot of time jumping from file to file to find out that the class did something trivial like in the example setting bool to true. In addition, those objects are being passed around everywhere by "dependency injection" which makes reading it even more difficult. **How do I persuade the author of the code to write slightly bigger objects?** In my opinion too many small objects is just a nightmare for programmers. Am I missing something, or is there a mistake in my thinking? I would be happy to read any papers that might change my point of view.