I get how to do a derivation of a BNF. My text books do a good job of explaining it (much better than the on-line lecture notes of many profs etc). Example below then my questions:               <program> => begin <stmt_list> end     <stmt_list> => <stmt>                        | <stmt>; <stmt_list>     <stmt> => <var> = <expression>     <var> => A | B | C;     <exression> => <var> + <var>                        |<var> - <var>                        |<var>      Generates:               <proogam> => begin<stmt_list> end           => begin<stmt>;<stmt_list> end           => begin<var> = <expression>;<stmt_list>end           => begin a = <expression>;<stmt_list>end           => begin a =  <var> + <var>;<stmt_list>end           => begin a = b + <var> ; <stmt_list>end           => begin a = b + c ; <stmt_list> end           => begin a = b + c; <var> = <expression>; <stmt_list>end           => begin a = b + c; b  = <expression>; end           => begin a = b + c; b = <var> + <var>;<stmt_list> end           => begin a = b + c; b = c + <var>; <stmt_list> end           => begin a = b + c; b = c + a; <stmt_list> end           => begin a = b + c; b = c + a; <var> + <expression>           => begin a = b + c; b = c + a; c = <expression>;           => begin a = b + c; b = c + a; c = <var>;           => begin a = b + c; b = c + a;  c = b;      I get the how mostly and I know the benefit of BNF. But regarding derivations, why do we do them token by token when it's quite obvious what the resultant code would be? Also, with BNF derivation, when an OR is used in the syntax how do we translate this? Such as:               <if_stmt> ïƒ  if (<logic_expr>) <stmt>|                         if (<logic_expr>) <stmt> else <stmt>