I have a part of CQRS pattern implemented using S#arp Architecture like this:               public class MyCommand     {         public CustomerId { get; set; }              // some other fields     }          public class MyCommandHandler<MyCommand> : ICommandHandler<MyCommand, CommandResult>     {         Handle(MyCommand command)         {             // some code for saving Customer entity                  return CommandResult.Success;         }     }      I wonder why not just have class `Command` containing both data **and** handling method? Is it a kind of testability benefit, where you need to test command handling logic separately from command properties? Or is it some frequent business requirement, where you need to have one command handled by different implementations of `ICommandHandler<MyCommand, CommandResult>`?