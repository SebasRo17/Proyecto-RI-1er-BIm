Our team is currently working on building our next generation HIS (Hospital Information System) comprising of over 30 modules (currently estimated at 400 man months), to be possibly hosted in a central location and accessed across geographies. Hence the primary UI NFRs (Non Functional Requirements) would be   * Multi browser compatibility   * Fast loading pages with rich GUI   * Ability to integrate with hardware devices like biometric scanners, biometric readers etc.   * Ease of development, maintenance (incorporating changes), shorter development cycle   * Ability to open multiple forms within the same browser window (without launching additional windows) **Pros:**   1. **UI would be browser agnostic** , we do not have to worry about ensuring that our web pages work with IE 7, 8, 9++/ Chrome 8, 9, 18++/ Mozilla Firefox (currently a lot of development effort goes into this compatibility check and fixing)   2. We could possibly make our application more modular, unlike a monolithic ASP.Net application   3. Usage of isolated storage on the client PC **Cons:**   1. Silverlight memory leak issues. We faced them in a few samples that we built using SL and have the same problem in a legacy XBAP application. The following links, substantiate the fear http://davybrion.com/blog/2010/08/silverlight-getting-worse-when-it-comes-to-memory-leaks/ http://stackoverflow.com/questions/5091636/silverlight-4-memory-leaks   2. Microsoft does not appear very gung ho about SL future. They seem to be investing more on HTML 5. The future releases of a SL 5 or 6 is also uncertain. http://support.microsoft.com/gp/lifean45 http://www.zdnet.com/blog/microsoft/microsoft-our-strategy-with-silverlight-has-shifted/7834 http://www.zdnet.com/blog/microsoft/will-there-be-a-silverlight-6-and-does-it-matter/11180   3. The HIS modules would open as multiple tabs within the same browser window (we are talking about a maximum of 8 tabs open simultaneously). How much of a load would it put on that browser instance and how would that effect the memory leak problem?   4. Learning curve for ASP.Net developers   5. Another Stack link on SL Silverlight, Wpf Web App (xbap) or Click Once? Pros and Cons **Neutral**   1. SEO compatibility is not a concern _**My queries are?_**   1. Would you use SL, knowing the above (and other) Pros and Cons   2. In case we use the MVVM pattern to build a product with SL as the front end, would it possible to replace the UI tomorrow with another UI (ASP.Net or something else). My understanding is that the rework would be substantial. What does the community think?   3. We have spent a considerable time in the above analysis (and in creating proof of concepts). Is there an important fact / decisive factor that we are overlooking? _Please do not mark this as a duplicate, as a lot of research and effort has gone into this exercise._ PS: We have spent the past 6 months in building the product using ASP.Net web forms (using MVP pattern) and now are looking at a technology shift due to the above reasons.