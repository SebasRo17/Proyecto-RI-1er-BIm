Note: this question is about the MVVM pattern in general and not related to any specific MVVM framework. I am wondering what the best design approach for the requirements below is (hypothetical example). I will also leave out all interfaces, dependency injection etc to keep it simple. Requirements:   * View A: user enters a password and has to confirm it. The password's hash value is then stored in a database. The password is asked from the user every time he starts the application.   * View B: user has to enter his username. The username is supposed to be encrypted with the password entered in View A. In terms of MVVM, I would create two view models: **ViewModelA:**   * `string Password`   * `void SaveHash()` **ViewModelB:**   * `string Username`   * `void SaveEncrypted()` However in order to save the username, **ViewModelB** will need to know the password, so it can derive a key from it and do the encryption. And here is where I start to ask myself if the "correct" solution (if something like that exists) is:   * Pass **ViewModelA** in the constructor to **ViewModelB** so that saving can use the information required?   * To change `void SaveEncrypted()` to `void SaveEncrypted(string password)` and only pass the relevant information?   * To change `void SaveEncrypted()` to void `SaveEncrypted(ViewModelA passwordViewModel)` and pass the complete view model that contains the information required? This would prevent abuse of the method by applying some other password.   * To remove the `void SaveEncrypted()` method from ViewModelB and create another interface that is responsible for saving the information, like:  Interface responsible for saving **ViewModelB**                interface IViewModelBSaver             {               void SaveEncrypted(ViewModelB usernameViewModel, ViewModelA passwordViewModel);             }      I could ask similar questions for ViewModelA because there the password's hash is stored.