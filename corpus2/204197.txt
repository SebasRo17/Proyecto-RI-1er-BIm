I ask this question out of curiosity. Lets say the class Foo is a singleton and I want to call Foo instead of Foo.Instance to access the static object. Would it be possible to encapsulate the object itself within a dynamic property?   Would C# allow me to create a dynamic property that refers to anything but a property of the said object? Like so:               private static Foo _instance;          public static Foo this {         get {             if (_instance == null) {                 _instance = new Foo();             }             return _instance;         }     }     public void Bar(){}      this would allow me to call               Foo.Bar();        instead of               Foo.Instance.Bar();        If this is possible, then in witch situation would it be viable to encapsulate any kind of object like this whithout using heritage for example instead of:               class Ploof : List{}        we would have:               class Ploof {         private List _list;         public List this { get {  return _list; } }     }