I want to model a file system which contains both files and directories, and directories can contain either files or other directories. This is what I have reached so far: ![My simple file system class diagram](http://i.stack.imgur.com/6URV9.png) In OOSE book, however, a similar model is presented: ![class diagram for file system presented](http://i.stack.imgur.com/GonyF.png) Now I have two questions:   1. I wonder why the author did not use an _Interface_ to represent the abstract type **FileSystemElement**? Isn't using an interface for this type correct?   2. As we know, files and directories must have names with similar constraint (e.g. maximum length of 256 characters). Therefore, it would be nice if I model this in the **FileSystemElement**. But an **interface** cannot have a _abstract attribute_ , so I have to repeat **name** attribute in both **Directory** and **File** classes. Is there any better workaround for this problem?