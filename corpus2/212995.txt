I have a function that takes in a set of parameters, then applies to them as conditions to an SQL query. However, while I favored a single argument array containing the conditions themselves:               function searchQuery($params = array()) {         foreach($params as $param => $value) {             switch ($param) {                 case 'name':                     $query->where('name', $value);                     break;                 case 'phone':                     $query->join('phone');                     $query->where('phone', $value);                     break;             }         }     }      My colleague preferred listing all the arguments explicitly instead:               function searchQuery($name = '', $phone = '') {         if ($name) {             $query->where('name', $value);         }              if ($phone) {             $query->join('phone');             $query->where('phone', $value);         }     }      His argument was that by listing the arguments explicitly, the behavior of the function becomes more apparent - as opposed to having to delve into the code to find out what the mysterious argument `$param` was. My problem was that this gets very verbose when dealing with a lot of arguments, like 10+. Is there any preferred practice? My worst-case scenario would be seeing something like the following: `searchQuery('', '', '', '', '', '', '', '', '', '', '', '', 'search_query')`