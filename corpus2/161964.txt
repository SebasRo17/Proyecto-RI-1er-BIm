I am referring to the article _Mocks aren't Stubs_ by Martin Fowler. When naming cases when he think "mockist" TDD will be advantageous, he said > It's particularly worth trying if you are having problems in some of the > areas that mockist TDD is intended to improve. I see two main areas here. > [...] The second area is if your objects don't contain enough behavior, > mockist testing may encourage the development team to create more behavior > rich objects. My question, what does he mean by "behavior rich objects", objects that "contain enough behaviour", etc? And why does it matter if an object contains many behaviour or not, if it works correctly?