Many a times I have to deal with code files which are quite long - about 5 screen pages at the minimum. Almost always there is something _towards the top/bottom_ that I need to refer when I'm at the bottom/top (respectively). It's a mammoth overhead to constantly scroll back-n-forth between the file parts. It's a cognitive overload to just remember each and everything throughout the file and it's quite necessary to be able to refer to parts of the file. Yes, the _Outline_ view in some editors like Eclipse/NetBeans helps, but sometimes they will work well only for parts recognizable by that parser. Sometimes outline views don't show up e.g. when coding in CoffeeScript or JavaScript using closures/namespaced functions etc. The fallback is then just manual scroll overhead. So as programmers what are some of the techniques/practices that can be employed to reduce this ridiculous overhead? Yes, I can _shorten_ the files, but specifically javascript libraries like Backbone.js etc. are all as one file since you really can't split them into multiple file due to lack of Java-like _packages_. So under the constraints of inability of splitting a file and the outline views not working, what are some of the techniques I can use to navigate through long source files? I work a lot on Eclipse/Netbeans and Aptana and sometimes Vi (but seldom in production environments). It'd be great to be able to split a window into two and see the same file on one side and code in the other. Not doable with Eclipse/NB/Aptana IMO. Vi, yes but can't use it all the time. PS: As of now, I split the file among multiple editors e.g. Eclipse and Aptana. It'd be great to have it at one place, but is that the best that we can do? :) **UPDATE** \- Seems Eclipse _has_ way for doing this and can be found here