By simple mathematical expression I mean one with a few functions and few variables copied into MMA in a mechanical way from a math book. For example this one, giving the distance between two points in a rectangular cartesian coordinate plane:               u = {-3, 3}; v = {1, 5};     d = (( Abs[ u[[1]]] - Abs[v[[1]]] ) ^2 +  (Abs[u[[2]]] -         Abs[v[[2]]])^2  )^(1/2       Except for the use of the Abs built-in function (I found no way in InputForm to type in the vertical bars on each side of the variable which is possible in TraditionalForm ), you recognize at a glance what this is about with an elementary knowledge of MMA. Now I read in MMA documentations that it is advised to convert any "math-like" expression into a pure functions but apart from many examples suited to a specific expressions - mine is another sure - I did not read any guidelines which generalises the approach to take. So I proceeded in a an empirical way, a "down-up" up approach:               Abs[#] &@ {u, v}      Thread[Plus[Abs[#] &@ % ]]     Apply[Subtract[##] &, %, {1}]     (#^2) & [ %]     Sqrt[Apply[Plus[##] & , %]]      Only pure functions here which can be condensed by copy/pasting the origination expression in place of % like that :               Sqrt[Apply[     Plus[##] & , (#^2) & [      Apply[Subtract[##] &, Thread[Plus[Abs[#] &@ {u, v} ]], {1}]]]]      I'm sure that if I read this last expression in a week's time, I'll be perplexed unless I trace it! Is it easy to simplify this concatenation of 4 pure functions into one single pure function, and if so, how? I feel that the way the data is presented before you start writing MMA code is of prime importance: Instead of two lists, I could have used one list with sublists, or a flattened out list (ie {u1,u2,v1,v2) and each of this choice has a strong bearing to what you will code afterwards. Are there any guidelines about what is the less messy or more elegant in the way lists are to be constructed for a given problem?   Thanks for your answers