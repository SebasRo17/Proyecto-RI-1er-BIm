I am working through the course _Programming Paradigms via Mathematica_. One of the exercises asks that you construct a function that mimics `Select`,even with three arguments. It also includes the following direction: > Do not use the `Select[]` function in your definition. Here is an example of how `Select` works:               Select[{1, 2, 3, 4, 6, 8, 10}, EvenQ, 4]     (* {2, 4, 6, 8} *)      First I tested the following code and got the same result as `Select`:               l1 = {1, 2, 3, 4, 6, 8, 10};     l2 = {};     crit = EvenQ;     n = 4;     While[Length[l1] > 0 && Length[l2] < n,      If[crit[First[l1]], l2 = Append[l2, First[l1]]];         l1 = Rest[l1];      ]     l2          (* {2, 4, 6, 8} *)      I then tried to write a function that would do the same thing (caution causes infinite loop):               Clear[whileSelect]     whileSelect[l1_List, crit_, n_] := Module[{l2},       While[Length[l1] > 0 && Length[l2] < n,         If[crit[First[l1]], l2 = Append[l2, First[l1]]];             l1 = Rest[l1];         ]        l2       ]      However I got a series of `Set::shape: Lists {1,2,3,4,6,8,10} and {2,3,4,6,8,10} are not the same shape. >>` error messages and the code put the computer into an infinite loop. I have looked at documentation on `Module`,`Rest`,`Set` and `If` but have not been able to figure out what I am doing wrong. I would greatly appreciate a point in the right direction.