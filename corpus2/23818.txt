I'm trying to define some notation so that Mathematica code would be more functional, similar to Haskell (just for fun): currying, lambdas, infix operator to function conversion, etc.. And I have some questions about it:   * Is it possible to make all Mathematica `h_[x1_,x2_,...]` functions to work as `h[x1][x2][..]`?   * Can I distinguish inside `Notation` box between `<+1>` and `<1+>`, how do I check for + there?   * How to define right-associate apply operator with highest precedence (`$`)? This is what I have so far:               << Notation`;          lapply[x_, y_] := x[y]     rapply[x_, y_] := x[y]     InfixNotation[ParsedBoxWrapper["\\"], lapply]     InfixNotation[ParsedBoxWrapper["$"], rapply]         x_ \ y_ \ z_ := x[y][z]         x_ $ y_ $ z_ := x[y[z]]          Notation[ParsedBoxWrapper[     RowBox[{     RowBox[{"\[Lambda]", " ", "x__"}], "->",           "y_"}]] \[DoubleLongLeftRightArrow] ParsedBoxWrapper[     RowBox[{"Function", "[",      RowBox[{     RowBox[{"{", "x__", "}"}], ",", "y_"}], "]"}]]]          Notation[ParsedBoxWrapper[     RowBox[{"\[LeftAngleBracket]",      RowBox[{"op_", " ", "x_"}],           "\[RightAngleBracket]"}]] \[DoubleLongLeftRightArrow]        ParsedBoxWrapper[     RowBox[{     RowBox[{"#", "op_", " ", "x_"}], "&"}]]]     AddInputAlias["f" -> ParsedBoxWrapper[     RowBox[{"\[LeftAngleBracket]",      RowBox[{"\[Placeholder]", "\[Placeholder]"}],           "\[RightAngleBracket]"}]]]          Notation[ParsedBoxWrapper[     RowBox[{"{",      RowBox[{     RowBox[{"x_", " ", ".."}], " ", "y_"}],           "}"}]] \[DoubleLongLeftRightArrow] ParsedBoxWrapper[     RowBox[{"Range", "[",      RowBox[{"x_", ",", "y_"}], "]"}]]]          filter[f_][x_List] := Select[x, f]     map[f_][x__List] := Map[f, x]          filter\PrimeQ $ map\\[LeftAngleBracket]-1\[RightAngleBracket] $ map\ \     (\[Lambda] x -> 2^x)\ {1 .. 100}      **EDIT** : Also did some kinda lazy lists, soon it will be haskell inside Mathematica :)               SetAttributes[list, HoldAll]     list[h_, l_][x_] := list[h, l[x]]     list[x_] := list[x, list]          map[f_][list] := list     map[f_][list[x_, xs_]] := list[f[x], map[f][xs]]          take[0][_] := list     take[_][list] := list     take[n_Integer][list[x_, xs_]] := list[x, take[n - 1][xs]]          range[n_Integer] := range[1, n]     range[m_, n_] := list[m, range[m + 1, n]]     range[n_, n_] := list[n, list]          show[list] := "[]"     show[list[x_, l_]] := ToString[x] <> "," <> show[l]          show $ (take[10] $  map\ (\[Lambda] x -> x^2) $ range[10000])