I have a idea for a program and have began laying out the software design concept in a traditional SDLC model of charts and instructions for what I want all parts to achieve. A quick explanation of my idea is this, I want to build a IDE for a tablet that is intended to run on mobile platforms but can also be ran on Windows, Macs, etc. This platform will have a couple very unique concepts in it for graphical programming interface and remote application server usage for compiling and project management like a GIT. I would like to achieve this without having to revamp the code for each system and believe C will allow me to stay close to my goal of no specific platform programming. **The Question** I would assume I want to avoid OS specific calls and (or) external libraries (stick to standard library much as possible) to a minimum. What would be the best practice of doing this while still completing a nearly finished program (until I make targeted platform adjustments)? Would C be my best option to achieve this? **Why I ask.** I have been really interested in using C because of its portability, ability to utilize memory, program sizes are smaller and more efficient, and integration in to nearly all mobile platform. I have done a fair amount of homework on C and am halfway through the “C Programming Guide, second edition” by Kernighan and Ritchie. I have even ordered some books on building compilers and OS design to assist in some fundamental concepts that I believe are relevant to my idea.