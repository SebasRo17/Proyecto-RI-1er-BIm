Suppose the evaluation of a function `f[x_, y_] := ...` takes a very long time, but the output is a not-so-complicated polynomial in `x` and `y`, say `x+y`. The evaluation is long for many reason, but one of these is that a lot previous defined functions are called. Now I continue and define a function               g[x_, y_] := Some Easy Operations on f[x,y]      Of course, when I evaluate `g[x, y]` symbolically or with numerical values, it calls `f[x ,y]`, right? Hence the evaluation of `g` is long also. But if I define               g[x_, y_] := Some Easy Operations on x+y      then the evaluation is fast. However, the relation between `f` and `g` is less obvious in the definition of `g`. ### My questions   * Is what I mentioned above correct?    * Where I can find a reference to get a basic idea/some principles about how to optimize code like this?