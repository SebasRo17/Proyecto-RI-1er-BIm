I'm inheriting some code that takes a rather different approach to architecture than I'd have chosen myself. It consists of a HTML page, some javascript library imports and a single DIV tag. This DIV is populated entirely by handcrafted JQuery based javascript. My normal approach would be to scaffold the presentation part of the app using HTML and handle the interaction using javascript (or use templating), rather than build the entire DOM from scratch. I don't think there's anything inherently wrong with the way it's been tackled so far other than it makes picking apart the logic and the structure a bit of a pain in the a*se. For info, the app queries a SOLR endpoint for some odd looking stats data, displays this in tabbed tables, allows the user to facet their search, explore different categories of stats and dig down, etc etc. My question is around best practice here. Is there any best practice around this kind of thing? Are there design patterns and if so, what are they? I realise this could be considered opinion based, so I'm looking for formal approaches and examples in the wild rather than opinions. EDIT in response to the possible dupe: This isn't about a huge horrible mess, just about different approaches to client side architecture. It's not so much how to refactor (I've done enough work with legacy java web applications to know how horrible that can be) it's more what a client side java application should look like post-refactoring.