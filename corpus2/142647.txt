There are many development **practices** (TDD, continuous integration, cowboy- coding), **principles** (SOLID, layers of abstraction, KISS), and **processes** (RUP, Scrum, XP, Waterfall). I have learned you can't follow any of these blindly, but have to consider context and ROI (return on investment). My question is: How do you know whether you are getting a good ROI by following a particular methodology? Metrics, guesstimation, experience? Do analytical methods exist? Or is this just the million-dollar question in software engineering that has no answer? For clarification when I say ROI I mean overall business value. This does not necessary exclude developer happiness--if all the developers quit (or worse: become apathetic) after a 6-month death march you lose all the technical experience in the organization. If customers are unhappy you will need more customer support staff or lose business.