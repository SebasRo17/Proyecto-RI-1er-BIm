I have `Client` which uses a disposable `Connection` for talking to a remote service. A `Connection` is somewhat expensive to set up and needs to be Dispose()d properly. I want to allow multiple methods in `Client` to share a connection, like this:               using (client._connection = client.Connect())     {       client.SyncTime();       client.UpdateUsers();       client.SomeOtherOperation();     }      But I don't want to _insist_ on `Client`'s consumers managing connections. They should be allowed to call individual single `Client` methods without being aware or concerned with `Connection`s. Here is the pattern I'm using at the moment. It makes SRP cry. Any suggestions on how I can do this better, or should I be doing this at all?               public class Client     {       Connection _connection;            public void SyncTime()       {         bool wasConnected = _connection == null;         try         {           if (!wasConnected)             _connection = Connect();                _connection.ActuallyDoSomeWork();           ...              }         finally         {           if (!wasConnected)             _connection.Dispose()         }       }     }