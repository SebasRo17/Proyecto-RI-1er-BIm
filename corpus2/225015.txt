I'm wondering how I seamlessly include a JavaScript unit testing framework into my workflow. The context is, we have an existing data processing algorithm + webapp to display it, with no automated testing or continuous integration. We use Eclipse as our IDE. For the webapp JavaScript modification, it would be nice to add some unit tests, and qUnit looks straightforward, plenty of community support etc. Here's how I'm currently thinking the workflow would go:   * Branch the JavaScript code, check it out, modify it. Refactor it to make it more testable if needed.   * Write qUnit unit tests in accordance to the above tutorial.    * Start Tomcat in eclipse, run the qUnit test page.    * Open the browser, check that all the tests have passed.   * Commit the code back to the branch.    * Merge the branch back into to trunk.    * At this point there might have been a merge conflict, and so unit tests would need to be run again for the trunk to check that they're still working.  The issue here, it still seems a little cumbersome to be running the unit tests, several clicks involved to run and check the results. Now with the merge back to trunk issue, clearly a continuous integration solution like Jenkins would be good here, but given that that's out of the question for now, let's just focus on how we can make it easy to run the tests as a developer. Do you think I'm missing something here, or is what I'm proposing reasonable sensible?