Python widely uses built-ins (or module function) and not class methods. So   * `len([])` instead of `[].length()`   * `filter(f, [])` instead of `[].filter(f)`   * `str(2)` instead of `2.to_str`   * same for `map`, `foreach` etc These prevent you from doing nice chaining which is possible in other languages like Ruby or Scala: (sorry very artificial example)               my_list.map(f).filter(g).length()      In Python you would need to either split into several lines:               list_of_something_else = map(f, my_list)     list_of_something_else_without_blah = filter(g, list_of_something_else)     length = len(list_of_something_else_without_blah)      In a single expression it doesn't look readable:               len(filter(g, map(f, my_list))      Is it considered to be not-Pythonic to chain methods? Or do people usually extend classes with a dozen of helper functions to make it easier?