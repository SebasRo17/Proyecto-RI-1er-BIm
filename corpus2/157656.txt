I've only worked at once place since graduating my CS degree. This is a pretty basic architecture question but i don't know any better since i've only worked at one place. Where i work we maintain a large number of code tables. For example say you have a Sales/Order system and you have an Order Status. We would maintain an order status table that would look like the following: OrderStatus:               OrderStatusId(PK TinyInt)  OrderStatusDesc(VarChar(50))       1                         Created       2                         Submitted      3                         Processing     4                         Canceled     5                         Verified     6                         Complete      We then create an enumeration off each code table. For example:               Public Enum TblSalesOrderStatus           eosCreated = 1           eosSubmitted = 2           eosProcess = 3           eosCanceled = 4           eosVerified = 5           eosComplete = 6     End Enum      Then in our code we have code like the following:               If OrderStatus = eosCreated OrElse OrderStatus = eosSubmitted Then         ...do some work     End if      On every screen we create we have the id's stored in the controls (like comboboxes). I don't know something about this has always made me think its bad design. Maybe i'm wrong though. Especially when i started getting into REST design. i wanted to pass the Ids rather than descriptions. Of course this doesn't seem right since i'd be the only one i've ever seen pass those type of Ids in a REST service. So is this bad design? Edit:   Trying to make thing a little clearer. Are Code Tables are only stored in two places: The Enum + The Database. When we need a new Id when email our database staff which creates a new code table value for us and emails us back the Id. When then put the new value into our enumerations. We never had problems with it getting out of sync but if we have needed either delete values or change them in the past (adding is easy) which has been pain because everything in the system had to be recompiled. We have went down the route of trying to make things semi-dynamic (which doesn't work out in every case but helps in some). There are tons of examples but a simple example is we have a IsVisible flag in some of the code tables. If we ever want to obsolete or make one of the values not selectable then we set the IsVisible flag = 0. They prefer this compared to having to change code/compile/deploy. Thinking about it i think it would be preferable to have it in buisness logic and have test around it (which we don't :-( ) depending on your prospective.