This can apply to many error handling scenarios, but I'm curious about how to do it in a login scenario. Given this Spring controller method:               @RequestMapping(value = "/account/login", method = RequestMethod.POST)     public String login(@RequestParam("username") String aUsername,             @RequestParam("password") String aPassword,             Model model)      {             try {                 accountService.login(aUsername, aPassword);              } catch (LoginException e) {                 // log e                 // add an error to request scope                 model.addAttribute("error", e.getMessage);                 return "login"; // return to login page             }             // success, show profile             return "redirect:profile";         }      And a login.html form (I'm using thymeleaf, but just follow logic, similar to `jsp`):               <!-- This is saying, if ${error} is set, use it instead of the content of p, `No error` -->     <p th:if="${error}" th:text="${error}">No error</p>     <form method="post" action="#" th:action="@{/account/login}">         Username: <input name="username" type="text" />         Password: <input name="password" type="text" />         <input name="login" type="submit" value="Login" />      </form>      Is this how error handling is usually done in java web applications? Anywhere an error can happen, you branch out with different `if`s? Is there a cleaner, or more generic, way to do this?