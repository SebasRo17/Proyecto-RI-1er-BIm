It seems to me that the Boolean class is an ideal candidate to be implemented as an enum. Looking at the source code, most of the class is static methods which could be moved unchanged to an enum, the rest become much simpler as an enum. Compare original (comments and static methods removed):               public final class Boolean implements java.io.Serializable,                                           Comparable<Boolean>     {        public static final Boolean TRUE = new Boolean(true);       public static final Boolean FALSE = new Boolean(false);        private final boolean value;        public Boolean(boolean value) {            this.value = value;        }        public Boolean(String s) {            this(toBoolean(s));        }        public boolean booleanValue() {            return value;        }        public String toString() {            return value ? "true" : "false";        }        public int hashCode() {            return value ? 1231 : 1237;        }        public boolean equals(Object obj) {            if (obj instanceof Boolean) {                return value == ((Boolean)obj).booleanValue();            }            return false;        }        public int compareTo(Boolean b) {            return compare(this.value, b.value);        }     }      with an enum version:               public enum Boolean implements Comparable<Boolean>     {        FALSE(false), TRUE(true);        private Boolean(boolean value) {            this.value = value;        }        private final boolean value;        public boolean booleanValue() {            return value;        }             public String toString() {            return value ? "true" : "false";        }     }      Is there any reason why Boolean couldn't become an enum?