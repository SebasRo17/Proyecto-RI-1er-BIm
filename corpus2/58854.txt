I would like to build an application using Mathematica 10. I would very much like to structure the application for maximum maintainability. To this end I would like to segregate controls and user interfaces to one set of source code files and calculations to another set of files. The basic idea being that the calculations are UI agnostic. They receive data and return the results of calculations and know nothing of UI code. The he same calculation .m files may be used from multiple user-interfaces (CDF, Web, Unit Test,.net, etc.). Scope is important. I would like to minimize the risk of changing a variable in a calculation that unintentionally sets a variable value in UI or if I call a function that wraps a custom control, I want to keep all Manipulate variables local to the Manipulate or function that wraps the Manipulate. I have tried using DynamicModule and LocalizeVariables->True but find that variables used by Manipulate are completely visible and settable in the notebook calling my DynamicModule where my control is defined. (I may be working with a set of assumptions and definitions of scope from application development languages that are not the same in Mathematica...) Ideally I would like the ability to decide which variables are global and which variables are local to the manipulate. I would like to build a set of re-usable custom controls in Mathematica 10 with the following criteria:   1. Would like to wrap my control(s) in a function or module in a .m or .wl file under specific contexts.   2. Variables are local to Manipulate and not visible or settable from the calling notebook.   3. Would like to package user settings and return them from the module that wraps Manipulate. Something along these lines: mySettings = MyControl[] Where MyControl[] encapsulates the manipulate and returns a dataset or array of settings selected by the user. I would also like the Manipulate variables to be local to MyControl[] and not visible or settable in the calling code or notebook. Again, I'm probably working under scope definitions of local and global used in application development languages. Below is an example:               EKSWaveFormControl[] :=          DynamicModule[                 {treatmentSpecRow},                 Manipulate[                     Plot[ ctrlVdc + ctrlVac  ctrlgFunc[ 2 \[Pi] ctrlf t + ctrlPhi],{t,0, 0.4}],                         {{ctrlgFunc,Sin,""},{Sin,Cos, Tan, Cot }},                         Delimiter,                         {{ctrlVac,1.5,Subscript["V","ac"]}, -10,10},                         {{ctrlVdc, 0.5, Subscript["V","dc"]}, -1,1},                         Delimiter,                         {{ctrlf, 10, "Frequency"}, 0.001,100},                         {{ctrlPhi, 0, "\[Phi]"}, 0, 2 \[Pi]},                         Delimiter,                         Button[                             "Update",                              treatmentSpecRow = Dataset[ Association @ { Func -> ctrlgFunc,                                                                        Vac -> ctrlVac,                                                                       Vdc -> ctrlVdc,                                                                       \[Phi] -> ctrlPhi,                                                                       \[Omega] -> 2 \[Pi] ctrlf }]],                         ControlPlacement->Left, Paneled->True, LocalizeVariables->True]             ]      When a user clicks the "Update" button, I would like to return a Dataset or array of the settings. But otherwise keep all variables used by Manipulate local to the Module.