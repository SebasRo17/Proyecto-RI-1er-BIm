I have recently been moving through a couple of books in order to teach myself Java and have, fortunately, mostly due to luck, encountered very few difficulties. That has just changed. I read a section on the following under inheritance and the whole superclass subclass setup   * When a new superclass object is created, it is, like all objects, assigned a reference (superReference in this example)   * If a new subclass object (with the defining subclass extending the superclass) is created, and then the superReference reference is set to refer to that instead of the original object, it is my understanding that, since the reference is made for a superclass, only members defined by the superclass may be accessed from the subclass. First - is this correct? Second: If I am overriding a method and therefore have one in the super and one in the sub, and I create a superclass object and then assign its reference, as I did above, to a subclass object, by the principle called something like _Dynamic Method Dispatch_ , a called overridden method should default to accessing the subclass method right? Well, my question is: If a reference to a superclass-object is retooled for a subclass-object and will deny direct `object.member` access to subclass-defined members, only supporting superclass-defined members, how can, if a superclass reference is retooled for a subclass object, an overridden method apply to the subclass- object if access is limited by the superclass-originated-reference