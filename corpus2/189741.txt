We know that some design patterns are found so useful that they become features of the language itself. For instance, the interface `IEnumerator` which is implemented by `Array` object. This helps in separating the iterator from the collection object. The internal representation of the object is encapsulated. The pattern: Iterator Pattern I have just come across another interface `IStructuralComparable`(msdn). This is used to compare the structure of two collection types using `StructuralComparisons`(msdn) class. The intent of this interface seems to be thus: > My understanding is that it's used for collection like types, and > encapsulates the structural part of the comparison, but leaves the > comparison of the elements to a comparer passed in by the user. (link) (Got > from the comments section of the question) **Is this an implementation of any familiar design pattern? If yes, which pattern is it?**