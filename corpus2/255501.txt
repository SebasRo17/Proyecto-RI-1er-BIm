There are other similar questions for ways to protect software from piracy or license violations: 1, 2, 3, 4 with great answers. A lot of those suggestions don't completely apply to my situation, since I am hoping to sell a service, not software. However, some customers may refuse service, so want to optionally sell the software too. I have prepared an Amazon Machine Image (AMI) for a turnkey distribution solution which is important since I must provide a free trial period, which may make some security options available beyond a normal binary distribution/installer. I acknowledge that it's difficult/impossible to prevent reverse engineering, but I would like to know what are some easy to implement measures I can take. Here are the ideas I have so far:   1. Specify in the license agreement how they're permitted to use the software, and then ask them to delete it when the business relationship expires. This is probably the best option, but my question is to explore programming solutions, not business/legal solutions.   2. After compiling code on the AMI, I can just delete the source code. This means customers who want updates will need to maintain a business relationship with me.   3. I can look at the system time and compare it to an expiration date compiled into the binary, a sort of self-destruct option. Sounds trivial to implement, and although I know it can be defeated, how difficult is it really for someone who's never done it before? What if I disable root access on my AMI?   4. I can use Amazon's Shared AMIs option, and simply delete the AMI when the business relationship expires. I understand that this can be defeated if a user clones my AMI, but is there anything else I can do to protect an AMI or to lock the software to a particular AMI?   5. I can use Amazon's Paid AMIs option, which uses their DevPay system to make sure users are paying to continue to use my software. How secure is this system?   6. I can have the AMI "phone home". I don't think my customers would approve. Thanks!