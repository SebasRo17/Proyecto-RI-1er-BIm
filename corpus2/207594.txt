Suppose you have an arbitrary code base, **C** , possibly composed of multiple programs, none of which fall under a copyleft license. Suppose this code, taken together, does the same job as a nice integrated program, **A** licensed under some copyleft license like the GPL, but that for whatever reason the GPL code is superior (faster, cleaner, less buggy, whatever). Now suppose that for each feature in **C** , you find the equivalent feature in **A** and, through careful step-by-step refactoring, create two chains of patches that converge on a third program, **B**. In other words, you can show step by step, via patches, how to derive any of the three programs from any of the others:               A <--> B <--> C      It seems that through this procedure, you have extracted value from **A** and even created a derived work, but the new work doesn't necessarily resemble **A** , and there is a clear chain of evidence showing that **B** was derived from a different code base entirely. My question is: **Would a " _dialectic_ " implementation like this provide the same legal effect as a traditional "clean room" implementation?** _Note: feel free to replace the licenses of A and C with your most and least favorite options, respectively. The question is about the process in general._