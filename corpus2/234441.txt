in my PyQt application I am heavily using the model/view approach. For every model I create, I do the following:               class myModel(QtCore.QAbstractTableModel):         def __init__(self, parent = None):             QtCore.QAbstractTableModel.__init__(self, parent)             self.lst = [[]] #initialize                  #populate lst with custom data             #self.lst = ....              def rowCount(self, parent = QtCore.QModelIndex()):             return len(self.lst)              def columnCount(self, parent = QtCore.QModelIndex()):             return len(self.lst[0])              def data(self, role = QtCore.Qt.DisplayRole):             row = index.row()             col = index.column()             if role == QtCore.Qt.DisplayRole:                 return self.lst[row][col].getContent()                  if role == QtCore.Qt.BackgroundRole:                 return self.lst[row][col].getColor()                  if role == QtCore.Qt.FontRole:                 return self.lst[row][col].getFont()                  if role == QtCore.Qt.DecorationRole:                 return self.lst[row][col].getIcon()                  if role == QtCore.Qt.TextAlignmentRole:                 return self.lst[row][col].getAlignment()                  if role == QtCore.Qt.UserRole:                 return self.lst[row][col]      In other words, the `columnCount()`, the `rowCount()` and the `data()` method looks always the same. After a few models, the typing get's really annoying and I am asking myself If I can get rid of this repeditive typing? I know that I could create a base class, where I put the `rowCount()`, `columnCount()` and `data()`method and inherit from that class, but is this the best/cleanest solution or is there a concept in Python which suits better?