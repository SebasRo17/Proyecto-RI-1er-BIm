I am developing a project where I have to load very large files (upto 50 MB). Currently I am loading these files completely into (consecutive) memory. This has the advantage that I can very easily change bytes at certain locations, because I do not know the structure of all bytes. However, my intention is to also change the structure, e.g. removing/adding 'chunks'. Now I have the idea to remove the 'known' parts out of it, store them in classes with a data chunk only containing those parts and make a sort of reference list to those chunks. E.g.: Original file:   * Header   * ChunkA 1   * ChunkA 2    * Intermediate   * ChunkB 1   * Footer The result will be: ChunkA 1 and ChunkA 2 instance. ChunkB 1 instance 'File' instance and a reference with base offsets + reference to all chunks. At the end I have to 'recreate' or write the original file (with changes) back. Is this in general a good idea or is there some design pattern helping me in this?