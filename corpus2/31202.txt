About MultiThread evaluation I am talking about here, see this post I am NIntegrate the function `grarm[e, 3, dimension, 1, 1, 0.005]`. There is matrix operation in function `grarm`, the `dimension` set the dim of the matrix. I give the code of `gram` in the end.( **take notice that you will have to manually change the dimension to get different`gram` with different dimension variable before integration**) OK, First I set `dimension` equals 7, and integrate the following               In:=NIntegrate[Im[grarm[e, 3, 7, 1, 1, 0.005]^2], {e, -0.3, 0},        MaxRecursion -> 200] // AbsoluteTiming          Out:={7.454151, 0.0581345}      and If I use linux command `top` to monitor the cpu situation, I see it is single threaded. See ![enter image description here](http://i.stack.imgur.com/Rjgea.png) now, I set `dimension` to 9, and integrate the following               In[55]:= NIntegrate[Im[grarm[e, 3, 9, 1, 1, 0.005]^2], {e, -0.3, 0},        MaxRecursion -> 200] // AbsoluteTiming          Out[55]= {83.592780, 0.0271489}      and If I use linux command `top` to monitor the cpu situation, I see it is multi-threaded. See ![enter image description here](http://i.stack.imgur.com/E33kD.png) And Now I force the same integration to use one thread only, integrate the following               In[56]:=      ParallelMap[       NIntegrate[         Im[grarm[e, #[[1]], 9, #[[2]], 1, 0.005]^2], {e, -0.3, 0},          MaxRecursion -> 200] &,        Tuples[{Range[3, 3], Range[1, 1]}]] // AbsoluteTiming          Out[56]= {16.575363, {0.0271489}}      Notice it is much faster, that is odd. In summary, There are two peculiar things waited to be explained   1. why dimension=7 is single thread while dimension=9 is multi-thread? Can `NIntegrate` actually naturally multi-threaded or not? Or the multi-thread is actually due to the matrix operation in the integrand(well, I personally think this is not likely)?   2. why multi-thread evaluation is much slower than single thread evaluation in the case of dimension 9? * * * In the end, the code for `grarm`.(don't forget to change the dimension, before integration)               dimension = 7;          Clear[armchairibbonmat]     armchairibbonmat[kx_, n_] :=      (       h = Table[0, {i, 1, 2 (n + 2)}, {j, 1, 2 (n + 2)}];       a[m_] := 2 m - 1;       b[m_] := 2 m;       t1 = 1;       aa = 1;       Do[        h[[b[i], a[i]]] = t1 E^(I kx aa);        h[[a[i], b[i]]] = t1 E^(-I kx aa);        h[[b[i + 1], a[i]]] = t1 E^(-I kx aa/2);        h[[b[i - 1], a[i]]] = t1 E^(-I kx aa/2);        h[[a[i - 1], b[i]]] = t1 E^(I kx aa/2);        h[[a[i + 1], b[i]]] = t1 E^(I kx aa/2);        , {i, 2, n + 1}];       h = ArrayPad[h, -2]       )          mat = Compile[{kx, n}, Evaluate@armchairibbonmat[kx, dimension]];     Clear[armchairibbonmat];     armchairibbonmat = mat;          Clear[gkarm]     gkarm[kx_?NumericQ, e_, xx_, width_, ii_, label_, \[Eta]_] :=       Inverse[(e - I \[Eta]) IdentityMatrix[2*width] -          armchairibbonmat[kx, width]][[2*(ii - 1) + label,         2*(ii - 1) + label]]          Clear[fkx]     fkx[kx_?NumericQ, xx_] := E^(I kx xx)          Clear[grarm]     grarm[e_?NumericQ, xx_, width_, ii_, label_, \[Eta]_] :=       NIntegrate[       gkarm[kx, e, xx, width, ii, label, \[Eta]]*        fkx[kx, xx], {kx, -\[Pi]/3, \[Pi]/3}, MaxRecursion -> 200]