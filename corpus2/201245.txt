I've been reading articles such as this one that indicates web development has evolved to use JS frameworks. Where I work, we have a massive website with many existing web applications that are already established and are server side heavy. One article I read said that the DOM manipulation/jQuery method leads to unmaintanable spaghetti code, and that you should strive to use a JS MV* framework. However, sometimes I just have a fairly simple list of items generated from the server; something like:               <div class=shower data-id=1>show</div>     <ul><li class=hider data-id=1>one</li></ul>     //js     $(".shower").on("click", function () {         $(".hider[data-id=" + $(this).data("id") + "]").show();     });      ...and that would pretty much be the extend of the JS on that page. According to the MV* framework disciples, the need to reference specific classes or attributes in the JS is a problem and models should be used instead. However, it seems like overkill to include a massive library for creating rich applications to handle some fairly trivial DOM manipulation and animations. Is there a JS framework in existence that bridges the gap between complete front-end stack frameworks and tightly coupled HTML/JS? If not, how could I write such code to avoid this coupling? Additionally is there any reason to push strongly for making the switch to such a framework for established server-heavy applications (especially in cases where we have to support JavaScript being turned off)?