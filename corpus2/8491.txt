Background: I store polygons with a color assigned at the face level. In some occasions I want to use vertex colors but I want to store data efficiently, i.e. don't want to duplicate data to the vertex level when it is not necessary. Consider the following _simplified_ data structure ( I had in mind, but does not work ):                tf := TableForm      def = {{10, 20}, {30, 40}};      def2 = Array[def &, 12];      col = {def2, def2};      pcl := {{col[[1]], col[[1]], col[[1]], col[[1]]}, {col[[2]], col[[2]]}};           col[[1]] // tf      col[[2]] // tf      pcl[[1]] // tf      pcl[[2]] // tf      `def` represents the data of one instance of a shape; `def2` represents the data of a shape with p6mm symmetry ( 12 copies ); `col={def, def}` represents the main data structure which currently stores two shapes; `pcl={{col[[1]], col[[1]], col[[1]], col[[1]]}, {col[[2]], col[[2]]}}` represents the desired data structure which currently stores two shapes with the first having four vertices and the second two vertices; Now if I set `col[[1,1,1]]` to `{11,21}` this shows up in `pcl`. So far, so good. I can't however overwrite it at the vertexlevel `pcl[[1,1,1,1]]={12,22}` _Mathematica_ generates a `Set::noval: Symbol pcl in part assignment does not have an immediate value. >>` message. **Question: How do I set up the required data structure** such that a change at the face level propagates through all vertices unless a vertex has been modified for that particular shape?