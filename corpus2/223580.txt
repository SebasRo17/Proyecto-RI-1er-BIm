In the game there are 5 players, each with 8 cards in hand. No other card is present. Using Monte Carlo (MCTS) I run many simulations of the game from the current state to the end of the match. In those simulations adversaries play with very simple dumb rules. When generating a new simulation I assign to them _unknown_ cards with a uniform random distribution. I say a card is _unknown_ if it is not in my hand, it is not on the table and it has not been discarded before, then it must be in someone other's hand. However, uniform random distribution it's not the best way to distribute cards. In fact, sometimes it's straightforward to a human player a reasoning like this: _If he had 3♥ he **probably** would have discarded it the previous turn as it was a **very good** move. Then, it's **very unlikely** that he'll discard 3♥ in hand hereinafter._ Well, before discarding, before generating the Monte Carlo simulations, I would assign to each adversary the set of _unknown_ cards with their probability distribution: { (3♥, 0.20) , (4♥, 0.12) , (5♥, 0.03) ...}. How can I calculate those probabilities? Is there some paper or some ideas where to start from? EDIT: An idea: Computationally talking, would it be a good idea to run a simple Monte Carlo simulation when chosing adversaries' strategy? With _simple_ I mean a rough, fast, simulation which ends in a small time like a second. In this way, the next turn I would have a _measure_ of the goodness of adversaries moves and I can start doing inference from there.