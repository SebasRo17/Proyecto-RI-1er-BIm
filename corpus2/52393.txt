I have been curious about it for long. Now that Mathematica 10 arrives, I think it's time to ask the question: How the new `Association` data structure would be used to improve Mathematica programming? There are a few related aspects of this question: (1) How fast is the key-search in `Association` (on the website it is said to be extremely fast)? Would it be O(N) or O(N log N) (note added: those estimate are stupid. See benchmarks below and more in answers)? Is it recommended to be used with a lot of keys? Also, how fast is the operation of inserting a key to an assoication? Would it be O(N) or O(N^2)? (2) Previously I use pattern matching to implement similar functionalities. For example, I do `f[a]=x; f[b]=y` to effectively realize `f = <| a->x, b->y |>`. What's the advantage of the latter over the former? (Seems keys can be more easily managed. But I don't have systematic understanding of the advantages.) (3) The new structure `Dataset` is built upon `Association`. Is it efficient enough in terms of both memory space and computational speed, that I can use `DataSet` to store and calculate big data (say, table with more than 10 thousand rows, like MCMC chains)? Previously I used pure array. (4) Examples where old code can be improved making use of `Association`? I have read through the guide about `Association`, which is basically a collection of related functions. It would be great if the usefulness of those functions could get explained. **Note added:** The replies are really great! Many thanks :) I also did some benchmarks as below. The testing association is the same one as Leonid Shifrin's: `Association[Thread[Range[n] -> Range[n] + 1]]`, where `n` is the x-axis of the plots. We observe (in one case. I am not sure about worst case):   * Creation, insertion (middle) and deletion (middle) are O(N)    * Insertion and removal at head or tail are O(logN)   * Lookup is O(1)   * Association takes O(N) memory space, with a larger constant factor than array Note that, in the first figure, deletion is fast only when using `Most` or `Rest`. `Delete[store, -1]` and `Delete[store, 1]` are as slow as Delete[store, otherNumber]. Also, in the second figure, Association and Dataset takes almost the same memory thus not very visible. ![enter image description here](http://i.stack.imgur.com/Klshh.png) ![enter image description here](http://i.stack.imgur.com/uE2w5.png)