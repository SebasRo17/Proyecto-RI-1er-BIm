Let's say I have some data from a real world system:               data = {0.026666156, 1.27421*^-6, 0.027878597, 0.017035598,         0.011036215, 0.038684388, 0.025161479, 0.021353902, 0.027487123,         0.021190747, 0.029328752, 0.014554109, 0.040037348, 0.020063044,         0.018363514, 0.0116034, 0.02609979, 0.024298555, 0.020568345,         0.017299039, 0.005427133, 0.023453297, 0.037443984, 0.031152865,         0.020158735, 0.014362383, 0.034687449, 0.01472421, 1.29928*^-6,         0.023887209, 0.014531724, 0.03055792, 0.027206875, 0.02227913,         0.01618167, 0.032540959, 1.26651*^-6, 0.021810796, 0.038698191,         0.014228248, 0.020261827, 0.031292827, 0.01142724, 0.039466342,         0.035504951};      If I generate histograms for this data it looks like this:               Column[{         Histogram[data, {.005}, "Probability", ImageSize -> Large],          Histogram[data, {0.005}, "CDF", ImageSize -> Large]     }]      ![PDF](http://i.stack.imgur.com/AJxQWm.png) ![CDF](http://i.stack.imgur.com/Zq9xMm.png) My question is twofold.   1. Is there a way to "fit" this data with a distribution? Or make a pseudo-distribution with this data? I've found `d = EmpiricalDistribution[data]; DiscretePlot[CDF[d, x], {x, 0, .05, .0001}]`, but is this the best way?   2. How do you programmatically calculate the P50 value from this data? (50% confidence that the value will be realized. y = 0.5 on CDF plot)