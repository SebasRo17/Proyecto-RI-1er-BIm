I've noticed a behaviour of `Reap` that I don't quite understand yet. Suppose I want to `Sow` several values during a computation.               sowstuff := (Do[Sow[i, tag1], {i, 5}]; Do[Sow[i^2, tag2], {i, 5}])      If I `Reap` this, I get one list of values per tag.               Reap[sowstuff] // Last     -> {{1, 2, 3, 4, 5}, {1, 4, 9, 16, 25}}      ![TreeForm of plain Reap](http://i.stack.imgur.com/oyIxP.png) If I specify the tags i want to use explicitly, each of these lists gets wrapped in an additional list:               Reap[sowstuff, {tag1, tag2}] // Last     -> {{{1, 2, 3, 4, 5}}, {{1, 4, 9, 16, 25}}}      ![TreeForm of Reap with explicit tags](http://i.stack.imgur.com/Xb2IT.png) I believe I understand how `Reap` in general works. What puzzles me is the purpose of this additional wrapping. After reading the documentation of `Reap` and `Sow`, I have not yet seen a situation in which this list contains more than one element. So my questions are:   * Is there a reason for the introduction of another list?   * Can this list have more than one element or is it always safe to just run `Map[First,%]` to remove it?