( _For the purpose of this question, when I say 'interface' **I mean the language construct`interface`**, and not an 'interface' in the other sense of the word, i.e. the public methods a class offers the outside world in order to communicate with and manipulate it._) Loose coupling can be achieved by having an object depend on an abstraction instead of a concrete type. This allows for loose coupling for two main reasons: **1-** abstractions are less likely to change than concrete types, which means the dependent code is less likely to break. **2-** different concrete types can be used at runtime, because they all fit the abstraction. New concrete types can also be added later with no need to alter the existing dependent code. For example, consider a class `Car` and two subclasses `Volvo` and `Mazda`. If your code depends on a `Car`, it can use either a `Volvo` or a `Mazda` during runtime. Also later on additional subclasses could be added with no need to change the dependent code. Also, `Car` \- which is an abstraction - is less likely to change than `Volvo` or `Mazda`. Cars have been generally the same for quite some time, but Volvos and Mazdas are far more likely to change. I.e. abstractions are more stable than concrete types. All of this was to show that I understand what loose coupling is and how it is achieved by depending on abstractions and not on concretions. (If I wrote something inaccurate please say so). **What I don't understand is this:** **Abstractions can be superclasses or interfaces.** **If so, why are interfaces specifically praised for their ability to allow loose coupling? I don't see how it's different than using a superclass.** The only differences I see are: 1- Interfaces aren't limited by single inheritance, but that doesn't have much to do with the topic of loose coupling. 2- Interfaces are more 'abstract' since they have no implementation logic at all. But still, I don't see why that makes such a big difference. **Please explain to me why interfaces are said to be great in allowing loose coupling, while simple superclasses are not.**