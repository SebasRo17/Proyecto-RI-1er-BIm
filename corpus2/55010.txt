I'm trying to reproduce a `StreamPlot` from a vector field encoundered while analyzing the Fisher's equation (http://en.wikipedia.org/wiki/Fisher%27s_equation), for a variable parameter `c` (the speed of the progressive wave). I have two-three problems. 1A) I wish to draw the stream lines entering the stable node `P` along the directions of the eigenvectors `hP` and exiting from the unstable point `Q` along the directions of the eigenvectors `hQ`, particularly the orbit from `Q` to `P`. I'm unable to do this and to get a single continuous line from `Q` to `P` no matter how I set `StreamPoints`. 1B) If possible I wish to put arrow heads in the middle of a continuos stream lines and not at the end to get a cleaner look. 2) In the right pane of `Manipulate` I wish to get the numeric evaluation of eigenvectors `hP` and `hQ` along with the symbolic expression. The numeric evaluation depends on `c` and `c` is a variable in `Manipulate`. Basically I wish to reproduce a plot like this: ![1](http://imagizer.imageshack.us/v2/280x200q90/674/11f5e5.png) This is my code (sorry for the bad code indentation, but copying from a Mathematica apparently do not preserve indentation):               Module[{A,J,P={0,0},Q={1,0},hP,hQ},     A=c\[Function]({U,V}\[Function]{V,-c V-U+U^2});     J=c\[Function]Evaluate[{U,V}\[Function]Evaluate[Grad[A[c][U,V],{U,V}]]];     hP=c\[Function]Evaluate@Eigenvectors[J[c]@@P];     hQ=c\[Function]Evaluate@Eigenvectors[J[c]@@Q];     Manipulate[     With[{A=A[c],J=J[c],hP=Normalize/@hP[c],hQ=Normalize/@hQ[c]},     StreamPlot[A[U,V],{U,-.5,1.5},{V,-.5,.5},     PlotRangePadding->0.01,AspectRatio->Automatic,     Axes->True,AxesStyle->Directive[Dashed,LightGray],ImageSize->Large,     StreamScale->Full,StreamStyle->Arrowheads[.02],StreamPoints->Fine,StreamColorFunction->"Rainbow",     Prolog->{     PointSize[.02],Darker[Green],Point[P],Text["P",Offset[{10,10},P]],     Gray,If[c>=2,Line[{P-.25#,P+.25#}&/@hP]],          Darker[Red],Point[Q],Text["Q",Offset[{10,10},Q]],     Gray,Line[{Q-.25#,Q+.25#}&/@hQ]     }]     ],          {{c,3},0,10,1/4,Appearance->"Labeled"},          Delimiter,     Row[{"A"," = ",MatrixForm[A["c"]["U","V"]]}],     Row[{"J", " = ", MatrixForm[J["c"]["U","V"]],"  Subscript[J, P] = ",MatrixForm[J["c"]@@P],"  Subscript[J, Q] = ",MatrixForm[J["c"]@@Q]}],     Row[{"Subscript[H, P]\[Transpose]", " = ", MatrixForm[hP["c"]]," = ",MatrixForm[hP[c]]}],     Row[{"Subscript[H, Q]\[Transpose]", " = ", MatrixForm[hQ["c"]]," = ",MatrixForm[hQ[c]]}],          ControlPlacement->Right     ]     ]      But I get this: ![2](http://i.stack.imgur.com/U9Frq.png) # UPDATE This is another code where I try to use `NDSolve` to draw the stable/unstable mainfold near P and Q. Works only for the curve between Q and P.               Module[{A, J, P = {0, 0}, Q = {1, 0}, hP, hQ},      A = c \[Function] ({U, V} \[Function] {V, -c V - U + U^2});      J = c \[Function]         Evaluate[{U, V} \[Function] Evaluate[Grad[A[c][U, V], {U, V}]]];      hP = c \[Function] Evaluate[2*Eigenvectors[J[c] @@ P]];      hQ = c \[Function] Evaluate[2*Eigenvectors[J[c] @@ Q]];           Manipulate[       With[{A = A[c], J = J[c], hP = Normalize /@ N@hP[c],          hQ = Normalize /@ N@hQ[c], \[Epsilon] = 0.01,          t1 = -20*Max[1, c/3], t2 = 20*Max[1, c/3]},        Module[{g1, g2},              g1 = Quiet@             NDSolveValue[{U''[z] + c U'[z] + U[z] (1 - U[z]) == 0, #},               U, {z, t1, t2}] & /@ {            (*{U[t2],U'[            t2]}\[Equal]P+\[Epsilon] hP\[LeftDoubleBracket]1\     \[RightDoubleBracket],            {U[t2],U'[            t2]}\[Equal]P-\[Epsilon] hP\[LeftDoubleBracket]1\     \[RightDoubleBracket],            {U[t2],U'[            t2]}\[Equal]P+\[Epsilon] hP\[LeftDoubleBracket]2\     \[RightDoubleBracket],            {U[t2],U'[            t2]}\[Equal]Q+\[Epsilon] hQ\[LeftDoubleBracket]1\     \[RightDoubleBracket],            {U[t2],U'[            t2]}\[Equal]Q-\[Epsilon] hQ\[LeftDoubleBracket]1\     \[RightDoubleBracket],            {U[t1],U'[            t1]}\[Equal]Q+\[Epsilon] hQ\[LeftDoubleBracket]2\     \[RightDoubleBracket],*)            {U[t1], U'[t1]} == Q - \[Epsilon] hQ[[2]]            };              g1 = Quiet@           ParametricPlot[            Evaluate[{#[t], Derivative[1][#][t]} & /@ g1], {t, t1, t2},            PlotRange -> {{-.5, 1.5}, {-.5, .5}},            Epilog -> {              PointSize[.02], Darker[Green], Point[P],               Text["P", Offset[{10, 10}, P]],              Gray, If[c >= 2, Line[{P - .1 #, P + .1 #} & /@ hP]],                   Darker[Red], Point[Q], Text["Q", Offset[{10, 10}, Q]],              Gray, Line[{Q - .1 #, Q + .1 #} & /@ hQ]              }];              g2 = StreamPlot[A[U, V], {U, -.5, 1.5}, {V, -.5, .5},           StreamScale -> Full, StreamStyle -> Arrowheads[.02],            StreamPoints -> Fine, StreamColorFunction -> "Rainbow"           ];              Show[g1, g2, Frame -> True, PlotRange -> {{-.5, 1.5}, {-.5, .5}},           PlotRangePadding -> 0.01,          AspectRatio -> Automatic, ImageSize -> Large,          Axes -> True, AxesStyle -> Directive[Dashed, LightGray]]         ]        ],            {{c, 3}, 0, 10, 1/4, Appearance -> "Labeled"},            Delimiter,       Column[{         Row[{"A", " = ", MatrixForm[A["c"]["U", "V"]]}],         Row[{"J", " = ", MatrixForm[J["c"]["U", "V"]],            "  \!\(\*SubscriptBox[\(J\), \(P\)]\) = ",            MatrixForm[J["c"] @@ P],            "  \!\(\*SubscriptBox[\(J\), \(Q\)]\) = ",            MatrixForm[J["c"] @@ Q]}],         Row[{"\!\(\*SubscriptBox[\(H\), \(P\)]\)\[Transpose]", " = ",            MatrixForm[hP["c"]]}],         Row[{"\!\(\*SubscriptBox[\(H\), \(Q\)]\)\[Transpose]", " = ",            MatrixForm[hQ["c"]]}],         }, Center, 1.5],            ControlPlacement -> Right       ]      ]