I have a training management and tracking system, with a high level structure as follows: We have a _Role_ 1, e.g. Manager, Shift-boss, miner, etc. and a _Candidate_ , training for that Role. The role has a list of courses and their subjects the candidate needs to complete to qualify for the role. _Candidate_ has a `TrainingHistory` attribute, containing the courses and subjects they have completed, their results, and the date completed. Now I see it as a _TrainingHistoryCourse_ **is-a** _Course_ , extended to add `DateCompleted` etc. but something is nagging at me to rather use something like a _TrainingHistoryRecord_ that **has-a** _Course_. How can I further analyse this to determine which pattern to use? Then, a _Role_ has a list of _RoleTask_ definitions that the Candidate must be observed practising, and a Candidate has a history of _RoleTaskObservation_ objects recording their performance at these tasks. This is very similar to the course/subject requirement and history pattern for the candidate, except for one less hierarchical level, but, a _RoleTaskObservation_ clearly does not have an **is-a** relationship with _RoleTask_ , unless I block my nose and rather use _ObservedRoleTask_. I would prefer to use the same pattern for both subject/course and task/observation structures, but I think that would force me to adopt a composition pattern for _TrainingHistoryCourse_. What is the wisdom here? Always inherit where possible and validated by a solid is-a association, or always favour composition wherever possible? 1 Client specified this to be called JobTitle, but he isn't writing the app, and a JobTitle is only one attribute of a Role. Authorization roles are handled by the DevExpress framework and its customization hooks, so there would be very little little confusion between a business Role in my domain objects and an authorization role in lower level, framework code.