I have a bit of a challenge at work at the moment. Presently (and in fact, for some time now), we have been experiencing the following problems with some in- house maintained applications:   * Defects (sometimes quite serious) being released into production;   * The Customer (that is, the relevant business unit) perpetually changing their minds (or appearing to do so) about what issue to work on next;   * A situation where everyone seems to be in a "fire-fighting" mode a lot of the time;   * Development staff responding to operational requests from business users; ("operational" here means something that needs to be done in order to continue with business, or perhaps just to make a business user's life a little less painful, as opposed to fixing a bug in the application, or enhancing the application); Now I'm sure this doesn't sound particularly new or surprising to most of the participants on this Q&A site and no prizes for identifying the "usual suspects" when it comes to root causes. My challenge is that I have to persuade the higher-ups to do _uncomfortable_ things in order to address all of this. The folk I need to persuade come from a mixture of the following two cultures:   * Accounting;   * IT Infrastructure. I have therefore opted for a strategy that draws from things with-which folk from such a culture would be most comfortable (at least, in my estimation), namely: numbers and tangibles. Of course modern development practitioners know all too well that this sort of thing isn't easily solved using an analytical mindset (some would argue that _that_ mindset is, in fact, entirely inappropriate). Never-the-less, this is the dichotomy with-which I am faced, so that's the stake that I've put in the ground. I would like to be able to do research and use the outputs to present findings in the form of metrics and measures. I am finding it quite difficult, though, to find an agreed-upon methodology and set of templates for assessing an organisations development capability--the only thing that seems applicable is the Software Engineering Institute's Capability Maturity Model. The latter, however, seems dated and even then rather vague. So, the question is: How do I go about assessing our organisation's software engineering capability such that I can present the findings in a way that is concrete and references a generally accepted industry standard? **UPDATE:** Doing a little more research, I came across this little oasis \- a CMMI FAQ worded in laymans terms--just the sort of useful resource that one needs in this area ... and _free_.