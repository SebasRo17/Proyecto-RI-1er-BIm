Say I have an expression (matrix) that depends on several variables.               f= {{a, b+c},{2a-b^2,c^5+a b}}      I want to define new matrices with the single parameter dependencies removed. For example, I want:               ma = f - Block[{a=0}, f]     mb = f - Block[{b=0}, f]     mc = f - Block[{c=0}, f]      or perhaps I should be using               ma = f - (f/.a->0)     mb = f - (f/.b->0)     mc = f - (f/.c->0)      Thusfar, these implementations work as expected. But in my actual problem, there are many more parameters than three so I would like to design something such as:               m[var_]:= f - Block[{var=0}, f]      or               m[var_]:= f - (f/.var->0)      The goal here is to create one general function matrix that I can specify a parameter, and it removes the parameter-free part. These methods give errors and don't work. Another method I've tried is to simply create a Table of individual matrices rather than a matrix function. e.g.:               Table[m[z]] := f - Block[{z=0}, f], {z, {a, b, c}}]       which should make individual expressions for m[a], m[b], and m[c]. This also doesn't work correctly. My last idea would be to make a rank 3 tensor m using Table which has subdivisions that are the matrices I want (a list of matrices, essentially). This would be implemented, it seems, by simply adding one extra set of square brackets around z in the code above, resulting in a rank 3 tensor for m, with m[[a]], m[[b]], and m[[c]] as the appropriate matrices. No luck here either. Actually, this Table method of defining many functions has not worked for me in the past in simpler contexts either. What is the proper way of solving a problem like this?