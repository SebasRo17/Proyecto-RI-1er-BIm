There's a classic article named On the Criteria To Be Used in Decomposing Systems into Modules that I just read for the first time. It makes perfect sense to me, and is probably one of those articles that OOP was based on. Its conclusion: > We have tried to demonstrate by these examples that it is almost always > incorrect to begin the decomposition of a system into modules on the basis > of a flowchart. ... Each module is then designed to hide such a decision > from the others In my uneducated and inexperienced opinion, functional programming takes the exact opposite advice of this article. My understanding is functional programming makes data flow idiomatic. Data gets passed from function to function, each function being intimately aware of the data and "changing it" along the way. And I think I've seen a Rich Hickey talk where he talks about how data hiding is overrated or unnecessary or something, but I can't remember for sure.   1. First I want to know if my assessment is correct. Does the FP paradigm and this article philosophically disagree?    2. Assuming they disagree, how does FP "compensate" for its lack of data hiding? Perhaps they sacrifice data hiding but gain X, Y and Z. I'd like to know the reasoning for why X, Y and Z are considered more beneficial than data hiding.    3. Or, assuming they disagree, perhaps FP feels that data hiding is bad. If so, why does it think data hiding is bad?   4. Assuming they agree, I'd like to know what FPs implementation of data hiding is. It's obvious to see this in OOP. You can have a `private` field that nobody outside the class can access. There's no obvious analogy of this to me in FP.   5. I feel there are other questions I should be asking but I don't know I should be asking. Feel free to answer those, too.  # Update I found this Neal Ford talk that has a very relevant slide in it. I'll embed the screenshot here: ![enter image description here](http://i.stack.imgur.com/esjl0.png)