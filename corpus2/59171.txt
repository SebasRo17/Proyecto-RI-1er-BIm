I can not get the helmholzSolve function provided by Mark McClure and user21 to work for a case that I want to constrain the spacial derivative of a boundary. In particular, I am looking at the vibration modes of a rectangle with one edge fixed but would also like to fix the slope of the edge as if it were welded rather than hinged. Is it possible to use helmholzSolve in this way? [EDIT] Sorry if I wasn't clear with my question. This was my first attempt at using StackExchange. The code I am trying to run is: First I defined helmholzSolve as per Mark McClure. The only difference is that I added the ability to define the region as a RegionDifference. I also set the boundary condition to fix the left edge of a to-be-defined rectangular region with the statement               dirichletCondition = DirichletCondition[u[t, x, y] == 0, x <= 0];      With these changes helmholzSolve becomes:               Needs["NDSolve`FEM`"];     helmholzSolve[g_, numEigenToCompute_Integer,      opts : OptionsPattern[]] :=      Module[{u, x, y, t, pde, dirichletCondition, mesh, boundaryMesh, nr,      state, femdata, initBCs, methodData, initCoeffs, vd, sd,      discretePDE, discreteBCs, load, stiffness, damping, pos, nDiri,      numEigen, res, eigenValues, eigenVectors,      evIF},(*Discretize the region*)     If[Head[g] === ImplicitRegion || Head[g] === ParametricRegion ||      Head[g] === RegionDifference,       mesh = ToElementMesh[DiscretizeRegion[g], opts],      mesh = ToElementMesh[DiscretizeGraphics[g], opts]];     boundaryMesh = ToBoundaryMesh[mesh];     (*Set up the PDE and boundary condition*)     pde = D[u[t, x, y], t] - Laplacian[u[t, x, y], {x, y}] +       u[t, x, y] == 0;     dirichletCondition = DirichletCondition[u[t, x, y] == 0, x <= 0];     (*Pre-process the equations to obtain the FiniteElementData in \     StateData*)nr = ToNumericalRegion[mesh];     {state} =      NDSolve`ProcessEquations[{pde, dirichletCondition,       u[0, x, y] == 0}, u, {t, 0, 1}, Element[{x, y}, nr]];     femdata = state["FiniteElementData"];     initBCs = femdata["BoundaryConditionData"];     methodData = femdata["FEMMethodData"];     initCoeffs = femdata["PDECoefficientData"];     (*Set up the solution*)vd = methodData["VariableData"];     sd = NDSolve`SolutionData[{"Space" -> nr, "Time" -> 0.}];     (*Discretize the PDE and boundary conditions*)     discretePDE = DiscretizePDE[initCoeffs, methodData, sd];     discreteBCs = DiscretizeBoundaryConditions[initBCs, methodData, sd];     (*Extract the relevant matrices and deploy the boundary conditions*)     load = discretePDE["LoadVector"];     stiffness = discretePDE["StiffnessMatrix"];     damping = discretePDE["DampingMatrix"];     DeployBoundaryConditions[{load, stiffness, damping}, discreteBCs];     (*Set the number of eigenvalues ignoring the Dirichlet positions*)     pos = discreteBCs["DirichletMatrix"]["NonzeroPositions"][[All, 2]];     nDiri = Length[pos];     numEigen = numEigenToCompute + nDiri;     (*Solve the eigensystem*)     res = Eigensystem[{stiffness, damping}, -numEigen];     res = Reverse /@ res;     eigenValues = res[[1, nDiri + 1 ;; Abs[numEigen]]];     eigenVectors = res[[2, nDiri + 1 ;; Abs[numEigen]]];     evIF = ElementMeshInterpolation[{mesh}, #] & /@ eigenVectors;     (*Return the relevant information*){eigenValues, evIF, mesh}]      Then I simply defined the region as a rectangle and called helmholzSolve               rect = Rectangle[{0, -1}, {2, 1}];     {ev, if, mesh} = helmholzSolve[rect, 6];      I would like to add a constraint to the helmholzSolve function               (D[u[t,x,y],x]/.x->0)==0      but adding that constraint to the equations to solve doesn't seem to work. A number of errors are returned starting with               NumericalRegion::femtemnbb: The bounds for FullRegion[1] are {{0.,NumericalRegion[None, {{0.,2.},{-1.,1.}}]}}. It is suggested to specify explicit numeric bounds. >>          NDSolve`ProcessEquations::femimvr: The number of independent variables 2 ({x$538,y$538}) does not match the embedding dimension 1      Is there any way to add such a constraint?