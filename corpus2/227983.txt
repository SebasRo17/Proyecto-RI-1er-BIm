I know this is abstract as it's all about signals and switch - (electronics) - underneath, but is there a easy way to visualize the step between assembling code to machine code. For example if you open about a binary file in notepad you see a textually formatted representation of machine code. I assume that each byte(symbol) you see is the corresponding ascii character for it's binary value? There is still a part of the puzzle though that I am missing and I can't even explain exactly what that is. I have seen assembler source code(written in C) which obviously uses the C libraries put, getc, write functions etc, to actually generate the machine code. But how do we go from assembly to binary, what's going on behind the scenes?? I mean C/C++ or any language is essentially binary in itself as it's all signals and switches, key and mouse presses. I guess assembling is really organizing the bytes into a structure that is logical to the hardware.