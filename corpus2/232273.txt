I have a user interface in Asp.Net MVC, which would for example need to load a list of products to show. Let us assume this calls `ProductRepository.GetProducts()` . In the data layer, I have a class `ProductData` which is the actual data stored in the product. I would like to seperate the frontend (UI) from accessing the data layer directly. Would it be best to have an interface say an `IFrontendProduct`, which would be implemented by `ProductData`. Then, the `ProductController` would interface directly with the `ProductRepository`, or should the controllers not even 'know' about `ProductData`, but only about the frontend- exposed interface, `IFrontendProduct`? Would it make more sense to have a model, say `FrontendProductModel`, rather than an actual interface? Then, the backend would bridge between `ProductData` => `FrontendProductModel`. I always like to think of it as having two seperate entities developing the frontend and the backend. In that case, the entity developing the frontend would not 'know' about `ProductData`, but only the interface/model exposed by the API developed by the entitiy developing the backend. Does this make sense, or is this taking seperation to an extra, un-needed level? Personally, I think the best-scenario would be to have a `FrontendProductModel` which the frontend can only access, and the frontend wouldn't even know about `ProductData`. Then, any calls which the frontend makes to the backend services, they would return them as `FrontendProductModel`. The backend would then translate the results from the data-layer to the model. I find this creates the best seperation between the layers, but it can be quite cumbersome to implement at times as it involves a lot of redundant code and copy properties to/from data-layer and frontend- models.