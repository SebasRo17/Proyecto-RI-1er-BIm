The C standard mandates that no C standard library functions shall set `errno` to zero. Why exactly is this? I could understand it being useful for calling several functions, and only checking `errno` after the last one - for example:               errno = 0;     double x = strtod(str1, NULL);     long y = strtol(str2, NULL);     if (errno)         // either "strtod" or "strtol" failed     else         // both succeeded      However, is this not considered "bad practice"? Since you're only checking `errno` at the very end, you only know that one of the functions _did_ fail, but not _which_ function failed. Is simply knowing that _something_ failed good enough for most practical programs? I tried looking for various C Rationale documents, but many of them don't have much detail for `<errno.h>`.