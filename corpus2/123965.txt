**A bit of background** The company I work for has been creating database applications since around 1980 and, until relatively recently, most of these systems have been stand- alone "silo" systems. However, in the last few years, we've seen more of a shift towards gathering "intelligence" across all systems within our customers requirements. For example, a system that might collect data about people's dental records may need to talk to a system that collects data about people's optician records, share information about the same person and provide search capabilities across both systems (makes sense, although the example I've used is fictional). In the fictional example above, the dental and optician systems may or may not both be written by the company I work for (in other words we are looking at both internally-developed interfaces and interfaces to systems from third- party providers). **What we've done so far** We have a basic web-services API ( **.asmx** ) for one of our products, but I'm concerned about the change management, in terms of keeping it up-to-date as we add new features to the main product (in terms of providing the new features through the API without breaking compatibility with older interfaces). We have also produced one **WCF** service. The rigid contracts put my mind slightly more at ease than working with the ASMX service, but I think a lack of experience within the company is holding us back, so I'm looking for some guidance on best practice that I can read up on to help move us along (or at least point us in the right direction). **The question**   * **Is there a particular methodology or programming practice for designing systems to maximise their ability to interface to other systems?**   * **Are there any good online (or offline) resources for these programming practices (assuming they exist)?** Any other advice you can provide based on the information above would be appreciated, but not essential. We primarily develop in Microsoft .NET (mainly ASP.NET, with some windows forms applications as well) with a SQL Server/Oracle database back-end, although I expect the programming practices might be language independent. (I've used the .NET tag as an afterthought, but I might take it out later..!) Thanks for your time.