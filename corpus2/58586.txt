Following the systems-modeling video here at about 15 min, 20 seconds in, the presenter (Bob Sanhedrick, I think) shows a model for an "Asteroids-game"-like 2D spacecraft. The model is trivial:               dynamics = {m x''[t] == u1[t], m y''[t] == u2[t]}      or, in state-space form:               spacecraft = StateSpaceModel[       dynamics,        {x[t], y[t]},       {u1[t], u2[t]},       {x[t], y[t]},       t]      > >     {{{0, 1, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 1}, {0, 0, 0, 0}}, >      {{0, 0}, {1/m, 0}, {0, 0}, {0, 1/m}}, >      {{1, 0, 0, 0}, {0, 0, 1, 0}}, >      {{0, 0}, {0, 0}}} >   The next step is converting it to a discrete-time model (15:52 in the video):               spacecraftD = ToDiscreteTimeModel[spacecraft, 1, Method -> "ZeroOrderHold"]      This fails (even in the downloaded copy of the video's notebook -- it's not my typo): > >     During evaluation of In[3]:= General::ivar: 0 is not a valid variable. > >> >     During evaluation of In[3]:= General::ivar: 0 is not a valid variable. > >> >     StateSpaceModel[{ >       {{1, 1, 0, 0}, {0, 1, 0, 0}, {0, 0, 1, 1}, {0, 0, 0, 1}}, >       {{1/(2 m), 0}, {1/m, 0}, {0, 1/(2 m)}, {0, 1/m}}, >       {{1, 0, 0, 0}, {0, 0, 1, 0}}, {{0, 0}, {0, 0}}, >       Automatic}, >       $Failed, >       {\[FormalK]}, >       SamplingPeriod -> 1] >   Fortunately, I can copy out the failed model explicitly, leaving out the `Automatic`, and reproduce the rest of the demonstration verbatim: ![enter image description here](http://i.stack.imgur.com/mDtz4.png) The question is "why did this fail, and what can I do to fix it." I read the documentation for `TransferFunctionModel` and tried a number of hacks, to no avail. I'd like to know this so that as I go to more advanced models I don't get stuck with something that doesn't have so obvious a workaround.