I'm solving a PDE that is partially elliptic. So I need to solve the equation iteratively. My problem is at the end of the code. I'm doing interactions manually in order to evaluate the code. At the second interaction, I don't know why NDSolve doesn't accept the new boundary condition. Please, find comments in the body of the code. Could some one help me?               vm = 5;     r0 = 127.25;     di = r0*2;     de = 273;     v = 0.000000464;     ρf = 958;     pr = 2.88;     kf = 0.656;     cf = 4186;     hi=35308.2;         αf = kf/(ρf*cf)     f=0.0174719     c1 = (-f*ρf*vm^2/(4*r0/1000))     tinf=298;     tme=373;     re = (vm*(2*r0/1000)/v)               ym[r_] := (((r0/1000) - r)*vm*(f/8)^(0.5))/v;     εm[r_] := v*(0.4*ym[r]/6)*(1 + (r/(r0/1000)))*(1 + 2*(r/(r0/1000))^2);            momento = NDSolve[{(1/r)*D[(v + εm[r])*r*D[u[r], r], r] == (1/ρf)*c1,u'[0.0000001] == 0, u[(r0/1000)] == 0},u[r], {r, 0.0000001, (r0/1000)}, MaxSteps -> 10000]; (*considerando difusividade de momento*);     mom[r_] = u[r] /. First[momento];          hi = (kf/(2*r0/1000))*((re - 1000)*pr*(f/8))/(1 + 12.7*(f/8)^0.5*(pr^(2/3) - 1))     umed=5.47              tmed[x_, t_] = 310;     ttf[x_, r_, t_] = tinf;     l = 160;     tempo = 80;          (*While[erro≥eps,*)          enf1 = NDSolve[{(ρf*cf*(D[tf[x, r, t], t] + mom[r]*D[tf[x, r, t], x])) == ((1/r)*        D[(r*(αf + εm[r])*D[tf[x, r, t], r]), r]),tf[x, r, 0] == (tme - tinf)*Exp[-1000*x] + tinf, tf[0, r, t] == tme, (D[tf[x, r, t], r] /. r -> 0.0000001) ==       0, -kf*(D[tf[x, r, t], r] /. r -> (r0/1000)) == (1 - Exp[-1000*x])*(1 - Exp[-1000*t])*hi*(tmed[x, t] - ttf[x, r0/1000, t])}, tf[x, r, t], {x, 0, l}, {r, 0.0000001, (r0/1000)}, {t, 0, tempo}, Method -> {"MethodOfLines", "SpatialDiscretization" -> {"TensorProductGrid", "MinPoints" -> 13}}];      tff[x_, r_, t_] = tf[x, r, t] /. First[enf1];          Clear[med]          (*this calculates the average temperature*)     med[x_?NumericQ, t_?NumericQ] := (NIntegrate[(mom[r]*tff[x, r, t]*r), {r, 0.0000001,        r0/1000}])*(2/((r0/1000)^2*umed));          (*an evaluation of med[x,t] at x=0 shows that med is numeric at this position. this is valid for any time*)     med[0, tempo/2]     373.          (*so, it is created a new function that shall be numerically equal to med[x,t]*)     tmed1[x_?NumericQ, t_?NumericQ] := Evaluate[med[x, t]]      Up to here, everything is ok.               (*so, the code returns to NDSolve. The only thing that has changed here is tmed to tmed1. Why the mistake??*)          enf1 = NDSolve[{(ρf*cf*(D[tf[x, r, t], t] + mom[r]*D[tf[x, r, t], x])) == ((1/r)*        D[(r*(αf + εm[r])*D[tf[x, r, t], r]), r]), tf[x, r, 0] == (tme - tinf)*Exp[-1000*x] + tinf, tf[0, r, t] == tme, (D[tf[x, r, t], r] /. r -> 0.0000001) ==       0, -kf*(D[tf[x, r, t], r] /. r -> (r0/1000)) == (1 - Exp[-1000*x])*hi*(tmed1[x, t] - ttf[x, r0/1000, t])}, tf[x, r, t], {x, 0, l}, {r, 0.0000001, (r0/1000)}, {t, 0, tempo}, Method -> {"MethodOfLines", "SpatialDiscretization" -> {"TensorProductGrid", "MinPoints" -> 13}}];     tff[x_, r_, t_] = tf[x, r, t] /. First[enf1];      > >     NDSolve::ndnum: Encountered non-numerical value for a derivative at x == > 0.`. >> >   PS: The original message on WOLFRAM community is here: http://community.wolfram.com/groups/-/m/t/317994?p_p_auth=NrBn8wS0