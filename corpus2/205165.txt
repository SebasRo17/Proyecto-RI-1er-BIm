When writing boolean expressions out, you often have to use something of the type:               A == any of B1, ..., Bn     C < all of D1, ..., Dm      But in code you have to use expanded forms:               A == B1 or ... or A == Bn     C < D1 and ... and C < Dm      That looks, to me, like _any of_ and _all of_ are simply the distributed form of _or_ and _and_. That made me wonder if you can apply distributivity to operators in some way that compilers/interpretors can understand. For the above example, say, something like this:               A == B1 +_or ... +_or Bn     C < D1 +_and ... +_and Dm      Essentially, taking operators as relations, it should work something like this:               R1(A, distributive_R2(B1, ... , Bn)) becomes     R2(R1(A, B1), ... , R1(A, Bn))      This could apply to more than just booleans:               X / Y1 +_+ ... +_+ Yn becomes     X/Y1 + ... + X/Yn      Of course, my `+_` prefix may not be the ideal syntax; I'm sure there's better ones out there. Nevertheless, this strikes me as being possibly quite useful and understandable. Any thoughts?