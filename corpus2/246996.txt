I have a class that basically builds up a memory-efficient version of a structure to be used in a performance-critical section of code. The resulting structure is ugly but extremely fast, so not using it isn't really an option, but I also can't use it as the only representation of my structure because it has parts not relevant to the analysis stripped. Did I mention it's also very ugly? Let's call this class `Fast`. I also have the original, pretty representation, let's call it `Pretty`. I have a function called `Process()` which is supposed to take in an instance of `Pretty`, convert it to `Fast` and then do a few million calculations on it and spit out a result:               Pretty pretty;     // do stuff with pretty          // in another hpp:     double Process(const Pretty& pretty)     {       Fast fast(pretty); // create my fast object            // do some processing on fast            return result; // at this point fast dies     }      The instance of `Fast` is created and dies within `Process`, but unfortunately I can't declare a class within a function, so I have to declare it elsewhere. What I would _like_ to do is make the entire class accessible only to `Process`, and not even have it _seen_ by anyone else (just like I would conversely declare a function `private` if the class were the only object that should have access to it). But I can't declare a class private! Here's my current attempt:               class Process     {     public:       static double DoProcess(Pretty pretty); // this is the process function          private:       class Fast       {         // construct fast here (only Process can see this class!)       };     };      And then I just call `Process::DoProcess()`. This isn't really a critical issue so I didn't post it on SO, but it's a style question and I would really like to have a neat solution! I've never come across this issue before and was wondering how others have dealt with it, and if they came up with a nicer solution.