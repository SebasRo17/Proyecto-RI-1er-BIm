I have a backend app in node.js which implements user management, and it uses bcrypt to handle the password. So the password is stored in a single field using a format like `<header><salt><hashed password + salt>`. This part of the backend cannot be changed. I am writing some REST APIs for mobile apps to (among other things) authenticate the user, but I would prevent the password from being sent in clear (although over an SSL connection) from the mobile app to the server. At beginning I designed a process by which the client requests for an authentication token to the server, which is randomly generated and stored in a database. The client combines the token with the password (entered by the user, not stored locally), plus a secret key, hashes it all, and send to the server along with the authentication token. The server generates the same hash, compare it with the one obtained from the client, etc. The problem is that at server the password is hashed, so that doesn't work. An alternate way I thought about is for the server to return the salt along with the authentication token, so that the client can regenerate the same hash that's stored in the database, combine it with the authentication token, hash it again, and send back to the server. I feel that sending the salt to the client is not safe. I would like to know if that's a good strategy, and if not, which one would be more suitable and safer for this case? I remind that I cannot modify how the password is stored and managed at server side.