I've been studying Zend Framework's MVC for a few weeks, and am having a really, really difficult time with it. I'm new to OOP, but I understand OOP in PHP without too much difficulty; I understand how to use some of the packages in Zend's library, etc. I understand interfaces, abstract classes, composition, etc. etc. etc. I understand MVC on a high-level, but does anyone know if/where there is a resource that describes the MVC implementation on the ground level? Or should I just stop worrying about it and try to ignore the mechanics of the implementation initially? I've been working through several books and resources online on the MVC implementation, and it seems extremely complex. (Also, earlier versions had different implementations, making it slightly more confusing to understand). The tack I'm trying to take is what I usually do when I want to understand something: go through it line by line and follow the logic around until it all becomes clear. After trying this over and over (and not getting very far), I'm wondering if I'm not going about this the wrong way. After all, OOP is all about not worrying about the implementation, right? I mean, I hear myself saying that and I cringe. I don't like not knowing what's going on, but I'm finding this extremely complicated, and I would really like to get to the part where I actually create something. From what I can tell, though, Zend is incredibly well-conceived (perhaps too thoroughly well-conceived, if that makes any sense). All of the i's are dotted and t's crossed, which makes it very difficult to dig through (lots of abstract classes, some interfaces, objects being passed here and there, etc.-- hard to follow). But the books and sites I've looked at don't go into significant detail about how the process works, only high level descriptions, or they are outdated and using an different implementation. I would prefer to understand it at a lower level.