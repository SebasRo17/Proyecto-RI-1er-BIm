To explain my problem, I am trying to extend the BVP problem example from the help that illustrates how to use the shooting method of NDSolve:               sols = First[NDSolve[{x''[t] + Sin[x[t]] == 0, x[0] == x[10] == 0}, x, t,      Method -> {"Shooting", "StartingInitialConditions" -> {x[0] == 0, x'[0] == 1.75}}]];      Plot[Evaluate[x[t] /. sols], {t, 0, 10}]      ![The solution is fine so far.](http://i.stack.imgur.com/39T5u.png) I managed to split up the problem as following:               ndssdata = First[NDSolve`ProcessEquations[{x''[t] + Sin[x[t]] == 0, x[0] == 0, x[10] == 0}, x, t, Method -> {"Shooting", "StartingInitialConditions" -> {x[0] == 0, x'[0] == 1.75}}]]          NDSolve`Iterate[ndssdata, 10]; ndsol1 = NDSolve`ProcessSolutions[ndssdata]; Plot[Evaluate[x[t] /. ndsol1], {t, 0, 10}]      The solution is the same and everything works as expected: However, when I try to change the boundary conditions with NDSolve`Reinitialize it complains about a restriction that initial conditions should be specified at a single point, which does not make sense for a BVP:               newstate = First[NDSolve`Reinitialize[ndssdata, {x[0] == 0, x[10] == 1}]]           NDSolve`Reinitialize::ndcinit: Initial conditions should be specified at a single point.      I was hoping to speed up my problem, in which I plan solving the same set of equations with the internal shooting method many times with varying boundary conditions. I know how to do it with my own FindRoot shooting approach, but this would be more elegant. Does anyone know how to do this?