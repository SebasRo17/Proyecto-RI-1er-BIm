I asked this question a while back on SO (http://stackoverflow.com/questions/15506040/maximising-the-features-of-php- and-mysql-when-used-together) but it's a recurring topic, so I thought I'd ask in a different way over here. Basically, we are stuck with the infamous php and MySQL combination (for various reasons), and are trying to produce applications which follow best- practice as much as possible. We notice that time and again, we are tightly coupling the application to the database and vice-versa, despite trying to adhere to SOLID principles. One of the main reasons is to maximise the features of a relational database (such as strict datatypes, hierarchical data structures, relationships, enforcing foreign keys, firing triggers, etc.) This means that some of the application logic bleeds over into SQL. However, there are features that other RDBMS's offer which MySQL doesn't (such as CHECK constraint most notably) so, we end up using php to get round those. This means we end up using php for some of things MySQL doesn't do well and we use MySQL to do things which aren't feasible in php. So, even though every text book encourages programmers to keep things loosely coupled, does anyone have any examples of how to overcome limitations you have come across, or examples of other applications that mix the two up in a similar way?