There are essentially two camps of library designers concerning the design of the final header file inclusion:   * Provide a single header file that includes every other header file that makes up the public API. For example, GTK+ dictates that only `gtk.h` shall be included. This does _not_ mean that everything is explicitly written into that common header file.   * Have the user include the header file whose functionality he is most interested in. The most prominent example would be the standard library where he has to include `stdio.h` for I/O, `string.h` for string manipulation etc., instead of a common `std.h` Is there a preferred way? libabc gives no advice on that matter, whereas an answer to a similar question suggests to keep them separated but does not specifies why.