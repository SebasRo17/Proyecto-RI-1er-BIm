A NaN stands for an entry that is not a number/undefined/missing/infinite/etc. On my machine the C code `printf("%f", 0/0.)` produces `-1.#IND00` which is the standard Windows representation of an indeterminate float. I have to read in a data file containing:   1. either a fixed number of floating-point reals per line with possible NaN-s OR   2. a variable number of floating-point reals per line, as NaN-s are omitted during file-generation. Unfortunately, _Mathematica_ is unable to read and convert such NaN-s silently to `Indeterminate` or `Missing[]` with e.g. `ReadList[..., Table[Number, {10}]]`. Also, _Mathematica_ is unable to read a variable number of `Number`-s per line (until a `\n` is encountered). Seems like one cannot avoid the rather slow string-based import:               StringSplit /@ ReadList[file, String] /. "-1.#IND00" -> Indeterminate // ToExpression      **Is there a FASTER way to read in such irregular data?** Aassume `test.dat` contains the followings (the real case has 100K lines and ~1000 entries per line.):               1.0        0.0        3.0     4.0        -1.#IND00  -1.#IND00     5.0        6.0        -1.#IND00          (* ==> {{1., 0., 3.}, {4., Indeterminate, Indeterminate}, {5., 6., Indeterminate}} *)