Toady I want to construct a geometry shown as below: ![enter image description here](http://i.stack.imgur.com/qJio6.png) I know the Mathematica has the functions like `Cylinder`, `Sphere` and so on,but it lacks of a function to construct my geometry,so I have a trial as below: **_TengentLine_**                lineCofficient[x1_, y1_, r1_, x2_, y2_, r2_, style_] := Block[      {},        First@Solve[        {(k x1 - y1 + b)/Sqrt[1 + k^2] == r1  style,          (k x2 - y2 + b)/Sqrt[1 + k^2] == r2 style},        {k, b}]      ]      **tangentPoint**                tangentPoint[x1_, y1_, r1_, x2_, y2_, r2_, style_] := Block[       {k, b},      {        Solve[         {y == k x + b /.lineCofficient[x1, y1, r1, x2, y2, r2,style],         (x - x1)^2 + (y - y1)^2 == r1^2}, {x, y}],        Solve         [{y == k x + b /. lineCofficient[x1, y1, r1, x2, y2,r2,style],         (x - x2)^2 + (y - y2)^2 == r2^2}, {x, y}]      } // Flatten[#, 1] &     ]      **_My geometry_**                 FinalGeometry[x1_, y1_, z1_, r1_, x2_, y2_, z2_, r2_, h_] := Block[       {x, y, one, two, three, four},       Graphics3D[       {Cylinder[{{x1, y1, z1}, {x1, y1, h}}, r1],        Cylinder[{{x2, y2, z2}, {x2, y2, h}}, r2],            one = Flatten[         List[           Join[{x, y} /.tangentPoint[x1, y1, r1, x2, y2, r2, -1], {{z1}, {z1}}, 2],          Join[{x, y} /.tangentPoint[x1, y1, r1, x2, y2, r2, -1], {{h}, {h}}, 2]], 1];                     two = Flatten[          List[          Join[{x, y} /.tangentPoint[x1, y1, r1, x2, y2, r2, 1], {{z1}, {z1}}, 2],           Join[{x, y} /. tangentPoint[x1, y1, r1, x2, y2, r2, 1], {{h}, {h}}, 2]], 1];            three = Flatten[         List[          Join[{x, y} /.tangentPoint[x1, y1, r1, x2, y2, r2, -1], {{z1}, {z1}}, 2],          Join[{x, y} /.tangentPoint[x1, y1, r1, x2, y2, r2, 1], {{z1}, {z1}}, 2]], 1];            four = Flatten[         List[           Join[{x, y} /.tangentPoint[x1, y1, r1, x2, y2, r2, -1], {{h}, {h}}, 2],            Join[{x, y} /.tangentPoint[x1, y1, r1, x2, y2, r2, 1], {{h}, {h}}, 2]], 1];            Sequence @@         (Polygon /@            Flatten[{Partition[one, 3, 1], Partition[two, 3, 1],             Partition[three, 3, 1], Partition[four, 3, 1]}, 1])       },         BoxRatios -> Automatic       ]      ]      **Using my function:**                FinalGeometry[0, 0, 0, 3, 12, 0, 0, 2, 2]      ![enter image description here](http://i.stack.imgur.com/GyOUa.png) However, I feel my method is _tedious and ingeneral_ , well as owning surface intersection. In addition there many other geometry "by extruding a section" like in 3D software Autodesk Inventor. So my question is: Is there a good and easy method to realize my function `FinalGeometry`? Is there possible to construct a function that can generate **a geometry that can rotate freely** **(not a static image)** by extruding a section?