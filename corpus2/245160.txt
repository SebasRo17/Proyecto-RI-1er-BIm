I'd like to describe this situation from two perspectives. I have a system called `Accounts`. This system is made up of subsystems which handle different account-based activities. For example:               Company.Accounts.NewAccounts     Company.Accounts.Loans     Company.Accounts.Transactions      **Perspective One** From this perspective, imagine I have a shared data access tier:               Company.Accounts.DataAccess      This subsystem is built seperately and each of my other Accounts subsystems reference the built assembly. This Company.Accounts.DataAccess subsystem connects to multiple tables. Some of the tables are specific to certain subsystems, and some of them are shared. There are separate modules for use by some specific subsystems, but also one or two common modules that multiple subsystems reference. The common modules include a lot of basic CRUD activities, but also a good number of low/medium complexity actions. So from this perspective, would it be fair to keep this architecture, but to pull out the subsystem-specific logic into a subsystem-specific data access layer? That way, each subsystem has their own specific Data Access piece, but also still references the original Data Access Tier for the common modules.               Company.Accounts.NewAccounts         Company.Accounts.NewAccounts.DataAccess          Company.Accounts.Loans         Company.Accounts.Loans.DataAccess          Company.Accounts.Transactions         Company.Accounts.Transactions.DataAccess          Company.Accounts.DataAccess      **Perspective Two** From this perspective, imagine I have existing Data Access Layers for each subsystem:               Company.Accounts.NewAccounts.DataAccess     Company.Accounts.Loans.DataAccess     Company.Accounts.Transactions.DataAccess      They are logical layers as part of each subsystem, and only each subsystem references its own data access piece. So there are no cross references here. Each of these Data Access Layers perform operations against their own specific Database Tables. However, each of them also has code to perform common operations against tables that are shared amongst all subsystems in the Accounts system. So from this perspective, would it be fair to keep this architecture, but to abstract the common operations into a subsystem-agnostic data access Tier? That way, each subsystem keeps its own logical layer for specific operations, but also references an externally built tier for the common operations.               Company.Accounts.NewAccounts         Company.Accounts.NewAccounts.DataAccess          Company.Accounts.Loans         Company.Accounts.Loans.DataAccess          Company.Accounts.Transactions         Company.Accounts.Transactions.DataAccess          Company.Accounts.DataAccess      **Conclusion** So as you can see, the ending is the same, but coming at the description from two different perspectives. My idea is to have two different levels for data access. So a subsystem references its Data Access Layer for its own data operations, but also references a common Data Access Tier for common operations. Is that legitimate? Is there already a pattern named for this?