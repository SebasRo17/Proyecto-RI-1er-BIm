I'm facing a very real problem and, sadly, I cannot find the answer on my own: I'm hitting my limit as a programmer because my hardware knowledge is not sufficiently advanced at all. It's an issue I'm encountering during the development of the system (I need to find safe parameters value which depends on the answer to the question I'm asking here) (maybe _crypto.SE_ would be better but _crypto.SE_ seems more about theoretical questions about math/cryptography). For a project I'm working on I need to use a "time capsule cryptosystem". More specifically the following one, invented by Rivest (the 'R' in 'RSA'): Rivest's time capsule crypto puzzle It is an inherently sequential operation: parallelization here is of no use. An attacker could use a botnet of million computers: it wouldn't help. One million ASIC chips wouldn't help either. The solution can only be found sequentially, _by design_. Now I need to approximate (one or two orders of magnitude off is ok: an approximation 10x faster/slower or even 100x faster/slower ain't really an issue) how much faster could a dedicated chip solve that puzzle compared to a fast CPU (a fast _core_ , really). Basically solving that puzzle consists in doing a _lot_ of squarings modulo _n_. Let's consider there's no "attack" on that puzzle: I've chosen bit enough RSA integers etc. Would a GPU help compared to a CPU here? A FPGA? Would a dedicated chip like some ASIC chip help? If any of these would help, how can I determine how much faster it could be than a fast CPU? I'd need some back-of-the-envelope calculation and, as I stated previously, an approximation about 10x or 100x the actual answer ain't that a big problem. I guess my question boils down to something like (but feel free to rewrite if I'm mistaken): knowing that the problem is inherently sequential and consists in repeated squaring modulo `n` operation, can you build/program some hardware to only do sequential squaring modulo operations and how much faster would it be than an actual CPU?