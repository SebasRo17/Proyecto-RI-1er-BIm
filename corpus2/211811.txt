Enumerations1 are often associated with procedural code rather than object- oriented code. They tend to give rise to similar switch statements scattered through the code, and in general, these are replaced by polymorphism in object-oriented code. For example, see _Replace Type Code with Class_ , _Replace Type Code with Subclasses_ , and _Replace Type Code with State/Strategy_ in _Refactoring_ by Martin Fowler. Closely related, see _Replace Conditional With Polymorphism_ in the same volume; Bob Martin also has quite a bit to say on the disadvantages of switch statements in _Clean Code_ (for example, heuristic G23 _Prefer Polymorphism to If/Else or Switch/Case_ ). However, since object-orientation, like any other good paradigm, can be a powerful tool but is not a silver bullet, are there times when using an enumeration is a good decision? * * * 1I use this term broadly; not just for something which is strictly an `enum` in a C-based language, but for any set of entities that are used to represent it (a class with a set of static members, etc...).