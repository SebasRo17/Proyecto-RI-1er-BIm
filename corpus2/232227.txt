Im working on an app that has flexible storage configuration. For example:               public class Repo1:IRepository     {         public void DoSomething(int tenantId, string someKey)         {           ...         }     }      This repo can be combined in Aggreagate or Composite repositories. Also there are connectors to external aplications:               public class Connector1:IConnector     {         public void DoSomething(string someKey)         {           ...         }     }      Connectors are not aware of tenant they are working in, because each tenant has uniquie combination of connectors configured for it. Currently I wrap connectors in special repo implementation:               public class ConnectorRepo:IRepository     {         public void DoSomething(int tenantId, string someKey)         {             var tenantConnectors = ConnectorProvider.GetConnectors(tenantId);             foreach(var connector in tenantConnectors)             {                 connector.DoSomething(someKey);             }          }     }      Basicaly connector and repo are sharing same method signatures, except repo methods have tenantId parameter. I am thinking of making to repository contracts with and without tenantId, and wrap repos without multitenanct support(ex connectors) with tenant aware facades, but such high level abstraction feels fragile to me. Would be very gratefull for any ideas and suggestions.