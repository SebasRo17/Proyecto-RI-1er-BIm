My company is having a reshuffle and I'm applying for my boss' job as he's moved up the ladder. The new role would give me a chance to move our development team into the 21st century and I'd like to make sure that:   1. I can provide sensible suggestions in the interview to get the job so I can fix the team   2. If I get the job I can actually enact some changes to actually improve the lives of the developers and their output. I want to know what I can suggest to improve the way we work, because I think it's a mess but every time I've suggested a change it's been shot down because any time spend implementing the change would be time that isn't spent developing software. Here is the state of play at the moment:   * My team consists of 3-4 developers (Mainly Java but I do some .Net work)   * Each member of the team is usually works on 2-3 projects at a time   * We are each responsible for the entire life cycle of the project from design to testing.   * Usually only one person works on a project (Although we have the odd project that will have more than one person working on it.)   * Projects tend to be bespoke to single customer, or are really heavilly reliant on a particular customer environment.   * We have 2-3 "Products" which we evolve to meet customer requirements.   * We use SVN for source control   * We don't do continuous integration (I'd like to start)   * We use a really basic bug tracker for internal issue tracking (I'd like to move to an issue/task management system) Any changes that bring a sudden dip in revenue generation will probably be rejected, the company isn't structured for development most of the rest of the technical team's jobs can be broken down to install this piece of hardware, configure that piece of hardware and once a job is done it's done and you never have to look at it again. This mentality has crept into development team because it's part of the company culture.