I have a cross platform math library that I am working on and I want to make sure that some common operations are performed in an optimized manner, so I wish to use some intrinsic functions wrapped in inline functions to compute things such as sqrt(float/double). I should mention that at this point I only plan on targeting a select few platforms which are mentioned in the source below. I have started a single prototype of the a sqrt() function but before I proceed any further I want to know if I am doing anything blatantly wrong. I am following the documentation at: http://msdn.microsoft.com/en- us/library/windows/desktop/ff471376%28v=vs.85%29.aspx   http://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html Also, you will note I have a blank line under the pound define for macintosh. I know the newer versions are using clang/llvm. How do you get access to intrinsic functions under the newer versions of mac os and its associated compilers?               #ifndef INTRINSICS_H_INCLUDED     #define INTRINSICS_H_INCLUDED          #if defined(_WIN32)     #elif defined(__gnu_linux__) || defined(__linux__)     #elif defined(__ANDROID__)     #elif defined(__CYGWIN__)     #elif defined(macintosh)     #else     #include <cmath>     #endif          #if defined(_WIN32)     #pragma function( sqrt )     #endif     template<typename T>     inline float sqrt(T &val)     {     #if defined(_WIN32)       return sqrt(val);     #elif defined(__gnu_linux__) || defined(__linux__)       return __builtin_sqrt(val);     #elif defined(__ANDROID__)       return __builtin_sqrt(val);     #elif defined(__CYGWIN__)       return __builtin_sqrt(val);     #elif defined(macintosh)       // How do I do this     #else       return std::sqrt(val);     #endif     }     #if defined(_WIN32)     #pragma function( sqrt )     #endif     #endif