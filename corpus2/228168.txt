If you do something creative (for example I did a new approach to logging) is consider a bad practice. the good practice in Java is to put static field logger in every class. My approach creates static 5 static field in a single class (less code) and just calls methods that have access to it. I don't care about my logging framework, its just an example. I feel that any best-practice that is forced for no good performance or clean code reasons is bad-practice. I understand for example that all data that can change should be in xml or properties files, because later if you need to manually change WAR is easier to change .xml than .class. You could regenerate WAR, but than it would make putting constans in xml and properties look pointless.