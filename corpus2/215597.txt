In C++, features like exceptions impact your whole program: you can either disable them in your whole program, or you need to deal with them throughout your code. As a famous article on C++ Report puts it: > Counter-intuitively, the hard part of coding exceptions is not the explicit > throws and catches. The really hard part of using exceptions is to write all > the intervening code in such a way that an arbitrary exception can propagate > from its throw site to its handler, arriving safely and without damaging > other parts of the program along the way. Since even `new` throws exceptions, every function needs to provide basic exception safety — unless it only calls functions which guarantee throwing no exception — _unless you disable exceptions altogether in your whole project_. Hence, exceptions are a "whole-program" or "whole-team" feature, since they must be understood by everybody in a team using them. But not all C++ features are like that, as far as I know. A possible example is that if I don't get templates but I do not use them, I will still be able to write correct C++ — or will I not?. I can even call `sort` on an array of integers and enjoy its amazing speed advantage wrt. C's `qsort` (because no function pointer is called), without risking bugs — or not? It seems templates are not "whole-team". Are there other C++ features which impact code not directly using them, and are hence "whole-team"? I am especially interested in features not present in C. **Update** : I'm _especially_ looking for features where there's no language- enforced sign you need to be aware of them. The first answer I got mentioned const-correctness, which is also whole-team, hence everybody needs to learn about it; however, AFAICS it will impact you only if you call a function which is marked `const`, and the compiler will prevent you from calling it on non- const objects, so you get something to google for. With exceptions, you don't even get that; moreover, they're always used as soon as you use `new`, hence exceptions are more "insidious". Since I can't phrase this as objectively, though, I will appreciate any whole-team feature. **Update 2** : instead of C++ feature I should have written something like "C++-specific feature", to exclude things like multithreading which apply to a large amount of mainstream programming languages. ### Appendix: Why this question is objective (if you wonder) C++ is a complex language, so many projects or coding guides try to select "simple" C++ features, and many people try to include or exclude some ones according to mostly subjective criteria. Questions about that get rightfully closed regularly here on SO. Above, instead, I defined (as precisely as possible) what a "whole-team" language feature is, provide an example (exceptions), together with extensive supporting evidence in the literature about C++, and ask for whole-team features in C++ beyond exceptions. Whether you should use "whole-team" features, or whether that's a relevant concept, might be subjective — but that only means the importance of this question is subjective, like always.