I would like to write a function similar to `Cases`, but can search for a group of related patterns together. For example,               casesList[f[x] g[x] + f[y] + g[y]/f[z], {f[a_], g[a_]}]      > {{f[x], g[x]}, {f[y], g[y]}} By "related patterns", I mean that in the above example `a_` matches the same `x` for both `f` and `g` at the first list, and matches `y` at the second list. Note that here the input `{f[a_], g[a_]}` could be any other patterns. As another example,               caseList[D[f[x,y],x] + D[f[x,y],y] + D[g[x,y],x] + D[g[x,y],y],         {D[f_[x_,y_],x_], D[f_[x_,y_],y_]}]      > {{Derivative[1, 0][f][x, y], Derivative[0, 1][f][x, y]}, {Derivative[1, > 0][g][x, y], Derivative[0, 1][g][x, y]}} Is there a simple way to do this? Thanks! **EDIT:** To further clarify the question, I'd like to compare the situation with Cases for a list. For example,               Cases[{{f[a], f[b]}, {f[c], f[c]}}, {f[a_], f[a_]}, Infinity]      > {{f[c], f[c]}}               Cases[{{f[c], f[c]}}, {f[a_], f[b_]}, Infinity]      > {{f[c], f[c]}} In the above two examples, `Cases` does exactly what I want. However, more generally the expressions which match `f[a_]` does not necessarily stays in a list structure, but rather may be at elsewhere in the expression. This is the major difficulty I met.