I have been refactoring an existing system to use dependency injection, and that work has been going smoothly. After a while I noticed that a large number of in-house libraries became dependent upon the DI framework I used. As a result the entire project now depends upon this third-party framework. I saw an irony in decoupling all the dependencies by making them dependent upon a shared library. My first reaction was to create a wrapper library around the dependency framework. Therefore, I could replace this framework if needed. After estimating the work involved I realized that the resulting API would be to similar to the existing framework, and therefore make replacing it more difficult. So I abandoned the idea. My concern is that the DI framework I'm using becomes obsolete or needs replacing. Does there exist a development pattern when working with DI that reduces the coupling between a project and the DI framework?