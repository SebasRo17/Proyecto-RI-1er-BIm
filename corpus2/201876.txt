I often see model classes with properties like this:               public IList<Note> Notes { get; set; }     public bool HasNotes { get; set; }      Where the list is initialized lazy, but the boolean property is loaded directly. This has the benefit, that only the count is loaded, when the collection is not needed, but the caveat is that the value for the boolean property is always calculated. This made me think and I came up with a solution like this:               public IList<Note> Notes { get; set; }     public bool HasNotes     {       get       {         if (Notes != null) return Notes.Any();         else // calculate (e.g. sql exists)       }     }      This way the calculation would only happen if the collection is not loaded. Would this be a good approach? Does there already exist different best practices unknown to me?