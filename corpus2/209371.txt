I've become a project manager in my company and here is what I've experienced till now: At first, I was trying to keep in shape technically with other developers of the team (about 15 developers) and read as much as I could so that I would know almost everything going on in the project, from architecture, up to syntax consistency. However, soon I realized that it's almost impossible for you **to know everything**. Therefore it's natural that you fall back in the technical race. Imagine how much work it requires for you to learn **Ext JS** , **Angular JS** , **BRE** , **WCF** , **Enterprise Library** for logging, **Asterisk** , etc. etc. all at the same time. Thus it seems to me that this is not the correct path. I think the formula is: The more people you have to manage, the less technical knowledge you can possess. However, there are problems in not knowing what's going on inside your team technically:   1. You might not understand and detect bottlenecks just the way you would do when you were developing   2. You might not decide which technology is better at performance and productivity   3. In case of a technical dispute in team, you might not be able to help   4. The more distance you get from code, the less you might understand developer's stress, pressures, and feelings (this is a big concern for me)   5. You might not be able to forecast and predict the time necessary to get a task done   6. You loose your passion when a developer talks with enthusiasm about a problem that has been solved, because you don't understand like 40 percent of what he talks about, and the less you know about something, the more boring it might become for you   7. Developers would find it harder to explain something to you and they need to speak less technically   8. Bad developers (rare but existing) might misuse your lesser technical knowledge and cause all sort of problems   9. ... This phenomenon probably occurs in any career and profession. However, since the world of development and computer in general is moving forward with more speed (comparing to say, car industry), thus in a short period of time like 6 months you feel that you've fallen back. Version after version, feature after feature, library after library, you got the idea. I saw these questions, and they contain good suggestions. How can I maintain my technical skills after becoming a project manager?   How much should my project manager know?   How much should my project manager know?   Should a manager (or CEO) in an IT company have an IT background to perform in the organization?   How can I convince management to deal with technical debt? However, they're based more on personal experience and advises, which is of course good, but might not help that much. Do we have a book, or a well-thought and researched essay on this subject, on how to manage a team of software developers, **with lesser technical knowledge** than team members? What points should I take into account to lead effectively and make the whole team achieve success?