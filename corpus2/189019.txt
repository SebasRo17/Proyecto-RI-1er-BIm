I've seen several different ways to design WCF services, and it seems some developers prefer parameter wrappers while others favor 'naked' parameters. To explain what I mean, consider the following service interfaces: **'Naked' Parameters**               [ServiceContract]     public interface IService     {         [OperationContract]         string[] GetValuesByType(string groupName, ValueTypeEnum valueType)     }      **Parameter Wrappers**               [DataContract]     public class GetValuesByTypeRequest     {         [DataMember]         public string GroupName { get; set; }               [DataMember]         public ValueTypeEnum ValueType { get; set; }     }          [DataContract]     public class GetValuesByTypeResponse     {         [DataMember]         public string[] Result { get; set; }      }          [ServiceContract]     public interface IService     {         [OperationContract]         GetValuesByTypeResponse GetValuesByType(GetValuesByTypeRequest request)     }      I suppose there are cases where parameter wrappers make it easier to maintain the service over different versions of the software, since you can control serialization of each member a bit more directly than you can with the first method. But to be honest, parameter wrappers just seem like a lot more code for very little benefit. Am I wrong here?