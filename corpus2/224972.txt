I found this statement from the gang of four's "Design Patterns" particularly odd; for some context, the authors are comparing inheritance versus composition as reuse mechanisms [p. 19]: > "...you can't change the implementations inherited from parent classes at > run-time, because inheritance is defined at compile-time." They go on to say of composition: > "Object composition is defined dynamically at run-time through objects > acquiring references to other objects." I am not sure why this phase distinction is important. I am familiar with compiling and inheritance but work as a JavaScript developer, so maybe I'm missing something fundamental.