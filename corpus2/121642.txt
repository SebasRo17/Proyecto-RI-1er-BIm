I'm designing a carpool system (drivers can publish their routes and passengers can subscribe to them) with WebServices(axis2) and Android clients (ksoap2). I have been having problems with the logical architecture of the system and I wondered if this architecture is fine. ![enter image description here](http://i.stack.imgur.com/mmyUf.png) And another question: for that architecture (if it is ok), how would be the packages structure? I suppose something like that: (In android)   `package org.carpool.presentation`   *All the activities here (and maybe mvc pattern) (In the server)   `package org.carpool.services`   *Public interfaces (for example: register(User user), publishRoute(Route route) ) `package org.carpool.domain`   *Pojos (for example: User.java, Route.java, etc) `package org.carpool.persistence`   *Dao Interface and implementation (jdbc or hibernate)