I'm doing requirements/systems analysis on a particular project and could use some advice. **PROBLEM:** The project is for an organization that has a number of suppliers, with each supplier having up to several thousand items in their inventory. The supplier's inventory list will mostly be available via some sort of API. It's contain the product name, description, photos, unique identifier (e.g. barcode), and other details like dimensions, weight, colors, etc. depending on the inventory item. The organization has a number of retail stores. These retail stores may opt to sell the inventory items available from the organization's suppliers at whatever price the retail stores set. Retail stores also need the ability to:   * flag whether the inventory item is available in-store and/or online   * add items to their inventory that aren't part of the organization's suppliers' inventory list   * provide variable pricing models to the retail stores' customers (e.g. a set price for regular customer, a discounted price for preferred customers, etc.)   * allow customers to purchase items based on a line of credit For online purchases, the payment gateway/merchant account used should be either:   * the organization's payment gateway/merchant account, or   * the retail store's own payment gateway/merchant account Retail stores also need basic CMS functionality for their site, such as:   * ability to add pages   * ability to define custom data (e.g. like the "channels" concept in ExpressionEngine)   * member management The organization also need to manage the individual retail stores' website -- as well as allow the individual retail stores to do their own management/administration. So a "multi-site manager" feature + site level control panels are needed. The organization will also provide the retail stores a few templates to choose from. So, a robust templating system along with ability to choose templates would be needed. **PARTIAL CONCEPTUAL SOLUTION:** I was thinking that I should have a centralized repository for all the supplier's inventory items so that the suppliers can have a uniform way to accessing them. This would result in a duplication of data, but it might be necessary as the data will be needed for displaying product details, categorization, search, etc. Benefit of having a centralized repository are:   * any API keys that need to be managed in order to obtain the suppliers' inventory list would be in one place only   * any special code to obtain suppliers' inventory would only need to reside in one place, too **QUESTIONS**   1. Is my idea of having a centralized repository a good idea?   2. Is this a system that needs to be built from the ground up?