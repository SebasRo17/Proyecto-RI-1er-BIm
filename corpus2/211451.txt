I've reached a point in my career where I want to consider myself less "an {x} engineer" where {x} is a specific programming language, and I want to be more of a language-agnostic software engineer. The obvious next step is to start learning as many languages as possible to build experience, but there's only so many hours in the day and I'd rather go about this in a more efficient way. Also, my end goal is not to be practically proficient in 20 languages, but rather to understand more deeply the variation among programming languages and what tradeoffs and design choices they made and why. I tend to learn better when I can see an overview of the topical landscape first, before diving into the details. Is there a good, long-form (i.e., not a blog post) work on comparative language analysis that does a good job exploring the variations in programming language features? Or maybe, alternately, a good coverage text on programming language design?