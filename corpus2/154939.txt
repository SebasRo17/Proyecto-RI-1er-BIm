If you are familiar with the Java RDF and OWL engine Jena, then you have run across their philosophy that everything should be specified as an interface when possible. This means that a _Resource_ , _Statement_ , _RDFNode_ , _Property_ , and even the RDF _Model_ , etc., are, contrary to what you might first think, _Interfaces_ instead of concrete classes. This leads to the use of Factories quite often. Since you can't instantiate a _Property_ or _Model_ , you must have something else do it for you --the Factory design pattern. My question, then, is, what is the reasoning behind using this pattern as opposed to a traditional class hierarchy system? It is often perfectly viable to use either one. For example, if I want a memory backed _Model_ instead of a database-backed _Model_ I could just instantiate those classes, I don't need ask a Factory to give me one. * * * As an aside, I'm in the process of writing a library for manipulating Pearltrees data, which is exported from their website in the form of an RDF/XML document. As I write this library, I have many options for defining the relationships present in the Peartrees data. What is nice about the Pearltrees data is that it has a very logical class system: A tree is made up of pearls, which can be either Page, Reference, Alias, or Root pearls. My question comes from trying to figure out if I should adopt the Jena philosophy in my library which uses Jena, or if I should disregard it, pick my own design philosophy, and stick with it.