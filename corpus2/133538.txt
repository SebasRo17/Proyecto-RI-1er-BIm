I am working a project in **delphi 7** and I am creating a installer for the application, there are Three main parts.   1. **PostgreSQL** installation/uninstallation   2. **myapplication** ( setup of myapplication is created using nsi) installation/uninstallation.   3. **Creating tables** in Postgres through script(batch files). Every thing runs fine and smoothly, but if something fails I have created a logger which will log every step of the process,   like this               LogBook.Log('[POSTGRESQL INSTALLATION]  :  [ACTION]:Postgres installation started');      The function `LogBook.Log()` This will write the contents to a file. This is working nicely, but the problem is this has messed up the code as in it has become difficult to **read** the code as one ca only see the `LogBook.Log()` function call everywhere in the code an example                if Not FileExists(sOSdrive+'\Mapannotation.txt') then      begin         if CopyFile(PChar(sTxtpath+'Mapannotation.txt'), PChar(sOSdrive+'\Mapannotation.txt'), False) then            LogBook.Log(2,'[POSTGRESQL INSTALLATION] :  [ACTION]:copying Mapannotation.txt to '+sOSdrive+'\ sucessful')            else            LogBook.Log(2,'[POSTGRESQL INSTALLATION] :  [ACTION]:copying Mapannotation.txt to '+sOSdrive+'\ Failed');      end;      if Not FileExists(sOSdrive+'\Mappoint.txt')      then        begin          if CopyFile(PChar(sTxtpath+'Mappoint.txt'), PChar('c:\Mappoint.txt'), False) then            LogBook.Log(2,'[POSTGRESQL INSTALLATION] :  [ACTION]:copying Mappoint.txt to '+sOSdrive+'\ sucessful')        else            LogBook.Log(2,'[POSTGRESQL INSTALLATION] :  [ACTION]:copying Mappoint.txt to '+sOSdrive+'\ Failed');      end;      as you can see there are lots of `LogBook.Log()` calls,   before it was                if Not FileExists(sOSdrive+'\Mapannotation.txt') then         CopyFile(PChar(sTxtpath+'Mapannotation.txt'), PChar(sOSdrive+'\Mapannotation.txt'), False)       if Not FileExists(sOSdrive+'\Mappoint.txt')      then        CopyFile(PChar(sTxtpath+'Mappoint.txt'), PChar('c:\Mappoint.txt'), False)      this is the case in my whole code now.   its difficult to read. can any one suggest me a nice way to unclutter the calls to log? like   1. Indenting the ' LogBook.Log()` call   like this                 if Not FileExists(sOSdrive+'\Mapannotation.txt') then          begin              if CopyFile(PChar(sTxtpath+'Mapannotation.txt'), PChar(sOSdrive+'\Mapannotation.txt'), False) then             {Far away--->>}                   LogBook.Log(2,'[POSTGRESQL INSTALLATION] :  [ACTION]:copying Mapannotation.txt to '+sOSdrive+'\ sucessful')        else             {Far away--->>}                   LogBook.Log(2,'[POSTGRESQL INSTALLATION] :  [ACTION]:copying Mapannotation.txt to '+sOSdrive+'\ Failed');        end;        2. Separate **unit** like `logger`   This unit will have all the log messages in a `switch case` like this               Function LoggingMyMessage(loggMessage : integer)           begin     case  loggMessage of          1         :  LogBook.Log(2,'[POSTGRESQL INSTALLATION] :  [ACTION]:copying Mapannotation.txt to '+sOSdrive+'\ sucessful');     2         :  LogBook.Log(2,'[POSTGRESQL INSTALLATION] :  [ACTION]:copying Mapannotation.txt to '+sOSdrive+'\ Failed');        150        :  LogBook.Log(2,'[somthing] :  [ACTION]: somthing important);          end;      so I can just call the LoggingMyMessage(1) where ever required. Can anyone tell me which is a better and cleaner approach to logging this way?