> Design By Contract uses preconditions and postconditions of the public > methods in a class together to form a contract between the class and its > clients. a) In code we implement _preconditions_ and _postconditions_ either as _assertions_ or as _exceptions_? b) We implement _preconditions_ and _postconditions_ in code as _exceptions_ if not fulfilling _preconditions_ or _postconditions_ doesn't indicate logically impossible situations or programming errors? c) we implement them in code as _assertions_ when not fulfilling _preconditions_ or _postconditions_ does indicate logically impossible situations or programming errors? d) Should _preconditions_ and _postconditions_ only be defined on public methods? **EDIT:** Aren't the following checks considered to be part of a normal operation ( and as I already mentioned, I've seen plenty of articles on DbC using similar examples for preconditions, where checks were made against arguments supplied by the user ), since if the user enters bad data, then without checks operation won't be rejected and as such system will stop working according to specs: Link:               public User GetUserWithIdOf(int id,             UserRepository userRepository) {       // Pre-conditions       if (userRepository == null)           throw new ArgumentNullException(               "userRepository");       if (id <= 0)           throw new ArgumentOutOfRangeException(               "id must be > 0");            User foundUser = userRepository.GetById(id);            // Post-conditions       if (foundUser == null)           throw new KeyNotFoundException("No user with " +               "an ID of " + id.ToString() +               " could be located.");            return foundUser;     }