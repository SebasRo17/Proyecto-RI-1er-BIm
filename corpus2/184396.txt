I recently decided to start learning iOS Development, and to this end I’ve been reading iOS Programming: The Big Nerd Ranch Guide. In the book the authors describe a design pattern _MVCS - Model-View-Controller-Store_ , the basic idea being that since many applications make use of multiple external sources of data keeping the request logic in the controller can get very messy, instead the authors propose that moving all the request logic out of the controller and into a separate object. In short to quote the book > Model-View-Controller-Store puts request logic into a separate object, and > we call this object a store (Figure 28.4). Using a store object minimizes > redundant code and simplifies the code that fetches and saves data. Most > importantly, it moves the logic for dealing with an external source into a > tidy class with a clear and focused goal. This makes code easier to > understand, which makes it easier to maintain and debug, as well as share > with other programmers on your team. And > The cool thing about asynchronous stores is that even though a lot of > objects are doing a lot of work to process a request, the flow of the > request and its response are in one place in the controller. This gives us > the benefit of code that’s easy to read and also easy to modify. I wanted to find out more about this pattern and to see what others might have to say about it, but while searching online the only references I could find were to that same book (is the pattern perhaps known by some other name?). To me the author’s logic seems to make sense, and it seems like a logical extension of the regular MVC pattern, but perhaps that's because I don’t really have much experience with the MVC pattern in practice (aside from foray into iOS development I have sort of used MVV with backbone.js (that is, if you consider it MVC)). I was hoping that perhaps someone with more experience can shed some light on whether there are any obvious flaws/problems with the _MVCS_ pattern that I’m missing.