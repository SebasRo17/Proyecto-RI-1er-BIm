I first learned about the existence of syntactic sugar languages, like CoffeeScript and SASS while working in Rails. This got me thinking... why do we not have well-known (if any at all) syntactic sugar for languages like C, C++ and Java? Imagine a language that reads like Python or Ruby that can be preprocessed to C, and then compiled to generate really fast code that also looks beautiful. For example, instead of:               #include <stdio.h>          int divide(int a, int b)     {         if(b != 0)             return a / b;              return 0;     }          int main()     {         int a, b;              scanf("%d", &a);         scanf("%d", &b);              printf("%d", divide(a, b));              return 0;     }      Why not have:               include stdio.h          fn divide(int a, int b):       a/b if b != 0       ret 0          fn main:       int a, b            scanf '%d', a       scanf '%d', b            print '%d', divide(a,b)       ret 0      And have this preprocess down to the same C code above? Why stick to language implementations that are either fast _or_ easy to read when you could have both?