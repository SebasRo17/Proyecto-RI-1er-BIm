I'm confused as to why `Total` complains about a nonatomic expression here:               Total[myList] /. {myList -> {1,2}}     Total::normal: Nonatomic expression expected at position 1 in Total[myList]. >>     3          Total[{1,2}]     3      If it's important, here's the context in which I'm using it:               obj = someClass[myList -> {}, anotherList -> {1,2}];     calculateStuff[someClass[props___]] := (1 + Total[myList] * Mean[anotherList]) /. {props};     calculateStuff[obj]     Total::normal: Nonatomic expression expected at position 1 in Total[myList]. >>     0      I can't find any discussion about using a rule to transform a symbol into a list like this. One of the examples in the `ReplaceAll` documentation makes it seem like this is okay. What am I missing here?