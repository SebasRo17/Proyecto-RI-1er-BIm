I've been playing around with the NuGet.Core package to see if I can search the NuGet repository for specific packages. I started with the sample code:               //ID of the package to be looked up     string packageID = "EntityFramework";          //Connect to the official package repository     IPackageRepository repo = PackageRepositoryFactory.Default.CreateRepository("https://packages.nuget.org/api/v2");          //Get the list of all NuGet packages with ID 'EntityFramework'     List<IPackage> packages = repo.FindPackagesById(packageID).ToList();          //Filter the list of packages that are not Release (Stable) versions     packages = packages.Where (item => (item.IsReleaseVersion() == false)).ToList();          //Iterate through the list and print the full name of the pre-release packages to console     foreach (IPackage p in packages)     {         Console.WriteLine(p.GetFullName());     }      The problem is that this is all done synchronously, instead of asynchronously. I could not find any async methods in NuGet.Core, so I was thinking about rolling out my own way of querying NuGet's official feed. The problem is that I have no idea how to even query the official feed at all, so I have no idea what classes or methods I have to use. Or, is there a way to use parts of the NuGet.Core interfaces but just perform a query async?