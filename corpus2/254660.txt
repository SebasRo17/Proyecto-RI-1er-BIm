In my app, many appointments can be booked for activities. Each activity has many price packages with a price and a quantity. On showing the cart, I need to work out what combination of packages to use to get the user the best prices and allow all the appointments to be accounted for. There is not always a quantity 1 package. Is there a common pattern to apply to this? Here is where I got to before I realised how hard this was going to be:               cost = 0     i = appointments.count     activity.packages.order(:quantity => :asc).each do |package|              if i >= package.quantity &&  i.modulo(package.quantity) == 0                             cost = cost + (package.price * i/package.quantity )          i = i - i/package.quantity        end       end     if i > 0        raise "error: packages do not cover number of children."     end       That's in ruby(rails). So the problem I didn't see until I wrote the above is, what if there are 8 appointments, and packages for 4 & 5 - it will use the 5 package, then the last 3 won't fit in a 4 package and it will fail. EDIT: More detail So the structure is               activities has_many packages     packages:        quantity: integer      price: float      So a package defines a price for a bundle of appointments for an activity. So for example, sailing lessons are $500 for 5 or $430 for 4. If the user orders 8 sailing lessons, the app needs to work out that it should use two of the quantity 4 packages = $860 If the user order 9 sailing lessons, the app should work out they need 1 Quantity 5 package, and one quantity 4 package. etc