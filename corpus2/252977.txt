I'm working on learning Haskell, and I've come across three different ways of dealing with errors in functions I write:   1. I can simply write `error "Some error message."`, which throws an exception.   2. I can have my function return `Maybe SomeType`, where I may or may not be able to return what I'd like to return.   3. I can have my function return `Either String SomeType`, where I can return either an error message or what I was asked to return in the first place. My question is: **Which method of dealing with errors should I use, and why?** Maybe I should different methods, depending on the context? My current understanding is:   * It's "difficult" to deal with exceptions in purely functional code, and in Haskell one wants to keep things as purely functional as possible.   * Returning `Maybe SomeType` is the proper thing to do if the function will either fail or succeed (i.e., there aren't different _ways it can fail_ ).   * Returning `Either String SomeType` is the proper thing to do if a function can fail in any one of various ways.