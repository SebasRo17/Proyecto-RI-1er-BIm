So, I'm trying to understand threads. I realize they are a mix of hardware and OS decisions. I also know that a thread, or process, has a set of register/stack variables and functions. In each thread, they get duplicated when forked, "packed up" when not running and "unpacked" back into the registers when they start again. I can use them fairly decently, but there are a few things I do not know: What happens when you interrupt the same thread? Eg, I'm on the main thread, bug a SIGCHLD is called or any interrupt, which interrupts the main thread in order to run this one function, then goes back. How do the stack variables "pack up", if they even do? (basically, same thread is interrupted, what happens to stack vars and function stack) A game loop, or event loop is continuous. I've started to accept the idea that, halfway into any function, it could just stop and switch to another thread "context". I also know that after every loop, it may or may not say "I'm waiting for a timer/event, sleep for a few ms on me", so will it try to run its interrupts there or just at any random time? How do I tell my own loops to stop and wait if I want to keep a certain pace? - I realize this might be in a book on OS's, just don't know what part. (Basically, how do threads sleep? Are they really interrupted halfway into a task?) (the above is surprising to me because I always thought of a program as a continuous set of things, it's like I have to change my mindset completely to understand how it really works) As far as I'm aware, sync-ing ensures that a variable is the same across all registers. So with my first Q, is the register and stack the same when the main thread is interrupted? Must I sync anything? If they are different threads, does it wake up the others just to sync the variables, or do the threads stay "asleep"? I'm betting they all point to the same heap vars, but where could differences arise besides pointers pointing to old addresses? I realize if I knew where to read, maybe I could infer more than half of this. I apologize if they sound basic, I've been reading but a lot of this, I just don't get but would like to. I use GCD a lot which hides the details, so I know to sync, gate, but I have absolutely no idea where my threaded variables are going and when/how. I learned about this from some sockets programming and an OS book I was reading, but obviously I'm missing some critical details. Thank you. Stephen