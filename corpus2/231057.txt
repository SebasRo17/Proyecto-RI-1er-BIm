There are many well-known best practices about exception handling in isolation. I also know the do and don'ts very well, but I search for a best practices or patterns in larger environments, especially when to rethrow and when to catch exceptions. Moreover I'm always confused if I read: "throw early, catch late". Why should I throw early and catch late, if at a low-level-Layer a NPE is thrown? And why should I catch it at a higher layer? It doesn't make sense for me to catch a low-level exception at a higher level, like business layer. It violates concerns of each layer. Imagine the following situation: I have a service which calculates a figure. To calculate the figure the service accesses a repository to get raw data and some other services to prepare calculation. If something went wrong at the data retrieval layer, why should I throw a DataRetrievalException to higher level? In contrast I would prefer to wrap the exception into a meaningful exception. ### Why throw early, why catch late?