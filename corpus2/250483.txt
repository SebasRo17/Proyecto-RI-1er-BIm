I'm designing a data structure in C++, and I want to expose an interface to the user to traverse the structure in some order. Instead of creating several different types of enumerators, I want to keep it simple and provide a single enumerator, while maintaining const-correctness. My design is summarised as follows:               class DataStructureNode; // The basic building block of the structure          class DataStructureEnumerator     {     public:              friend class DataStructure;              DataStructureEnumerator GetNext() { ... }         DataStructureEnumerator GetPrevious() { ... }          private:              const DataStructureNode* m_Node;         ...     };          class DataStructure     {     public:              DataStructureEnumerator GetEnumerator() { ... }              DataStructureNode* GetNodeFromEnumerator(const DataStructureEnumerator& e)         {             // Let's assume this function also ensures the node belongs to this structure             return const_cast<DataStructureEnumerator&>(e).m_Node; // <--- Ooo! const_cast!         }              const DataStructureNode* GetNodeFromEnumerator(const DataStructureEnumerator& e) const         {             // Let's assume this function also ensures the node belongs to this structure             return e.m_Node;         }     };      This design has the benefit that there is only one type of enumerator that handles both mutable and immutable structures. Of course, the alternative (and the conventional) design in C++ is to have two (or more) enumerator classes, such as `DataStructureEnumerator` and `DataStructureConstEnumerator`. The conventional design comes with added code- bloat, more templates, and an uglier interface (in my opinion!), but it's the norm in C++ communities. I'm interested in hearing opinions of the community on this design. Are there any potential pitfalls that I'm missing with my design?