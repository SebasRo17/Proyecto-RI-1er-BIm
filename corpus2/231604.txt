(define ls1 '((1 . 2) 1 . 2))     (set-car! (car ls1) 6)     ls1     (define ls2 (cons '(1 . 2) '(1 . 2)))     (set-car! (car ls2) 6)     ls2      After `set-car!`ing, ls1 will be `((6 . 2) 1 . 2)` and ls2 `((6 . 2) 6 . 2)`. It seems that `ls1` and `ls2` have different storage model, and what does it mean when someone says `x is bound to a list`? is x stand for a `starting address` or `location` like that a is the starting address of a[10] in C?