I would like to learn writting more efficiently. I am working on problem of simulating random walks (abnormal diffusion). I believe this is good example of inefficient code. How can I make it faster?               xvv[n_, a_] := (       xx = #1 Cos[#2] &;       yy = #1 Sin[#2] &;       lval = RandomVariate[ParetoDistribution[0.01, a], n];        phival = RandomReal[{0, 2 Pi}, n];       xv = Thread[xx[lval, phival]];       yv = Thread[yy[lval, phival]];       {xv, yv}     )          mm[n_, a_] := (       laz = xvv[n, a];       {Sqrt[laz[[1, All]]^2 + laz[[2, All]]^2], laz[[1, All]]}     )          xm2[tmax_, ni_, a_] := (       t = 0; x = 0;j=1; values = Transpose[mm[10000, a]];       While[t < tmax,        {t, x} = {t + 0.1 RandomVariate[ParetoDistribution[0.1, ni]], x} + values[[j]];j++;]; x     )          tab2[tmax_, ni_, a_] := Table[xm2[tmax, ni, a], {i, 1, 100}];          valt = Table[10^(j), {j, 1, 1.7, .2}]     Ngamm[mi_, ni_] := (       a = mi - 1;       a3 = Table[{i, MedianDeviation[tab2[i, ni - 1, a]]^2}, {i, valt}];        model = FindFit[Log[a3], aa xxx + b, {aa, b}, xxx];       aa /. model     )      Edited (I accidentaly deleted part of xm2 (j=1; and j++;)) (now it should work). mi and ni in Ngamm should be larger than 1. (range that is interesting is 1 to 5). Thank you for responses. **Edit: Now codel looks a bit better, but it is not much faster.               xm3[tmax_, ni_, a_] := Module[{augvalues =         {Accumulate[           0.1 RandomVariate[ParetoDistribution[0.1, ni], 10000]],           Accumulate[           0.1 RandomVariate[ParetoDistribution[0.1, a], 10000] Cos[             RandomReal[{0, 3.1415}, 10000]]]}, j = 1},       While[augvalues[[1, j]] < tmax, j++]; augvalues[[2, j]]]          tab2[tmax_, ni_, a_] := Table[xm3[tmax, ni, a], {i, 1, 50}];          valt = Table[10^(j), {j, 1.0, 2.8, .1}]     Ngamm[mi_,        ni_] := (a3 =         Table[{i, MedianDeviation[tab2[i, ni - 1, mi - 1]]^2}, {i, valt}];       model = FindFit[Log[a3], aa xxx + b, {aa, b}, xxx];       aa /. model)