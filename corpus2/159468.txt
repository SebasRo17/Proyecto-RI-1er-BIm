Are there any serious studies on how well an experienced programmer who knows language X can understand code written by a competent programmer using language Y, for a good range of widely used languages as X and Y? Of course the real world isn't so simple as a programmers knows just one language. What we'd like to know is: if we do our project in, say, C#, and someday some old physicists who know only Fortran and Algol look at it, to what extent would it make sense to them? Mathematical parts of it might read fine to them, if they ignore what to them are some random-ish punctuation marks. Or, would a Python expert be able to find flaws in my clever Ruby script? There could be issues from the level of superficial syntax to the level of grand concepts such as objects, template metaprogramming, functional and so on. I'm not expecting the one programmer to fully understand every syntax detail of code in a "foreign language" or to follow the religion of some grand concept, but wondering to what extent they'd get the main flow of control, find the spot where something is drawn on the screen and what determines its color or size, verify that a robot programmed to drive a car will turn off the engine when it's done, those sorts of things. A good quality study would include published academic research, an official report from some industry group or major software company, though I'll take systematic unbiased observations by experienced leaders of workshops and classes or other sources. Not interested in short blogs, single-case examples, or anecdotes. (Well, maybe a few anecdotes if they make for a good read.)