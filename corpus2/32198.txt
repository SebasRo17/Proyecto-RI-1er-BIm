_Mathematica_ uses Bellman-Ford to find a shortest path between two vertices when the edge lengths are negative:               g = SparseArray[{{1,2} -> -1,{1,3} -> -1,{2,4} -> -1,{3,4} -> -1}]       GraphPath[g,1,4]      yields > {1,2,4} I want to find _all_ such shortest paths. In the example above, `{1,3,4}` is another shortest path. Goal: I'm testing a non- _Mathematica_ shortest path algorithm against _Mathematica_. My algorithm also lazily finds only one shortest path, but it's different from the path _Mathematica_ finds. I need to confirm my algorithm's shortest path really is a shortest path. I realize I could just compare the path lengths (if they're equal, my algorithm has found a shortest path), but that wouldn't catch other errors in the algorithm (eg, if it's inventing edges or nodes or something). I also realize I could have _Mathematica_ find all paths or something and filter for the shortest ones, but that seems inefficient for larger graphs. I've read Finding all shortest paths between two vertices, but   1. I couldn't get it to work with _Mathematica_ 9, and, more importantly   2. it appears to be for positive-length edges.  NOTE: I realize I'm using a SparseArray for a graph above, but _Mathematica_ seems to be OK with this.