I am currently maintaining a Java web application that is initially designed to work only as a single instance (not in a cluster/farm). Now, the client is planning to upgrade their infrastructure and part of their plan is to place our web application behind a load balancer.      I have already identified several serious design problems:   1. Users can upload files and our application store those files in the local filesystem.   2. There are scheduled jobs that might cause problems when executed concurrently (i.e. generating files).   3. Session variables are heavily used in most modules.    I need opinion on my proposed solutions below.     1. I can solve item 1 by storing all files in an external/shared storage (SAN, etc..)    2. With item 2, I can create a locking mechanism in the database so when the scheduled jobs run, the web apps will first check the table and only the first one to update will run the said job.    3. Actually, I'm still not sure if item 3 can cause problems. If a user logs in to our application and the load balancer directs him to Server 1, is it possible that the load balancer will point him to Server 2 the next time he click a link? I have no idea yet how the load balancer works in this level.  Also, what are the other things that I should consider when designing a horizontal-scalable web application [from scratch]?