I always thought pass by value is a legacy from the early languages, because the designers had never seen anything else. But after seeing the brand new languages like Go adapting the same principle confused me. The only advantage I can think of is you make sure that the value you are passing won't be modified. But every time you need to pass a big structure to a function, you need to pass the pointer (or reference) to prevent copying, if the language permits it. To prevent modification of parameters, some `const`ness mechanism could be introduced instead of making the whole language pass by value. I have been coding for years and I rarely needed to pass by value. Almost always, I don't need my value/object to be copied to a function call; and often I don't need it to be modified inside the function*. What is the motivation behind making modern languages pass by value? Are there any advantages that I am not aware of? **Edit:** When I say pass by value, I don't mean primitives. They are easy and cheap to pass by value. My main focus is objects or structs that consists of more than 1 primitive and thus _expensive_ to copy. *: I have asked around and others reported similar thing with their parameter usage.