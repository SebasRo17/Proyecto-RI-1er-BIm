I encountered a nasty problem that `N` cannot evaluate expressions containing a symbolic `Derivative` of a multi-parameter function expecting an exact integer as its first argument.               Attributes[StieltjesGamma]     (*        {Listable, NHoldFirst, Protected, ReadProtected}      *)          d = Derivative[0, 1][StieltjesGamma][1, 1]     (*        Derivative[0, 1][StieltjesGamma][1, 1]     *)          N[d, 10]     (*        StieltjesGamma::intnm: Non-negative machine-sized integer expected at position 1        in StieltjesGamma[1.000000000,1.000000000]. >>       Derivative[0, 1][StieltjesGamma][1.000000000, 1.000000000]     *)          The first argument of `StieltjesGamma` only makes sense when it is an integer, and `NHoldFirst` is supposed to take care of this when approximate numeric calculations are performed. But in this case it goes unnoticed by `N` that results in a meaningless expression and an error message. This also blocks some symbolic simplifications that internally rely on arbitrary-precision numeric calculations:               FullSimplify[d > 0]     (*        Derivative[0, 1][StieltjesGamma][1, 1] > 0     *)          FullSimplify[Floor[d]]     (*        Floor[Derivative[0, 1][StieltjesGamma][1, 1]]     *)      There is a workaround: apply `N` directly to the second argument:               MapAt[N[#, 10] &, d, 2]     (*        0.70738627     *)      but, of course, it becomes cumbersome when a derivative occurs deeply nested in a more complex expression. I understand that `NHoldFirst` is formally attached to the symbol `StieltjesGamma` itself, not to a non-symbol head `Derivative[0, 1][StieltjesGamma]`. But the behavior resulting from this seems wrong. Should it be considered as a bug that needs to be reported to _Mathematica_ Tech Support, or there is a valid reason why `NHoldFirst` should not be propagated to derivatives? Do you know any simpler workarounds for this problem?