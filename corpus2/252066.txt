I'm planning to implement a simple VM/interpreter kind of thing for a simple language I'm making. The compiler of the language emits mostly stack-oriented instructions to be executed by the VM. The structure of the program will be something like this:   * The execution part (for lack of a better term): interprets the opcodes and executes them.   * The call stack: to keep track of function calling, and for parameter passing and return values.   * The data stack: for none function-calling-related computation, such as arithmetic.   * The variable-storing area, where variable names are matched with values. The "variable-storing area" will be implemented basically with a HashTable/dictionary thing. When the programmer creates a variable (assuming for now only numeric variables), a new entry is added to the table. When he/she assigns a value to a variable, the entry with the matching name in the table is assigned this value. When the programmer accesses a variable, again we fetch the value from the table. I'm pretty sure that's the only data-storing part I need in the application, aside from the data stack and the call stack. I don't see why I'd need anything else. Now, I looked at what a 'heap' is in Wikipedia and other sources online. I found mostly technical terms that I'm having trouble understanding. But in simpler non-very-technical terms, if I understand correctly, the heap is where the 'constant' data is saved, things that aren't local computation such as arithmetic. So if my understanding is correct, is my 'variable-storing area' basically a 'heap'? Why or why not? If my understanding of what a heap is is wrong please explain it.