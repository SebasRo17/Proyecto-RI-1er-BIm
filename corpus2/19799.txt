I have to fill a 4D array, whose entries are $\mathrm{sinc}\left[j(a-b)^2+j(c-d)^2-\phi\right]$ for a fixed value of $\phi$ (normally -15) and a fixed value of $j$ (normally about 0.00005). The way I'm trying to speed this up is by first creating a "lookup matrix".               lookup = ParallelTable[Sinc[0.00005 (i^2 + j^2) - 15.],        {i, -2 lim, 2 lim, step},        {j, -2 lim, 2 lim, step}] // Chop      And then use it in this way:               matrix = ParallelTable[lookup[[(a - b) + dim, (c - d) + dim]], range]      where `range` stands for `{a, -lim/step, lim/step, 1}, {b, -lim/step, lim/step, 1}, ...` (hence `matrix` is 4-dimensional) and `dim = 2lim/step + 1` In this way (I normally choose `lim/step` to be an integer) up to values of `lim/step` $\simeq$ 25 my six-year-old MacBook can do it, but for values higher than that it just freezes up. The same entries in `lookup` are read several hundreds if not thousands of times. It seems that there should be a more clever way of doing this. The slow step is the creation of `matrix`, not the creation of `lookup`. Am I missing an obvious (or not so obvious) way of optimising this?