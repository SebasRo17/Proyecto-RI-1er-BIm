Say you have the skeleton of a graph:               fullSkele = PolyhedronData["GreatRhombicosidodecahedron", "SkeletonRules"]      and you've an arbitrary list of some fraction of those nodes, say `extantNodes = {1, 5, 8, 72, 101}`, which you want to turn into the list of all nodes **_connected_** directly to those `extantNodes` (along with the number of `extantNodes` each is connected to). With,               connCheckTool[node1_, node2_] := Count[fullSkele, (node1 -> node2)] + Count[fullSkele,(node2 -> node1)]      The following function achieves this:               DeleteCases[        DeleteCases[         Transpose@{Range[120],             Total /@          Table[connCheckTool[i, extantNodes[[z]]], {i, 1, 120, 1}, {z,            1, Length@extantNodes}]} /. {x_Integer, 0} -> delete, delete], {x_, y_} /;      MemberQ[extantNodes, x] == True];      However, the inner `connCheckTool` is not very efficient, especially with larger graphs. Can anyone think of a way to accomplish this in a better way? I suspect it will involve the `AdjacencyMatrix` of the original, whole graph, as opposed to the list-search mechanism, but can't quite get it...