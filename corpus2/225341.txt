I'd like you to share your insights of how have you successfully turned the direction of rotting legacy code base to modular application design where it's easy and useful to add unit tests? What I'm here trying to find out is little bit different what has been asked before. I want to hear about your own experiences on actual systems. I'm interested in hearing what were the critical points which mattered most and resulted in improvement. I have been working for over five years with a 15 year old C/C++ code where I have seen the change from old C code built as a monolith application to modularized modern C++ application, now utilizing unit testing as a development process (to simplify a lot). As I see it, critical things to reach the success (as I see it), has been   1. highly talented individuals doing great things and prototyping (somewhat outside the official process) unit testing and promoting it to others    2. management willingness to invest in architectural development (not to enable unit testing, but for business reasons)    3. heavy investment in continuous integration system (which is not easy thing to setup for large legacy C++ application)    4. dedicated people to develop and maintain unit testing frameworks, integrations and training of developers    5. and of course the developers themselves who make the progress. So, **what worked** in your case, and **what did not?**