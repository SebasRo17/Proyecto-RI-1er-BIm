I'm trying to use `Compile[]` to improve the performance of an algorithm. The algorithm works on a set of matrices which are not of a similar shape. Unfortunately to use the Compile function, lists passed to it must be of similar shape.   To circumvent this inconvenience, I propose to `Flatten` the set of matrices before passing the resultant flat vector to the compiled function and then reconstructing the vector into the set of matrices before applying the algorithm. Sounds simple but actually implementing it in Mathematica is proving difficult (for me) - help appreciated. The general gist of what I want to do is as follows:               (* Generate a set of irregular shaped matricies *)     mSet = {Table[RandomReal[], {i, 3}, {j, 5}], Table[RandomReal[], {i, 5}, {j, 4}], Table[RandomReal[], {i, 4}, {j, 6}]};          (* Create a mapping that describes the structure of the set of matrices *)     mStruct = FunctionToGenerateVectorThatDescribesTheStructure[mSet]          (* myCompiledFunc uses mStruct to reassemble the flattened mSet before doing it's thing *)     myCompiledFunc = Compile[{{setOfMats, _Real, 1}, {matStructure, _Integer, 1}},         (* Reconstruct the setOfMats *)         ReconstructedSetOfMats = someReconstructionFunction[setOfMats, matStructure];         (* do stuff with the reconstructed matricies *)     ];               (* Use the compiled function *)     (* Flatten the set of matricies so we can pass it and the structure to a compiled function *)     myCompiledFunc[Flatten[mSet], mStruct];