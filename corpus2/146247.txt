General text editors don't change greatly. Syntax highlighting and code collapsing are not big changes really. If an editor is structure or domain aware, this usually comes with a different layouts - treeviews, context-menus, drag-and-drops and so on. So are there good example to add more domain control when editing with caret, text selection and so on? When I think about explaining this with example, what comes to mind:   * Sync control (it's when you delete first i in `<div>...</div>` this automatically changes to `<dv></dv>`   * Read-only control (it's you're at "/" at the fragment above you can't edit, but if you select `<div>` and press Del, both are deleted   * Layered navigation. Probably different modes when the caret bypasses irrelevant layers when you press Left, Right and so on. For example if you're in text navigation for html, then all tags are bypassed   * Copy-paste control. Selected fragment should contain a valid sentence for domain and the place to insert to should also be compatible with it. These are just examples for you to recall the real world editors where you met something similar. Probably there are editors that allows one or several things from this list, but I suppose that partial solutions is no help and even can do harm and cause inconvenience. So the question is more about complex solution intended for overall improving of productivity in the general text editors.