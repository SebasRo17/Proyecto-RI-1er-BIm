The team I work with handles large amounts of consumer survey, and internal company metric data. Primarily the data is stored in a database, and we utilize various platforms and to work with that data, including MS Excel. My peer has developed a suite of Excel/VBA files to take the raw data we get and upload it into a database. Unfortunately, after a code review we identified that the database password was displayed in the VBA code, in plain text, in several places per file. Being in a large enterprise organization we had a number of concerns about those files being available to more than just our team, and the database password being compromised. * * * The problem is, I feel the _solution_ is just as bad, if not worse than the original problem. The plaintext passwords have been removed in the code of all of the VBA files, and an ancillary, helper file was created that requires the user to authenticate through our organizations LDAP system before gaining access to the database password. Being a scripting language (and being Excel), I feel there really aren't adequate precautions in place to secure the users password in the helper file. I feel that now instead of compromising access to a single database, we are potentially compromising access to the logins of anyone who uses these files. To be fair, my peer has implemented a number of security minded techniques for securing the data in helper file. I just feel each one can easily be circumvented:   * locking the VBA code _[google search for vba password recovery]_   * using a custom "masked" password entry box _[the password box may be masked, but it is still passed out of the box as plaintext]_   * not actually storing the user password in the file itself (he passes it on directly to the LDAP call) _[a break point or`stop` statement can easily reveal the contents of what was passed]_   * setting the sheets to `VeryHidden` to prevent direct access _[append`.zip` to filename, and ALL data in ALL worksheets is accessible]_ * * * As I'm not one to complain without a solution in mind, our organization already employs Active Directory/LDAP for authentication into our individual machines. My thought is that checking the logged in user (not a full user/password, just the user) against a white list of users on the database should be a sufficient alternative for authentication. **So My Question...**   Am I being too paranoid about this? Is there another, more appropriate solution? I am pushing back fairly hard on this _fix_ and I just wanted a sanity check before I start to involve others in yet another solution.