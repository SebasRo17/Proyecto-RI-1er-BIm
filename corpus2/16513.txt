My background is procedural programming, so I find this construction quite natural. Is there a way to get rid of the `While`?               gd[n_, k_] := Block[{d = k + 1}, While[0 != Mod[n, --d]]; d]     gd[n_, d_List] :=            Block[{j = Length[d] + 1}, While[0 != Mod[n, d[[--j]]]]; d[[j]]]            k = 4; n = 25;     gd[n, k]     gd[n, Range[1, k]]     d = Join[{1}, Table[Prime[j], {j, 1, PrimePi[k]}]];     gd[n, d]        My trial division requires the greatest divisor $\leq$ the square root. The $n$ mod $1$ is the terminating step. Whatever the final format, I will need to describe it for a math paper. **Edit** The revised functions as recursions:               gd[n_, k_] := If[Mod[n, k] == 0, k, gd[n, k - 1]]     fd[n_, d_List] := If[Mod[n, d[[1]]] == 0, d[[1]], fd[n, Delete[d, 1]]]        **Edit** The second function as it will be described in my paper: $$f(n,D)\text{:=} \begin{array}{ll} \lbrace & \begin{array}{ll} n \bmod d_{1}=0 & d_{1} \\\ n \bmod d_{1}\neq 0 & f(n,\text{Delete}(D,1)) \\\ \end{array} \\\ \end{array} $$