Resharper offered to turn my loop:               foreach (JObject obj in arr)     {         var id = (string)obj["Id"];         var accountId = (double)obj["AccountId"];         var departmentName = (string)obj["DeptName"];         i++;     }      ...into a LINQ statement. I acquiesced, and it produced this:               int i = 1 + (from JObject obj in arr let id = (string) obj["Id"] let accountId = (double) obj["AccountId"] select (string) obj["DeptName"]).Count();      Gee whillikers, jumpin' Jehoshaphat, and Heavens to Murgatroid! This makes me wonder if the robots becoming smarter than me is a good thing; how maintainable is that? Answer: it's not, since I can't understand it; R# may just as well have converted it to machine code, for all I can grok it. I have to admit, though, it's "cool." At what point does the perfect become the enemy of the good in this kind of scenario? ## UPDATE On a second pass through, R# tells me for that line of LINQ, "Local variable "i" is never used" Letting it remove it, the line becomes:               var arr = JsonConvert.DeserializeObject<JArray>(s);      Hmm! Now that's grokkable; the reason I was breaking the elements down into individual vars before was so that I could see what was in them:               MessageBox.Show(string.Format("Object {0} in JSON array: id == {1}, accountId == {2}, deptName == {3}", i, id, accountId, departmentName));      ...but with that messagebox commented out, I guess the above is better after all.