I have been happily using **JQuery** for the last 2 years and have been quite sucessful creating some really cool functionality with it...so I am very comfortable with it. I also beleive the future of the web will continue on the current client-side path. **However...** The next challenge seems to be coming in the form of various controller frameworks: **KnockoutJS**, **BackboneJS**, **SproutCore**, **JavaScriptMVC** (the list goes on). Additonally, there are some great **AMD Loader** tools for use like **RequireJS** or **LabJS** etc. However, jQuery now has `define` and `then` capabilities baked-in. **It's getting harder-and-harder to keep track of it all...**   And now, my task seems to be to evaluate/decide-on a strategic-direction for using some form of either an MVC or MVVM framework client-side...but I have so many questions.   * Where does **JQuery** **fit-in** with the various controller-frameworks mentioned above?   * Is **JQuery** **used alongside** each or do some of them have their own ' **JQuery**-styled version' baked-in?   * Are tools like **RequireJS** **still needed** if you implement one of the various controller-frameworks mentioned above?   * Does the `define` and `then` capabilities baked-into **JQuery** **now supercede** the AMD Loader mentioned above?   * Which one seems most modular? (see notes below) **NOTES:**   One thing I don't want in any future-framework is the requirement of having to take-in vast amounts of functionality that I don't use. Meaning, I would rather use a framework that is truly modular. For example, to use jQuery UI you have to take-in a lot other core libraries that you might not actually use. I will be experimenting with each one, but some REAL feedback would be great. I've seen some 'similar' questions, but none have really answered the above skew. Thanks in advance!