Let's suppose you're the lead of a team of developers that needs to build a big information system such as an ERP or Human Resources software, or whatever system that is composed by multiple business modules. The system must delivered quickly, be scalable and have good evolution and maintenance capabilities. Your team has experience on SOA technologies and also on development of standard MVC/AJAX applications in ASP.NET, Spring, ExtJS, Smartclient or whatever mix of frameworks. You also have a good project manager in your team. Your stakeholder is baffled with so many technologies and changes in industry that he doesn't care about which thing you use, as long as the functional and non-functional requirements are satisfied. Would you use SOA practices (such as governance, service repository, service identification/discovery) and SOA infra-structure elements (such as an ESB, a BPEL engine, WSDL-base web services)? Or would you just use an agile and disciplined development process with your favorite/trustworthy frameworks and provide some RESTful services and other simple integration points with external systems? Or something else?