I am currently in a situation where a lot of people criticized me for making bugs (on my first local try - the first time I run the code for the first locally done test - , not on a committed repo though, management look at me very closely). The majority of my bugs are most often not algorithmic (they are more like mistaking one var for another, a forgotten line, a missed method call). The people criticizing me say I need to be able to make code without bugs. Correct on first try. I have been practicing to improve my coding skills. While practicing with the USA CO set, I saw a message: > YOUR PROGRAM ('xyz') WORKED FIRST TIME! That's fantastic -- and a rare > thing. Please accept these special automated congratulations.   * Doesn't it mean it's rare to have things right right away?   * Does it mean that the people demanding correctness right off the bat are unreasonable?   * Or is it because USA CO participants code the problems in 10-15 mins? so it's normal for them to make mistakes (also they are highschoolers, professional software developers have to be better than them)? For more info: I could finish at least half of the USA CO set is about 30-60. I am not sure if that means slow or bad coding or not. Some difficult ones require about 2 hrs for improved correctness. And now, what is the way to avoid making mistakes now? (Other than practice more and focus on a particular area) EDIT: This is mainly to ask so that I know what a typical good developer would exhibit in coding error, and coding speed. I want to evaluate my performance based on that of a good developer. Sorry about the feeling of resentment or displease that this question might convey. FINAL EDIT: I come to the conclusion that this is simply a way they use to teach me their work style which then makes everything seems reasonable. In addition, a good answer was that I should use random experimentation less when I learn new things. That really makes people feel uncomfortable. The traditional approach of reading the book should be employed more and would often have many additional benefits besides just acquiring new knowledge. Thanks