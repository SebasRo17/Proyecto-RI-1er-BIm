I have been reading "Clean Code" by Robert Martin to hopefully, become a better programmer. While none of it so far has been really ground breaking it has made me think differently about the way I design applications and write code. There is one part of the book that I not only don't agree with, but doesn't make sense to me, specifically in regards to interface naming conventions. Here's the text, taken directly from the book. I have bolded the aspect of this I find confusing and would like clarification on. > I prefer to leave interfaces unadorned. The preceding I, so common in > today’s legacy wads, is a distraction at best and too much information at > worst. **I don’t want my users knowing that I’m handing them an interface**. Perhaps it is because I'm only a student, or maybe because I have never done any professional or team based programming but _I would want the user to know it is an interface._ There's a big difference between implementing an interface and extending a class. So, my question boils down to, **"Why should we hide the fact that some part of the code is expecting an interface?"** **Edit** In response to an answer: > If your type is an interface or a class is your business, not the business > of someone using your code. So you shouldn't leak details of your code in > this thrid party code. Why should I not "leak" the details of whether a given type is an interface or a class to third-party code? Isn't it important to the third-party developer using my code to know whether they will be implementing an interface or extending a class? Are the differences simply not as important as I'm making them out to be in my mind?