I answered “Equating matrices (or higher order tensors) element-wise” with:               {A, B} = RandomInteger[3, {2, 4, 3, 2}];          Block[{Equal},       SetAttributes[Equal, Listable];       A == B     ]      > >     {{{False, False}, {False, True},  {False, False}}, >      {{False, True},  {False, False}, {True, False}}, >      {{False, True},  {False, False}, {False, False}}, >      {{False, False}, {False, False}, {True, False}}} >   But it fails if `A` and `B` are packed arrays:               {A, B} = Developer`ToPackedArray /@ {A, B};          Block[{Equal},       SetAttributes[Equal, Listable];       A == B     ]      > >     False >   One may observe that setting `SetAttributes[Equal, Listable]` outside of `Block` also fails to effect the `Listable` behavior. This also applies to `Unequal` and `SameQ`. This is of interest to me, but my prime concern is that despite the `Block`, `Equal` is being recognized and receiving special treatment. I expected symbols localized with `Block` to behave generically. * * *   * How does this fit into the main evaluation loop?   * How can I get get _true_ "blocking" of a symbol such that it behaves generically within a scoping construct?   * What other symbols besides `Equal`, `Unequal`, and `SameQ` are handled differently?