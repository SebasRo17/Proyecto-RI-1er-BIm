Given the following function `Collatz`:               Collatz[Subscript[m_, d_] /;  EvenQ[m] && EvenQ[d]] := Subscript[m/2, d/2]     Collatz[Subscript[m_, d_] /;  OddQ[m] && EvenQ[d]] := Subscript[3 m + 1, 3 d]     Collatz[Subscript[m_, d_] /;  OddQ[d]] :=          Collatz /@ {Subscript[m, 2 d], Subscript[m + d, 2 d]}      The immediate question that crops up, once `Collatz` is made `Listable` to handle the branching - is to manage the trajectories. This includes identifying and filtering cycles (ie, periodic orbits) from the transition graph. The first 5 iterates given the initial state `Subscript[1,1]` (the chain of natural numbers 1,2,3...) is:               Column@ NestList[Collatz,Subscript[1, 1],5]          (* Out[1]= Subscript[1, 1]     {Subscript[1, 2],Subscript[2, 2]}     {Subscript[4, 6],Subscript[1, 1]}     {Subscript[2, 3],{Subscript[1, 2],Subscript[2, 2]}}     {{Subscript[2, 6],Subscript[5, 6]},{Subscript[4, 6],Subscript[1, 1]}}     {{Subscript[1, 3],Subscript[16, 18]},{Subscript[2, 3],{Subscript[1, 2],Subscript[2, 2]}}} *)      Any suggestions for functional approaches to filter out cycles, in other words, states that are repeated in the output of `NestList` but are not observable at the level of a single call to `Collatz`? In the above simulation, `Subscript[1,1]` should be filtered out after the 2nd iteration. Recall, vertices of the transition graph are the chains `Subscript[n,d]` while the arcs link inputs of `Collatz` with its output chain(s).