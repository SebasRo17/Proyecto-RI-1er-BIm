There is some thinking going on around how to get more output from the current resources we have. The thought is that two teams working different shifts might produce more output. The first shift might work 8am - 5pm, and the second team works 4pm - 1am. There is an hour overlap for status meetings and any communication that needs to happen between the teams. You would obviously need two team leaders, one for each shift. So far, the benefits I can see from this are:   * Better ability to respond to customer issues (time zone affects things less)   * Utilize the same workstations, equipment, and office space (less cost per developer)   * Allows "night owls" to work at night, when they're more productive   * Might be able to complete certain less complex tasks in less days (not time, days)   * Less people in the (open-plan) office, meaning less distractions and higher productivity The drawbacks I see are:   * Developers don't have a space or equipment to call their own (am I the only one that cares about this?)   * Communication between the teams will suffer since they only see each other for an hour each day   * Much more documentation and specification writing will be necessary (you can't rely on on-the-fly decisions from decision-makers because they might not be available)   * Older developers tend to have families and night-time activities, and don't want to be at work Any other thoughts? Has anyone worked in this type of environment? I'd be curious to hear your thoughts on this development model, and your opinion on whether it was a good one or a bad one.