Suppose I have a class (forgive the contrived example and the bad design of it):               class MyProfit     {       public decimal GetNewYorkRevenue();       public decimal GetNewYorkExpenses();       public decimal GetNewYorkProfit();            public decimal GetMiamiRevenue();       public decimal GetMiamiExpenses();       public decimal GetMiamiProfit();            public bool BothCitiesProfitable();          }      (Note the GetxxxRevenue() and GetxxxExpenses() methods have dependencies which are stubbed out) Now I'm unit testing BothCitiesProfitable() which depends on GetNewYorkProfit() and GetMiamiProfit(). Is it okay to stub GetNewYorkProfit() and GetMiamiProfit()? It seems like if I don't then I'm simultaneously testing GetNewYorkProfit() and GetMiamiProfit() along with BothCitiesProfitable(). I'd have to make sure I setup the stubbing for GetxxxRevenue() and GetxxxExpenses() so that the GetxxxProfit() methods return the correct values. So far I've only seen example of stubbing dependencies on external classes not internal methods. And if it is okay, is there a particular pattern I should use to do this? **UPDATE** I'm concerned that we might be missing the core issue and that is probably the fault of my poor example. The fundamental question is: if a method in a class has a dependency on another publicly exposed method in that same class is it okay (or even recommended) to stub that other method out? Maybe I am missing something, but I'm not sure splitting up the class always makes sense. Perhaps another minimally better example would be:               class Person     {      public string FirstName()      public string LastName()      public string FullName()     }      where full name is defined as:               public string FullName()     {       return FirstName() + " " + LastName();     }      Is it okay to stub FirstName() and LastName() when testing FullName()?