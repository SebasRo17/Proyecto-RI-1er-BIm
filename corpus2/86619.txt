I'm working on an ASP.NET MVC app, and I've been getting into the habit of putting what seem like helpful and convenient getters into my model/entity classes. For example:               public class Member     {         public int Id { get; set; }         public string FirstName { get; set; }         public string LastName { get; set; }         public string PhoneNumber { get; set; }              public string FullName         {             get { return FirstName + " " + LastName; }         }              public string FormattedPhoneNumber         {             get { return "(" + PhoneNumber.Substring(0, 3) + ") " + PhoneNumber.Substring(3, 3) + "-" + PhoneNumber.Substring(6); }         }     }      I'm wondering people think about the `FullName` and `FormattedPhoneNumber` getters. They make it very easy to create standardized data formats throughout the app, and they seem to save a lot of repeated code, but it could definitely be argued that data format is something that should be handled in mapping from model to view-model. In fact, I was originally applying these data formats in my service layer where I do my mapping, but it was becoming a burden to constantly have to write formatters then apply them in many different places. E.g., I use "Full Name" in most views, and having to type something like `model.FullName = MappingUtilities.GetFullName(entity.FirstName, entity.LastName);` all over the place seemed a lot less elegant than just typing `model.FullName = entity.FullName` (or, if you use something like AutoMapper, potentially not typing anything at all). So, where do you draw the line when it comes to data formatting. Is it "okay" to do data formatting in your model or is that a "pattern smell"? Note: I definitely do not have any html in my model. I use html helpers for that. I'm strictly talking about formatting or combining data (and especially data that is frequently used).