I have a bunch of Java code that looks something like this.               //Global     boolean something_result;     Monitor something_monitor;          // Some class on worker thread     Intent intent = new Intent("android.something.ENABLE");     Global.something_enabled = false;     Global.something_monitor = new Monitor();     currentActivity.startActivityForResult(intent, 1234);     something_monitor.Wait();     this.enabled = (Global.something_result = OK);          // Some Activity on UI thread     protected void onActivityResult(int code, int result, Intent data) {         if(code == 1234) {             Global.something_result = result;             Global.something_monitor.Signal();         }     }      The idea is that the worker thread can do something in an Activity and wait for the result. It works just fine, but there are bits of code in three different places, it's a lot of code to do not much, some cases are rather more complicated and it gets replicated for each different thing you want to do. It's also error prone because it's potentially subject to threading issues. This is basically what `await` is designed to do for you. Is there a well- known idiom or technique to do this safely and with better encapsulation? Although the context is very much Java on Android, it's much more about a usable idiom for tackling this kind of threading issue that I'm interested in.