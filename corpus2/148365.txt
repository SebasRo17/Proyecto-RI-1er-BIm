I'm designing a language with Pythonesque syntax, including casual creation of variables by assignment. I'm wondering at the moment exactly how to deal with assignment to global variables (and object/class variables, since I'm implementing classes as scopes). In Python itself, by default the attempt will create a local variable instead:               x = 1     def f():         x = 2 # creates a local variable      but you can override this with a `global` declaration:               x = 1     def f():         global x         x = 2 # updates the global variable      I'm going to implement a prefix `.` for referring to variables in outer scopes (somewhat akin to prefix `::` in C++, but will probably jump one scope instead of all), so that could be written as:               x = 1     def f():         .x = 2 # updates the global variable      Would it be better to have just that one way of doing things, or would it be clearer or more convenient to have the mechanism of declaring variables as global the way Python does it?