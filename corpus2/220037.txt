I have a model which has timestamped entities. Now I want to do bucketing - "buckets" of entities which can be reasoned about a single entity. Also I want to be able to access related entities from a bucket and get a bucket of those entities. My main concerns are an implementation of bucketing itself and architecture of code behind this.   1. Should I create a separate model for bucketed data, or should I implement tools to work with the existing model?   2. As I already have a metamodel with all the subclasses and relations I'd like to be able to easily add bucketing on top. I have been thinking about subclassing all the entity classes to create a bucket-entity class which would extend their common bucket functionality with traits.