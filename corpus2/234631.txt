I have 2 applications one is written in C++ and one is written in Java. the applications communicate by passing byte arrays which represent a serialized object. each communication object represent a Command and holds the command id and the associated data. I will use an example to describe my problem. Let's say I have 3 components. one is responsible for the data storage and file system, one is responsible for presenting UI , and one is responsible for security and authorizing users. One way to access a specific component is by having one entry point that will do a switch case on all the possible commands ids. pseudo:                   switch(commandId)     {     case SAVE_FILE:     DATASTORAGE::Save();     break;     case LOAD_FILE:      DATASTORAGE::Load();      break;     case AUTHORIZE:      SECURITY_CONTROLLER::authorize();      break;     case DENY_ACCESS:      SECURITY_CONTROLLER::denyAccess();      ...     }      In this case if I need to change the security controller, I need to change this main entry point. so instead I added an extra field to the communication object, that holds the id of the component that need to process the command. In this case if I want to preform authorize I will do the following:               communicationObject.commandId = AUTHORIZE;     communicationObject.target = SECURITY_CONTROLLER_ID;      And the main will switch case on the possible targets and pass the command id to the specfic component which is responsible for that command.                  switch(target)     {     case SECURITY_CONTROLLER_ID:     SECURITY_CONTROLLER::Process(commandId);     break;     case DATASTORAGE_ID:      DATASTORAGE::Process(commandId);           ...     }      I also don't like this new design since it requires that the sender will know the inner structure of the receiver. on the other hand, if I had direct access to the other application classes (not using byte [] for communication) then the second option will be mapped to something like: SECURITY_CONTROLLER::Authorize(); while the first option will be mapped to something like Main.AUTHORIZE(), which is definitely not the way to go! what is the best approach in this case?