I came across the following article which presents the problem: > A group of people walk into a restaurant and want to spend exactly $15.05 on > appetizers. They also want them as fast as possible. This leaves waiter with > an NP-hard problem to solve, a variation of knapsack problem. The article goes on to create some sort of "genetic algorithm" to solve the problem. My question is, is that really necessary? First of all, no programming solution would be possible if no combination of existing appetizers could equal $15.05. Right? Also, if I were approached with this problem, I would do something like this:               // loop through appetizers       // deduct price from total amount ($15.05) until the difference <= zero       // add to new array of appetizers          // sort the new appetizers array by "time to make the appetizer"     // return new appetizers array      Isn't it that simple? Thanks for your review.