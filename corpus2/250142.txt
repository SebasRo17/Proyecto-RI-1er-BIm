I am developping a desktop application in C#, and have separated different layers in an MVC-ish architecture. As I have switched from GTK# to XWT, only views had to be adjusted, so the seperation of layers was done quite OK. As XWT does not have a layout designer, everything has to be set up in code, which in turn led to an architectural problem: I have one controller for displaying outlets, inlets and connections. This controller sends data to one view (outlined in red). This view in turn has subviews (green and blue), that only communicate with the view in red. ![Layout of view](http://i.stack.imgur.com/sQ2RT.png) On scrolling / collapsing / expanding the treeviews, the green view send events, which are received by the red view, which in turn trigger redrawing in the blue view. Controller does not see the green or blue views, every change in connections / outlets / inlets are only sent to the red view. My problem: As I understand MVC, views should not have much logic. But the green views is a class of 300 lines, the red view's class has 200 lines, which is too many. What architectural problem can arise from this? Am I overlooking a fault in my MVC logic?