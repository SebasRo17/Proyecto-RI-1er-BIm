I am working through the _Programming Paradigms via Mathematica (A First Course)_ and am attempting to answer the following: > Use recursion to count how many times the argument can have its square root > taken before the result is less than 2: "manySqrt[x_Real]" should report how > many times the "Sqrt[]" function has to be applied to "x" before the result > is less than 2. For instance, Sqrt[81.0] is 9.0, Sqrt[9.0] is 3.0 and > Sqrt[3.0] is less than 2 so, "manySqrt[81.0]" is 3. Of course, don't use a > logarithm. Additionally: > First, use of a repetition function ("Map[]", "MapThread[]", "Nest[]", > "NestList[]", "Fold[]", "FoldList[]", "Table[]", "Apply[]", and so on, being > our "adverbs") will generally disqualify a method as purely recursive, for > the repetition is accomplished externally from the nested function calls. > Also, repetition accomplished with a loop structure, such as a "While[]", a > "Do[]", or some other repetition command, is explicitly forbidden. My strategy is to make a list of 'Real' values and then count the 'Real' values in the list. I can get the following to work:               Clear[manySqrt]     manySqrt[x_Real] := If[x >= 2, Flatten[Append[{x}, manySqrt[Sqrt[x]]]]]           manySqrt[81.]          (* {81., 9., 3., Null} *)           Count[%, _Real]          (* 3 *)      However I get an erroneous answer when I try to wrap `Count` as follows:               Clear[manySqrt]     manySqrt[x_Real] :=       If[x >= 2, Count[Flatten[Append[{x}, manySqrt[Sqrt[x]]]], _Real]]           manySqrt[81.]           (* 1 *)      I would appreciate a point in the right direction.