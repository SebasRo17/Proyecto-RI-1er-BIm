Right now we've got about 150k lines of Java broken into two major parts. The first contains an implementation of the algorithms we're hoping to redo in Fortran, and the second has a good chunk of GUI to get them to the point where they can be run. The UI is mostly Swing but new work is JavaFX. The goal is to re-implement (and update) those algorithms in fortran, and tie their current level of integration into the java front-end. The model involves data going both ways accross the bridge between the two languages: configuration data would be supplied from the GUI to the fortran code, and big interesting matrices will be sent back. To complicate things, the configuration data will contain a number of open delegates, typically these delegates take a vector of doubles and spit out a scalar value, but in a number of cases they'll actually perform complex file or network operations which take both time and resources. I've got three thoughts on how we can do it:   1. Create a wide POJO interface into Fortran, use JNI      * The first idea, the simplest, and the fastest to value is to factor out key points in the flow of the fortran code, and have those points issue returns from Fortran through JNI back to java, with result data.      * This is my least preferred option because it will require a good amount of collaboration between the Java front-end and the Fortran back-end whenever we need to change that interface. Further, keeping those critical points in Java might prove impossible as the algorithms in fortran change, and as we want deeper integration with the front-end.   2. Create a callback-based interface into Fortran, use JNI      * This to me is probably the most sophisticated solution since it involves calling familiar object-oriented pub-sub via nasty procedure pointers in fortran. The idea would be fairly typical from the front-end side. Create an interface with a number of "onInterestingDomainEvent" message handles with as primitive a set of arguments as possible.      * We've done a little bit of exploration here and haven't gotten the syntax we need: one of our compilers is consistently complaining about something.   3. Create two processes before app start, read/write from pipes in Java & Fortran     * This seems to me to be a good solution that might be a bit heavy handed. I'm a little worried about the performance of this (especially if I cant get at proper named pipes from Java & Fortran).      * I'm worried about a second process for, well, everything that a second process entails, including synchronization, error handling, and security.      * There's a lot of atypical code that has to be written to make this solution work, but I am confident that it can work and that it gives us all of our requirements, aside from the performance worry.  **Where I need help:** I need help in understanding how to evaluate these three approaches or in understanding what I should be looking at instead. My primary concern is performance or throughput between the two applications as I'm trying to minimize bottlenecks. And I know I need to keep the principles of decoupling in mind as well. * * * To address some of the easier solutions / concerns before jumping to JNI:   * We have already optimized the algorithm implementations while using a performance analyzer. They still aren't fast enough, and we have seen similar algorithms written in Fortran perform much faster.   * We don't control the hardware that our clients will deploy our solution on. So we can't just throw bigger and bigger hardware at this problem.   * The research team that develops these algorithms has a lot of Fortran experience and they will be responsible for maintaining this port.