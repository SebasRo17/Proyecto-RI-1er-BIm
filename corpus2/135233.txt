I have been reading the advice on this question about how an exception should be dealt with as close to where it is raised as possible. My dilemma on the best practice is whether one should use a try/catch/finally to return an enum _(or an int that represents a value, 0 for error, 1 for ok, 2 for warning etc, depending on the case)_ so that an answer is always in order, or should one let the exception go through so that the calling part would deal with it? From what I can gather, this might be different depending on the case, so the original advice seems odd. For example, on a web service, you would always want to return a state of course, so any exception has to be dealt with on the spot, but lets say inside a function that posts/gets some data via http, you would want the exception (for example in case of 404) to just pass through to the one that fired it. If you don't, you would have to create some way to inform the calling part of the quality of the outcome (error:404), as well as the outcome itself. Though it IS possible to try-catch the 404 exception inside the helper function that gets/posts the data, should you? Is it only I that use a smallint to denote states in the program (and document them appropriately of course), and then use this info for sanity validation purposes (everything ok/error handling) outside? **Update:** I was expecting a fatal/non-fatal exception for the main classification, but I didn't want to include this so as not to prejudice the answers. Let me clarify what the question is about: Handling the exceptions thrown, not throwing exceptions. What the desired effect is: Detect an error, and try to recover from it. If recovery isn't possible, provide the most meaningful feedback. Again, with the http get/post example, the question is, should you provide a new object that describes what happened to the original caller? If this helper was in a library you are using would you expect it to provide you with a status code for the operation, or would you include it in a try-catch block? If you are _designing_ it, would you provide a status code or throw an exception and let the upper level translate it to a status code/message instead? Synopsis: **How do you chose if a piece of code instead of producing an exception, returns a status code along with any results it may yield?**