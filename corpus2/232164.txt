Is this a valid DB design? A user can create an organization, link as many offices to it, have an inventories that host items linked to organization or office, have clients for his business etc.               | users |   |taxonomy|   |settings|     |-------|   |--------|   |--------|     | id    |   | id     |   | tax_id |     | login |   | user_id|   | title  |     | etc.. |   | parent |   | value  |                 | type   |   | name   |                              | type   |      I have 3 tables:   1. **Users** contain all people, be they "users" or ,"clients", since the 2 types are people, _even though client does not have access to the app_ \- yet he is a human and he use exact same fields as app user (name,dob,address,phone number,ss number etc.) and the fields client doesn't use (login,password) should not hurt anyway.   2. **Taxonomy** is a bigger deal, since basically everything a user can create inside the website is in defined in this table. Type is limited to values of "organization, office, service, inventory, blog".   3. **Settings** is where the extended information about the above definitions are kept in. For example "office taxonomy has 3 other rows in settings title: address, opening_hour, closing_hour, etc." so whenever I fetch an office I pivot it around its settings to construct office complete table - "pivot in code not sql" So basically taxonomy and settings are the DEFINITION of the environment that the user creates for himself, there are a lot more tables that contain elements like table "blog_posts" that contains posts for the taxonomy Post, or "encounters" for the encounters of user/client inside the taxonomy "office". etc... The reason i came up with such schema was   1. Laziness (why create a table for each taxonomy when i can group them all?)    2. I'm not sure about the exact fields for most of my inventory, and I like to keep my options open. This DB is working fine for me _for now_. Is this a valid way to design DB? Is there any pattern that acts like this one, or is there something I didnt account for and will haunt me in the very near future if I continue using this schema?