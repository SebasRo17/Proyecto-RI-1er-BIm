**Intro** I was watching "UnRisk-Q Instrument Builder" talk (https://www.youtube.com/watch?v=Xx3goIBpOdE) and those guys use builder pattern to build complex objects like this:               bondBuilder = BondBuilder[]     bond = bondBuilder @ Nominale[1.] @ StartDate[{2010,10,10}] @ Build[]      and later `bond` is immutable and you can invoke methods on it: `bond @ SomeMethod[]` The reason it works is them using JLink and `@` behaves weirdly there and associates to the left. **Question/Problem** How to implement a builder pattern that:   * looks good & concise in notebook and .m files? You could use custom operator instead of `@` or some `~infix~` notation, but that looks heavy.   * allows partial builder reuse like:              octBuilder = BondBuilder[] @ StartData[{2010, 10, 10}]     bond1 = octBuilder @ Nominale[1.] @ Build[]     bond2 = octBuilder @ Nominale[2.] @ Build[]        * has enough flexibility to add error checking to `Build[]` I obviously do not want to mess a lot with `@` and try to redefine its associativity. I do not want to copy the look but the idea.