**Assumptions:**   * Minimalist ASP.NET MVC 3 application for sending emails where the view represents the contents of an email.   * Over 500+ email types. I would NOT like to have 500+ actions in my controller corresponding to each email type.   * Email types are stored in an enum named MailType, so we could have:      * MailType.ThankYouForYourPurchase, MailType.OrderShipped, etc.   * The view name is the same as the mailType name:      * MailType.OrderShipped would have a corresponding view: OrderShipped.cshtml   * Some views would directly use an Entity while others would use a ViewModel. So, given that I have 500+ email types, what is the best way/pattern to organize my application? Here is what I was thinking, **Controller:**                   public class MailController : Controller         {             public ActionResult ViewEmail(MailType mailType, int customerId)             {                 string viewName = mailType.ToString();                      var model = _mailRepository.GetViewModel(mailType, customerId);                      return View(viewName, model);             }                  public ActionResult SendEmail(MailType mailType, int customerId)             {                 ...             }         }      **MailRepository Class:**                   public class MailRepository         {             private readonly CustomerRepository _customerRepository;             private readonly OrderRepository _orderRepository;                  //pretend we're using dependency injection             public MailRepository()             {                 _customerRepository = new CustomerRepository();                 _orderRepository = new OrderRepository();             }                  public object GetViewModel(MailType mailType, int customerId)             {                 switch (mailType)                 {                     case MailType.OrderShipped:                         return OrderShipped(customerId);                     case MailType.ThankYouForYourPurchase:                         return ThankYouForYourPurchase(customerId);                 }                      return _customerRepository.Get(customerId);             }                  public Order OrderShipped(int customerId)             {                 //Possibly 30 lines to build up the model...                 return _orderRepository.GetByCustomerId(customerId);             }                  public Customer ThankYouForYourPurchase(int customerId)             {                 return _customerRepository.Get(customerId);             }         }      But then this would lead to my MailRepository class becoming extremely large unless I somehow broke it up...