Think about persistent storage that can preserve pointers: among other things there is no need to serialize/deserialize data. For example, you typically build a tree structure and then serialize it into XML so that it can be stored permanently on disk. Now there is no need for that: the structure in memory can be left there as is, possibly given a name, so that it can be used by other programs. Thus the concepts of loading/saving may be transformed into something else, if not eliminated altogether. File systems can become something entirely different: e.g. just memory with symbolic labels. Serialization will still be used in network communication of course. Besides, considering process isolation, memory protection etc, the scenario above may be a bit more complicated than that. One thing is clear though: large persistent addressable storage can at least save a lot of time, and at most cause paradigm shifts in programming. It would be interesting to hear your insights on this.