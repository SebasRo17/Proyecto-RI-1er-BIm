Inspired by this question from @sjdh and by my recurrent use of columns operations in database sets, I was looking for one way to make columns operations more symetric, so I can handle with matrix and lists in a more clean way when working with this kind of data. For instance, I think it's not very practical to append a list data to a matrix using `Join[matA, {colA} // Transpose, 2]` or prepend using `Prepend[Transpose@matA, colA] // Transpose`. It's very clumsy, but we get used to it (I realized that teaching to a friend). I created this function called `colAppend`, that I would like to share here, and ask for performance tuning, tips on code organization and maybe another combinations of row operations that I have missed. Here are our test matrix and lists:               matA={{mA1,mA2},{mA3,mA4},{mA5,mA6}};     matB={{mB1,mB2},{mB3,mB4},{mB5,mB6}};     colA={cA1,cA2,cA3};     colB={cB1,cB2,cB3};      Now there are the function `colAppend` definitions. I separated it in 3 blocks: **1- Basic Join Operations**               colAppend[mat1_,mat2_]/;(Length@Dimensions@mat1>1&&Length@Dimensions@mat2>1):=         Join[mat1,mat2,2]          colAppend[mat1_,col1_,pos_:-1]/;(Length@Dimensions@mat1>1&&Length@Dimensions@col1==1):=         Insert[mat1//Transpose, col1, pos]//Transpose          colAppend[col1_,col2_]/;(Length@Dimensions@col1==1&&Length@Dimensions@col2==1):=         Transpose[{col1,col2}]          colAppend[col1_,mat1_,pos_:1]/;(Length@Dimensions@col1==1&&Length@Dimensions@mat1>1):=         Insert[mat1//Transpose, col1, pos]//Transpose          colAppend[colA,matA]//MatrixForm     colAppend[colA,colB]//MatrixForm     colAppend[matA,matB]//MatrixForm     colAppend[matA,colA]//MatrixForm      ![enter image description here](http://i.stack.imgur.com/ly1Vb.png) **2- Deleting Columns** Maybe it could be another function `colDelete`, so we could remove the `Null` parameter.               colAppend[mat1_,Null,pos_:-1]/;(Length@Dimensions@mat1>1):=     Module[{temp=mat1},         temp[[All,pos]]=Sequence[];         temp     ]          colAppend[Null,mat1_,pos_:1]/;(Length@Dimensions@mat1>1):=     Module[{temp=mat1},         temp[[All,pos]]=Sequence[];         temp     ]          colAppend[matA,Null]//MatrixForm     colAppend[Null,matA]//MatrixForm      ![enter image description here](http://i.stack.imgur.com/1ugcZ.png) **3- Join Multiple Elements** Combine all the above function (with except Null one)               colAppend::badargs = "Incompatible Dimensions";     colAppend[args__]:=Module[{list=List[args]},         If[\[Not]Equal@@(First@Dimensions@#&/@list),Return[Message[colAppend::badargs]]];         Fold[colAppend,First@list,Rest@list]     ]          MatrixForm@colAppend[matA,colA,matB,colB]      ![enter image description here](http://i.stack.imgur.com/UDeMc.png) What another functionality I'm missing? **What is the best way to create such function?** **Update 1** As VLC has posted in the comments. For part 3, this answer from @Mr.Wizard is the best option, not just in simplicity, but in performance too!               columnAttach2[ak__List]:=Replace[Unevaluated@Join[ak,2],v_?VectorQ:>{v}\[Transpose],1]