I've been trying to understand C# delegates using Pro C# 5. In short, the author describes the motivation for delegates as a structured way of dealing with function pointers and callbacks or two-way communication between objects. The part I find confusing is the syntax/implementation for this:   * On the one hand, an object of delegate type is seen as the _handler_ or the one responsible for invoking some method or list of methods. To this end, it has methods such as `Invoke()` etc.    * On the other hand, the delegate type is used as a 'wrapper' with which to pass around methods. For example, it seems strange to me that a call to a delegate's `GetInvocationList()` returns an array of delegates. Shouldn't there be something else with which to wrap methods? I expected there would be some other construct/type, say, `MethodContainer` which wraps methods. Then the syntax for adding methods to a delegate would be               class MyClass{ void Method(string s){} }          MyClass c = new MyClass();     MethodContainer container = new MethodContainer(c.Method);          delegate void MyDelegate(string s);     MyDelegate d = new MyDelegate();          d.Add(container);          d.GetInvocationList(); // returns array of MethodContainer