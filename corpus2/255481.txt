I'm building an e-Commerce system in my spare time to better lean the ins and outs of ASP.net MVC, WebAPI, and Entity Framework. One of the things I'm struggling with is how to model the relations for the content pieces (categories, products, and webpages).   1. Categories can have 1 or no parent category.   2. Products can have 0 or more categories, but 1 may be specified as primary (for default breadcrumbs).   3. Webpages can have 0 or more categories, but 1 may be specified as primary (for default breadcrumbs).   4. I want to be able to specify the default sort order for each within the parent category. This tells me I'm going to need a many-to-many table with a sort column.   5. I want to be able to efficiently count and/or display products further down the category tree. For example: Using categories **Apple => MacBook** and **Apple => iMac** , I want to be able to display products from MacBook and iMac on the Apple category. Since categories, products, and webpages all share some similar properties like Name, Page Title, Meta Description, Main Content, and Published, I created an abstract base class called CatalogPage that they all inherit from. Since category, product, and webpage all have an optional default/parent category I also included nullable **DefaultCategory/DefaultCategoryId** properties on the CatalogPage class. I assume that if I want #5 to be efficient I'm going to have to store some redundant data. For example, store a Macbook Air 11" as a child of both Apple and Macbook. What are some good ways to model the rest of the relationships?