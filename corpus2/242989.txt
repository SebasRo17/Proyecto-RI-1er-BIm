I have some minor messaging connection to server from website via json requests. I have single endpoint which distributes requests according to identification data. I am using asynchronous server and handle data when it comes. Now I am thinking about extending requests with some kind of session. I tried using REST/JSON approach, passing single id in json. For example I register on page, get some kind token id as response and used that token with each post request. Post request has three simple parts: type, data, token_id. My problem is I am not sure how to cache token on browser side. I am using Tornado as webserver and saving token via cookies like this(http://technobeans.wordpress.com/2012/08/07/tornado-cookies/). Problem is I am not sure how long set expire time and how I should force to renew cookie. For example, should I when cookie expires (I really do not know proper way to detect it) to launch event on client side to register. Also I tried to drop requests and use socket like interfaces (sock-js) to transfer data. There I find that handling was way more easier: login open socket post data, close. Where I could implement it, I was happy with it. However I feel that having open connection is not solution to all problems, specifically to rare irregular data transfer events. I am searching for ideas how to have post requests properly identified and how to handle irregular json connections. To sum up:   1. **What is the best way to define post requests session?** Get cookie when registered and use token as long as session runs with each request? Should I implement timeout for token? Is there alternative methods? Can I cache tokens to same origin requests? What could I use on client side (Web browser)?   2. **How about safety?** What techniques I should use to throw away requests with malformed data, to big data, without choking server down? **Should I worry?**