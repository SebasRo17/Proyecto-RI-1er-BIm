I have a self-defined function which is fairly complicated and gives the analytical form. The result contains two independent variables. I use `Animate` to plot the function by enumerating one parameter.               myfun[x_, y_] := ... (* here are some complicate calculation *)     Animate[Plot[myfun[x, y], {x, 0, 2.5}], {y, 0, 5.0, 0.5}]      Each plot in the `Animate` will call myfun each time it needs a value from it, that's why the animation runs slowly. I don't know how to speed up code. But now, I run myfun once, copy the resulting expression and paste it to make a new function               myfun[x_, y_] := ... (* here are some complicate calculation *)     (* here it returns some expression and I copy and paste it into myfun2 *)      myfun2[x1_, y1_] := EXPRESSION_FROM_PASTE /. {x -> x1, y -> y1}     Animate[Plot[myfun2[x, y], {x, 0, 2.5}], {y, 0, 5.0, 0.5}]      It runs pretty fast now. But if I change some parameter or math in myfun, I need to copy and paste the function again to make myfun2. Is that anyway to achieve that programatically? Thanks.