Let's say that a job posting asks for experience in technology X. You have no experience in X but you do have experience in technology Y, which you're convinced is similar enough that the learning curve to be productive in X would be extremely short. How do you get hiring people, especially HR people without much technical background, to look past your lack of experience in X and take you seriously? Examples:   * You're applying for a Java job and have never used Java except for some very small toy projects. However, you do have substantial experience in C#, which is clearly derivative of Java and promotes the same style of programming (class-based OO, static typing, autoboxing, etc.)   * You're applying for a C job. You've never worked on anything written in straight C, but you have done substantial work in C++ and used the C-like subset (raw pointers, malloc/free memory management, void* pointers, etc.) for some of the low-level parts of the project.   * You're applying for a C++ job and you've done extensive work in D. D is intended to be a reengineering of C++ and includes the key concepts like RAII, templates, the ability to manage memory manually and do low-level work, etc. Furthermore, you're aware of exactly where the differences lie from extensive discussions on language design in the D community. Edit: I guess my more fundamental question that inspired this post is, "Why do most job ads place so much emphasis on specific technologies (which aren't hard to learn on the fly if you grasp the underlying concepts) instead of fundamental language-agnostic skills?" If I were running a language X shop, I'd much rather hire a top notch programmer regardless of specific technologies and assume he'd pick up X pretty fast than hire an expert in X who had mediocre fundamental, language-agnostic programming skills.