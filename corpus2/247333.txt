I've recently started studying Domain Driven Design and so far it looks like it will help tremendously with my team's current project. I'm running into a bit of a problem though actually determining _what_ the domains are in our project. After my inital pass, I ended up with something like this: ![Domains D & E overlapping A,B,C](http://i.stack.imgur.com/aJJYe.png) I have three domains: A, B, and C for different areas of the business. However, for each of those I need to track current data as well as create plans for the future. This led me to add a **Planning** domain, but I don't see a clear way to separate Planning from the other domains. Either A, B, and C need to have detailed knowledge of Planning or vice versa. Example: Let's say Domain A is "inventory". The implementation has messages for things like ItemsAdded and ItemsRemoved and it tracks quantities of various products. Then if I want to allow for planning of future quantities of items I need to add classes to the model which will allow me to associate future product info with various time windows. This kind of feels like a new domain except the same planning and time window logic also applies to Domain B and C. Essentialy, I have a cross-cutting domain. I feel like I must be looking at this the wrong way. Maybe I actually have 6 domains and a library used by 3 of them?