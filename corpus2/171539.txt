I'm working on an application with many constants. At the last code review it came up that the constants are too scattered and should all be organized into a single "master" constants file. The disagreement is about how to organize them. The majority feel that using the constant name should be good enough, but this will lead to code that looks like this:               public static final String CREDITCARD_ACTION_SUBMITDATA = "6767";     public static final String CREDITCARD_UIFIELDID_CARDHOLDER_NAME = "3959854";     public static final String CREDITCARD_UIFIELDID_EXPIRY_MONTH = "3524";     public static final String CREDITCARD_UIFIELDID_ACCOUNT_ID = "3524";     ...     public static final String BANKPAYMENT_UIFIELDID_ACCOUNT_ID = "9987";      I find this type of naming convention to be cumbersome. I thought it might be easier to use public nested class, and have something like this:               public class IntegrationSystemConstants     {         public class CreditCard         {             public static final String UI_EXPIRY_MONTH = "3524";             public static final String UI_ACCOUNT_ID = "3524";             ...         }         public class BankAccount         {             public static final String UI_ACCOUNT_ID = "9987";             ...         }     }      This idea wasn't well received because it was "too complicated" (I didn't get much detail as to _why_ this might be too complicated). I think this creates a better division between groups of related constants and the auto-complete makes it easier to find these as well. I've never seen this done though, so I'm wondering if this is an accepted practice or if there's better reasons that it shouldn't be done.