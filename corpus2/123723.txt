I'm developing a GUI application, heavily working with graphics - you can think about it as a vector editor, for the sake of the example. It is very tempting to make all data structures immutable - so I could get undo/redo, copy/paste, and many other things almost without effort. Fot the sake of simplicity, I will use the following example - application is used to edit polygonal shapes, so I have "Polygon" object, which is simply list of immutable points:               Scene -> Polygon -> Point      And so I have only one mutable variable in my program - the one which holds current Scene object. The problem which I have starts when I try to implement point dragging - in mutable version, I simply grab a `Point` object and start modifying its coordinates. In immutable version - I am stuck. I could have stored indices of `Polygon` in current `Scene`, index of dragged point in `Polygon`, and replace it every time. But this approach does not scale - when composition levels go to 5 and further, boilerplate would become unbearable. I'm sure this problem can be solved - after all, there is Haskell with completely immutable structures and IO monad. But I just cannot find how. Can you give me a hint?