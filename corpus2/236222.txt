Let's pretend I work on a project tracking application. The application is a database backed, server hosted, web application. In this application there are **Projects** which have many **Activities** which have many **Tasks**. A **Task** has two date fields an _originalDueDate_ and a _projectedDueDate_. In addition, there are dynamic fields on the **Activities** and the **Projects** which indicate whether the **Activity** or **Project** is behind schedule based on the projected due dates of the child tasks and various other variables such as remaining buffer time, etc. There are a number of things that can cause the _projectedDueDate_ to change. For example, an employee working on the project may (via a server request) enter in a shipping delay. Alternatively, a site may (via a server request) enter in an unexpected closure. When any of these things occur I need to not only update the _projectedDueDate_ of the **Task** but also trigger the corresponding **Project** and **Activity** to update as well. **_What is the best way to do this?_** I've thought of the **_observer_** pattern but I don't keep a single copy of all these objects in memory. When a request comes in, I query the **Task** in from the database, at that point there is no associated **Activity** in memory that would be a listener. I could remove the ability to query for **Tasks** and force the application to query first by **Project** , then by **Activity** (in context of **Project** ), then by task (in context of **Activity** ) adding the observer relationships at each step but I'm not sure if that is the best way. I could setup a **_database event listening_** system so when a **Task** modified event is dispatched I have a handler which queries for the **Activity** at that point. I could simply setup a **_two-way relationship_** between **Task** and **Activity** so that the **Task** knows about the parent **Activity** and when the **Task** updates his state the **Task** grabs his parent and updates state. Right now I'm stuck considering all the options and am wondering if any single approach (doesn't have to be a listed approach) is jumping out at others as the best approach.