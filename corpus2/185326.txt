I need to play devils advocate on this question a bit because I cannot defend it well because of lack of experience. Here is the deal, I get _conceptually_ the differences between unit testing and integration testing. When specifically focusing in on persistence methods and the repository, a unit test would use a mock possibly via a framework like Moq to assert that say an order searched for was returned as expected. Let's say I have built the following unit test:               [TestMethod]     public void GetOrderByIDTest()     {        //Uses Moq for dependency for getting order to make sure         //ID I set up in 'Arrange' is same one returned to test in 'Assertion'     }      So if I set up `OrderIdExpected = 5` and my mock object returns `5` as the ID my test will pass. I get it. I _unit tested_ the code to make sure what my code preforms returns the expected object and ID and not something else. The argument I will get is this: > "Why not just skip the unit tests and do integration tests? It's testing the > database stored procedure **and** your code together that's important. It > seems like too much extra work to have unit tests and integration tests when > ultimately I want to know if the database calls and the code work. I know > the tests take longer, but they have to be run and tested regardless so it > seems pointless to me to have both. Just test against what matters." I could defend it with a text book definition like: "Well that's an _integration test_ and we need to test the code separately as a unit test and, yada, yada, yada..." This is a case where a purist explanation of practices vs. reality is loosing out. I run into this sometimes and if I can't defend the reasoning behind unit testing code that ultimately relies on external dependencies, than I can't make a case for it. Any help on this question is greatly appreciated, thanks!