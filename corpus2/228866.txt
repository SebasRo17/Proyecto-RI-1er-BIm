I have some code:               /// <summary>     /// Represents Record Locator class     /// </summary>     public class RecordLocator : IRecordLocator     {         /// <summary>         /// The Record Locator string, for example: ZT8C4O         /// </summary>         public string Name { get; private set; }              /// <summary>         /// Initializes a new instance of the <see cref="RecordLocator"/> class.         /// </summary>         /// <param name="recordLocator">The record locator string.</param>         private RecordLocator(string recordLocator)         {             Name = recordLocator;         }              /// <summary>         /// Parses the specified record locator.         /// </summary>         /// <param name="recordLocator">The record locator string.</param>         /// <returns></returns>         public static IRecordLocator Parse(string recordLocator)         {             if (string.IsNullOrEmpty(recordLocator))             throw new ArgumentNullException("recordLocator");                  if (recordLocator.Length != 6)             throw new ArgumentException("recordLocator.Length != 6");                  return new RecordLocator(recordLocator);         }     }          /// <summary>     /// Represents Record Locator interface     /// </summary>     public interface IRecordLocator : IHideObjectMembers     {         /// <summary>         /// The Record Locator string, for example: ZT8C4O         /// </summary>         string Name { get; }     }        1. What is this design-pattern called? When you have a class, which instantiating itself (and probably have a private constructor)? Another example of this is `System.DateTime` class of .NET framework.   2. Is it OK to do it like that?