I'm writing a C++ wrapper for my C library (my C++ skills are a bit rusty) and I'm wondering what's preferable: allowing user to construct objects themselves or give them objects via getters? What would be idiomatic C++ equivalent of that C function?               result* process_foo(library_handle*, foo*);      a constructor like this:               Result *res = new Result(library_handle, foo);      or a getter like this? (that basically wraps the above code):               Result *res = library->get_result(foo);      Does the answer change if creation of the result could fail? Getter could return `NULL`, but what should constructor version do on failure? AFAIK some people don't like exceptions. An extra method such as `init()` or `is_valid()` doesn't seem elegant. OTOH the `Result` object sticks to RAII, it's tiny with inline methods, so it might be good candidate for stack allocation.