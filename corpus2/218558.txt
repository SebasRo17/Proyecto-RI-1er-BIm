Like (I suspect) a lot of JS devs, I tend to start with intuition first and then come to sound principles/practice with experience informing study of the comp. sci stuff I never really had any form training in that I like to look into in my spare time. Note: I tagged JS by way of identifying where I'm coming but I'm open to answers from any language where you might have the same dilemma. So, as I've come to understand more purely functional-oriented languages I've started to realize that I've occasionally been following that approach by accident. Essentially I'll have some data that doesn't change and a function or set of functions using those "constants" (yeah, yeah...) in conjunction with variable params to hand off a return value that won't necessarily be different on method firings. I tend to reach for whatever tool strikes me as likely to simplify the problem or reduce work the most but is there maybe something a little less ambiguous in terms of what are more formally considered the advantages of one vs. the other to come up with some heuristics to consider? So far the split is typically more with OOP at higher-level architectural concerns with occasional functional typically coming into play within or between objects.