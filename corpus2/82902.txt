Is functional programming just _different_ , or is it actually really _tougher_? Say someone who have never learned programming at all before, and is taught functional programming. vs someone who have never learned programming at all before, and is taught imperative programming. which will he find tougher? or the same? My question: say the problem now is to camel-case an input, such that `qwe_asd_zxc_rty_fgh_vbn` becomes `qweAsdZxcRtyFghVbn` The procedural way is:   1. split it along the `_`   2. loop through the array skipping the first item   3. for each entry we capitalise the first letter   4. join the results together The functional way is:   1. if cannot find `_` return `input`   2. cut the `input` along the first `_` (such that we get `qwe` and `asd_zxc_rty_gfh_cvb`)   3. capitalise the first letter of `head` and concat that with `f(tail)` Ok if you have a _functional-background_ AND have substantial experience in procedural-programming, I would like to ask: will it take you longer to figure out the procedural way or will it take longer for you to figure out the functional way? If you have a _procedural-background_ but have many years of experience with functional-programming, I would like to ask the same question: will it take you longer to figure out the procedural way or will it take longer for you to figure out the functional way?