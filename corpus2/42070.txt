I am trying to generate list of coordinates that forms a subset in the integer lattice $\mathbb{Z}^n$. This set is given by set of inequalities. Right now, I am using the following:               n=2;     k=100;     baseLattice = Tuples[Range[0, k], {n}];     coords = DeleteCases[DeleteCases[baseGrid,          x_ /; x[[2]] > (1.9*x[[1]] + 3)],         x_ /; x[[2]] < (1.9*x[[1]] - 4)];      This approach has the obvious disadvantage that for larger n or k the Tuples command generates all points in the first quadrant. I realize could also build my set in some loop, however I feel like there could be a straightforward solution which I have not yet figured out. For illustration, I am trying to get a set of coordinates similar to the set of red dots in this picture: ![Example of set of points given by two lines of same slope](http://i.stack.imgur.com/zAKYm.jpg) `Edit:`   I did not post my original problem in full in the OP. For the slopes of the lines, I am using numerical values of algebraic numbers. I used the following code to compare performance of suggested brute-force solutions: Solve by Daniel Lichtblau:               f = #^2 - # - 1 &;     q = AlgebraicNumber[Root[f, 2], {0, 1}];     q = N[q];     coords1 = {x, y} /.        Solve[{0 <= x <= y - 1, 0 <= y <= 100, q*x - q^2 <= y <= q* x + 2*q}, {x, y}, Integers]      And vectorization by Szabolcz:               lattice = Tuples[Range[0, 100], 2];     {x, y} = Transpose[lattice];     coords2 =         Pick[lattice, UnitStep[q*x + 2*q - y] UnitStep[y - (q*x - 2 q^2)], 1];      I run the code with k = 100 and n = 2. For q = N[algebraic number]:   Solve ... 50.11s   Vectorization ... 0.02s   My original way ... 0.17s. Turns out this is somewhat unfair to solve, as when I take q = algebraic number itself (I guess not surprisingly):   Solve ... 50.28s   Vectorization ... 81.43s   My original way ... 78.91s.