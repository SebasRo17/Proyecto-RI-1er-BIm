For past 2 years, I have been writing a tool in C++, meant for C++ as my hobby project. Slowly, I realized that it can be made commercialized, as it can compete with other memory leak detectors. This tool finds:   * all kind of memory leaks   * null pointer exception   * corrupt heap   * static/dynamic array out of range   * multiple or invalid deallocations   * It also gives real time code flow, i.e. what functions are called (without any debug statements) I have written a parser (which also parses the complex syntax of template also) which replaces all the pointers in the code with my custom made smart pointers and new/delete with my wrappers. With making some primary tests, this tool seems to work fine. I still continue to work on it to complete the remaining 20%. However, I am just wondering whether will it be a good idea to work on it ? Now a days, so many programming techniques have been developed to overcome such errors. People simply don't use raw pointers (while most of the errors occur due to pointers). This kind of thoughts, sort of demoralize me. Would highly appreciate some expert opinions.