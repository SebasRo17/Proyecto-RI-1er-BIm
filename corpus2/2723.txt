This question is very similar in gist to equation solving with `GroebnerBasis`, but hopefully when I say that I make the system a little larger I mean **little**. I have uploaded the code here for those who are trusting enough to download it. There is a lot of code, and my question of interest is related to the particular system of equations in my uploaded notebook, but I will try to give the general gist here. I have a system of 20 polynomials and 13 variables. If I make one of these variables 0, the `GroebnerBasis` computes instantly. If I do not, the `GroebnerBasis` process maxes out 8GB of RAM after a day or two. I'm interested in knowing what characteristic of the more general set of polynomials is causing the `GroebnerBasis` process to take so long. As you will see if you download the notebook, the system of equations is generated through an iterative process, and I can generate as many polynomials as desired (although they do get more and more complicated). If you have downloaded the notebook, you can generate more polynomials by adjusting the `iterate[22222]` command to, say, `iterate[222222]`. A solution is guaranteed, due to Hilbert's Nullstellensatz (and more specifically in this case because I am able to explicitly show such a solution when I set a particular variable equal to zero). The question I initially referenced uses a few commands (`CoefficientArrays` in particular), and I am curious if the output of those commands would be at all useful in my problem, though I don't know what to look for (and that is the more general gist of my question). I guess what I'm hoping is that someone can tell me, "Ah, yes, when that variable is not zero your system is .... < insert property here >, so a Gr√∂bner basis will be very difficult to compute". * * * By request, I added my code inline here:               deg = 3;     d = Table[        x^i*y^j*z^k, {i, 0, deg}, {j, 0, deg - i}, {k, 0, deg - i - j}];     d = Flatten[d];     v = Table[a[i], {i, 1, Length[d]}];     f = d.v;     cf = CoefficientList[f, {x, y, z}];     Evaluate[cf[[1]][[1]][[1]]] = 0;     Evaluate[cf[[2]][[1]][[1]]] = 0;     Evaluate[cf[[1]][[2]][[1]]] = 0;     Evaluate[cf[[1]][[1]][[2]]] = 1;     Evaluate[cf[[2]][[2]][[1]]] = 0;          cf[[3]][[1]][[1]]     cf[[1]][[3]][[1]]          (* a[17] and a[8] are dependant on a principal curvature assumption. *)          fx = D[f, x];     fy = D[f, y];     fz = D[f, z];     Nf = fx^2 + fy^2 + fz^2;     Lf = D[fx, x] + D[fy, y] + D[fz, z];     NNfNf = fx*D[Nf, x] + fy*D[Nf, y] + fz*D[Nf, z];     g = 2*Nf*Lf - NNfNf - 4*(Nf)^(3/2);     G[0] = g;     Q[0] = Block[{x = 0, y = 0, z = 0}, Simplify[G[0]]]          (* We want Q[0] to be zero, so at the very least we can make the \     following substitution: *)     a[17] = 1 - a[8];          cross1[h_] := D[h, y]*fz - D[h, z]*fy     cross2[h_] := D[h, z]*fx - D[h, x]*fz          nextIndex[index_] := (in = index;       rem = Mod[in, 10];       If[rem != 2, Return[in + 1],        retindex = nextIndex[(in - rem)/10];        Return[retindex*10 + Mod[retindex, 10]]        ];       )          stats[letter_, index_] :=        Print[letter <> "[" <>          ToString[          NumberForm[index, DigitBlock -> 3, NumberSeparator -> " "]] <>          "] (" <> ToString[TimeUsed[]] <> " / " <>          ToString[          NumberForm[MemoryInUse[], DigitBlock -> 3,            NumberSeparator -> " "]] <> " / " <>          ToString[          NumberForm[MaxMemoryUsed[], DigitBlock -> 3,            NumberSeparator -> " "]] <> ")"];          Gdone = {};     Qdone = {};          iterate[num_] := (i = 0;       While[i < num,        i = nextIndex[i];        stats["G", i];        If [Mod[i, 10] == 1, G[i] = cross1[G[(i - Mod[i, 10])/10]],          G[i] = cross2[G[(i - Mod[i, 10])/10]]];        AppendTo[Gdone, i];        stats["Q", i];        Q[i] = Block[{x = 0, y = 0, z = 0}, Simplify[G[i]]];        AppendTo[Qdone, i];        ];       )          iterate[22222]          q = Table[Q[Qdone[[i]]], {i, Length[Qdone]}];          r = q /. {a[8] -> 0};          GroebnerBasis[r, Variables[r]]          GroebnerBasis[q, Variables[q]]      It was designed to be taken in steps, so running it all in one cell may not be very enlightening, but you have the notebook file above if you want it spaced out as well.