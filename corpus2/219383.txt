I initially started a project with Facades and Polymorphism as a way to create simple extensible design following SOLID Principles. Here is a sample code:               public interface IInterface     {         void FillList(List<InputPocoObject> listOfInputObjects, out List<OutputPocoObject> ListOfOutputObjects);     }          public class SampleClass : IInterface     {              public void FillList(List<InputPocoObject> listOfInputObjects, out List<OutputPocoObject> ListOfOutputObjects)         {             //some data layer code              //and a for loop to fill OutputPocoObject object and add it to list         }     }      I have number of classes such as above which are created in runtime with the help of factory( not shown here for the sake of simplicity) Recently after couple of months I see that there are different requirements emerging in my project, which I attempted to solve by the help of Polymorphism and I see that I am stuck with violating DRY principles. Here is a sample code of this situation:               public class SampleClass2 : IInterface     {              public void FillList(List<InputPocoObject> listOfInputObjects, out List<OutputPocoObject> ListOfOutputObjects)         {             //some data layer code              //and a for loop to fill OutputPocoObject object and add it to list             // there is a property in OutputPocoObject which is set to 1         }     }               public class SampleClass3 : IInterface     {              public void FillList(List<InputPocoObject> listOfInputObjects, out List<OutputPocoObject> ListOfOutputObjects)         {             //same code as above              //with only one difference that  property in OutputPocoObject is set to 5 here         }     }      One Simple solution will be to add a control parameter to interface such as:               public interface IInterface     {         void FillList(List<InputPocoObject> listOfInputObjects, out List<OutputPocoObject> ListOfOutputObjects, int controlParameter);     }      but I don't know whether this is such a better idea? Or whether it might introduce some complexity in my design?