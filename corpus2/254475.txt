This is a rather conceptual question, but I was hoping I could get some good advice on this. A lot of the programming I do is with (NumPy) arrays; I often have to match items in two or more arrays that are of different sizes and the first thing I go to is a for-loop or even worse, a nested for-loop. I want to avoid for-loops as much as possible, because they are slow (at least in Python). I know that for a lot of things with NumPy there are pre-defined commands that I just need to research, but do you (as more experienced programmers) have a **general thought process that comes to mind when you have to iterate something?** So I often have something like this, which is awful and I want to avoid it:               small_array = np.array(["one", "two"])     big_array = np.array(["one", "two", "three", "one"])          for i in range(len(small_array)):         for p in range(len(big_array)):             if small_array[i] == big_array[p]:                 print "This item is matched: ", small_array[i]      I know there are multiple different ways to achieve this in particular, but I am interested in a general method of thinking, if it exists.