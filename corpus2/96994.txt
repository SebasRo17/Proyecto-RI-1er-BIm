The team over at LMAX have a presentation about how they were able to do 100k TPS at less than 1 ms of latency. They have backed up that presentation with a blog, technical paper (PDF) and the source code itself. Recently, Martin Fowler published an excellent paper on the LMAX architecture and mentions that they are now able to handle six million orders per second and highlights a few of the steps that the team took to go up another order of magnitude in performance. > So far I've explained that the key to the speed of the Business Logic > Processor is doing everything sequentially, in-memory. Just doing this (and > nothing really stupid) allows developers to write code that can process 10K > TPS. > > They then found that concentrating on the simple elements of good code could > bring this up into the 100K TPS range. This just needs well-factored code > and small methods - essentially this allows Hotspot to do a better job of > optimizing and for CPUs to be more efficient in caching the code as it's > running. > > It took a bit more cleverness to go up another order of magnitude. There are > several things that the LMAX team found helpful to get there. One was to > write custom implementations of the Java collections that were designed to > be cache-friendly and careful with garbage. > > Another technique to reach that top level of performance is putting > attention into performance testing. I've long noticed that people talk a lot > about techniques to improve performance, but the one thing that really makes > a difference is to test it Fowler mentioned that there are several things that were found, but he only mentioned a couple. Are there other architectures, libraries, techniques or "things" that are helpful to reach such levels of performance?