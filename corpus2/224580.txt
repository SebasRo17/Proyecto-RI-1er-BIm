I've gotta build a webservice for employee information, and I'm trying to plan it out. To clarify, we already have a REST-ish service for People and a separate REST- ish service for Companies.   This service will specifically be for the relationship between those two (all the data will be delivered from services to the data-consumers through a client (or clients) ). Among other tasks, this service will need to:   1. retrieve all employers (company id's) for a given person ID   2. retrieve all employees (person id's) for a given company ID    I could see doing this a couple different ways.   1. Using search parameters could look _something_ like:      * `http://blah/employee/find?person_id=12345`     * `http://blah/employee/find?company_id=9876`   2. Using the URL could look _something_ like:      * `http://blah/employee/find/employers?id=12345`     * `http://blah/employee/find/employees?id=9876`    Taking the URL approach, I'd be able to specifically validate for a single parameter for each the _employer_ and _employee_ cases .. seems nice and clean, but quite fixed.   Taking the parameter approach seems like it's less-rigid/more-flexible, but then requires more data paths (if/else), and therefore the code can take longer to understand when future-me (or anyone else) comes back to it after it's been long forgotten. What benefits might there be to going with once vs the other?   To me, the difference _**seems**_ kinda arbitrary, but this is the first time I've got to make this decision.