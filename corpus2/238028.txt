I have a few HTTP resources, and i'm wondering if including the models of one in the other is acceptable or if there is a cleaner method. In this example, we have a ton of "news" resources, and users can subscribe via a resource called "subscription":               ==>/news-items/{id}/     {         "id": 987,         "url": "http://example.com/foo/bar",         "title": "Wow! A Headline",     }      And               ==> /users/{user-id}/subscriptions/     [         {              "id" : 123              "keywords": "Mr Celebrity"         },         ...     ]      And then the endpoint that includes the models of both resources ...               ==> /users/{user-id}/my-news/     [         {             "id": 987,             "url": "http://example.com/foo/bar",             "title": "Wow! A Headline",             "matched_by": [                 {                     "id": 123,                     "keywords": "Wow",                 },                 ...             ]         },         ...     ]      The usecase is fairly self explanatory for this: A feed of news with 'matched by "Mr Celebrity"' next to it. It feels a bit weird to have an endpoint that consists only of nested/composite models from other endpoints ... Is this acceptable practice or problematic? The endpoint will be read-only, and the other options seem to be:   1. HATEOAS-style: "matched_by" and the news item are URLs pointing to a news item and subscription. Would require more HTTP requests.   2. Some kind of multi-payload response with a HATEOAS primary payload then 'related' payload of the referenced resources. Not seen this done before.   3. ??? some other options? If my approach is sound, great, but I want to hear what others would do if there is a better alternative. Thanks :)