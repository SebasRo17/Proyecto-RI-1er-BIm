I'm working on a system where we rely a lot of "admins / managers" emailing users from the database. One of the key features is being able to email several people at the same time, with specific information relevant to each of them. Another key feature is to be able to hand-craft emails, because it tends to be be necessary to slightly modify them each time, but having a basic template saves a lot of time. For this, we have the typical "templates" solution, where we have a template that looks kind of like this:               Hello {{recipient.full_name}},          Your application to {{activity.title}} has been accepted.      You have requested to participate on dates {{application.dates}}, in role {{application.role}}     Blah blah blah      The problem we are having is obviously that (as we expected), managers don't get the whole "variables" idea, and they do things like overwriting them, which doesn't let them email more than one person at a time, assuming those are not going to get replaced and that the system is broken, or even inexplicable things like "Hello {{John}}". The big problem is that this isn't relegated, as usual, to an "admin" section where only a few power users have access to editing the templates that are automatically send out, and they're expected to know what they are doing. **Every** user of the system gets exposed to this problem. The obvious solution would be to replace the variables _before_ showing this template for the user to edit, but that doesn't work when emailing several people. This seems like a reasonably common problem, and we are kind of hoping that someone has already solved it. Have you seen anywhere/created/can think of good solutions to this problem? **Update** What I ended up doing based on Daniel B's answer was detecting, based on the cursor position, and the position of {{ }} in the code whether the user is currently "inside a variable" or "outside". In inside, I show a little piece of text below the big textarea explaining that this is going to get replaced, and that they can remove it completely if they want, but they can't edit it. I do this onClick, onChange, onKeyDown, onKeyUp. For the "key" events, if we're inside a variable, I only return TRUE if the keyCode is one of a few "navigational" keys. Otherwise, I return FALSE, which effectively prevents the edition of that variable. It's not perfect, but it was very cheap, and seems effective.