I have read a junior mentoring topic which answered most of my doubts. However this topic gives general (though very good) advice on mentoring, while I am mainly interested in what a mentor's week looks like. This is my case. I have a junior (1 year of experience) who got a new project and I am mentoring him. While I am sure that he will use google and will not ask me silly questions, I want to make sure he's on the right path and not to create structures which are hard to maintain or slow in execution. Now, should I:   1. Check out the code each day and examine it?     * Pro: detect errors in its root     * Con: time consuming, may overlook something as there is a work day behind me as well.   2. When he needs to implement let's say singleton, do I tell him to find it on google and come back to me with a solution? Or I let him implement it and later review it?     * Pro: he does not wait for me to reply to him.     * Con: he may implement it wrongly and lose precious time.   3. Are there any situations when I can just check the result? Just like I am a QA. Or I must always stick to the code review?   4. At what point should I stop being a mentor? After how many projects or after how much time?   5. Anything else I have missed?