I have a need for a struct analogue in Mathematica. After reading this post I came to the conclusion that `System`Utilities`HashTable` is one of the best options. But it's rather terse to write. Let's say we have a hash table:               h=System`Utilities`HashTable[];      Is there a way to auto-magically transform               h.somekey=value (*would be evaluated as===> System`Utilities`HashTableAdd[h, "somekey", value]*)      and               a = h.somekey (*would be evaluated as ===> a = System`Utilities`HashTableGet[h, "somekey"]*)      I have not yet been able to find the right combination of := or :> to get this to work, but `RuleDelayed` is still a bit mysterious for me:) * * * **EDIT** Some test cases:               h = System`Utilities`HashTable[];     h.first = "test";     h.second = "another test";     System`Utilities`HashTableAdd[h, "third", "yet another..."];     h.first    (*test*)     h.second  (*another test*)     h.third   (*yet another...*)     System`Utilities`HashTableGet[h, "first"]     System`Utilities`HashTableGet[h, "second"]     System`Utilities`HashTableGet[h, "third"]     (* is it possible to have dot hold the second argument only in the \     overloaded definition? so that this would still work?*)     second = a;     h.second (*should return: but does not another test*)     h.Unevaluated[second]     h."second"     Clear[second]     h.first = FIRST;     h.first     (*don't break the dot prodocut*)     Clear[a, b, c, d];     {a, b}.{c, d}     c = 5;     {a, b}.{c, d}      The obvious does not work:               Unprotect[Dot];     Dot[h_System`Utilities`HashTable, key_] :=        System`Utilities`HashTableGet[h, ToString[Unevaluated[key]]];     Dot /: Set[Dot[h_System`Utilities`HashTable, key_], value_] :=        System`Utilities`HashTableAdd[h, ToString[Unevaluated[key]], value];      If one leaves just h_ then it works, but breaks the dot product definition. As a work around this sort of works...               Unprotect[Dot, Set];     Dot[h_, key_Symbol] :=        System`Utilities`HashTableGet[h, ToString[Unevaluated[key]]];     Dot /: Set[Dot[h_, key_Symbol], value_] :=        System`Utilities`HashTableAdd[h, ToString[Unevaluated[key]], value];      **So, why doesn't the first version work?** **Also, is it possible to get`Dot` to hold its argument only for the overloaded version?**