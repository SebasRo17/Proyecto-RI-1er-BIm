In MATLAB I have the following series of nested `for` loops that update a matrix. (It's not my code, but someone else's that I'm trying to replicate - I don't know why `i` starts at 0, for example, and I don't think it needs to, since `k` can be specified by the user.)               [n,d] = size(var1);     for i = 0:k         for j = 0:k             var1(i+1,d-j) = var1(i+2,j+2);         end     end          for i = 0:k         for j = 0:k             var1(n-i,j+1) = var1(i+2,j+2);         end     end          for i = 0:k         for j = 0:k             var1(n-i,d-j) = var1(i+2,j+2);         end     end      `k` is some variable that is less than both `n` and `d`. In terms of size, `k` is about 100 and `n` and `d` are about 1000. I've had a look over the Q&A - Alternatives to procedural loops and iterating over lists in Mathematica - for avoiding/rewriting nested loops. However, I'm not sure what to do to apply that guidance here. I think I'm being confused by the reference to `(i+1,d-j)`. The non-Mathematica part of me wants to use nested `For[]`s and `Part[]`s, but that can't be the best/fastest/most efficient way, certainly with the sequence of them shown above. Here's a basic example...               var1 = RandomInteger[{0, 5}, {1000, 1000}];     {n,d} = Dimensions[var1];     k = 100;