To start I don't think this is a repeat of other questions on unit testing. What I'm looking for help with is articulating its value to a team of programmers, analysts, managers and testers. By automated tests, I don't think I need to make a distinction between unit tests (e.g. JUnit), BDD (e.g. JBehave, Fitness) and UI (Selenium , Watir) because I think they all provide similar value (but feel free to write an answer that disagrees :)) The following is a list I've identified, I'm looking for answers that help expand or refine:   1. **Time/Cost Savings** : writing automated tests can take more time than written test cases. However, considering tests are run multiple times, the marginal work (i.e. cost/time) to _execute_ automated tests is several orders of magnitude less. That the automated tests are cheap to run facilitates _changing_ the system over time.   2. **Documentation** : there is no truer way to know how a system works than its tests. Any other documentation is usually out of date the moment its written, but tests (at least those that pass) reveal how things actually work. This is true for both end-user AND API documentation.    3. **Code Quality** : test writing forces you to:      * consider clients because tests are a client     * breaks dependencies where making code testable often means figuring out how to make that code not require some other large system be available