I'm reading a book on TDD: (btw this question has nothing to to with TDD) link to the book on amazon   Author often mentions/uses Service Classes For example we would have a Person Object Person would would have:   \- a "regular" class for deifining the entity **Person**   \- a data access class (lets say we have a db for data persistance) using for example a repository patter **PersonRepository**   \- a "service" class (PersonServices) **PersonServices** as author himself explains: > A PersonService class serves as the business domain class that works with > Person objects from a standpoint of enforcing business rules and using > Person in business work fl ows. My question would be is that a way to go with your classes? In the past I would put everything from **Person** class and **PersonServices** into one class. What type of functionality would go into **Servieces** classes for my objects? I'm not sure if I understand the quote above (maybe I'm missing the point?)