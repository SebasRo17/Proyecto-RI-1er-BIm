Consider the following Java code:               public class HumanStateImpl implements HumanState {         private boolean alive;         private Color skinColor;              // getters and setters, other state fields              @Override         public boolean isAlive() {             return alive;         }     }      Now imagine I want to have a class that represents `HandState`, and a corresponding `HandController`. **Is it better to inject the state objects of each level of state separately, or compose them into one most-specific state object?** If it depends, what does it depend on? To clarify what I mean, here is an implementation of both sides, respectively:               public class HandState {         private final Side handSide;         private boolean closed;     }          public class HandController {         private final HumanState humanState;         private final HandState handState;              public HandController(HumanState humanState, HandState handState) {             this.humanState = humanState;             this.handState = handState;         }     }      Versus:               public class HandState implements HumanState {         private final HumanState outerState;         private final Side handSide;              public HandState(HumanState outerState, Side handSide) {             this.outerState = outerState;             this.handSide = handSide;         }              @Override         public boolean isAlive() {             return outerState.isAlive();         }     }          public class HandController {         private final HandState handState;              public HandController(HandState handState) {             this.handState = handState;         }     }