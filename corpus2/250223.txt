we are at the middle of a project. It's a REST Service. Now we have controllers to handle the Requestmappings and the forwarding to the Services. A concrete example we have a UserController, GroupController, UserService and a GroupService. The user controller has as injection the UserService and the GroupController has as injection the GroupService. (one to one dependency) When I create/update/delete a user then the scenario is simple: userControllers tells the userService and it do this. Now the system has a lot of other controller/services that are going to be added. But what I don't know is: what is the best way when I have to to mix user/group action? For example: I have to add a user in a group. But I must check that the user exists, that the group exists and after save the information in the user (Entity/DTO) that the user is now port of this group. 1) schould I manage all from the userController: -userService.checkUser() -groupService.checkGroup() -userService.updateUser() 2) or schould I manage al from the userService: -userService.addUser() (in the userService then: -checkUser() -checkGroup() -updateUser() ) In the solution 1 what I don't like is the injection of some other Services that not belongs to users In the solution 2 I have the idea that I'm going to replicate concepts that exists on the groupServices... The exapmle above is only a litle part of the great picture. But that what i would understand is how can I design this part to don't have a lot dependency and a lot of code replication?