I am indexing a file of key pairs, and counting number of appearances. The file goes: A B C A B A D E B F and so forth. Seems like a struct or object being pushed back into a vector is a good place to start, sortable on the first or second entry, etc. Once I have a relationship, A B or B A, I figure I can start counting when a pair is repeated, because what pairs with what and the frequency that they appear are the interesting thing I'm trying to find. If I had a very clever constructor for a class or struct containing the right hand entry and a count, I could have a meta object that looks like               struct entry     {       valueAndCount ID;       vector"<"valueAndCount">" pairsWith;     };       Which would then, itself, be used in a vector               class indexObj     {       vector"<"entry">" index;       bool exists( value );     };      In a given vector pairsWith pushback, if I gave the valueAndCount constructor a value, would it be proper for it to check if an entry for that value already existed? If not, go ahead and create a new one with count = 1. If it already exists, increment that (other) count, then free itself as redundant? Or is looking up from the instance constructor to the structure that contains it too messy?