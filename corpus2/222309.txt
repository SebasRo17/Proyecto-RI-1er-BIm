When you have to iterate a reader where the number of items to read is unknown, and the only way to do is it to keep reading until you hit the end. This is often the place you need an endless loop.   1. There is the always `true` that indicates there must be a `break` or `return` statement _somewhere_ inside the block.              int offset = 0;     while(true)     {         Record r = Read(offset);         if(r == null)         {             break;         }         // do work         offset++;     }        2. There is the _double_ read for loop method.              Record r = Read(0);     for(int offset = 0; r != null; offset++)     {         r = Read(offset);         if(r != null)         {             // do work         }     }        3. There is the single read while loop. _Not all languages support this method_.              int offset = 0;     Record r = null;     while((r = Read(++offset)) != null)     {         // do work     }      I'm wondering which approach is the least likely to introduce a bug, most readable and commonly used. Every time I have to write one of these I think _"there has to be a better way"_.