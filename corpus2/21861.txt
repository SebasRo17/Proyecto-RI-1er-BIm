It is a very common problem that given a distance function $d(p_1,p_2)$ and a set of points `pts`, we need to construct a matrix `mat` so that `mat[[i,j]] == d[ pts[[i]], pts[[j]] ]`. What is the most efficient way to do this in Mathematica? * * * Let's assume that the points are in $\mathbb{R}^n$ for simplicity, and because that's the case I'm dealing with now, but theoretically the points could be any type of object, e.g. strings with $d$ being an edit distance. For the specific problem I have right now I need to calculate the `EuclideanDistance` and `ManhattanDistance` of 2D points. The simplest way to do this is               pts = RandomVariate[NormalDistribution[], {1000, 2}];          mat = Outer[ManhattanDistance, pts, pts, 1]; // AbsoluteTiming          (* ==> {0.595327, Null} *)      This obviously calculates all distances twice, which is wasteful. So I was hoping for an easy $2\times$ speedup, but it isn't as easy as one would hope. Doing the same operation the same number of times in a `Do` loop takes considerably longer (probably because of indexing):               Do[ManhattanDistance[pts[[10]], pts[[20]]], {Length[pts]^2}]; // AbsoluteTiming          (* ==> {1.902417, Null} *)      So what programming pattern do you typically use when calculating such a distance matrix and which one would you recommend for this specific problem?