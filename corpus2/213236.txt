I am reading the book operating systems by Galvin, and there is something I don't understand. Assume that there is a hardware managed Translation Lookaside Buffer (TLB). Now when a program requests for a page which is in its own address space, but is not found in the TLB (miss), then which of the following happens? (assuming its not in the page table either) **OPTION 1**   1. OS checks the page table, its not there as the valid/invalid bit is set to invalid.   2. OS selects a victim frame, swaps in the page from disk   3. OS updates page table flags   4. Replace an entry in TLB with the new entry in page table   5. Restart the instruction, which now runs like nothing happened **OPTION 2**   1. When there is a TLB miss, the page table entry for the page is brought into TLB first   2. Instruction is restarted   3. There is TLB hit, but the valid/invalid bit is invalid => page is not in memory   4. Then OS selects victim frame, swaps in page....rest of the steps are same I think the question boils down to **whether only the TLB can be inspected for valid/invalid bit (due to hardware reasons) or the page table itself can be inspected.** Because OPTION 2 is clearly slower. (but a friend insists that that is what must happen) Thanks in advance!