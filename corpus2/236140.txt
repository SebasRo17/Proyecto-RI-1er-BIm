I'm currently working on a change at work to generalize a function that was sloppily coded up to work for a particular use case. The function calls a particular sproc that checks if an entity exists and if it does not inserts it, this is the core problem. In discussion about the change with a co-worker we both agreed this should be more modular (you need to be able to get without inserting), however I stated a preference to have two individual sprocs which are discretely invoked in our C# code. He claimed it's superior to have one sproc call the other but wasn't actually able to provide me a convincing argument for why that practice would be better (other than making a the generalized claim that it performs better, to which I said there is much lower hanging fruit for performance optimizations). Which practice do you believe to be better? Why?