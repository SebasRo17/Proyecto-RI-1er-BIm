How can I tally the result of repeated evaluation of a function?               n=100000;     f[]:=RandomInteger[{1, 4}]     Tally@Table[f[], {n}]      When `n` is really big this needs an unnecessary amount of memory, how do I get rid of the `Table` without slowing it down significantly?               fTally[f_, n_] := Module[{ c },       c[_] = 0;       Do[c[#] += 1 & @ f[], {n}];       Most[DownValues[c] /. HoldPattern[_@c[y_] :> m_] :> {y, m}]       ]     AbsoluteTiming[fTally[f, n];]              (* 0.6s   *)     AbsoluteTiming[Tally@Table[f[], {n}];]     (* 0.009s *)