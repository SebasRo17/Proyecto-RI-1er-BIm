The definition of interpretation (correct me if I'm wrong) is parsing code like so: **1-** Translate currently parsed line to some intermediate language. **2-** Run the translated line. **3-** Move to the next line. **4-** Translate it. **5-** Run it. And so on. If so, why do people say that the JVM **interprets** the Java Bytecode? What it does is **execute** it. The Bytecode is already translated Java source code, so there's no need to translate further. Than why is the term **interpretation** involved? If this term is used because the JVM **executes** the Bytecode **line by line** , well I'd say that any execution does that. Executes the runnable code from top to bottom. Than why use the term **interpretation**? _**Interpretation** as opposed to what?_