Thinking about the design of a potential new language, I wonder how related are the concepts of built a OO similar to GO interfaces and multi-methods (I get this from http://docs.julialang.org/en/latest/manual/methods/). If I understand this right, the interfaces are simply a group of methods that must be implemented by each descendant, and multi-methods provide a nice way to specialize them without do a lot of boilerplate or casting. However, Is my intuition that both could work well together, but wonder if is correct. For example, if a interface declare:               type Animal interface {         Speak() string     }          func (d Dog) Speak() string {         return "Woof!"     }      but in julia is more like:               speak(x::Dog) = return "Woof!";      So this feel like that both do the same, but different. Will be a mess to do both? When could that make sense? Also, what make a "better" path, if only one must be used?