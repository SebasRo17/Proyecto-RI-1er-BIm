I want to make a web service using Django, but that also has websocket functionality. Having done a bit of reading, this is the tech stack that I'm looking at:                  ---------------------------------       | Django (handling sync requests) |        ---------------------------------                       |                       | (wsgi)                       |      -------------------------------------     | Tornado (handling websockets, wsgi) |      -------------------------------------                       |                       |                       |      -------------------------------------     | Gunicorn (spawning tornado workers) |      -------------------------------------                       |                       |                       |      --------------------------------------     | nginx (reverse proxying to gunicorn) |      --------------------------------------      So the sync requests (website, most API calls) would go all the way through the stack to Django, but the websocket requests would be serviced by Tornado directly (websocket calls would be distinguishable by the URL). Am I overcomplicating this? I've added the Gunicorn layer because a single tornado worker would block while servicing a WSGI request, but perhaps there's a way around this? I only ask the question because it seems like a lot of layers to me. Does this look like a reasonable way to do Django with websockets?