I use Mathematica 8.0.4 on Mac OSX 64 bit, and gcc as C compiler. I am trying to write a LibraryLink function that deals with large positive integers i.e. greater than $2^{31}-1$. By dealing with, I mean two different cases:   1. My function takes a large integer as input and/or returns a large integer as output   2. My function takes standard integers as input and output by produces intermediate large integers and therefore should probably declare and use `unsigned int` or `long long int` integer types. How can I do this? For 1. the available functions (`MArgument_getInteger(Args[i])` and `MArgument_setInteger(Res,i)`) seem to handle 32 bit integers ranging from $-2^{31}$ to $2^{31}-1$ only (`mint`). Is there a way to transfer different types of integers? For 2. I have tried to declare/use `unsigned int` or `unsigned long` or `long long int` local variables in the C functions, but either it does not compile or the declaration is somehow ignored and the integer is in fact considered a `mint`. In the `WolframLibrary.h` file, I tried to change the definition of `mint` from `int` to `unsigned long` for example, without success. I would like to stick to the LibraryLink framework, because apart from this problem, I find it relatively predictable and easy to implement. I am aware of the MathLink functions `MLGetInteger64()` and `MLPutInteger64()`, but MathLink on my machine has proven desperately buggy. I copy-pasted entire examples from Minimal effort method for integrating C++ functions into Mathematica and associated conversations and often it just did not work. I thought that because MathLink is by nature asynchronous, it is very sensitive to low level communication protocols among processes forever out of control. Additionally, the reason I use LibrayLink is speed. MathLink brings an overhead that I suspect would slow down the process.