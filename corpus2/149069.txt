Right now I'm struggling with this concept of DRY (Don't Repeat Yourself) in my coding. I'm creating this function in which I'm fearing it's becoming too complex but I'm trying to follow the DRY principle.               createTrajectoryFromPoint(A a,B b,C c,boolean doesSomething,boolean doesSomething2)      This function I have say takes 3 input parameters, and then the function will do something slightly different given the boolean combinations `doesSomething` and `doesSomething2`. However the problem I'm having is that this function is growing in complexity greatly with every new boolean parameter that's added. So my question is, is it better to have a bunch of different functions that share a lot of the same logic (therefore violating the DRY principle) or one function that behaves slightly differently given a number of parameters but making it much more complex (but preserving DRY)?