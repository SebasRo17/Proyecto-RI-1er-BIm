Inspired by this and this question (and how I handle this in practice), what is the best way to default a function value when a certain condition is met? For example, if a function is defined as:               func[x_] := (x - 1)^2 + 5      and for values of `x` less than 0, `x` should equal zero. I also always want the function to evaluate even when `x` is less than 0. Normally, I would handle as such:               func2[x_] := Module[{xx = x},        If[xx < 0, xx = 0];        (xx - 1)^2 + 5]      If I try to use patterns to define the conditions, I have to define the function twice for each region:               func3[x_?Positive] := (x - 1)^2 + 5     func3[x_] := 6      I've had no luck using other patterns to define the function. While this is an admittedly easy example that can be easily handled using `Max[x,0]`, etc., patterns can be much more complex such as "integers divisible by a prime number". So, can a pattern married with a default argument handle this situation? And what is the most efficient on a computation and memory basis? **UPDATE:** Here is a more complicated version of a function to which I referred to in the comments:               func[qi_, dei_, b_, dmin_, rt_, pt_, t_] :=         Module[{ptt = Max[pt, 0], rtt = Max[rt, 0], di, diexp, xotime, xorate},         di = 1/b*((1 - dei)^-b - 1)/365;         diexp = -Log[1 - dmin]/365;         xotime = (di - diexp)/(di*b*diexp) + rtt + ptt;         xorate = qi*(1 + b*di*(xotime - ptt - rtt))^(-1/b);          Piecewise[{{qi/2 (1 + t/rtt), t <= rtt}, {qi, rtt < t <= (rtt + ptt)},             {qi*(1 + b*di*(t - rtt - ptt))^(-1/b), (rtt + ptt) < t <= xotime},             {xorate*Exp[-diexp*(t - xotime)], t > xotime}}]         ]      I'll plug in random variates (which can sometimes be zero based on the distribution), and evaluate this function multiple times. However, `rt` and `pt` should never be negative and should default to zero. In other words, have minimum value of zero. While the way I have it works well, the original question stemmed from the idea that this could be done more efficient with a pattern. jVincent's vanishing patterns solution works only if one argument has this pattern. If both `rt` and `pt` have this pattern, the vanishing pattern doesn't seem to work.