When looking Python decorators someone made the statement, that they are as powerful as Lisp macros (particularly Clojure). Looking at the examples given in PEP 318 it looks to me as if they are just a fancy way of using plain old higher-order functions in Lisp:               def attrs(**kwds):         def decorate(f):             for k in kwds:                 setattr(f, k, kwds[k])             return f         return decorate          @attrs(versionadded="2.2",            author="Guido van Rossum")     def mymethod(f):         ...      I haven’t seen any code transforming in any of the examples, like described in Anatomy of a Clojure Macro. Plus, Python’s missing homoiconicity _could_ make code transformations impossible. So, how do these two compare and can you say they are about equal in what you can do? Evidence seems to point against it. **Edit:** Based on a comment, I’m looking for two things: comparison on “as powerful as” and on “as easy to do awesome things with”.