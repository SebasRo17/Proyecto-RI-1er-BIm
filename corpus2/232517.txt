Say that you're doing a code review, and you find yourself faced with an orchestration pattern:               class OrchestrationClass {       private Configuration _configuration;       private DataStore1 _dataStore1;       private EfficientComputationService _service;       private ResultPrettifier _formatter;            public DoSomething () {          with (data = _dataStore1.LoadForConfiguration(_configuration)) {             return _formatter.PrettyPrint(_service.Process(data));          }       }     }      Under which circumstances is this considered to be a valid pattern/anti- pattern (and how is the anti-pattern to be cleanedup/refactored)? * * * **For context:** This recently came up in a code review, and several people mentioned the pattern/anti-pattern. Searches of the standard patterns literature, related Google search and scan through blog posts / wikis have all led to indirect mentions. Which leads me to believe that this pattern / anti-pattern hasn't yet had a formal treatment (or, if it has, it's not yet online). Hence - the question is here, where someone more experienced or widely read might be able to answer (or provide a reference)