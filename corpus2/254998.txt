I have two chat rooms, one has administration behaviour, and one doesn't. I have factored out all of the common code into a base chat room, but the `AdministerChatroom` behaviour I have pulled out into an interface called `IAdministrable` and it sits on the base chatroom class. My issue is that because the interface is on the base class, which allows for the behaviour to polymorphic, the `NonAdministratableChatroom` chatroom class must implement that behaviour even though it will do nothing. I have seen some developers put the interface on only one subclass: the class that has the behaviour, in this case the `AdministerChatroom` method, and when a chatroom is being used, they simply check the existence of the the `IAdministrable` interface, something like `if(Chatroom is IAdministrable){ // do something }`, which seems like a violation of the "tell don't ask" principle. I seem to have two choices: I stick to the polymorphic strategy pattern, or I test the instance for an interface; the former seems preferable but I am wondering if there are any other options? The code for the classes is as follows:               public interface IAdministrable     {         void AdministerChatroom();     }          public abstract class BaseChatRoom : IAdministrable     {         public void Close()         {         }              public abstract void AdministerChatroom();     }          public class AdministrableChatroom : BaseChatRoom     {         private readonly Administrator _administrator;              public AdministrableChatroom(Administrator administrator)         {             _administrator = administrator;         }              public override void AdministerChatroom()         {             _administrator.DoSomethingSpecial();         }     }          public class NonAdministratableChatroom : BaseChatRoom     {         public override void AdministerChatroom()         {             // do nothing as this is not administrable         }     }          public class Participant     {          }          public class Administrator : Participant     {         public void DoSomethingSpecial()         {             // implement something special here         }     }