I'm curious about the difference in space complexity between `map` and `map!` in ruby. If I have the methods:               def mult_by_two(arr)       arr.map {|i| i * 2 }     end          def mult_by_two!(arr)       arr.map! {|i| i * 2 }     end      While there's no explicit assignment in the first method, it's implicitly collecting the result of the `map` somewhere and is not operating in-place like the second method. Would it be correct to say that the first has O(n) auxiliary space complexity while the second is O(1)? How should I represent them when looking at the auxiliary space complexity of a method?