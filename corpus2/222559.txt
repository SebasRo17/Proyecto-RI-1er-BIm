On this blog post aphyr (who is a brilliant programmer) states: > Clojure macros come with some important restrictions. Because they’re > expanded prior to evaluation, macros are invisible to functions. They can’t > be composed functionally–you can’t `(map or ...)`, for instance. The classic example of this is:               (reduce and [true true false true])     ;RuntimeException      Yet we can write:               (reduce #(and %1 %2) [true true false true])     ;false      **Is 'macros don't compose' a valid claim?** Surely the only valid point is that macros are not first class functions and shouldn't be treated as such.