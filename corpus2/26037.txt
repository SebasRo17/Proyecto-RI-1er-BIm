How can I say more than just "C++" on my resume, reports or other writings, to convey clearly what kind of C++ programming I've been doing? Are there well-defined styles of C++? ("Styles" might not be quite the right word.) Examples: using C++ as an "improved C" taking advantage of stronger typechecking, syntactic niceties, but little or lightweight use of classes; using heavy OO techniques where almost everything is made into a class (and there could be different styles of that) - but staying away from templates and advanced techniques; and heavy use of metaprogramming and every cutting edge advanced C++ feature. I've seen code where there's such heavy use of computer science terminology and advanced features only a CS PhD would be able to understand it, and code so clean and straightforward that EEs and physicists with modest programming skills can understand it. This isn't about literally coding styles - fussy details about brackets, indentation, commenting and all that - but one's philosophy of what good code is, the approach to organizing it all, and degree of fanaticism or reluctance to use various major techniques, procedural vs OO vs functional and so forth. Can such variations be categorized in a meaningful way? How to name these for someone not expert at software development, with an amount of knowledge to be expected of a good executive or recruiter (never mind the PHBs)? Ideally, there'd be a way anyone can say on their resume "C++ in blah-blah style" or "mumbleific C++" and land jobs or freelance projects in that category/style of C++. An improved-C++ coder could avoid projects full of heavy template-bloated code. (To some extent this question may be more general than C++, but C++ being around for years and being multi-paradigm, leads to the most confusion.)