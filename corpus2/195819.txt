I have a list box with several elements, let it be web servers (tomcat, iis etc). For each list box value, UI must have different views. For example, if we choose IIS, user name and password fields appear. If we choose tomcat, some additional fields appear depending on user OS - IP and port for linux and path for windows. My current approach is the following: \- I created two enums. The first one for different OS (windows, linux, mac os x. The second one for servers: iis, nginx, tomcat etc. \- I have a method that returns the OS enum value. \- When user makes a choice, I determine it and basing on this choice I check user's OS. And after it I determine what UI elements to hide/add. Here's some sort of pseudo-code for what I have:               //OS enum     public enum OS {         WINDOWS, LINUX, MAC_OS_X;     }          //Servers enum     public enum SERVERS {         TOMCAT, IIS, NGINX;     }          //Server Listbox Handler     private void chooseServer() {             //...get value from list box             switch(server) {                 case TOMCAT:                     changeUI(getOS()); //getOS() returns OS enum value                     break;                 case IIS:                     //IIS is for windows only                     changeUI(OS.WINDOWS);                      break;                 case NGNIX:                     //Temporary support only linux                     changeUI(OS.LINUX);                     break;             }         }          //UI changes here     private void changeUI(OS os) {             switch (os) {                 case WINDOWS:                     userNameField.setEnabled(true);                     userPasswordField.setEnabled(true);                     ipField.setVisible(false);                     portField.setVisible(false);                     serverPathField.setVisible(true);                     break;                 case LINUX:                     userNameField.setEnabled(true);                     userPasswordField.setEnabled(true);                     ipField.setVisible(true);                     portField.setVisible(true);                     serverPathField.setVisible(false);                     break;                 case MAC_OS_X:                     userNameField.setEnabled(false);                     userPasswordField.setEnabled(false);                     ipField.setVisible(false);                     portField.setVisible(false);                     serverPathField.setVisible(false);                     break;             }         }      I don't like the moment when other OS or new servers will be added. These switch operators will grow more and become more complicated, I don't speak about maintainability of this code. Are there any standard approaches (patterns) for such tasks that help to avoid switch/if...else grow and to make code more generic, expandable, readable and supportable? * * * I tried to implement Adapter pattern suggested by Neil and ran at some obscure moment. Here's some pseudo-code:               public abstract class EditorAdapter {         protected boolean firstInit = true;         public abstract void adapt(Panel panel);     }          //--------          public class IISWindowsEditorAdapter extends EditorAdapter {         @Override         public void adapt(Panel panel) {             if(firstInit) {                 firstInit = false;                      panel.add(userNameField);                 //add other elements             }         }     }          //--------          public class TomcatEditorAdapter extends EditorAdapter {         private OS os = getOS();              @Override         public void adapt(Panel panel) {             if(firstInit) {                 firstInit = false;                      if(OS == OS.LINUX) {                     panel.add(userNameField);                     //add other elements                 } else if (OS == OS.WINDOWS) {                     //add elements                 } //... else if             }         }     }          //--------          public class Editor extends DialogEditor { //extends Dialog with protected Panel field (subPanel)         public Editor() {             initialize();         }              public void initialize() {             //...             main.add(createPanel()); //protected VerticalPanel main;             //...         }              public void createPanel() {             //listBox initialization             commonPanel.add(listBox); //panel with common elements             listBox.addClickHandler(new ChangeHandler() {                 @Override                 public void onChange(ChangeEvent event) {                     selectServer();                 });             }             //... add other common elements         }              private void selectServer() {             //... get selection             switch(server) {                 //Here something should be done in order to control different layouts.                 //At the moment, each choice adds more elements in addition to existing ones                 //As a variant, one can create class fields for each adapter and manipulate with them using lazy initialization                 case IIS:                     new WindowsEditorAdapter().adapt(subpanel);                     break;                 case TOMCAT:                     new TomcatEditorAdapter().adapt(subpanel);                     break;             }         }     }      The problem is that I have several tables/panels in my Editor that at the end are added to main panel. In general, it looks like:   * we open a dialog   * choose web-server   * some elements change inside the dialog according to our choice (and some choices are affected with OS user is using). That's why first UI initialization with adapter doesn't work here. At least I didn't catch how to implement this adapter for logic above.