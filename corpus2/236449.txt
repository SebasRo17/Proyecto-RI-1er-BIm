Well known is the split of a whole application into several bounded contexts to emerge an Ubiquitous language. while practicing Domain-Driven Design. In general, 1 bounded context = 1 archive file ready to be deployed (JAR / EAR / DLL etc..) My question concerns the bounded contexts deployment regarding hardware optimization: Suppose I want to optimize one specific service within a specific bounded context (optimization could be a more powerful CPU, more RAM, etc..), is it a good practice to create a specific archive file just for it? Meaning to split further the initial bounded context. Thus, in order to deliver it on a specific hardware tunes for its usage. Or should I consider 1 bounded context as being an **indivisible** unit and therefore optimizing the bounded context as a whole even if some specific services doesn't need this increase of hardware power?