I'll use FlawFinder in this example. FlawFinder is a static code "analyser" tool that examines C/C++ source files and outputs warnings/hits if a vulnerability was identified. The way it does this is by using text pattern matching for function names and their parameters. It then matches these against a pre-defined database of commonly known issues/vulnerabilities associated with different standard library functions. E.g.               #include <stdio.h>          int main()     {        char str[50];             printf("Enter a string : ");        gets(str);             printf("You entered: %s", str);             return(0);     }      This will cause FlawFinder to generate a hit at the line calling the `gets(str)` function. It will warn against a potential buffer overflow and advises the developer to use fgets() instead. I'm suspecting that this may cause some false positive results in some cases, as it doesn't actually "analyse" the code and the context but just matches function names against a set of predefined warnings. But I was wondering if there's a situation where you could have an obvious buffer overflow vulnerability that wouldn't be identified by a tool like FlawFinder or in general most static code analysis tools? Specifically in a C/C++ environment.