We have a web application which is developed in classic ASP and it evolved over 5 years to its current form which has 100's of pages, huge database and more than 10000 active users going through at least more than 10 pages daily. Now, we wanted to upgrade it to latest version of .net. Initially we thought rewriting the entire app, but after analyzing the scenario we found that is not a viable option also not suggested by many experts. We have not yet decided on how to do it in otherway, but got some thoughts on how to achieve the rewriting in faces. **Option 1:** We thought of identifying the main modules in this application and rewriting them one by one by separating the application into different layers such as database (existing), then business logic and the view. This way newly developed modules will be added to existing system and new pages will replace old pages in that particular module. At the same time we can test the new layers alongside old system and release them once we feel confident. We also thought of developing API kind of structure for business logic and this will be accessed by view as an external application. **Option 2:** At the moment we have done a simple module and used it in classic ASP page through an IFrame, though it was quite troublesome sending data between classic ASP and new page in the IFrame. This is just in planning stage on how we should achieve the rewriting of the entire application without disturbing the user base. I want to get other programmers views, opinions and suggestions on should we approach in such scenario? if anybody has faced this kind of scenario please share your opinion too. Also would like to know using of ASP.net MVC is going to help me in this? **UPDATE** : Thanks for both the answers for putting up your views. Would like to get more inputs on both the options I specified above in migrating the application from classic asp to asp.net or asp.net mvc. It would be great help for me, if you all can through your views, points and thoughts on migration part rather than the point of choosing asp.net or asp.net mvc.