Let's say that we have some $300\,\text{K}$ digits (arbitrary function) and want to trial factor with $100{,}000{,}000$ first prime numbers.               PRP = {};           Func[Q_] := 77^Q + 2;          Do[If[TimeConstrained[PrimeQ[Func[i]], 1, True], AppendTo[PRP, i]], {i, 160000, 161000}]      PRP: ($64$ numbers out of $1000$ test samples)               {160001,160025,160037,160041,160045,160053,160065,160097,160101,160133,160137,160141,160161,160177,160181,160201,160241,160253,160257,160261,160285,160297,160305,160317,160321,160361,160393,160397,160405,160413,160421,160425,160441,160485,160541,160557,160577,160581,160601,160621,160633,160637,160645,160657,160685,160693,160713,160721,160725,160753,160761,160801,160821,160833,160845,160853,160857,160861,160881,160897,160921,160933,160945,160965}      Then I use the following to compute product of primes in $5$ part ($20{,}000{,}000$ range)               Pro = Product[i, {i, Prime[Range[1, 20000000]]}]; // about 170 million digits      And for each product I run:               Output ={};          Do[If[GCD[Func[i], Pr] == 1, AppendTo[Output, i]], {i, PRP}]      Currently each product (of $20{,}000{,}000$ primes) take $1\,\text{GB}$ of RAM and nearly $30$ seconds for each GCD               In[86]:= Timing[GCD[Func[160001], Pr]]          Out[86]= {28.562500, 117414067}      Is my configuration and setup the best possible one in memory management and speed? **Update** I modified the @tchronis answer a little to remove composite as early as possible. Not the best code (can be much better using `Reap` and `Sow`), but it works:               ClearAll[gcd2];     gcd2[list_, noprimes_: 20000000, noclusters_: 1] :=       Module[{clusters, n, pro},        clusters =         Table[{(i - 1)*noprimes/noclusters + 1, i*noprimes/noclusters}, {i,           noclusters}];       innerList = list;       Do[        pro = Product[i, {i, Prime[Range @@ clusters[[j]]]}];        newList = {};        Do[         If[GCD[func[m], pro] == 1, AppendTo[newList, m]],         {m, innerList}         ]; innerList = newList,        {j, 1, noclusters}        ]; newList       ]      **Result**               Timing[gcd[list, 5000000, 4]]          {327.9706, { .... 54 out of 64 ... } }          Timing[gcd2[list, 5000000, 4]]          {290.328125, { .... 54 out of 64 ... } }      The higher the number of primes and the larger the list, the speedup by stopping computation upon first non-one GCD gains more.