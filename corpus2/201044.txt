I am working on a personal project that works with databases, and in this project I have a set of classes that are _similar_ , so they inherit from a common base class. The problem I am faced with is that I have this nagging feeling that the names of the classes that derive from the base class do not really reflect what they actually are. Caveat: Please ignore the fact that this looks like a reinvention of the wheel. That's the point of the project. The common base class is called Entity. Its purpose is to serve as the base for:   1. Classes that describe the data returned by a SQL query or stored procedure, or    2. Classes that describe a SQL query or stored procedure and their parameters. Both of these classes are created by consumers of the assembly to describe the stored procedures and queries in their database, and the data they will retrieve from it. For example, these are designed to work against the Northwind database:               public class Employee : DataEntity     {         public int EmployeeId { get; set; }         public string LastName { get; set; }         public string FirstName { get; set; }     }          [Sql(@"SELECT [EmployeeId], [LastName], [FirstName]             FROM [Employees]             ORDER BY [LastName], [FirstName]")     public class SelectEmployee : SqlEntity     {         public int EmployeeId { get; set; }     }      As it stands, I am currently calling the first of these Data Entities, and the second SQL Entities. However, I am not entirely sure that these are fitting terms. For instance, are they actually _models_? Is there a better term that I am not considering? The assembly only considers public properties that have both a getter and a setter. The developer can add anything else to it if he or she needs to. So a Data Entity can be extended to include additional functionality. Any advice would be greatly appreciated. **EDIT** It's worth noting that you can also model stored procedures with this stuff (again, using a Northwind database stored procedure):               [Sql()]     public class CustOrderHist     {         [Parameter("@CustomerId", SqlDbType = SqlDbType.NChar, MaxLength = 5)]         public string CustomerId { get; set; }     }      The assembly automatically binds classes to stored procedures, and properties to parameters.