The partial differential equation in the `NDSolve` below is conservative (by construction) of $\int_{-1}^{+1} p(t,z)\ dz$ for all $t$.               tMax = 1;     sol = NDSolve[       {         Derivative[1, 0][p][t, z] == Derivative[0, 2][p][t, z],         p[0, z] == (1 - z^2)^2 *Exp[-1 z^2],         Derivative[0, 1][p][t, -1] == 0,         Derivative[0, 1][p][t, +1] == 0       },       {p},       {t, 0, tMax},       {z, -1, 1},       PrecisionGoal -> 1,       AccuracyGoal -> 2     ];      In order to check conservation, I find the percent difference between $\int_{-1}^{+1} p(t,z)\ dz$ and $\int_{-1}^{+1} p(0,z)\ dz$ for `timePoints = 20` values of `t` by repeated calls to `NIntegrate`.               timePoints = 20;     dt = tMax/timePoints;     int0 = p[0, z] /.       sol //         NIntegrate[#, {z, -1, 1}] & //           Flatten;          intPercentDif =        Table[         p[dt*i, z] /.           sol //             NIntegrate[#, {z, -1, 1}] & //               Flatten //                 100*(# - int0)/int0 & //                   First //                     {dt*i, #} &,         {i, 1, timePoints}       ];          ListPlot[       intPercentDif,       AxesLabel -> {"time", "integral percent difference [%]"}     ]      The plot shows that the error remains small for this case. This method is quite computationally demanding, and for my real problem, which is a more- complex set of coupled pdes, this check takes a very long time. I'd like to check every time I simulate the system, but this check takes longer than the simulation itself. **Is there a better way to check for conservation?**