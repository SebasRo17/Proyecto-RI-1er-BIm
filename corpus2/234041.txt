I always separate the user interface from other functionality in my programs - its the way I have been taught, and it has obvious advantages since you can change the interface but keep the same functionality. However, I've come across some programmers who strictly separate data, algorithms and interface. So the data objects which hold the data in volatile memory have _only_ fields/properties and their getters and setters. Any algorithms are kept in a separate class. In my view the main disadvantage of this is that the algorithm classes usually need full access to the data in the data classes. You might want to have a more functional class which you create with lots of data but then objects from other classes can only get at that data in specialised ways.