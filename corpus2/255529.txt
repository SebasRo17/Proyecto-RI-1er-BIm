Is there a way to address a typical boiler plate code to instantiate and load FXML? A typical version:               public void start(Stage primaryStage)      {            URL fxmlUrl = this.getClass().getResource( /* your string path*/ );              FXMLLoader loader = new FXMLLoader(fxmlUrl);              try          {                primaryStage = loader.load();             this.controller = loader.getController();         }          catch(IOException ioe)         {             ioe.printStackTrace();         }              primaryStage.show();     }      Note for the code above, the backing FXML file has `<Stage></Stage>` as root. This is just my preference. The loading and matching up to the FXML root can adjust accordingly. In any case, the loading of the FXML file and obtaining reference to a controller is the crucial part (for most of the time). I've attempted to create a utility method such the one below to help prevent this boiler plate code:               <R, C> void loadFXML(R root, C controller, String path)     {         URL fxmlUrl = this.getClass().getResource( path );              FXMLLoader loader = new FXMLLoader(fxmlUrl);              try          {                root = loader.load();             controller = loader.getController();         }          catch(IOException ioe)         {             ioe.printStackTrace();         }     }      However, at some stage there was null pointer errors, or the loading was incorrect. I believe it has something to do with the Generics and/or casting. How can the this code be imporoved? Or perhap can another type code be suggested to solve this problem?