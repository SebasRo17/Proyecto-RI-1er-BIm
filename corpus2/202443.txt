My OOP JavaScript question is at the very bottom if you want to skip my introduction. In an answer to  the question Accessing variables from other functions without using global variables, there's a comment about OOP that says: > If there's a chance that you will reuse this code, then I would probably > make the effort to go with an object-oriented perspective. Using the global > namespace can be dangerous -- you run the risk of hard to find bugs due to > variable names that get reused. Typically I start by using an object- > oriented approach for anything more than a simple callback so that I don't > have to do the re-write thing. Any time that you have a group of related > functions in javascript, I think, it's a candidate for an object-oriented > approach. That rings true to me from what I've seen some of my old OOP colleague. There are lots of different approaches and different voices leading in different directions. Since I am a front end developer and UI designer, I am a little confused. **Building up to the question** I've heard from a variety of places that global variables are inherently nasty and evil, when doing some non-object oriented Javascript, and that there are three choices available to make a variable from one function, visible and usable by another function, e.g., function A to be visible to function B; or, a variable of Function A to be passed and usable within function B.   1. make it a global   2. make it an object property, or   3. pass it as a parameter when calling B from A. I've read about namespaces, currying, and other approaches... **Question:** With that all said, I was wondering what's the best OOP structure or best code practice in JavaScript that keeps things encapsulated and adds greatest security from having your variables exposed to manipulation?