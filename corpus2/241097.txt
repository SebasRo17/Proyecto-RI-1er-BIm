The below Javadoc is an snippet of HashMap documentation. Why authors would emphasize on putting a lock on the object that encapsulate a HashMap? Lock on the actual HashMap Object makes for sense. > **Note that this implementation is not synchronized.** If multiple threads > access a hash map concurrently, and at least one of the threads modifies the > map structurally, it _must_ be synchronized externally. (A structural > modification is any operation that adds or deletes one or more mappings; > merely changing the value associated with a key that an instance already > contains is not a structural modification.) This is typically accomplished > by synchronizing on some object that naturally encapsulates the map. If no > such object exists, the map should be "wrapped" using the > Collections.synchronizedMap method...