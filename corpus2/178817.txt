I have started to write a program in C++ 11 that would analyse chords, scales, and harmony. The biggest problem I am having in my design phase, is that the note 'C' is a note, a type of chord (Cmaj, Cmin, C7, etc), and a type of key (the key of Cmajor, Cminor). The same issue arises with intervals (minor 3rd, major 3rd). I am using a base class, Token, that is the base class for all 'symbols' in the program. so for example:               class Token {     public:         typedef shared_ptr<Token> pointer_type;         Token() {}         virtual ~Token() {}     };          class Command : public Token {     public:         Command() {}         pointer_type execute();     }          class Note : public Token;          class Triad : public Token; class MajorTriad : public Triad; // CMajorTriad, etc          class Key : public Token; class MinorKey : public Key; // Natural Minor, Harmonic minor,etc          class Scale : public Token;      As you can see, to create all the derived classes (CMajorTriad, C, CMajorScale, CMajorKey, etc) would quickly become ridiculously complex including all the other notes, as well as enharmonics. multiple inheritance would not work, ie:               class C : public Note, Triad, Key, Scale      class C, cannot be all of these things at the same time. It is contextual, also polymorphing with this will not work (how to determine which super methods to perform? calling every super class constructors should not happen here) Are there any design ideas or suggestions that people have to offer? I have not been able to find anything on google in regards to modelling tonal harmony from an OO perspective. There are just far too many relationships between all the concepts here.