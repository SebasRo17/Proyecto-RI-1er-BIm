## Scenario Last night I asked this question on StackOverflow. Although now I have a solution and I can move forward with the development, it feels partially answered because I have more questions now than before. The proposed solution creates an ugly effect. Now '$scope.item' wraps the $resource in '$scope.item.item' So i should change every bindings path in the document. ### From               <span ng-bind="item.price"></span>      ### To               <span ng-bind="item.item.price"></span>      This is not aceptable to me, feels bad practice. then I thought of this solution ### Item constructor               var Item = function Item(item) {         // mixing         angular.extend(this, item);     };      This solved the last problem but generated new one. Now `$scope.item` not contain the `$resource` methods. (eg `$scope.item.update()`) due `__proto__` chaged from `Resourse` to `Item` ### Item constructor v2               var Item = function Item(item) {         this.api = item; // Resource         // mixing         angular.extend(this, item);     };      Now to invoke the old '$scope.item.update()' needs to be changed to '$scope.item.api.update()'. This feels bad practice too. At this point I fear it is a XY problem. ## The Goal > Join the business logic to the data in angulay way. ## The Question Is "The Goal" itself an "Angular Way"? 'Angular Way' remains obscure to me. Maybe I should think of a different design.