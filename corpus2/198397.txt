So I saw this video on Youtube with all these C++ masters on GoingNative 2012 : Interactive panel where everybody could ask the questions. This is the video I was talking about: GoingNative 2012 - Day 1 - Interactive Panel: The importance of being native And at time 0:24:00 someone put a very interesting question: > We've been doing concurrent programming for some time using pthreads, using > windows threads, and so on and I'm so happy that C++ and C caught up with > concurrent programming, but it seems to me like it's already behind by five > years or ten years because right now we have we have all these powerful > multicores and the programming of these multicores really should not be > based on threads, it should be task-based [...] and Microsoft has the _PPL > library_ and so on and this is totally not reflecting in the C++ standard. > [...] The only thing I'm afraid of is that the standard could be locked into > threads and sort of make it very difficult to move to _Task-Based > Programming_... Now I'm quite new to these concepts and I'm a little confused. What is actually _Task-Based Programming_. Does this term refer to the same thing that _Lock-Free Programming_ refers to? Are these two equivalent terms or are there any links between them?