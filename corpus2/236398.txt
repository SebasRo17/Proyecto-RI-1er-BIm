Here's my situation: I'm programming an embedded device with a very simple, but customizable LED array display. It's 10 RGB LEDs linearly setup. The LEDs will be used to display many different things depending on the device's mode. Now, I've started down the road, but feel after spending a lot of time coding and finding a lot of duplicate coding that this should be simplified with some abstraction and wrappers methods and classes. At the very bare minimum and starting point, I have a class, the LED driver, which represents the hardware driving the LEDS. It has one Method which is primarily used `TLC5940.Display(ushort[] greyscaleData)` where greyscaleData is an array of size equal to the amount of output pins, a multiple of 16(16 per chip, chips can be connected to each other).This array controls each pins individually allowing direct control of the leds. This lead me to creating different "extension" methods in a static class which had different routines of populating this array and then passing it into the `Display` method. This works ok for testing different methods, but I found a lot of duplicate code with how I populate the array because each RGB led consumes 3 physical pins(and 3 consecutive array values) to control a specific RGB LED. So, I need to write a consecutive chunk of three values to control an LED. I came up with this private method in the static extension class:               private static void FillLEDArray(ref ushort[] brightnessArray, ushort LEDNumber, ushort rVal, ushort gVal, ushort bVal, short ledStartPin = 2, ushort numLEDs = 10)     {         //logic for how to shift array for physical pin layout         if (ledStartPin == 2) { ledStartPin = 0; }         else if (ledStartPin == 1) { ledStartPin = -1; }         else { throw new Exception("Can only be 1 or 2"); }              ushort pinStart = (ushort)(LEDNumber*3  + ledStartPin);         brightnessArray[pinStart] = bVal;         brightnessArray[pinStart-1] = gVal;         brightnessArray[pinStart - 2] = rVal;     }      It's simple and this makes things easier with my extension display methods so I can loop from 1 to 10 and call this method to write a specific LED to the array in one call. On a deeper level, I thought to make an LED object, which would contain an array of the 3 values and also offer some functions like LED.Colors.Red, LED.Colors.Blue, etc and return an array that would represent that color to make coding easier and more fun. Moreover, create a LED container object class to contain LED object. ex: `LEDS.LED(1).Color.Red` this could also generate an array on demand. One more level of complexity, My device is user customizable, so I have created a User Settings class, which contains all of the device's user settings, many of which apply to the LEDs like certain colors of the RGBs, overall brightness, color schemes, etc. These settings, such as brightness, would need to be applied the whole array before it's sent to the display also. If you've read this far, Thanks. **Question:** At this point have all the tools and ways to control the LEDs, but I'm looking to rewrite this all and wondering what's the best way to encapsulate all of this functionality? Is there a certain coding pattern or style that would apply to this? * * * My Own thoughts: In writing this out and getting it out of my head, maybe a new `DeviceDisplay` class which would contain an instance of the LED hardware and settings classes? Should this class be Static or Singleton? I'm also concerned about Memory/RAM/Speed because this is an embedded device. I would appreciate some feedback on this as it seems there's a lot of different dependencies and getting a little lost in my brain.