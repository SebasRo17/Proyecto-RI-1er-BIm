I'm writing a Django site that registers a particular type of user and this is done by the resources that come with the framework, the site administration. The issue: I'd like to create a new model with a foreign key to an admin site table and loaded from a excel cvs that augments the data from the user registration form. I'd like to do this in a database agnostic way without sql. Just using models, urls, forms, template language etc. I do not know how to check the contents of the user registration form against the new table? **forms.py**               from django import forms     from django.contrib.auth.models import User     from django.contrib.auth.forms import UserCreationForm     from django.core.mail import send_mail     #     # Called by register_user view.     #     class MyRegistrationForm(UserCreationForm):         email = forms.EmailField(required=True)              class Meta:             model = User             fields = ('username',                        'password1', 'password2',                        'email', 'first_name', 'last_name',)              def save(self, commit=True):                  # create and load user object             user = super(MyRegistrationForm, self).save(commit=False)             user.email = self.cleaned_data['email']             user.first_name = self.cleaned_data['first_name']             user.last_name = self.cleaned_data['last_name']                         if commit:                 user.save()                 send_mail('Your Provider Enrollment Registration',                           'You are now an authenticated provider!',                            'donfox1@mac.com',                           [user.email], fail_silently=False)                              return user      **models.py**               class NPIdata(models.Model):         '''          NPI data is associated with admin site User accounts.         '''         NPI = models.IntegerField(max_length=10)         lastname = models.CharField(max_length = 20)         firstname = models.CharField(max_length = 20)         Credential = models.CharField(max_length = 15)         user = models.ForeignKey(User)