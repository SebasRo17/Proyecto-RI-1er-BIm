I am trying to follow TDD in my proj but I can't get my head around how to verify I am calling a dependency correctly or even if I should be trying to verify it. Here's the requirement: Write an AddSalesOrderTask class that is responsible for adding an order to an ERP system. The class can take any dependencies needed but must have an Execute method signature like this:               public class AddSalesOrderTask {                  public override bool Execute(OrderData input) {           throw new NotImplementedException();       }     }      The AddSalesOrderTask.Execute method needs to map OrderData to ERPSalesOrder and then call IERPClient.AddSalesOrder. I have an interface to access the ERP service like so:               public interface IERPClient {         void AddSalesOrder(ERPSalesOrder order);     }      How do I verify that the mapping is done and then passed into the client? Should I be testing both operations in this method? To make this testable my first thought was to introduce an IMapper interface and pass it as a dependency to AddSalesOrderTask:               public interface IMapper<in TFrom, in TTo> {         void Map(TFrom source, TTo destination);     }      Following TDD would this be a good first test?                   private AddSalesOrderTask _testObj;              [Fake, UsedImplicitly]         private IERPClient _client;              [Fake, UsedImplicitly]         private IMapper<Order, SalesOrder> _mapper;              [TestInitialize]         public void MyTestInitialize() {                     Fake.InitializeFixture(this);             _testObj = new AddSalesOrderTask();         }              [TestMethod]         public void Execute_MappedSalesOrderAddedToERP() {                  // Arrange             var input = new OrderData();             var salesOrder = new SalesOrder();                  // Act             _testObj.Execute(input);                  // Assert                         A.CallTo(() => _mapper.Map(context.Order, salesOrder))                 .MustHaveHappened();             A.CallTo(() => _client.AddSalesOrder(salesOrder))                 .MustHaveHappened();         }      Am I thinking about this correctly?