Suppose I have design like this:               class Corpus:         def something1(self):             pass         def something2(self):             pass         def serialize_to_stream(self, stream):             _CorpusJsonSerializer().serialize(self, stream)          class _CorpusJsonSerializer:         def serialize(self, corpus, stream):             .             .             .         .         .         .       I think that the serialization process should be in a separate class for various reasons. That makes the method `serialize_to_stream` in `Corpus` unnecessary. I would however like to have it there because I think it makes it easier for the users of the Corpus, because they do not have to know anything about another class `CorpusJsonSerializer`. Do you think it is reasonable? Or shall I just expose the `CorpusJsonSerializer` and let the user do the work?