Our app basically is a few forms that are filled out by people.. Then these forms are validated and reviewed and reports are created.. So I was thinking about DI and messing with a simple example of Unity + MVC http://netmvc.blogspot.com/2012/04/dependency-injection-in-aspnet-mvc-4.html So could it be useful for something or overkill ? It seems to me the idea behind DI is to dynamically grab objects of a different type.. So in my case maybe those can be a set of rules for validation of a form... Something like SyntaxRules1.dll, BusinessRules1.dll, CalculationRules1.dll... So then as time goes by maybe additional sets of rules would be created so I can drop another DLL like BusinessRules2.dll in a folder and DI would pick it up in the boot strapper.. But then again if it changes very little then using DI might be pointless and just be a layer of abstraction that is not needed.. Do I have the right idea? Is there any other ideas how DI could be useful for this type of app ? Could I make the entire view/controller/model or each form its own DLL ? That make sense ? I just read alot of theory and struggling to find some concrete examples of what DI can do.