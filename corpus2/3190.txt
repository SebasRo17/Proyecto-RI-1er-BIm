I am producing a large number of `ContourPlot` objects, which when exported generate notoriously large PDF files because it basically generates lots of little triangles (and on top of that, there are aliasing issues, which can be dealt with as in the linked post). So, I'm trying to find a way to deal with it in a robust manner. I compare this:               ContourPlot[Cos[x] + Cos[y], {x, 0, 4 Pi}, {y, 0, 4 Pi}, Contours -> Table[c, {c, -2.2, 2.2, 0.2}]]      which gives a 836 kilobytes PDF (here rendered with Mac OS Preview): ![enter image description here](http://i.stack.imgur.com/AVrFF.png) to some homemade code (most of it lifted from this answer):               graph[expr_, level_, color_] := Module[{g, lines},       g = RegionPlot[expr < level, {x, 0, 4 Pi}, {y, 0, 4 Pi},          PlotStyle -> None];       lines = Cases[Normal[g], _Line, Infinity];       Return[{         EdgeForm@Directive[Black, Thickness[Medium]],         FaceForm@Directive[Opacity[1], color],         FilledCurve[List /@ lines]         }];       ]          Graphics[Flatten[       Reverse[Table[         graph[Cos[x] + 1.1*Sin[y], c, Hue[(c + 2)/4]], {c, -2.2, 2.2, 0.2}]]]]      which produces a nice 45 kb PDF: ![enter image description here](http://i.stack.imgur.com/Qm748.png) * * * Now, what's the question? Well, I wonder how I can turn this core idea into a small routine that accepts options, well, just like `ContourPlot` would. I mean, generate axes, accept color options, etc. I don't have any idea where to start, because I'm not really knowledgeable about Mathematicaâ€¦