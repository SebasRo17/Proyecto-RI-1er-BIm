A closed surface consisted of `Polygons` or `GraphicsComplex` and a triangle made by 3 points are in a 3D space. How can I decide whether intersected or not. I have tried by using `RegionMember` but It does not work. (this code is typed in _version 10_ )               g1 = RevolutionPlot3D[{2 + Cos[t], Sin[t]}, {t, 0, 2 Pi},        PlotPoints -> 2];     surface =        GraphicsComplex[g1[[1, 1]], {Opacity[0.7], g1[[1, 2, 1, 1, 5, 1]]}];          triangles = {        Polygon[{{0, 0, 0}, {0, 2, 2}, {0, -1, 2}}],        Polygon[{{2, 0, 0}, {2, 2, 2}, {2, -1, 2}}],        Polygon[{{-3, 0, -3}, {3, 2, 2}, {-3, -1, 2}}]};      examples               Grid[{{"Not Intersected", "Inside 1-Point,        Intersected", "Outside 3-Point,        Intersected"},       Table[Graphics3D[{surface, Opacity[0.7], Green, t},         Boxed -> False], {t, triangles}]}, Frame -> All]      ![Mathematica graphics](http://i.stack.imgur.com/DSKTg.png) I want to make a function that is decide whether intesected or not like this: ![enter image description here](http://i.stack.imgur.com/f0let.png) I expect like this results. ![enter image description here](http://i.stack.imgur.com/kIqme.png) **Is there any idea or algorithm paper?** * * * **My Wrong Try**               makeSurfaceEq[v_List, {x_, y_, z_}] :=      Module[{a, b, c, d, eq},        eq = a x + b y + c z + d == 0;        eq = eq /. NSolve[(a #1 + b #2 + c #3 + d == 0 &) @@@ v];        eq = If[eq[[0]] === List, eq[[1]]];        eq /. {a | b | c | d -> 1}        ] /; Length[v] >= 3     polygonToSurfaceInEq[v_, f_, {x_, y_, z_}] := Module[{cOfG, eqs, ineq},       cOfG = Mean@v;       eqs = makeSurfaceEq[v[[#]], {x, y, z}] & /@ f;       Table[         ineq = eqs[[i]] /. Equal -> Greater;         If[ineq /. Thread[{x, y, z} -> cOfG], ineq, ! ineq],         {i, Length[eqs]}] /.        {Greater -> GreaterEqual, Less -> LessEqual}       ]      here is something wrong result. and though a point is in closed surface, **the command** > polygonToSurfaceInEq **is not applied for a like torus.**               intersectedQ[polygons_, triangle_] := Module[{},       f = Function @@ {{x, y, z},          And @@ polygonToSurfaceInEq[            polygons[[1]],            Cases[polygons, Polygon[a_] -> a, \[Infinity]][[1]],            {x, y, z}]          };       Or @@ f @@@ triangle[[1]]       ]      my try is this.               intersectedQ[surface, triangles[[1]]]      > True 3 points are all outside of the surface.               intersectedQ[surface, triangles[[2]]]      > False * * * **Wrong Try2** Pickett's answer is good approach but is not a answer of my question. The closed surface is made by polygons and **bounded by polygons surfaces**. The following example show that I mean.               intersectQ[polygon_] := With[{distFunc = RegionDistance@Polygon[polygon]},         Length@Select[           findPossibleIntersections[polygon, surface[[1]], 0.01],            distFunc@# < 0.05 &] > 0];     intersectQ@{{1.8, 1.2, 0.9}, {1.5, 1, 2}, {1.5, 2, 2}}      > False This is inside of surface, but this code answer FALSE.               Graphics3D[{surface,       Opacity[.7], Green,        Polygon[{{1.8, 1.2, 0.9}, {1.5, 1, 2}, {1.5, 2, 2}}],       Opacity[1], Red, Point[{1.8, 1.2, 0.9}]},      Boxed -> False]      ![enter image description here](http://i.stack.imgur.com/4ipUw.png)