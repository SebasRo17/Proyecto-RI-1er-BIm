The C++ specification leaves a lot of leeway such that when you write bad code, compiler authors are not responsible for defining a specific mode of failure. We know of course that is Undefined Behavior. _(For those unaware, once there was a cutesy stunt to launch Tetris if you used a #pragma in GCC, which is actuallyimplementation-defined behavior, but it ties into the whole shebang.)_ This made me wonder about what the full coverage list of "erroring" conditions are: (1) That code will not compile. (2) That code has undefined behavior. (3) That code will throw an exception. **CAUTION: [JOKE]** (4) That code will not terminate. I'm working on a compiler, and I'm almost finished with the part that checks #4 _(the solution is too long to post in this forum)_. But in the meantime... **END CAUTION [/JOKE]** My question is: what can you and can't you say? The motivation is from someone declaring that you cannot use the phrase _"that code should crash"_. I said "will crash" and "should crash" are different; but that aside, I started wondering if the only thing the specifications have defined are 1, 2, 3.