I have to calculate billions of dot products. My current implementation uses `Compile` to generate `C` code and it's very fast (10s of seconds). But, I was wondering if I could make it faster by using my GPU (AMD 6670). Unfortunately I don't have an NVIDIA card since it seems that `CUDADot` is implemented. I'm trying to use the OpenCL `DotProduct` code in `FileNameJoin[{$OpenCLLinkPath, "SupportFiles", "DotProduct.cl"}]` code below:               src = "/*      * Copyright 1993-2009 NVIDIA Corporation.  All rights reserved.      *      * NVIDIA Corporation and its licensors retain all intellectual property and       * proprietary rights in and to this software and related documentation.       * Any use, reproduction, disclosure, or distribution of this software       * and related documentation without an express license agreement from      * NVIDIA Corporation is strictly prohibited.      *       */           __kernel void DotProduct (__global float* a, __global float* b, __global float* c, mint iNumElements)     {         // find position in global arrays         int iGID = get_global_id(0);              // bound check (equivalent to the limit on a 'for' loop for standard/serial C code         if (iGID >= iNumElements)         {                return;          }              // process          int iInOffset = iGID << 2;         c[iGID] = a[iInOffset] * b[iInOffset]                     + a[iInOffset + 1] * b[iInOffset + 1]                    + a[iInOffset + 2] * b[iInOffset + 2]                    + a[iInOffset + 3] * b[iInOffset + 3];     }"      I have managed to load the OpenCL function and compute a single DotProdct but this is mostely useless. I've been going over the instructions but I can't seem to figure out how to run many dot products in parallel (the whole point of using the GPU).               srcf = FileNameJoin[{$OpenCLLinkPath, "SupportFiles", "DotProduct.cl"}]          OpenCLDotProduct =        OpenCLFunctionLoad[{srcf},         "DotProduct", {{"Float"}, {"Float"}, {"Float"}, _Integer}, {16,          16}];          output = {0};     a = {1., 2., 2.};     b = {1., 2., 2.};     OpenCLDotProduct[a, b, output, 3]          (*          output -> {{1., 2., 2.}, {1., 2., 2.}, {9.}}          *)      This is correct, great. However, I can't figure out how to do more than a.b:               output = {0, 0};     a = {1., 2., 2.};     b = {1., 2., 2.};     c = {3., 2., 8.};     OpenCLDotProduct[{a, c}, b, output, 6]          (*          output -> {{{1., 2., 2.}, {3., 2., 8.}}, {1., 2., 2.}, {18., 68.}}          *)      I can't figure out what this output means or what the proper syntax is to do multiple dotproducts. I'm also not sure if this implementation is even fast. I found a blog describing another implementation but I haven't been able to compile it (http://www.openclblog.com/2012/11/opencl-and-dot-product.html).