I have employed a recursive call to a closure in order to mitigate against some race conditions I am getting (That's what I think it is). I'd like to know if (and why) this is a good solution or a bad solution.               function getResources(activity, resource) {         var q = when.defer(),         resourceQuery = constructSelectionQuery(resource),         timeoutCounter = 0,         timeoutLimit = 100;         function queryDatabase() {             query.getResult({                 query: resourceQuery             }, function(err, result) {                 if (result.length === 0) {                     if (timeoutCounter > timeoutLimit) {                         q.reject();                     }                     timeoutCounter++;                          //subsequent call(s)                     queryDatabase();                 } else {                     q.resolve(result);                 }             });         }              //initial call         queryDatabase();              return q.promise;              }      * * * What I am trying to ascertain is the validity of using recursion and closure in this combination - is this an acceptable way of approaching the problem of repeating the call to the database? Without the repeating of the call the result is sometimes empty. This is curious as this function is only called after the record has been saved. However this is in another system so I am assuming the speed of indexing is at fault in MySQL - I don't want to go into that aspect of the system as I'm happy with what I've got - My question is isolated to using this pattern - a recursive call to the closure as a way to repeat the call.