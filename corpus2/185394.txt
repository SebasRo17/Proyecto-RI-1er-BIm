I'm doing some independent research/study with a professor who's a very functional guy. The goal is to examine more of what's happening behind the scenes with functional languages than we normally would during the course of the class I'm also taking with him (in which we're writing interpreters). The independent course will go beyond the interpreter level and look at how we might translate some of the concepts to a hardware machine. Specifically, my professor mentioned two books, _Functional Programming: Application and Implementation_ by Peter Henderson -- which covers the _SECD machine_ (an idealized machine for functional computing), and _The Implementation of Functional Programming Languages_ by Simon Peyton Jones -- which covers the _SKI machine_ (and of course _combinators_ ). From the poking around I've done, these two books seem pretty legendary in the functional programming world -- which is great (I still think K&R is one of the best _C_ books). But, both books are also more than 30 years old. I'm curious if there has been any further research or instructive literature produced regarding these topics. It would also be interesting to know if any of these concepts are making their way into modern compilers and close-to-the- kernel interpreters.