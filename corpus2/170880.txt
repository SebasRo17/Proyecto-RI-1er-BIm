I used to be a fan of requiring XML comments for documentation. I've since changed my mind for two main reasons: >   1. Like good code, methods should be self-explanatory. >   2. In practice, most XML comments are useless noise that provide no > additional value. > Many times we simply use GhostDoc to generate generic comments, and this is what I mean by useless noise:                   /// <summary>         /// Gets or sets the unit of measure.         /// </summary>         /// <value>         /// The unit of measure.         /// </value>         public string UnitOfMeasure { get; set; }      To me, that's obvious. Having said that, if there were special instructions to include, then we should absolutely use XML comments. I like this excerpt from this article: > Sometimes, you will need to write comments. But, it should be the exception > not the rule. Comments should only be used when they are expressing > something that cannot be expressed in code. If you want to write elegant > code, strive to eliminate comments and instead write self-documenting code. **Am I wrong to think we should only be using XML comments when the code isn't enough to explain itself on its own?** I believe this is a good example where XML comments make pretty code look ugly. It takes a class like this...               public class RawMaterialLabel : EntityBase     {         public long     Id                      { get; set; }         public string   ManufacturerId          { get; set; }         public string   PartNumber              { get; set; }         public string   Quantity                { get; set; }         public string   UnitOfMeasure           { get; set; }         public string   LotNumber               { get; set; }         public string   SublotNumber            { get; set; }         public int      LabelSerialNumber       { get; set; }         public string   PurchaseOrderNumber     { get; set; }         public string   PurchaseOrderLineNumber { get; set; }         public DateTime ManufacturingDate       { get; set; }         public string   LastModifiedUser        { get; set; }         public DateTime LastModifiedTime        { get; set; }         public Binary   VersionNumber           { get; set; }              public ICollection<LotEquipmentScan> LotEquipmentScans { get; private set; }     }      ... And turns it into this:               /// <summary>     /// Container for properties of a raw material label     /// </summary>     public class RawMaterialLabel : EntityBase     {         /// <summary>         /// Gets or sets the id.         /// </summary>         /// <value>         /// The id.         /// </value>         public long Id { get; set; }              /// <summary>         /// Gets or sets the manufacturer id.         /// </summary>         /// <value>         /// The manufacturer id.         /// </value>         public string ManufacturerId { get; set; }              /// <summary>         /// Gets or sets the part number.         /// </summary>         /// <value>         /// The part number.         /// </value>         public string PartNumber { get; set; }              /// <summary>         /// Gets or sets the quantity.         /// </summary>         /// <value>         /// The quantity.         /// </value>         public string Quantity { get; set; }              /// <summary>         /// Gets or sets the unit of measure.         /// </summary>         /// <value>         /// The unit of measure.         /// </value>         public string UnitOfMeasure { get; set; }              /// <summary>         /// Gets or sets the lot number.         /// </summary>         /// <value>         /// The lot number.         /// </value>         public string LotNumber { get; set; }              /// <summary>         /// Gets or sets the sublot number.         /// </summary>         /// <value>         /// The sublot number.         /// </value>         public string SublotNumber { get; set; }              /// <summary>         /// Gets or sets the label serial number.         /// </summary>         /// <value>         /// The label serial number.         /// </value>         public int LabelSerialNumber { get; set; }              /// <summary>         /// Gets or sets the purchase order number.         /// </summary>         /// <value>         /// The purchase order number.         /// </value>         public string PurchaseOrderNumber { get; set; }              /// <summary>         /// Gets or sets the purchase order line number.         /// </summary>         /// <value>         /// The purchase order line number.         /// </value>         public string PurchaseOrderLineNumber { get; set; }              /// <summary>         /// Gets or sets the manufacturing date.         /// </summary>         /// <value>         /// The manufacturing date.         /// </value>         public DateTime ManufacturingDate { get; set; }              /// <summary>         /// Gets or sets the last modified user.         /// </summary>         /// <value>         /// The last modified user.         /// </value>         public string LastModifiedUser { get; set; }              /// <summary>         /// Gets or sets the last modified time.         /// </summary>         /// <value>         /// The last modified time.         /// </value>         public DateTime LastModifiedTime { get; set; }              /// <summary>         /// Gets or sets the version number.         /// </summary>         /// <value>         /// The version number.         /// </value>         public Binary VersionNumber { get; set; }              /// <summary>         /// Gets the lot equipment scans.         /// </summary>         /// <value>         /// The lot equipment scans.         /// </value>         public ICollection<LotEquipmentScan> LotEquipmentScans { get; private set; }     }