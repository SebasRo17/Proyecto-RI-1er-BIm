I am going through Abelson and Sussman (Structure and Interpretation of Computer Programs) and I am a little confused about when normal order evaluation is used and when applicative order evaluation is used. This sentence throws me off: > _**Lisp uses applicative-order evaluation_** partly because of the > additional efficiency obtained from avoiding multiple evaluations of > expressions suich as those illustrated with (+5 1) and (*5 2) above and, > more significantly, because normal-order evaluation becomes much more > complicated to deal with when we leave the realm of procedures that can be > modeled by substitution. [emphasis added] on page 17 paragraph 1. However, in exercise 1.6, the implication is that Lisp uses normal order evaluation for primitives but applicative order evaluation for complex procedures. Could someone clarify?