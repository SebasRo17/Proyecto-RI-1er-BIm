You have all convinced me not to type in formulas with subscripts. However, in order to be able to match the subscripts in my whiteboard math, I figure a 2nd best solution is to want to display instances of `C[i]` with $C_i$ , only in the output, for a chosen set of $C$ and for any $i$               DisplaySubscripted[val_] :=       Format[val[args__]] := Interpretation[Subscript[val, args], val[args]]     SubscriptVariables[valueList_] := Scan[DisplaySubscripted, valueList];          (* Usage*)     SubscriptVariables[{a, b}]; (* Label the variables I want to display subscripted*)     Solve[a[1] + a[2] - 2 b[2] == c[1], b[2]]     (* This subscripts the a[1], a[2], b[2] and not the c[1], as I hoped.       It also doesn't seem to mess up the symbolics*)      Am I missing something, or is this a side-effect free approach to this problem? (it also works well with `Subsuperscript` and `a[1][2]` displaying as $a_1^2$ and it doesn't seem to mess up the superscript with powers) ALTERNATIVELY: I also thought that Notation may be a way to do this. Easy enough to do this for an arbitrary variable. e.g.               Needs["Notation`"];     DisplaySubscripted[var_] :=       Notation[ParsedBoxWrapper[         SubscriptBox[var, "1"]]\[DoubleLongLeftArrow]ParsedBoxWrapper[         RowBox[{var, "[", "1", "]"}]]];     DisplaySubscripted["f"];          f[1] (* Displays in output properly as f_1*)      However, I can't figure out how to match this for arbitrary subscript patterns. The obvious one does not work: `Notation[ParsedBoxWrapper[ SubscriptBox[var, "_"]]\\[DoubleLongLeftArrow]ParsedBoxWrapper[ RowBox[{var, "[", "_", "]"}]]]` I am also not entirely sure that passing `var_` as strings is the best way to do it, but if I use `DisplaySubscripted[f]` instead, it displays the namespace (i.e. `Global'f_1`). If the Format approach I gave first works, it seems much simpler.