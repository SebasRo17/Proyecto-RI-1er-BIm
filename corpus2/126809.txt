I understand this is a _very_ broad question, but I have worked with various aspects of this problem individually and am struggling to bring all the concepts and technologies together. I'd like to specify that answers should include these technologies:   * C#    * MVC 3 w/ Razor   * Javascript w/jQuery Anything above and beyond those (such as Backbone.js, Entity Framework, etc) are welcome as suggestions if they help answer the question which is: > **Using the above listed technologies, what is an _optimal_ strategy for > organizing code and logic while maintaining scalability and the ability to > create a rich, fast, clean UI?** Ideally the focus should be put on a solution being deployed in a business/corporate environment. On that note, the technologies list above **will not be changed** so please don't offer solutions with "you should be using _xxx_ instead of _yyy_ that you are using now". **Background** I work with jQuery everyday, have adopted ASP.NET's MVC and have been working with C# for a long time. So you can present solutions assuming intermediate- to-advanced knowledge of those technologies. I'll organize the question into **smaller parts** to make it simpler to respond to: **1\. Project structure** Given I am working with ASP.NET MVC (in **Visual Studio 2010** ) I would like a directory structure solution that offers some acceptance of the main layout this type of application. Something like Brunch I suppose, but with a little more detail of what each folder would contain and how it works with other areas of the app. **2\. Data access** I'd like to modualize my data access as much as I can, with an API-type structure. You can assume lots of POCO objects (`User`, `UserGroup`, `Customer`, `OrderHeader`, `OrderDetails`, etc), but there will also be some complex reports that require data intensive SQL and careful UI rendering. **EF + LINQ** are fantastic for the former but not so much for the latter. I can't find something that seems to fit both scenerios without being overly complicated or overly simple. **3\. Client-Side Code Organization and UI Rendering** Like most developers first picking up jQuery, I fell into the trap of mashing together code wherever it needed to go but quickly found it piling up and turning ugly. Although I've come leaps and bounds since then, I still struggle with modularizing my code and working with various parts of the UI without repeating code. As an example, a typical piece of code I might write would look like this, I have commented the stuff that bothers me ( _note that I've since changed to using deferred AJAX calls and separated the actual data requests from the DOM manipulation_ ):               $('#doSomethingDangerous').click(function () {         // maybe confirm something first         if (confirm('Are you sure you want to do this?')) {                     // show a spinner?  something global would be preferred so I dont have to repeat this on every page              $('#loading').show();                    // maybe the page should notify the user of what's going on in addition to the dialog?             $('#results').show().html('<h2>Please wait, this may take a while...</h2>');                    $.ajax({                 url: 'blah/DoDangerousThing',                 success: function (data) {                                          // The results will be loaded to the DOM obviously, is there a better way to pull this type of specific code out of the data access calls?                     $('#results').empty();                     $('#results').append('<b>' + data.length + '</b> users were affected by this dangerous activity');                     $('#results').append('<ul>');                          // I've recently started to use jQuery templates for this sort of logic, is that the way to go?                     $(data).each(function (i, user) {                         $('#results').append('<li>' + user.Username + '</li>');                     });                                         $('#results').append('</ul>');                          // Need to hide the spinner, again would prefer to have this done elsewhere                     $('#loading').hide();                 }             });         }     });      **General Questions**   * Client MVC vs. server MVC? My project is already a server-side MVC structure, so is there still a need for client MVC like Backbone.js provides?   * Should Javascript files get created for each object (like an `OrderHeader.js`) and then minified/merged during the build? Or should there just be an `Order.js` which has logic for `OrderHeader, OrderDetails, Reports` etc?   * How should complex queries be handled? Right now my leading theory is `/Reports/Orders-By-Date/` or something along those lines and I use a custom SQL query that renders a custom dataset (or `ViewModel`) to the Razor View. But what about paging, sorting, etc? Is this better to be done client or server side? (assume larger dataset - 2 to 3 second SQL query)   * I've read through Microsoft's Project Silk. Is this a good way to go? How does it compare to Backbone.js or others?   * I'm very accustomed to an N-tiered architecture, do these concepts somewhat throw that out the window? It seems MVC is like a bunch of mini N-tiered sections within what would have been the front-end or top tier in the past. Again the more _specific_ your answers are the better they will be. **I've read alot of high level documentation and examples** , I'm trying to **better understand translating it into real world examples**.