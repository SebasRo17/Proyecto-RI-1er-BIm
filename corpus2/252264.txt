I'm having trouble trying to design a class structure for some search functionality. It's quite possible that I'm approaching this incorrectly altogether, but putting that aside I'm curious how other people would approach a situation as follows: We need search functionality that allows users to access parcel information:   * People will be able to search via 3 different search methods -- MethodA, MethodB, MethodC.   (To give some perspective on what I mean by "method", lets think of these as things like a one line search that will do some intelligent parsing, another method has specific form fields for entering each parameter, etc.)   * People will be able to search via 3 different search types -- TypeA, TypeB, TypeC. (For example, search by owner, search by parcel address, etc.) The situation isn't terribly complex, but what I'm stuck on is whether I should design my classes around an abstract method object, or an abstract type object. Essentially, should I do this:               public class ConcreteMethodA : BaseMethod      {       public ReturnDataType GetResultsTypeA(){};       public ReturnDataType GetResultsTypeB(){};       //Etc.     }      Or this:               public class ConcreteTypeA : BaseType     {       public ReturnDataType GetResultsMethodA(){};       public ReturnDataType GetResultsMethodB(){};       //Etc.     }      If you do have some advice about how to solve my specific scenario, I will certainly appreciate it. However, I'm more interested in **heuristics** for approaching a design problem of this nature.