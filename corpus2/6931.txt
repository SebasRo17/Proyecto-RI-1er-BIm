One of the key steps in merge sort is the merging step. Given two sorted lists               sorted1={2,6,10,13,16,17,19};     sorted2={1,3,4,5,7,8,9,11,12,14,15,18,20};      of integers, we want to produce a new list as follows:   1. Start with an empty list `acc`.   2. Compare the first elements of `sorted1` and `sorted2`. Append the smaller one to `acc`.   3. Remove the element used in step 2 from either `sorted1` or `sorted2`.   4. If neither `sorted1` nor `sorted2` is empty, go to step 2. Otherwise append the remaining list to `acc` and output the value of `acc`. Applying this process to `sorted1` and `sorted2`, we get               acc={1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}      _Added in response to Rojo's question: We can carry out this procedure even if the two lists are not pre-sorted. So`list1` and `list2` below are not assumed to be sorted._ If there were a built-in function `MergeList` which carries out this process, it would probably take three arguments `list1`, `list2`, and `f`. Here `f` is a Boolean function of two arguments used to decide which element to pick. In the case of merge sort, `f = LessEqual`. I feel that `MergeList` is a fundamental list operation, so **Question 1: Is there such a built-in function or one very close to that?** If I were to write such a function in Scheme, I would use a recursive definition equivalent to the following:               MergeList[list1_,{},f_,acc_:{}]:=Join[acc,list1];     MergeList[{},list2_,f_,acc_:{}]:=Join[acc,list2];     MergeList[list1_,list2_,f_,acc_:{}]:=      If[       f@@First/@{list1,list2},       MergeList[Rest[list1],list2,f,Append[acc,First[list1]]],       MergeList[list1,Rest[list2],f,Append[acc,First[list2]]]      ]      _Sample output with unsorted lists:_               In[2]:= MergeList[{2,5,1},{3,6,4},LessEqual]     Out[2]= {2,3,5,1,6,4}      My impression is that recursive solutions tend to be inefficient in Mathematica, so **Question 2: What would be a better way to implement`MergeList`?** If you have tips about converting loops into their functional equivalents, feel free to mention them as well.