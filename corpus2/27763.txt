This is partly a math question, partly a _Mathematica_ question. For educational purposes, I'm making a simple demonstration to create a velocity over time graph from six locators. On the basis of input from the user in the velocity graph (he moves the graph control points), a distance over time graph and an acceleration over time graph will be automatically produced through integration and differentiation. Trouble is, a piecewise linear function leaves corners for which the derivative is undefined. There is also a real-world issue: an object cannot instantaneously jump from an acceleration of 2 to 3. I would like the velocity function to "round" the corners. I don't want to use `Bezier` or `BSpline` because the control points do not lie on the graph of the function. I suspect that `Fit` will be of use, but I'm unsure what model to use that will have the function intersect with the points where the locators are positioned. Suggetions about the math (which model) and/or the _Mathematica_ code are appreciated. Here's a simplified version of the code: ![velocity over time graph](http://i.stack.imgur.com/m8YFv.png)               Manipulate[      LocatorPane[       Dynamic[pts, (pts = #;           pts = Function[             pnt, {.25 Round[4 pnt[[1]]], .1 Round[10 pnt[[2]]]}] /@             pts) &],       data = (Sort@pts);       Dynamic@Show[{ListPlot[{data},           ImageSize -> 550,           Joined -> True,           AspectRatio -> 1/2,           Epilog ->             Dynamic@MapIndexed[Text[#2[[1]], Offset[{5, 10}, #1]] &,               data],           BaseStyle -> 12,           AxesLabel -> {"time (min)", "velocity \n(m/s)("},           PlotRange -> {{0, 30}, {-20, 20}}, Axes -> True,            ImageSize -> 450]}]],           {{pts, {{0, 0}, {4, 12}, {7, 12}, {23, -12}, {25, -12}, {27, -6}}},        ControlType -> None}]