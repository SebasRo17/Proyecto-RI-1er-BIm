I am confused as to what the problems could be if a constructor was inherited from a base class. Cpp Primer Plus says, > Constructors are different from other class methods in that they create new > objects, _whereas other methods are invoked by existing objects_. **This is > one reason constructors aren’t inherited**. Inheritance means a derived > object can use a base-class method, but, in the case of constructors, the > object doesn’t exist until after the constructor has done its work. I understand the constructor is called before object construction is completed. How can it lead to problems if a child class inherits ( _By inheriting I mean the child class is able to override the parent class method etc. Not just accessing the parent class method_ ) the parent constructor? I understand there is no necessity of explicitly calling a constructor from within a code[not that I am aware of as yet.] except while creating objects. Even then you can do so using some mechanism to invoke the parent constuctor [ In cpp, using `::` or using `member initialiser list`, In java using `super`]. In Java there is an enforcement to call it in the 1st line, I understand that is to ensure the parent object is created first and then the child object construction proceeds. It can **overrride** it. But, I can't come up with situations where this can pose a problem. If the child does inherit the parent constructor what can go wrong? So is this just to keep away from inheriting unecessary functions. Or is there more to it?