This is a programming problem that I haven't came across yet and I want to make sure I'm tackling it in an efficient manner. I have an array of dictionaries, with each dictionary consisting of a "url" key and a "id" key with their corresponding values. I then iterate over this array and throw each URL value into a request object that I then send to an API to be processed. The API sends them all back at once, not necessarily in the order I sent them with other attributes that I use the API for gathering. **My question is:** Now that I have all these URLs and their data, how do I match them back with the IDs that they corresponded to in order to add all these attributes (the ID + the new attributes the API returned) into a database? **My solution:** Create _one_ dictionary with the URL of each item as the _key_ and the ID as the _value_ of the key, and then when I get the URLs back just find the value that responds to that URL key. Is there a better solution to this problem? Maybe architecturally I should be doing this all differently in a way that better facilitates an answer?