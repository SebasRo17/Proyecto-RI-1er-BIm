When doing Domain Driven Design it is advised that services should be stateless. There are several kinds of services when doing DDD:   * Application services.   * Domain services.   * Infrastructure services.   * Factories, Repositories, Specifications,...etc. How exactly do I make a service stateless? Does that mean I shouldn't have any instance variables in a class? Is there any guidelines on making a service/class stateless? I could really use a code sample that illustrate the difference between a stateful and stateless service. Example: (Is this class stateful or not?)               Class DataToCsvFileGenerator{              private String filePath;         private ResultSet data;              public String createCsv(ResultSet data){            this.data=data;                 this.createLocalFile();            this.loadDataIntoFile();                 return this.filePath;         }              private void createLocalFile(){                 this.filePath=//... logic to create file             }              private void loadDataIntoFile(){                 //function uses this.filePath to load data             }     }      Notice that any successive calls to `createCsv()` won't be affected by any prior invocation.