For simplicity's sake, let the polymer's composing particle be integer 3-tuples (on 3D Cartesian grid), such that:   1. Polymer-ness -- for all particle there is an directly adjacent neighbor. i.e in directions of {{0,0,1}, {0,0,-1}, {0,1,0}, {0,-1,0}, {1,0,0}, {-1,0,0}}   2. Of loose spacial density -- there's no more than $d_n$ particles in a radius $n$ sphere around each particle The plot looks interesting. DLA-esque. In fact, if we let $ d_n = <3^n> $, it appears rather dimensionless i.e. factal looking However my code was slow and it's a pain to generate a set larger than 400 particles (~7mins) ![200 particles](http://i.stack.imgur.com/WW7Gt.png) Moreover, how can I spin the plot independently around 2 spatial axis? (like that asteroid in Armageddon IYNWIM) I tried ViewAngle and use 2 RotationTransform to rotate the vector. However, that's not how it seems to works.               Clear["Global`*"];     colorPalette = (#/3 + 0.2) & /@ {1, 2, 3};     radiusPlaette = {0.63, 0.53, 0.46};     adjLimit = {3, 9, 27, 81};     idx = Range[Length@adjLimit];     dir = {{1, 0, 0}, {-1, 0, 0}, {0, 1, 0}, {0, -1, 0}, {0, 0, 1}, {0,       0, -1}};     pos = {{0, 0, 0}}; test = {};          adj[x_, d_] := Cases[pos, _?(EuclideanDistance[x, #] <= d &)];          Dynamic[Length[pos]]          (*Polymer, nice-looking spheres*)     Dynamic[     Graphics3D[{Hue[Take[colorPalette, {Mod[#2, 3] + 1}], 1, 0.1],       Sphere[#1 - {0.5, 0.5, 0.5} - Mean[pos],         Take[radiusPlaette, {Mod[#2, 3] + 1}]]} & @@@         MapThread[List, {pos, Range[Length@pos]}], Axes -> False,        Boxed -> False, Lighting -> Automatic, SphericalRegion -> True ]]          (*Alternative layout     (*Colored Boxes*)      Dynamic[Graphics3D[{Hue[1.*#2/3+0.15,0.7,1],Cuboid[#1-{0.5,0.5,0.5}-     Mean[pos]]}&@@@MapThread[List,{pos,Range[Length@pos]}],Axes->     False,Boxed->False,Lighting->{{"Ambient",White}}, SphericalRegion->True]]     *)          Timing[      Do[       out = Catch[While[True,          stem = RandomChoice[pos];            rnd = stem + RandomChoice[dir];          listadj1 = Length /@ (adj[rnd, #] & /@ idx);              adj1 = And @@ MapThread[(#1 <= #2) &, {listadj1, adjLimit}];          listadj2 = (Function[x, Max[Length /@ (adj[#, x] & /@ adj[rnd, x])]] /@ idx);              adj2 = And @@ MapThread[(#1 <= #2) &, {listadj2, adjLimit}];               If[! MemberQ[pos, rnd] && adj1 && adj2,(*Debug*)           AppendTo[test, listadj2]; Throw[rnd]];          ]];       AppendTo[pos, out];       , {399}]      ]     (*Debug*)     Last@Sort[test]     Tally[Length /@ (adj[#, 2] & /@ pos)]      .