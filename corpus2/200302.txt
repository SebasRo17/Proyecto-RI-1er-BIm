When rolling out a new feature, sometimes it makes sense to notify the end user what it is, and give them an opportunity to provide feedback whether the software should get them to 'try something new' or 'put it off'. ![Gmail new feature, "Try it now", "Not now"](http://i.stack.imgur.com/6jWVc.png) In a cloud software, how should user preference data such as this be managed? A small piece of information would have to be stored to save the preference, but eventually, it becomes irrelevant. (The old way is phased out.) The simple thing to do is just leave that data there. After all, it doesn't take much space. Eventually, as more features and changes come and go, and more messages are added, dismissed, and removed; there would be many items in the data storage that is no longer used, and there would be cost in the form of programmer hours in preserving or separating that data. Are there coding and software maintenance patterns that would make sense to get rid of old data structures along with removal of old features? Is there a common solution to this data cleanup?