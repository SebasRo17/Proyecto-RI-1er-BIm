This question relates to a question I asked earlier, which can be used for reference here: Is this the best way to approach this design? Is this an example of MVC? While coding, I came across a realization that I am not creating 'loose coupling'. The way I am trying to solve the problem right now is creating an instance of the **Log Collector Class** in **MAIN** and passing it around to each form classes constructor. Now, in theory, the **Log Collector Class** needs to be instantiated only once for the whole program run-time. I was thinking about using a Singleton Pattern for this class, ~~but than thought that if two forms need to update this class at the same time, there would be an issue.~~ What would be the best way to have the Log Collector Class be shared via multiple forms without instantiating a new version of the Log Collector Class each time? I've done some research before posting this question and have read some people say using a static class for this type of design. However, this doesn't seem like loose coupling to me. **Another Question** Would an Interface for the Log Collector Class be best used here for all forms wanting to communicate with it? For example:               public interface LogCollectorInterface     {         void SendLogMessage(string logMessage);     }      Now when all forms want to communicate with the **Log Collector Class** , this is the only function they really need to use, SendLogMessage. Would instantiating the interface rather than the **Log Collector Class** be the best way to go about it? FWIW, I am not sure if 'loose coupling' is the best direction is the way to go. It's one of those things I have caught on to while reading questions answered related to OOP. Being a new OOP programmer, it makes the most sense to me for both as an organizational standpoint and testing standpont. **Edit:** This will not be a multi-threading application so no two forms can update the log collector class at the same time.