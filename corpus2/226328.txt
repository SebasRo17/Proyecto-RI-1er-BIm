I have a class 'Task' which represents any Task that is done by an individual employee. For this class I wrote properties like EmpID, Priority, etc. and methods like `AddNewTask(),` `ArchiveTask(),` `MoveTaskToUser(int userid),` etc. Then I wrote a method               public List<Task> GetAllTasks()      This seemed incorrect to me with regard to OOP. I thought any single task object should represent one single task and it doesnt seem right to call `taskObj.GetAllTasks()` because object taskObj should carry out methods on the single Task that it represents. So I changed the method to static:               public static List<Task> GetAllTasks()      Now I call `Task.GetAllTasks()`. Is this the proper way to follow object oriented approach. Was the earlier idea of calling the method from single object correct?