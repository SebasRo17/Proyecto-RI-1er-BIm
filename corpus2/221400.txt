I have recently finished a piece of code that passed all tests. (Here is some idea what it does and Here is some actual code.) Problems began, however, when I run my code on the cloud with actual data. Specifically, the remote database I am sending data to, rejects requests if data do not conform to certain scheme. E.g. I cannot send two hashes like that:               array(         array('key' => 'string'),         array('key' => array('string1', 'string2'))     )      Here the type of `key` must be fixed -- either string or array of strings (or sometjing else). I have tried to fix this problem quickly, which lead to some messy behaviour, showing that my code is not yet robust and my tests are not yet sufficient. I wonder what are best practices here. I've read Uncle Bob's book, where he recommends to test for _Boundary Values_. Does it mean to try all possible types of data as method arguments for testing? Does it mean I should start every method with multiple "if statements" to check for input validity, to make those tests pass? Are there cases where it is pointless to worry about errors but rather let them go and deal with them only if they occur? Is there good rule of thumb when to throw `Exceptions` and when only to log messages? I have tried to follow the approach to throw `Exception` when thing _should not happen_ and to output `message` when it can happen but I still want to continue. On the hand, I can still throw `Exception` and catch it later, so I am still not quite certain what is good approach here. I still haven't used custom `Exceptions`, any good practical examples you know to learn about them? Are there a good sources to learn about those things? I know it is a big topic and I've read long philosophical articles on TDD and BDD but they tend to dwell on the abstract level, without breaking down to simple practical rules supported by easy examples. So I am looking for more practical help here, many thanks!