I am primarily a software developer, and as such, I do a lot of reading on the subject of Object Oriented Design; the 5 SOLID principles, design patterns, composition over inheritance etc. I currently work as a PHP developer building web applications in Symfony 2. Along with learning to use an Agile/BDD/TDD approach to building web applications, I try to incorporate some OOD by searching out the abstractions and jotting down some interfaces for classes to communicate with (dependency inversion). I was recently tasked with building a small, in-house CMS for a small, static website. This seemed a great opportunity to create, for example, an abstract "content" class and derive different types of content from it, or an interface for persisting content to the database. As it turned out, I didn't need any of the OOD knowledge that I have spent hours amassing. I just created Entities for each content type (albeit they derived from a base Entity), and I used the Symfony Form API to render forms for User input. Symfony functionality, when combined with Doctrine, handled all of the persisting to the DB. All that was left was to retrieve from the DB, process it, and pass it to the Twig template. So in consideration of this, I imagine that even had the application been much larger, it seems that the nature of most web applications is to take user input, process it, perhaps persist it, and render a view. None of this seems to require any OOD knowledge or design pattern knowledge. My question is whether my time is wasted learning OOD, or if I shouldn't place such importance on it, as perhaps modern web application development doesn't really fit that realm of "software" development. NB: I am aware that if I was to build a framework such as Symfony 2, then the OOD principles would apply, as that is truely building software from the ground up. My question is more related to when we use the Symfony (or any other) framework. **Edit** A better way to rephrase my question: do the majority of web application developers, whilst being rich in the knowledge of OOD, find that they needn't apply a vast majority of this knowledge when building web applications, because today's frameworks shelter you from such low level design. Does anyone have any examples of modules they have built that required Object Oriented methodology?