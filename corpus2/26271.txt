Pattern matching is great but it has its limitations. Consider sorting a list of numbers from smallest to largest:               RandomSample[Range[10]] //. {a___, b_, c_, d___} /; b > c :> {a, c, b, d}      > {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} However, running               RandomSample[Range[1000]] //. {a___, b_, c_, d___} /; b > c :> {a, c, b, d}      > ReplaceRepeated::rrlim: Exiting after {<<1000>>} scaned 65536 times. >>   >  {1, 2, 3, 4, 5, 6, 7, 9, 11, 13, <<990>>} is a different story. The code takes a long time to run and the resulting output is not sorted properly. Now, obviously, we would want to use `Sort` in this type of scenario, but now I'm curious to know: at what point does a job become too computationally intensive for the pattern matcher?