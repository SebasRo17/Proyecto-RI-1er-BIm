Is it possible to solve Killing equations in _Mathematica_ for a general vector? I am looking for a way to create Killing equations and then find what the vectors are, but I have a problem with this. * * * ### Introduction First of all what they are. Without going in to the all gory details of general relativity, in short, Killing vectors are vectors that satisfy Killing equations: $\nabla_\mu X_\nu+\nabla_\nu X_\mu=0$ Killing vector, according to the dimensions we are working in (3D, 4D etc.), and what coordinates, is a list with number of elements equating the number of dimension. So If I'm working in 2D sperical coordinate system, and I'm only interested in radial and polar coordinates, I'll have a Killing vector of the form               X = { Xθ[θ,ϕ], Xϕ[θ,ϕ]}      If I'm working in 4D spherical coordinate system with coordinates $\\{t,r,\theta,\phi\\}$, I'll have a Killing vector with components               X = { Xt[t,r,θ,ϕ], Xr[t,r,θ,ϕ], Xθ[t,r,θ,ϕ], Xϕ[t,r,θ,ϕ]}      The above equation is given in terms of covariant derivative, and for covariant vector (with indices down) is $\nabla_\mu X_\nu=\frac{\partial X_\nu}{\partial x^\mu}-\Gamma^\lambda_{\mu \nu}X_\lambda$ Now $x^\mu$ is just coordinate for $\mu=t,r,\theta,\phi$, so $x^t=t, x^r=r$ etc. And $\Gamma^\lambda_{\mu \nu}$ are Christofell symbols that I can easily find. Oh, and sometimes the partial derivative is noted as $\partial_\mu$. * * * ### Example I'm working on an easy example, a 2D sphere. It's metric is given by $\begin{pmatrix} 1 & 0\\\ 0 & \sin^2\theta \end{pmatrix}$ My code is this               xIN = {θ, ϕ};     n = 2;     met = {{1, 0}, {0, Sin[θ]^2}};     inversemetric := Inverse[met] // FullSimplify     coord = xIN;          (*Christoffel symbols*)          affine :=       affine = Simplify[        Table[(1/2) Sum[           inversemetric[[μ, ρ]] (D[met[[ρ, ν]],                coord[[λ]]] +               D[met[[ρ, λ]], coord[[ν]]] -               D[met[[ν, λ]], coord[[μ]]]), {ρ, 1,             n}], {ν, 1, n}, {λ, 1, n}, {μ, 1, n}]]          listaffine :=        Table[{Style[           Subsuperscript[Γ,             Row[{coord[[ν]], coord[[λ]]}], coord[[μ]]],            18], Style[affine[[λ, ν, μ]], 14]}, {λ,           1, n}, {ν, 1, n}, {μ, 1, n}] // FullSimplify;          data = {#[[1]], "=", #[[2]], #[[3]], "=", #[[4]]} & /@         Partition[DeleteCases[Flatten[listaffine], Null], 4];          data = Insert[data[[#]], #, 1] & /@ Range[Length[data]];     TableForm[data]          (*Derivations*)          der[f_, σ_] := D[f, xIN[[σ]]]          derxU[xU_, μ_, ν_] :=       Module[{λ},         der[xU[[μ]], ν] +          Sum[affine[[ν, μ, λ]] xU[[λ]], {λ,            1, 2}]] // FullSimplify          derxd[xd_, μ_, ν_] :=       Module[{λ},         der[xd[[μ]], ν] -          Sum[affine[[ν, λ, μ]] xd[[λ]], {λ,            1, 2}]] // FullSimplify          derxUup[xU_, μ_, ν_] :=       Module[{λ, ρ},         Sum[inversemetric[[ν, ρ]] (der[xU[[μ]], ρ] +             Sum[affine[[ρ, μ, λ]] xU[[λ]], {\     λ, 1, 4}]), {ρ, 1, 4}]] // FullSimplify          derxdup[xd_, μ_, ν_] :=       Module[{λ, ρ},         Sum[inversemetric[[ν, ρ]] (der[xd[[μ]], ρ] -             Sum[affine[[ρ, λ, μ]] xd[[λ]], {\     λ, 1, 4}]), {ρ, 1, 4}]] // FullSimplify      Now, I have specified the general form of my Killing vector:               ξ = { ξθ[θ, ϕ], ξϕ[θ, ϕ]};      And I've set up Killing equations:               Killeq = Table[ derxd[ξ, ν, μ] + derxd[ξ, μ, ν] == 0,                                       {μ, 1, 2}, {ν, 1, 2}] // Flatten      And I get my equations, in Table form $$ \begin{array}{c} 2 \xi \theta ^{(1,0)}(\theta ,\phi )=0 \\\ \xi \theta ^{(0,1)}(\theta ,\phi )+\xi \phi ^{(1,0)}(\theta ,\phi )-2 \cot (\theta ) \xi \phi (\theta ,\phi )=0 \\\ \xi \theta ^{(0,1)}(\theta ,\phi )+\xi \phi ^{(1,0)}(\theta ,\phi )-2 \cot (\theta ) \xi \phi (\theta ,\phi )=0 \\\ 2 \sin (\theta ) \cos (\theta ) \xi \theta (\theta ,\phi )+2 \xi \phi ^{(0,1)}(\theta ,\phi )=0 \\\ \end{array} $$ And that's what I should get, so the code is working (yaaaay! :D) Now, even though I could just specify `Killeq[[1]] = 0` and so on, is there an automatic way for _Mathematica_ to see if there are same, and just give me the list of the ones left (Some kind of `If` statement)? The problem could be identifying which equation is which later on, but I could just look at the original form of Killeq and see it from there. This would be useful if I need to make `TeXForm` later on. And the second part that is bothering me is: How do I solve this? I tried with               DSolve[{ Killeq[[1]], Killeq[[2]], Killeq[[4]]}, { ξθ[θ, ϕ], ξϕ[θ, ϕ]}, {θ, ϕ}]      But I got the error: > >     `DSolve::overdet: There are fewer dependent variables than equations, >     so the system is overdetermined.` >   Is there a way of finding these kind of things with _Mathematica_? :\ * * * ### Edit I tried by separately solving each equation               Flatten[ Table[         DSolve[ Killeq[[i]], ξθ[θ, ϕ], {θ, ϕ}], {i, 1, 4}]]      And I get this: $$ \begin{array}{c} \xi \theta (\theta ,\phi )\to c_1(\phi ) \\\ \xi \theta (\theta ,\phi )\to \int_1^{\phi } \left(2 \cot (\theta ) \xi \phi (\theta ,K[1])-\xi \phi ^{(1,0)}(\theta ,K[1])\right) \, dK[1]+c_1(\theta ) \\\ \xi \theta (\theta ,\phi )\to \int_1^{\phi } \left(2 \cot (\theta ) \xi \phi (\theta ,K[1])-\xi \phi ^{(1,0)}(\theta ,K[1])\right) \, dK[1]+c_1(\theta ) \\\ \xi \theta (\theta ,\phi )\to -\csc (\theta ) \sec (\theta ) \xi \phi ^{(0,1)}(\theta ,\phi ) \\\ \end{array} $$ Now, given that my 2nd and 3rd equations are repeating, is there any way of solving this with _Mathematica_? I am interested, because it would greatly help me find Killing equations in higher dimensions.