### The Problem I regularly find myself writing the same code over and over again. For example if I want a value from a nested array structure I end up writing something like this:               $config = function_to_get_nested_array();     $node = $config;     foreach(array('vendor','product','config','leave') as $index => $key){         if(! isset($node[$key])){           //throw exception         }         $node = $node[$key];     }      I would prefer to have something like               $config = function_to_get_nested_array();     $node = get_node($config, 'vendor/product/config/leave');      But how do I implement it? ### Possible Solutions   1. I could implement a function as I did above. _BUT_ my packages heavily rely on autoloading and are purely OO. Right now I just have to clone an submodule in the right directory and everything works fine.   2. I could implement this where I need it. _BUT_ this means I have to implement it countless times in independent projects.   3. I could use a trait, if I was not stuck with PHP 5.3. Not an option for me.   4. I could implement a static service provider.  For various reasons static classes and methods are usually a bad choice, but I am tempted to do so in this case.               use vendor\product\helpers\ArrayTree as Tree     ...     $config = function_to_get_nested_array();     $node = Tree::getNode($config, 'vendor/product/config/leave');      Looks _very_ tempting, because it supports autoloading and namespaces. ### The Question Is there a better solution to implement this kind of helper functions?