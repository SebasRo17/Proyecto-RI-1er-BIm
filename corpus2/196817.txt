In my application I keep track of the running threads via a hash map, in that way I can retrieve the correct thread and do any actions. The app evolved in a way that new threads are created and old threads must be destroyed. My concern is if I'm removing the elements of the hash correctly, or if there's any efficient pattern. I'm developing in Java but I'll share the pseudo code:               # HashMap mainHashmap already initialized     List toDelete = new List();     # First step, stop the threads     For (each element in HashMap)     {       if (element.value is ThreadA)       {         element.value.stopThread();         toDelete.add(element.key);       }      }      # Then remove the element from the array      For (each key in toDelete)      {         mainHashmap.remove(key);      }      Thanks