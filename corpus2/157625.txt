Consider a logging system - used absolutely everywhere in your codebase. _(note - logging is just an example, don't take it too literally and point me at your favourite logging system)._               public interface ILogger     {         void LogMessage(string message);     }          // Just used for testing, do nothing     public class NullLogger : ILogger     {         public void LogMessage(string message) { }     }          public class FileLogger : ILogger     {         public FileLogger(string fileName){...}         public void LogMessage(string message) {              // Log to a file here          }     }      No I could make every single class have ILogger in ctor or param and use some IoC framework. Or I could just use something like               public static class Globals     {        public static ILogger Log = new NullLogger();     }      Use at any point by `Globals.Log.LogMessage("Hello Logging World");` And at 'Compositon Root' (main entry point of program) set `Globals.Log = new FileLogger("somefile.log");` Or this could be done as a Singleton of course. When is using DI and optionally IoC a step too far? What would you do in this case?