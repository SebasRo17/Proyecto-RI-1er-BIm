What lead to this, is when I noticed that `ListPlot3D` was much slower when adding a specific `InterpolationOrder->n` vs. not and letting the default take care of it. To find out why it is so much slower (timing is below), I asked Mathematica to tell me what default `InterpolationOrder` it used for the current plot. So I used the command                     AbsoluteOptions[p, InterpolationOrder]      To do that, which supposed to return the value used in p. From the excellent book `Mathematica Navigator`: ![Mathematica graphics](http://i.stack.imgur.com/pAfvp.png) But Mathematica gave an error and said that `InterpolationOrder is not a known option for` this plot. But http://reference.wolfram.com/language/ref/ListPlot3D.html shows it there. ![Mathematica graphics](http://i.stack.imgur.com/2ed8a.png) So my question is, how does one find what `InterpolationOrder` is used for current plot of `ListPlot3D`? My sub question is actually (the reason why I wanted to find the above), is why ListPlot3D slows down so much when specifying this option vs. not? Here is the MWE               Clear[x, y, z];     nElem = 10; h = 1/(nElem - 1);     grid = N@Table[{i*h, j*h}, {i, -10, 10, h}, {j, -10, 10, h}];     f[x_, y_] := Sin[x*10 y] Exp[-x y];     force = Map[f[#[[1]], #[[2]]] &, grid, {2}];     p = ListPlot3D[force, InterpolationOrder -> 1, AxesLabel -> {x, y, z}]      ![Mathematica graphics](http://i.stack.imgur.com/tYbdD.png)                AbsoluteOptions[p, InterpolationOrder]      (*error*)           Timing[ListPlot3D[force, InterpolationOrder -> 1, AxesLabel -> {x, y, z}]]        (*5.647236*)           Timing[ListPlot3D[force, AxesLabel -> {x, y, z}]]          (* 0.624004 *)      And as an extra reward, if you can answer how can one use `InterpolationOrder -> 1` and still have fast plot, I will up-vote you 2 times if I can. Version 10.0 on windows 7.