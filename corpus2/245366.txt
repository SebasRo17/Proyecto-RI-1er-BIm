I have been using this "design pattern" (may or may not be an "official" design pattern) for a while and I wanted to know if it had a name (so that I could name my classes after it). Example in PHP code (though applies to any language) (the example is stupid please don't mind):               interface Formatter {         public function format($variable);     }          class IntFormatter implements Formatter {         public function format($variable) {             echo (string) $variable;         }     }          class StringFormatter implements Formatter {         public function format($variable) {             echo '"' . $variable . '"';         }     }      Now the pattern I want to know if for this class:               class FormatterDispatcher implements Formatter {         private $formatters = [];              public function setFormatter($type, Formatter $formatter) {             $this->formatters[$type] = $formatter;         }              public function format($variable) {             $type = gettype($variable);                  return $this->formatters[$type]->format($variable);         }     }          // Now in the code:     $formatter = new FormatterDispatcher();     $formatter->setFormatter('int', new IntFormatter());     $formatter->setFormatter('string', new StringFormatter());          $formatter->format($variable);      As you can see, it's just a proxy to other implementations of the interface. It will select the implementation to use based on the class of the parameter (here I used primitive types for simplicity's sake). So what is the name of this pattern? PS: in a language that supports Generics, the code would definitely look better, but I guess the spirit would be the same.