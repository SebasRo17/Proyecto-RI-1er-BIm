I am learning how to structure an application using a web farm (for high availability rather than load). I have a pool of resources in which one user can access one element in the resource pool at any time. My constraints/requirements are:   * No database (Well, I do have access to this third party product's database. But we have zero control because of support issues etc, so assume no database)   * Pessimistic locking strategy   * Supports access from one or more sources   * No third party dependencies, I want to be in control of the development My current thought process is to have an archecture similar to the following: ![enter image description here](http://i.stack.imgur.com/jIrbg.png) In the above, I would have a central "lock server" which would deal with the locking from one or more sources. I would then have one or more slave's which would effectively take a copy of all the transactions in the case of a fail over scenario. The lock server would be a first come, first serve approach. My question, given my contraints/requirements, is this the best design for this problem? _If I can improve the question, please drop me a comment, thanks_