I have a design problem related to a public interface, the names of methods, and the understanding of my API and code. I have two classes like this:               class A:         ...         function collision(self):             ....          ...          class B:         ....         function _collision(self, another_object, l, r, t, b):             ....      The first class has one public method named _collision_ , and the second has one private method called _ _collision_. The two methods differs in argument type and number. As an example let's say that _ _collision_ checks if the object is colliding with another object with certain conditions _l_ , _r_ , _t_ , _b_ (collide on the left side, right side, etc) and returns _true_ or _false_. The public _collision_ method, on the other hand, resolves all the collisions of the object with other objects. The two methods have the same name because I think it's better to avoid overloading the design with different names for methods that do almost the same thing, but in distinct contexts and classes. Is this clear enough to the reader or I should change the method's name?