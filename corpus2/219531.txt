In the case of an application with a single simple responsibility (eg, a simple replacement for `grep` or `wc`), which of these designs is preferred and why? I find that they are all testable and they all do their job. Does any of them have any significant advantages over the other? 1: All methods in the main class:               public class App {         public static void main(String[] args)         {             App app = new App();             AppInput input = app.readInput();             AppOutput output = app.processInputToOutput(input);             app.writeOutput(output);         }              public AppInput readInput() { .. }         public AppOutput processInputToOutput(AppInput input) { .. }         public void writeOutput(AppOutput output) { .. }     }      2: Basic methods in a separate class, main class only making calls to read and process input, and output result:               public class App {         public static void main(String[] args)         {             AppWorker worker = new AppWorker();             AppInput input = worker.readInput();             AppOutput output = worker.processInputToOutput(input);             worker.writeOutput(output);         }     }          public class AppWorker {         public AppInput readInput() { .. }         public AppOutput processInputToOutput(AppInput input) { .. }         public void writeOutput(AppOutput output) { .. }     }      3: Have all the work in a separate worker class, with the main class only instantiating the worker and triggering it to do its work:               public class App {         public static void main(String[] args)         {             AppWorker worker = new AppWorker();             worker.doYourWork();         }     }          public class AppWorker {         public void doYourWork()         {             AppInput input = readInput();             AppOutput output = processInputToOutput(input);             writeOutput(output);         }              public AppInput readInput() { .. }         public AppOutput processInputToOutput(AppInput input) { .. }         public void writeOutput(AppOutput output) { .. }          }