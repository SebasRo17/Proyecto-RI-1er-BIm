I recently ran across an idea put forth by Jaron Lanier called "phenotropic programming." The idea is to use 'surface' interfaces instead of single point interfaces in computer programs utilizing statistics to winnow out minor errors that would typically cause a "classical" program to catastrophically crash. The two-line description is here: > According to Jaron, the 'real difference between the current idea of > software, which is protocol adherence, and the idea [he is] discussing, > pattern recognition, has to do with the kinds of errors we're creating' and > if 'we don't find a different way of thinking about and creating software, > we will not be writing programs bigger than about 10 million lines of code > no matter how fast our processors become.' The slightly longer explanation is here. And the even longer explanation is here. So, the question, looking past the obvious robot-overlord connotations that people tend to pick out, how would one actually design and write a "phenotropic program?"