Is it OK to have a nested class raise an event and for the parent class that subscribes to that event subsequently raise another event, which it's parent class has subscribed to - thus passing the original event up the class hierarchy? It may be easy to explain like this... _We have..._               Class A     Class B     Class C      _Operation..._   1. Class C raises an event   2. Class B subscribes to that event, on notification it raises another event   3. Class A subscribes to Class B event, on notification it does something So the original event occurred in **Class C** and **Class A** is dealing with it. Using this method means I require event handlers in the middle class (Class B) whose only function is to pass along the notification - this seems a little smelly to me.