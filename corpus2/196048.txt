**Relevant Background Details**   1. We've got two types of VMs (Utility Boxes & Web Servers) that developers need.    2. We are going to be using git for version control.   3. We have developers who have different preferences for their working environment (e.g. Some Linux, Some Windows).   4. I'm in the Linux camp and I believe Git and Windows doesn't mix as well as Linux & Git. However, this could be personal bias.   5. We using Linux in production. **Building the Vagrant VMs for distribution**   1. Build a base box with the relevant OS for vagrant.    2. Using a configuration manager (e.g. Chef) to build out the Utility & Web images, convert them to new base boxes. It will clone service configurations from a centralized git repository.   3. Distribute the base boxes (really just virtual machine images) for the users to develop locally with vagrant. The distributed box will automatically pull in source code from certain git repos (e.g. libraries).   4. If changes are planned for the production environment, all developers will need to pull down new base boxes for vagrant as they come prepackaged. I think this is the simplest way for a new developer to deal with it. Staging is updated to match the new development VMs in preparation. **Developer Workflow**   1. Get assigned an issue from the issue tracker.   2. Use the vagrant VM to clone the current dev repository into the folder it shares with the host OS (so the Developer can use their favorite IDE).   3. Developer commits changes and tests locally.   4. When satisfied, Developer merges his changes to the dev repository. If conflicts, work with the Developer commited the conflicting code to resolve the issue.    5. When Dev is in a stable state, Dev is merged with the current Staging repository for QA of the new features. Nothing is pushed from Dev to Staging until Step #6 is completed. Hooks generate new copy of documentation for Staging.   6. Staging is cloned into Production once the QA is completed. Hooks generate new copy of documentation for Production. Is there any obvious flaws/pitfalls in the above or steps that are generally considered 'best practices' that should be added?