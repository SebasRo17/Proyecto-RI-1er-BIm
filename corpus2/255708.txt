Automatic documentation generation can be done with a variety of tools, GhostDoc being one of the more prominent. However, by definition, everything it generates is redundant. It takes a look at names of methods, classes, etc. and outputs English that _might_ explain them more verbosely. In the best case, it does what the reader could already do in their head (examples taken from here):               /// <summary>     /// Initializes a new instance of the <see cref="Person"/> class.     /// </summary>     public Person() ...      In the worst, it can actually end up generating bizarre documentation that is actually misleading in its attempt to heuristically figure out the meaning of names:               /// <summary>     /// Riches the text selection changed.     /// </summary>     /// <param name="richTextBox">The rich text box.</param>     private void RichTextSelection_Changed(System.Windows.Controls.RichTextBox richTextBox) ...      It seems that the attitude with GhostDoc is, "it's intrinsically better to have _some kind of_ formal XML documentation", but when that documentation is 100% redundant, why? Isn't it just wasting a ton of space at best? At my workplace, we have to document everything, and almost always with GhostDoc's auto-generated docs. Do you do this, and are there any rational reasons not to simply leave code undocumented if you aren't going to actually write the documentation yourself?