As the title states; what are the advantages and disadvantages of splitting teams by architecture tier rather than by product? **_For example:_** **Organization A** has three teams:   * Team Web and Front End   * Team APIs, Web-Services and Data Stuffs   * Team Embedded Stuffs _Organization A_ teams, over time, have become more specialized in their work rather than being truly full-stack developers. **Organization B** has three teams:   * Team Product Alpha   * Team Product Beta   * Team Product Charlie _Organization B_ has fostered an environment of full-stack developers that are all fairly interchangeable among one-another. What will **Organization A** be able to do better (and not so better) than **Organization B** , and vice versa? You don't necessarily need to take the examples to heart, as they were just to get the point of my question across.