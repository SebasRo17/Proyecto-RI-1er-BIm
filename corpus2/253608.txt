Ok so my scenario is this: I have a third party component that offers an API for communicating with an external system. The method calls for commanding the external system to do stuff, all return void. So what I have done is I have created a wrapper interface and have mocked out the external system. But since I have no real logic or checks in my code that calls stuff on the external API, the code is just procedural. I can't really test anything else than that the methods are being called.               _systemWrapper.DoStuff(a, b ,c , d);     _systemWrapper.DoStuff2(e, f);     _systemWrapper.DoStuff3(g);      I can't configure the external system from my tests, so integration tests are out of the question. So what I have done to test this, is that I have mocked out my "_systemWrapper" and am just verifying that the parameters I call on the mock contain the correct parameters. Is this a common way to solve this particular problem? To me it seems to be a bit exhaustive to have a test to make sure you have this and this line of code present. The problem is that this system is getting BIG and writing tests that assert that this and this line is present is getting out of hand, and refactoring is becoming real hard with all the tests failing if we change a call to the third party.