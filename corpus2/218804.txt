I'm currently working on a team that's developed several, extremely similar web applications in flash, and wants them ported into JavaScript. They also want a single application harness to host all of these applications, since they're all very similar. The application(s) are fairly standard. Each application consists of a set of selection/filter widgets, and a set of display(visualization) widgets. Selecting things in the "sidebar" will change what is displayed in the visualization area. Sometimes selecting things in the visualization area will affect what is in the selection/filter widgets. Both the set of selections, and the set of display widgets, may change from app to app, so they all have to be written to be pluggable. I've been working on this and have come up with the idea that a JSON based configuration file will be loaded into my next-gen application, and will essentially specify what the application will contain, and what interactions are permitted. I load an "application" file into my JavaScript application- harness, and that file tells my app what selections widgets to select from a set of pre-defined selection widgets (applications may share the same selections widgets). That's about as far as I've gotten as far as the implementation goes. it works, but I think the harder challenge lies ahead. Now I have to begin getting my display-visualization widgets working together, communicating with each other, and doing it in a way that's configuration based so that new applications can be created without writing any code for the client. My current plan is to define my display-visualization widgets in the same application file I currently define my selection widgets in, and for communication between these dynamically loaded components, I'll have a set of callback mappings from each selection widget to each display-visualization widget and vice-versa. Selection widgets will look through the file, see which functions they're supposed to call in an application-level namespace on certain events, and set those functions as callbacks for widget events. Display-Visualization widgets will do the same. So here are my questions:   1. Does this sound like a sane approach? Is there a better way to do something like this? Is there some kind of design pattern that people use in these situations that I might not be aware of?   2. I'm doing this in AngularJS, but I don't REALLY know AngularJS. I understand scoping, and some directives, but I'm very new to the framework, and I don't know what the AngularJS "way" of implementing this would be, so an angular-based design sketch would be very useful.  For instance, one thing that worries me is the design I have above is heavily based on eventing and callbacks, which I understand is really not the Angular way. On the other hand, many of the widgets (both types) cannot be angular. They'll be line graphs, data-grids, maps, bubble charts etc. I don't have the experience necessary to really understand how and whether my design should change based on my framework.