**Problem** I find myself nailing the class structure down by having too many unit tests which makes making changes hard. **Example** Assume we have a class A which uses classes B1 and B2. Class B1 uses classes C1 and C2. ![enter image description here](http://i.stack.imgur.com/XtOXG.png) I start off by writing tests first for class A. During that process, classes B1 and B2 are created. To make sure that classes B1 and B2 work, I start writing tests for B1 and B2. Same for C1 and C2. Now, I end up having unit tests for all the different levels off abstraction. Assuming class A was for example a payroll system and classes B1, B2, C1 and C2 came to existence while building A. **Question** Where did I go wrong in my process? Shouldn't I have written tests for levels B and C? Should my unit tests in level A cover all the functionality in levels B and C? What is the process which will lead to the "correct" unit tests and a flexible design? Perhaps you can make an example with two or more levels of abstraction and show me your process and the code (including unit tests and production code and design) that comes out of your process.