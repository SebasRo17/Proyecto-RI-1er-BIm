How do programming languages define and save functions/methods? I am creating an interpreted programming language in Ruby, and I am trying to figure out how to implement function declaration. My first idea is to save the content of the declaration in a map. For example, if I did something like               def a() {         callSomething();         x += 5;     }      Then I would add an entry into my map:               {         'a' => 'callSomething(); x += 5;'     }      The problem with this is that it would become recursive, because I would have to call my `parse` method on the string, which would then call `parse` again when it encountered `doSomething`, and then I would run out of stack space eventually. So, how do interpreted languages handle this?