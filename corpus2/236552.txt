Suppose I have two or more `UserControl` implementations with vastly different implementations but near identical code-behind. One strategy to avoid code duplication is as follows:   1. Change each `UserControl` to inherit from a new abstract class, `AwesomeUserControl`   2. Move all of the codebehind from each `UserControl` into `AwesomeUserControl` (`AwesomeUserControl` does not have an ascx file).   3. Add abstract getters to `AwesomeUserControl` for any controls from the ascx file of the original UserControls.   4. Implement these getters in each `UserControl`. This strategy works extremely well and is easy to maintain. However, it also introduces stupid scaffolding code; every new implementation of `AwesomeUserControl` has a bunch of getters to hook `AwesomeUserControl` the UI elements inside of the new control. Any time I find myself using a strategy which _requires_ copy-pasted scaffolding code, I worry that I am doing something wrong. Though it does have a nice effect of failing to compile if the UI elements are missing (as opposed to skipping the scaffolding code in favor of reflection and required naming). Is this use of inheritance reasonable?