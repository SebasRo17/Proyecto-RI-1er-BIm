I was recently reviewing some of my code and noticed that in a fit of absent- mindedness, I'd left a structure like the following:               $guid = empty($subscription->guid) ?  : $subscription->guid;      Now, this _wasn't doing what it's supposed to_ and is **wrong** , but since that property is always set now it was working fine, and there's no syntax error since 5.3 because of the following change: > Since PHP 5.3, it is possible to leave out the middle part of the ternary > operator. Expression expr1 ?: expr3 returns expr1 if expr1 evaluates to > TRUE, and expr3 otherwise. I wasn't aware of this change, and now I'm curious if I should be using it or not. This is something I was sorely missing from languages like ruby where you can do eg, `a = b || c` to get either `b` or `c` rather than a 'real' boolean. However, the syntax they've chosen for the ternary operator seems a little counter intuitive to me. Should I be using this in production code? It definitely threw myself when I saw it by accident.