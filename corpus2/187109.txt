I think my book (Programming Languages: Principles and Paradigms) is wrong. `a` is a vector, assume a C-like language:               b = 0;     a[f(3)] = a[f(3)] + 1;          int f(int n) {         if(b == 0) {             b = 1;                  return 1;         }         else return 2;     }      > It has the effect of assigning the value of `a[1] + 1` to `a[2]` whenever > the evaluation of the left-hand component of the assignment precedes the > evaluation of the right-hand one. For me, it has the opposite effect, that is assigning the value of `a[2] + 1` to `a[1]`. Because the left-hand component is evaluated first, so `f` returns `1` (because `b` is `0`), thus `a[1]`. Then the right-hand component is evaluated, `f` returns `2` (because now `b` is `1`), thus `a[2] + 1`. Am I right and the book is wrong? Unfortunatly there is no errata...