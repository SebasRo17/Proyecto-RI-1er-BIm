Lately I've been trying to split long methods into several short ones. **For example:** I have a `process_url()` function which splits URLs into components and then assigns them to some objects via their methods. Instead of implementing all this in one function, I only prepare the URL for splitting in `process_url()`, and then pass it over to `process_components()` function, which then passes the components to `assign_components()` function. At first, this seemed to improve readability, because instead of huge 'God' methods and functions I had smaller ones with more descriptive names. However, looking through some code I've written that way, I've found that I now have no idea whether these smaller functions are called by any other functions or methods. **Continuing previous example:** someone looking at the code might think that `process_components()` functionality is abstracted into a function because it's called by various methods and functions, when in fact it's only called by `process_url()`. This seems somewhat wrong. The alternative is to still write long methods and functions, but indicate their sections with comments. Is the function-splitting technique I described wrong? What is the preferred way of managing large functions and methods? **UPDATE:** My main concern is that abstracting code into a function might imply that it could be called by multiple other functions. **SEE ALSO:** discussions on reddit at /r/programming (provides a different perspective rather than most of the answers here) and /r/readablecode.