Static code analyzers like Fortify "complain" when an exception might be thrown inside a `finally` block, saying that `Using a throw statement inside a finally block breaks the logical progression through the try-catch-finally`. Normally I agree with this. But recently I've come across this code:               SomeFileWriter writer = null;      try {           //init the writer          //write into the file     } catch (...) {          //exception handling     } finally {          if (writer!= null) writer.close();       }      Now if the `writer` cannot be closed properly the `writer.close()` method will throw an exception. An exception should be thrown because (most probably) the file wasn't saved after writing. I could declare an extra variable, set it if there was an error closing the `writer` and throw an exception after the finally block. But this code works fine and I'm not sure whether to change it or not. What are the drawbacks of throwing an exception inside the `finally` block?