I have a function that (I believe) correctly takes the multivariate Taylor series expansion about the origin for some expression (first argument), in some variables (second argument, list), to different orders (third argument, list). My method for taking the multivariate series expansion follows the answer provided here. I take the series expansion to the highest order requested in the list (unless the highest order is infinity, in which case the next-highest is used), then I truncate the series by adding a "big-O" for each variable at its requested order plus one. If the requested order of a variable is infinity, no expansion is performed on that variable.               mySeriesMWE[exp_, x_List, o_List] := Module[       {pos, ow, xw, xDummy},       pos = Position[o, Infinity];       If[(Length[o] < 1) || (Length[pos] == Length[o]),       Return[exp],       ow = o // Delete[#, pos] &;       xw = x // Delete[#, pos] &;       (exp /.              Thread[xw -> xDummy*xw] //             Series[#, {xDummy, 0, Max[ow]}] & //            Normal) /.          {xDummy -> 1} //         # +            Sum[O[xw[[i]]]^(ow[[i]] + 1), {i, 1, Length[xw]}] & //        Normal       ]     ];      Usually, the results are as-expected, but there is a test-case that provides a result that is unintuitive, but I think, technically correct: when the expression is $x y z$ and we compare the expansion at the origin for the powers $\\{1,1,3\\}$ and $\\{1,1,\infty\\}$.               mySeriesMWE[x y z, {x, y, z}, {1, 1, 3}]     mySeriesMWE[x y z, {x, y, z}, {1, 1, Infinity}]     --output--     x y z     0      It was surprising to me that taking the third power in $z$ gave a better approximation (in fact, the entire expression) than not taking the expansion in $z$ at all! I checked in the general case, however, and I think this result is correct:               mySeriesMWE[f[x, y, z], {x, y, z}, {1, 1, 3}] // Expand     mySeriesMWE[f[x, y, z], {x, y, z}, {1, 1, Infinity}]     --output--     f[0,0,0]+z (f^(0,0,1))[0,0,0]+1/2 z^2 (f^(0,0,2))[0,0,0]+1/6 z^3 (f^(0,0,3))[0,0,0]+y (f^(0,1,0))[0,0,0]+y z (f^(0,1,1))[0,0,0]+1/2 y z^2 (f^(0,1,2))[0,0,0]+x (f^(1,0,0))[0,0,0]+x z (f^(1,0,1))[0,0,0]+1/2 x z^2 (f^(1,0,2))[0,0,0]+x y (f^(1,1,0))[0,0,0]+x y z (f^(1,1,1))[0,0,0]     f[0,0,z]+y (f^(0,1,0))[0,0,z]+x (f^(1,0,0))[0,0,z]      The last term in the first output is $x y z$ when the expression is $x y z$, and I believe both expansions match the definition of a multivariate Taylor series about the origin, throwing away the proper higher-order terms. My first question is: is the function valid for orders less-than infinity? (I believe the answer is "yes," but I have never seen a multivariate Taylor series expansion truncated in certain orders.) My second question is: is the function's behavior correct when the requested order of a variable is infinity? My third question is: is there a better way to write the function such that the variable we do not wish to expand in is somehow better-preserved? ## Edit Here's a better way, based on a suggestion by John Sidles. The idea is to "penalize" higher-order terms by weighting the replacement of `xDummy` with an exponent that depends (unintuitively: inversely) on the requested orders of expansion in that variable. Here is the modified function.               mySeriesMWE[exp_, x_List, o_List] := Module[        {pos, ow, xw, n, xDummy, xDummyPower, xDummyList, testList},        pos = Position[o, Infinity];        If[(Length[o] < 1) || (Length[pos] == Length[o]),         Return[exp],         ow = o // Delete[#, pos] &;         xw = x // Delete[#, pos] &;         n = Length[xw];         xDummyList = Array[xDummy^(1 + Max[ow] - ow[[#]]) &, n];         testList = Array[If[#1 == #2, ow[[#1]], 0] &, {n, n}];         xDummyPower =           Max[           Table[            Sum[             testList[[j, k]]*(1 + Max[ow] - ow[[k]]),             {k, 1, n}             ],            {j, 1, n}            ]           ];         (exp /.                Table[xw[[i]] -> xDummyList[[i]]*xw[[i]], {i, 1, n}] //                      Series[#, {xDummy, 0, xDummyPower}] & //              Normal) /.            {xDummy -> 1} //           # + Sum[O[xw[[i]]]^(ow[[i]] + 1), {i, 1, n}] & //          Normal         ]        ];      There is some ambiguity in choosing the order of expansion in `xDummy`. I chose a conservative value (including extra terms) and truncated with `O` in the usual manner, in case an obvious term was missed in the expansion (which does happen).