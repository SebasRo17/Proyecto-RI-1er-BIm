Based on the heat equation of the Mathematica Manual tutorial, I wrote the complex counterpart (Schroedinger) equation, for the free particle propagation of an initial wavepacket.               NDSolve[      {       I D[u[t, x, y], t] == -D[u[t, x, y], {x, 2}] -          D[u[t, x, y], {y, 2}], u[0., x, y] == Exp[-(x^2. + y^2.)],        u[t, -5., y] == u[t, 5., y], u[t, x, -5.] == u[t, x, 5.]       }, u, {t, 0., 1.}, {x, -5., 5.}, {y, -5., 5.}      ]      However the solver chokes with serveral warnings, the most serious being that the Maximum number of iterations has been reached that stops the calculation at `t == 0.48`. But the worst is that the solutions (plotted with `Table[Plot3D[ Evaluate[Abs[u[t, x, y] /. First[sol]]^2], {x, -5, 5}, {y, -5, 5}, PlotRange -> All, PlotPoints -> 100, Mesh -> False], {t, 0.0, 0.05, 0.01}]`) looks completely wrong with diverging values. **I know the`NDSolve` is not magic but does anybody know of an option to pass that will make this problem tractable with `NDSolve`?** I couldn't find a coherent explanation of the `NDSolve` options in the manual or anywhere else. Otherwise I would be playing with known methods of propagation, like Crank-Nicolson (for time propagation) and spectral methods (for spatial coordinates). A first nice step would to control the spatial (`x` and `y`) resolution and the time (`t`) resolution independently. **Note 1:** One knows that the time propagation of this problem for that particular initial condition is a simple spreading Gaussian probability, in particular the solution is well defined and smooth. **Note 2:** I tried with and without periodic boundary conditions in both cases the result is numerically wrong (diverging values). **Note 3:** I did some progress for the simpler 1+1D equation, that problem is well undercontrol with most of the defaults/automatics of `NDSolve`, I can propagate for a while:               sol = NDSolve[       {        I D[u[t, x], t] == -D[u[t, x], {x, 2}], u[0., x] == Exp[-(x^2.)],         u[t, 5.] == 0, u[t, -5.] == 0        }, u, {t, 0., 20.}, {x, -5., 5.}, MaxStepSize -> 0.1       ]     Animate[Plot[Evaluate[Abs[u[t, x] /. First[sol]]^2], {x, -5, 5},        PlotRange -> {0, 1}], {t, 0, 17, 0.01}]