I'm probably butchering the terms, if someone knows the appropriate terms - that'd be great. But my question is: should I design my classes so that their methods' parameters be accessible from the outside, or should they be all self contained? For example, I want to set a domain name for a class, which will served as the 'active' domain:               function setDomain($url){             if ($this -> domainUrl = parse_url($url, PHP_URL_HOST)){                 $this-> domain = $this->db->get_where('domains', array('host' => $this->domainUrl));                      return $this;             }                  return false;         }      and then go the route of:               function addDomain(){             $query = "INSERT INTO domains (host) VALUES ('$this->domainUrl')";             $this->db->query($query);             return $this         }      or I can abandon the entire route of setDomain(), and than just call the url explicitly, such as:               function addDomain($url){             $query = "INSERT INTO domains (host) VALUES ('$url')";             $this->db->query($query);         }      Which would you say is preferable and I guess - what is that dependent upon, because there might be cases where I'll need to call it explicitly.