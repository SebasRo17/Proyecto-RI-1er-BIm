This question is subjective but I was just curious how most programmers approach this. The sample below is in pseudo-C# but this should apply to Java, C++, and other OOP languages as well. Anyway, when writing helper methods in my classes, I tend to declare them as static and just pass the fields if the helper method needs them. For example, given the code below, I prefer to use **Method Call #2**.               class Foo     {       Bar _bar;            public void DoSomethingWithBar()       {         // Method Call #1.         DoSomethingWithBarImpl();              // Method Call #2.         DoSomethingWithBarImpl(_bar);       }            private void DoSomethingWithBarImpl()       {         _bar.DoSomething();       }            private static void DoSomethingWithBarImpl(Bar bar)       {         bar.DoSomething();       }     }      My reason for doing this is that it makes it clear (to my eyes at least) that the helper method has a possible side-effect on other objects - even without reading its implementation. I find that I can quickly grok methods that use this practice and thus help me in debugging things. Which do you _prefer_ to do in your own code and what are your reasons for doing so?