I've worked in some projects where most of the business logic was implemented on the database (mostly through stored procedures). On the other side, I've heard from some fellow programmers that this is a bad practice ("Databases are there to store data. Applications are there to do the rest"). Which of these approaches is the generally better? The pros of implementing business logic in the DB I can think of are:   * Centralization of business logic;   * Independency of application type, programming language, OS, etc;   * Databases are less prone to technology migration or big refactorings (AFAIK);   * No rework on application technology migration (e.g.: .NET to Java, Perl to Python, etc). The cons:   * SQL is less productive and more complex for business logic programming, due to the lack of libraries and language constructs the most application-oriented languages offer;   * More difficult (if possible at all) code reuse through libraries;   * Less productive IDEs. Note: The databases I'm talking about are relational, popular databases like SQL Server, Oracle, MySql etc. Thanks!