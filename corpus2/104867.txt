There's recently some voice about C++ renaissance, among which the most noteworthy one is from Herb Sutter, Chairman of the C++ Standard Committee. You can search for "C++ renaissance" on Google and you'd find a bunch of links including Herb's talk on "C++ and Beyond" and other talks on Channel9 from Microsoft. The key argument here is that with the Cloud trend becoming clearer and more popular than ever, a lot of the dev work on the cloud side calls for high- performance native languages, which on some level, basically means C/C++. I don't mean to start again some flame war about C vs C++. But I do want to know to what extent does this trend affect the growing and expanding of C++ community and popularity. How exactly are C++ used on the cloud side? high-perf backend? more? How large, exactly, is the Cloud dev market anyway? P.S. I've been lucky to be able to use C++0x in my project recently, and it _is_ *awesome* (VC++10). The most useful feature for everyday programming is of course lambda. And the second I would say is rvalue reference (I finally had the courage to return vector!!) Below are Herb's words C++ and Beyond: > I’ve been asked to give the opening “Welcome, Everyone!” talk at C&B 2011, > and it’s time to cover an increasingly open secret: After a decade-long > affair with managed languages where it became unfashionable to be interested > in C++, C++’s power and efficiency are now getting very fashionable again. > At the same time, C++ has been getting easier to use; key productivity > features from the C++0x standard (aka C++11), like auto and lambdas, are > increasingly widely available in commercial compilers and making using C++ > easier than ever before without sacrificing its cornerstone — efficiency. > > This opening 40-minute talk covers the reasons why C++ is now enjoying a > major renaissance, and why that will continue to grow over the next few > years because of industry trends from processor design to mobile computing > to cloud and datacenter environments. > > We already know that C++ is “the” language of choice for demanding > applications. Here, we’ll cover why “demanding applications” increasingly > means “most applications” and will be the bread and butter of our industry > for the foreseeable future. We’ll see why and where other languages are > still appropriate, but why C++’s applicability and demand is now again on an > upswing more so than it has been for over a decade.