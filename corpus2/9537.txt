To build a graph, I need to apply a function `f[a_, b_]` to all pairs of a list (3500 elements). The function itself returns a link `{a <-> b}` if a particular relation holds - I collect all the results into a list and use it as input to `Graph[]`. The question is: is there an efficient and elegant way to do this? I've tried two ways: a recursive method and a (similar) iterative method. The former went over the usual recursion limits, the latter was slow and (I believe) not the optimal way to do it. Both of these performed by applying `f[]` to the `First[]` element vs. the 2nd, 3rd, ...`Last[]` elements, and collecting the results. Then I'd remove the `First[]` from the list, and repeat - doing n*(n-1)/2 evaluations of `f[]`. This many evaluations is required, but I definitely do not have a clean, functional implementation. So, in short, if this can be turned into an efficient 1-liner, instead of a loop, please do let me know! Thanks in advance.