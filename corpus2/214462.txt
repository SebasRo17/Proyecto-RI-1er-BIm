One of the things you see in numerous places in the standard java library is final classes. It is claimed that this is for immutability which I understand...to an extent. Suppose you have a class:               final public class ImmutableTest {         private String value;         public ImmutableTest(String value) {             this.value = value;         }         public String getValue() {             return this.value;         }     }      You can say that the value is immutable because it can't be adapted after creation. However this limits usability of the class as no one can extend it (for example to use as a drop-in for a bad interfaceless design...). Now suppose you have this class:               public class ImmutableTest {         private String value;         public ImmutableTest(String value) {             this.value = value;         }         final public String getValue() {             return this.value;         }     }      The "value" is still immutable but now at least people can extend the class. Someone once interjected: but if you extend it, the extended class is not guaranteed to be immutable! While this is true, I think it is immaterial to the class itself. If user A uses my ImmutableTest class everywhere in his code, he only has access to the "value" anyway which **remains immutable**. Unless he does explicit casting (in other words: he's aware that he's trying to access other stuff) he can't access a "mutable" part of the actual instance which means from the developer's point of view the class is as immutable as it should be, even if the actual instance has other mutable variables. So in short: my opinion is that final classes are superfluous as final methods are all you need. I would love to hear arguments to the contrary though! **UPDATE** To clarify: I'm not claiming that adding "final" to a class or its methods makes it immutable. Suppose you have a class that is designed to be immutable but you do not make the methods or class final, a subclass can of course make it mutable again. This argument is used as to why some classes in the standard library are final. My opinion is that it should've been enough to finalize the accessor methods to the immutable part and leave the class non-final. This may leave the window open to the child objects **adding** mutable fields but the original set of fields would remain immutable hence satisfying the "immutable" requirement for the initial set of methods. **UPDATE2** The conclusion being that final classes have no real purpose except perhaps brevity which in itself is not enough of a reason to lose extensibility in my opinion.