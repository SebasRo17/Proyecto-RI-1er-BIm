I have a function (let it be called f) that does something useful for me and I want to be able to apply it to the elements of a list regardless of their depth and keep the list structure. For example I want to write               F[{{a,b},{c}}]      and get               {{f(a),f(b)},{f(c)}}      So my idea was to use Thread to move down one level of the list each time. So I wrote               F[mat_] := If[mat[[0]] === List, Thread[F[mat]], f[mat]]      But the result I get               If[Hold[Evaluate[{{a, b}, {c}}[[0]] === List]],          Thread[F[{{a, b}, {c}}]], f[{{a, b}, {c}}]]      after of course the recursion depth was reached. So I actually have 2 question. Is there any way to do that with a built-in mathematica function. How can I avoid getting this hold? Evaluate doesn't work. EDIT: As pointed by Rojo my problem is solved by adding Listable to the attributes of f. However I would like to know why my code does not work. How can I get rid of the hold?