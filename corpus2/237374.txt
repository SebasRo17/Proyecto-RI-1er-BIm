When I first learnt about Domain Driven Design, I was also introduced to the repository and unit of work patterns that once seemed to be top notch for the cool kids that threw SQL queries like cavemans against databases. The deeper I got into that topic, the more I learnt that they don't seem to be necessary anymore because of _ORMs_ like **EF** and **NHibernate** that implement both unit of work and repositories into one API, called session or context. Now I'm unsure what to do. To repository or not to repository. I really understand the argument that such leaky abstractions only over-complicate things while adding absolutely nothing that may simplify data access, however, it doesn't feel right to couple every possible aspect of my application to e.g. **Entity Framework**. Usually, I follow a few simple guidelines:   1. The domain layer is the heart of the system, containing entities, services, repositories...   2. The infrastructure layer provides implementations of domain interfaces of a infrastructural concern, e.g. file, database, protocols..   3. The application layer hosts a composition root that wire things up and orchestrates everything. My solutions usually look like this:               Domain.Module1     Domain.Module2         IModule2Repo         IModule2Service         Module2     Infrastructure.Persistence         Repositories             EntityFrameworkRepositoryBase     MyApp         Boostrapper             -> inject EntityFrameworkRepositoryBase into IRepository etc.      I keep my domain layer clean by using a `IRepository<'T>` which is also a domain concern not depending on anything else that tells me how to access data. When I now would make a concrete implementation of `IModule2Service` that requires data access, I would have to inject `DbContext` and by this, coupling it directly to the infrastructure layer. ( _Coming to Visual Studio project, this can end up really tricky because of circular dependencies!_ ) **Additionally** What can be an alternative to _depositories_ and _fucktons of works_? CQRS? How does one abstract a pure infrastructural framework?