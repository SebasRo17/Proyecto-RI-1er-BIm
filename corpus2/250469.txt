In Haskell, the Functor typeclass functor is defined as follows (see e.g. Haskell wiki):               class Functor (f :: * -> *) where       fmap :: (a -> b) -> f a -> f b       As far as I understand (please correct me if I am wrong), such a functor can only have as target category a category constructed using a type constructor, e.g. `[]`, `Maybe`, etc. On the other hand, one may think of functors having any category as target of a functor, e.g. the category of all Haskell types. For example, `Int` could be an object in the target category of a functor, not just `Maybe Int` or `[Int]`. What is the motivation for this restriction on Haskell functors?