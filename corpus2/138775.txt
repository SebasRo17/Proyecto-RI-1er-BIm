I have been writing code for a few years now and I don't believe I can claim to have a complete knowledge in this job yet. My experience primarily rolls around C# related areas with a decent knowledge on Silverlight and Asp .Net MVC as well. I tend to use Sql server and Postgres for normal RDBMS related tasks with Mybatis or LinqtoSql as ORM (and Cassandra as well for NoSql). Given that background, I am looking to building a new project which is a normal application using database and user interface screens. It is considerably a big project which we plan to be rolled out as a product. In recent times, I see a lot of noises being made about functional programming like Haskell and F#. I am wondering \- if it is worth to build the new system using Haskell \- or just stick to a regular application building model using Silverlight/Prism with a layering similar to onion architecture I understand the benefit of staying with the same technology background as it is always good to work on a familiar technology. I also heard that by moving towards a functional language like Haskell we get cleaner code, improved testability etc., Is it really worth considering a move to build new systems in Hasekll? Or it is yet to be proven in production environments? Simply put would I be safe if I build the new project using Haskell and my preferred database or it is too risky at this point in time to choose Haskell. Any help appreciated. Edit: I have already viewed a few other threads like the following and a few more as well, but did not get a definitive answer. Choosing a functional programming language