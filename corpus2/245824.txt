This question is not about multitasking... there are plenty of tips around for that. This is about how to take steps to efficiently multi-project (work on two projects at a time) on a single large code-base. More specifically, how does a senior programmer go about working on one project, and mentoring another beginner programmer on a different project with the same codebase, and thus assisting with training, design, integration, troubleshooting, etc. The beginner needs to be mentored so as to prevent unnecessary complexity and debt from creeping into the codebase. I don't see any questions pertaining to this scenario. Closest is senior + senior, but mentoring a beginner is a different animal. I wonder if multi-project'ing is even normal in the industry. Are there patterns for making it more efficient? The context switching is brutal. Multitasking is already hard enough as it is. I would think both engineers should ideally work on the same project until the beginner is far enough along to be able to handle a project on his or her own, always with some assistance from a senior of course. Not to get too far off topic, but to give context, it seems management wants to skip the training step and throw the beginner into the deep end of a large code base. I am less concerned about the success of the near term project(s), and more concerned with resulting increased entropy and complexity in the code if I were to not mentor, which would prove disastrous in the long run.