There is the classic OOP problem of method chaining vs "single-access-point" methods:               main.getA().getB().getC().transmogrify(x, y)      vs               main.getA().transmogrifyMyC(x, y)      The first seems to have the advantage that each class is only responsible for a smaller set of operations, and makes everything a lot more _modular_ \- adding a method to C doesn't require any effort in A, B or C to expose it. The downside, of course, is weaker _encapsulation_ , which the second code solves. Now A has control of every method that passes through it, and can delegate it to its fields if it wants to. I realize there's no single solution and it of course depends on context, but I would really like to hear some input about other important differences between the two styles, and under what circumstances should I prefer either of them - because right now, when I try to design some code, I feel like I'm just not using the arguments to decide one way or the other.