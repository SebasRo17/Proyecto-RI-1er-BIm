Assume there is an HTTP server which accepts connections and then it has _somehow_ wait for headers to be fully sent in. I wonder what is the most common way of implementing it and what are the rest pros and cons. I can only think of these: **Many blocking workers are good because:**   * It is more responsive.   * Easier to introduce new connections (workers pick them up them selves rather than outsider waiting till it can add it to a synchronized list).   * CPU usage balances automatically (without any additional effort) as number of connections increases and decreases.   * Less CPU usage (blocked threads are taken out of the execution loop and do not require any logic for jumping between clients). **Single non-blocking worker is good because:**   * Uses less memory.   * Less vulnerable to lazy clients (which connect to the server and send headers slowly or don't send at all). As you probably can see, in my opinion multiple worker-threads seem a bit better solution overall. The only problem with it is that it is easier to attack such server. **Edit (more research):** Some resource I found on the web (Thousands of Threads and Blocking I/O \- The old way to write Java Servers is New again (and way better) by Paul Tyma) hints that blocking approach is generally better but I still don't really know how to deal with fake connections. P.S. Do not suggest using some library or applications for the task. I am more interested in knowing how it actually works or may work rather than have it working. P.S.S. I have split logic into multiple parts and this one only handles accepting HTTP headers. Does not process them.