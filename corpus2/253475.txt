I'm looking for a good way to define and store references to a normalized set of "causations". I have a well-defined set of reasons (short, descriptive strings) why certain objects are created and persisted, and I need an efficient way to store references to them. I also need the flexibility to add new reasons in the future. Oh, and I need to implement it in a way that will please the developers as well as the database guys :) Some context: I'm working with a Rails app and a relational database. There are `events` and `payments` (as well as many other models). When a `payment` is created, it should include a reference to a causation. Similarly, when an `event` is canceled it should reference a cause for the cancellation. In the case of a canceled event, the current implementation stores the index of the cause, pulled from an array of possible causes defined in the `Event` model. The implicit (and probably unwise) assumption is that the array won't change in a way that would break the reference. Also, there's some overlap with similar "cause-arrays" in other models. In an attempt to normalize how we store "causation" data, I built a `Causation` model and accompanying table. The `causations` table entries form a unique list of causes that can be referenced by id from any other model. The drawback is that whenever we want to define a new `causation`, we have to add it to the database before we can reference it. This is a bit cumbersome, especially when deploying to testing environments, but maybe that's just the price paid for enforced normalization? A coworker suggested moving the definitions into the `Causation` model itself, rather than storing them in the database, and I wonder if that's a good middle-ground between the overly-brittle/disorganized original code and my own cumbersome/restrictive solution. Maybe something like:               module Causation       module Refund         UNHAPPY_CUSTOMER = 175         UNUSED_SUPPLIES  = 192       end            module Fee         SHIPPING   = 214         EXTRA_FOOD = 294       end            MAPPINGS = {         Refund::UNHAPPY_CUSTOMER => "Customer was dissatisfied",         Refund::UNUSED_SUPPLIES  => "Extra/unused supplies returned",         Fee::SHIPPING            => "Shipping cost",         Fee::EXTRA_FOOD          => "Ordered extra food"       }     end          payment.causation_int = Causation::Refund::UNUSED_SUPPLIES     payment.save     ...     Causation::MAPPINGS[payment.causation_int]     => "Extra/unused supplies returned"      You can see by the absurd numbers that I haven't figured out an elegant way to ensure uniqueness and prevent collisions. Also, you'll notice I need to be able to group causations into categories. Is the namespaced-module approach a better way to go (and is there a way to avoid using "magic numbers" like above), or should I stick with my database implementation? Or maybe there's something better than either of the two?