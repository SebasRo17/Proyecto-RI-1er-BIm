I'm trying to improve on mathematica's handling of datasets. I'm currently writing this function that should do the following. Suppose I have a dataset with columns, e.g.               cols = {col1, col2, col3}      and I want to remove all `NA` type entries from a subset of these columns, say               subcols = {col1, col2}      To create an example dataset, let's condider:               rows = {         {0.09, 0.53, 0.32},         {"NA", "NA", 0.19},         {0.52, 0.38, "NA"},          {"NA", 0.25, 0.20},         {0.03, 0.61, 0.52}     };          dataset = Dataset[Inner[Rule, cols, #, Association]& /@ rows];      Now, I know that I can select the rows I want by the selection rule:               dataset[Select[NumberQ[#"col1"] && NumberQ[#"col2"]&]]      but I would like to create a short-hand notation for this, so that it applies to bigger datasets (with many columns). In particular, I'd like write a function `DropNA` that takes a dataset and a list of columns as input and outputs a new dataset with all unwanted rows removed. For instance, a test could be:               DropNA[dataset, subcols] == dataset[Select[NumberQ[#"col1"] && NumberQ[#"col2"]&]]      > >     True >   This is what I have so far:               DropNA[dataset_, cols_] := Module[{allCols, GoodRow},            (* get the list of all columns: *)       allCols = dataset[All, Keys] // Union // Normal;            (* some precaution: *)       dropna::badcolumn = "Dataset has an ambiguous set of columns.";       If[Length[allCols] != 1, Message[dropna::ambiguouscolumns]; Abort[]];            dropna::subsetcolumns = "One or more columns provided do not appear in the dataset.";       If[Not[SubsetQ[allCols[[1]], cols]], Message[dropna::subsetcolumns];Abort[]];            (* returns True if it encounters good row: *)       GoodRow[row_] := And @@ (NumberQ[row[#]] & /@ cols);            (* select only the good rows: *)       dataset[Select[GoodRow]]       ]      As it stands now, `DropNA` only returns the entire dataset. Does anyone have any idea what I'm missing here?