I have this old implementation of the Command pattern. It is kind of passing a Context through all the _DIOperation_ implementation, but I realized later on, in the process of learning and learning (that never stops), that is not optimal. I also think that the "visiting" here doesn't really fit and just confuses. I am actually thinking of refactoring my code, also because a Command should know nothing about the others and at the moment they all share the same key- value pairs. It is really hard to maintain which class owns which key-value, sometimes leading to duplicate variables. An Example of use case: let's say **_CommandB_** requires **_UserName_** which is set by **_CommandA_**. Should CommandA set the key **_UserNameForCommandB_** = _John_? Or should they share a common _UserName=John_ key-value? What if the UserName is used by a third Command? How can I improve this design? Thanks!               class DIParameters {     public:        /**         * Parameter setter.         */         virtual void setParameter(std::string key, std::string value) = 0;         /**         * Parameter getter.         */         virtual std::string getParameter(std::string key) const = 0;              virtual ~DIParameters() = 0;     };          class DIOperation {     public:         /**          * Visit before performing execution.          */         virtual void visitBefore(DIParameters& visitee) = 0;         /**          * Perform.          */         virtual int perform() = 0;         /**          * Visit after performing execution.          */         virtual void visitAfter(DIParameters& visitee) = 0;              virtual ~DIOperation() = 0;     };