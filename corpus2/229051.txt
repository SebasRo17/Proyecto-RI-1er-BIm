My game reads a number of JSON files, deserializes them, and hands the resulting objects off to the classes that need them. These deserialized objects, which can be thought of as the domain model, are normally very simple:               public class Settings     {         public bool FullScreen = false;         public int WindowWidth = 800;         public int WindowHeight = 600;     }      But one of these objects is not so simple:               public class Sprite     {         [JsonProperty]         private readonly string assetName;              [JsonProperty]         private Vector2 position;              // other properties...              public Sprite( string assetName, Vector2 position )         {             this.assetName = assetName;             this.position = position;         }              public void Move( Vector2 direction )         {             // do move         }              // other methods...     }      The properties of the Sprite class are private because I want to have good encapsulation. This means it has a constructor that accepts many arguments and several other methods for setting its properties. Also, each property needs an attribute so it can be read by the JSON parser. It looks like a POCO, but I read that POCOs should be persistance ignorant. I could create a simpler domain model that acts more like a DTO to satisfy this:               public class Sprite     {         public string AssetName = "default.png";         public Vector2 Position = Vector2.Zero;     }      Now my Sprite class is nice and ignorant. I can write another class to handle business logic type of stuff:               public class SpriteWhatever     {         private Sprite sprite;              public SpriteWhatever( Sprite sprite )         {             this.sprite = sprite;         }              public void Move( Vector2 direction )         {             // do move         }              // other methods...     }      But then I'm worried that my domain model is anemic. In order to avoid _that_ , I could just make all the properties of the Sprite class public, and keep all the business logic in it, but then I have no encapsulation. What should I do?