On my mobile app, I am storing the username of a logged in person, and downloading some data for the given/stored username. When the user checks for updates to his data content on the server, the server dishes out a delta of the content, based on the username. The app then updates its local display accordingly. The problem is, since I am using localStorage, there is no guarantee that someone will not edit the username stored locally and try to request data meant for someone else. What would be the best way of getting around this possible security hole? Please comment on this method that I am planning to implement:   1. Each time you login, a random string is generated and stored for future checking in a database, along with your username, and date/time of request.   2. Whenever a request to download data for a username comes in, it must be accompanied by the string from the previous attempt. Also, each fresh update for the client is accompanied by a new random string, which is stored in the database and the old one is deemed expired.   3. If the random string is not provided correctly, the user is logged out of the mobile app (as this could potentially be someone tampering with the app). The advantage I see for this method is that I have an audit trail as well for later verification and forensics. What are the flaws?