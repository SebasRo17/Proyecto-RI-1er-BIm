I've been thinking about unit testing best practices and have come across the **one assertion per unit test** rule. I can see where this idea would help to isolate pieces of complex operations or verification when you have code like so:               private Place place;          @Test     public void test_whiteHouse(){        place = new place(KnownPlaces.WHITEHOUSE);        assertEquals("1600 Pennsylvania Avenue", place.getAddress());        assertEquals("Washington", place.getCity());        assertEquals("DC", place.getState());     }      I see where you would generally want to break it into smaller tests like this:               private Place place;          @Before     public void setUp(){        place = new place(KnownPlaces.WHITEHOUSE);     }          @Test     public void test_whiteHouse_street(){        assertEquals("1600 Pennsylvania Avenue", place.getAddress());     }          @Test     public void test_whiteHouse_city(){        assertEquals("Washington", place.getCity());     }          @Test     public void test_whiteHouse_state(){        assertEquals("DC", place.getState());     }      However, if I'm testing a setter, the code might look like this:               @Test     public void test_place_setCity(){        String newCity = "timbuktu";        Place place = new Place();        place.setCity(newCity);        assertEquals(newCity, place.getCity());     }      The test will run properly, but if there's a shared setup, I'm making assumptions about the initial state. What would be the downside on running a check on the initial state something like:               @Test     public void test_place_setCity(){        String newCity = "timbuktu";        Place place = new Place();        assertFalse(place.getCity().equals(newCity));        place.setCity(newCity);        assertEquals(newCity, place.getCity());     }      This check would verify that the setter method actually **_changed_** something by verifying the initial state was different than the final state. Otherwise, a change or malfunction in a constructor or setup method could cause the test to become ineffective. Are there any downsides to violating the one assert per constraint rule in this way?