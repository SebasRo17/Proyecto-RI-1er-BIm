I'm planning to setup an scalable architecture capable of providing web services on a REST interface where JSON will be sent as a result. The web services will be quite simple for a CRUD web 2.0 app. ![Architecture](http://i.stack.imgur.com/Omfqb.png) I think javascript (nodejs + mongodb) is a good choice for the following reasons:   * Easy to find javascript developers   * Good performance   * Easy to scale   * Shared logic/language or possible reuse of code between database query language, back-end and web-client.   * There are testing and logging frameworks for node   * By the examples I've seen node seems light in terms of the lines of code needed to implement web services. **Questions:**   1. I think of scaling a node app which supplies a web service as having a central node which will be routing/balancing charge to each of the node instances. Which will also help doing seamless updates, is there any piece of software already implemented which can fit that task?   2. Please point all the disadavantages or other advantages you find in this back-end stack   3. Any other good persistence choices other than MongoDB? Mainly this choice comes from the javascript query language and JSON schemas.