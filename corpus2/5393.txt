Consider the following non-linear optimisation problem:               WeeklyCapacity = Table[Subscript[maxCapa, t], {t, 6}];     WeeklyDemand = Table[Subscript[weeklyD, i], {i, 10}];     CycleTimes = Table[Subscript[CT, i], {i, 10}];          (*Exemplary data:     WeeklyCapacity = Table[189*7.5, {t, 6}];     WeeklyDemand = Table[RandomInteger[{2000, 5000}], {i, 10}]     CycleTimes = (1/#) & /@ Table[RandomInteger[{40, 125}], {i, 10}]     *)          ProductionProgram =        Table[Subscript[x, i, t], {i, 10}, {t, 6}];     CapaDemand = Transpose@ProductionProgram.CycleTimes;          MinVarProductionProgram = Variance/@ ProductionProgram;     ConstraintDemand =        Map[# == 0 &, Total /@ ProductionProgram - WeeklyDemand];     ConstraintCapa = Map[# <= 0 &, Total /@ CapaDemand - WeeklyCapacity];      A company produces `i` different products and at the end of a week (six working days) has to meet a weekly demand (`WeeklyDemand`). The production manager knows how many pieces of each product can be produced within one hour (`CycleTimes`) and is limited to a maximum capacity of hours per day (`WeeklyCapacity`). The optimal production program (`ProductionProgram`) can be calculated as follows:   1. The variance of the production program of each product must be minimised (see `MinVarProductionProgram`).   2. The production program of each product has to meet its total demand per week (`ConstraintDemand`)   3. The production program must not exceed the available max. capacity (`ConstraintCapa`). `MinVarProductionProgram` represents a non-linear function. Hence I was thinking about a Lagrangian relaxation approach.