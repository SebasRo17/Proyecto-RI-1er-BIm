I think I can explain it best starting with an example. I have the following lists:               {19, 19, 19, 19, 23, 19, 23}     {37, 53, 53, 53, 53, 37, 53}     {73, 59, 59, 59, 73, 73, 73}     { 2, 83, 83, 83, 79,  2, 79}     {79, 41, 41, 41, 19, 79, 19}      (Yes, they're all primes.) I want to find patterns of returning values. The values themselves are not important, the place where they occur is. The first number maps to "a", and so do all occurences of that number. If a new number is encountered it is mapped to "b", and so on. For the example I would get               {a, a, a, a, b, a, b}     {a, b, b, b, b, a, b}     {a, b, b, b, a, a, a}     {a, b, b, b, c, a, c}     {a, b, b, b, c, a, c}      and finally I want to get a tally of all the different patterns:               {{1}, {a, a, a, a, b, a, b}}     {{1}, {a, b, b, b, b, a, b}}     {{1}, {a, b, b, b, a, a, a}}     {{2}, {a, b, b, b, c, a, c}}      I can do this with procedural programming, but I would like to learn how this is done with functional programming.