**Background** : I'm an apprentice and am handling the project of developing a particular IS-System. Currently I'm only managing the requirements analysis and the information-processes design, but as a Software Developer, I would also like to implement the concept as an actual Web-Portal. When it comes to choice of technology, I personally would like to build my front-end based on JavaScript Frameworks(jQuery, Bootstrap, DataTables.Net, ...) which offer high front-end implementation flexibility and nice out-of-box modern design, and wire these to .NET MVC in the code-behind. The people around me, who haven't written a line of code in what seems like decades, all fret about difficulty to maintain such a system, in comparison to using .NET Controls and sticking to the MS Web-Site development Package. So whenever I try to bring up, that I could build a nice-looking, user-friendly, modern portal, once we're done with the first concept-phase, I just get concerned looks and a mumble about "maintainability" and "we'd prefer trying to use Sharepoint Analysis Services connected to our DB". **Question** : what aspects of " _maintainability_ " can influence choice of System implementation technology? **Goal** : I would like to sit down and "prove" that my approach is just as maintainable as what they are suggesting, and if it isn't I would like to identify ways to improve it. * * * Questions I found interesting:   * JavaScript codes complexity and maintainability   * How does one meaningfully measure maintainability?   * How to have a maintainable and manageable Javascript code base   * What characteristics or features make code maintainable? (!)    * What hurts maintainability? (!) Some abstract aspects of maintainability:   * readability   * coupling   * consistency   * the reasoning behind code is documented