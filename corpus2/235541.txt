I have a relatively big object that is the wrapper of a HashMap that has 200 K entries. This HashMap wrapper, after being serialized, would take 67 Megabytes. Because this big object is the result of an expensive parsing from disk, I would like to store that in an in-memory database (read Redis). My first approach is to serialize this object into a byte sequence, store that as a single entry of a big value in Redis. When I need I would read that entry, deserialize it into the original big object to pass around in my Java program. But it would take 30 seconds just to convert the byte array into the original big object. I consider it slow. What do you recommend to speed up this ? Here is the code to convert byte into object               public static <T> T deserialize(byte[] bytes, Class<T> clz)     {         try {                ByteArrayInputStream bos = new ByteArrayInputStream(bytes);                ObjectINputStream in = new ObjectInputStream(bos);                return clz.cast(in.readObject());            } catch (Exception e)                e.printStrackTrace();                return null;     }