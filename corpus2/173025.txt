Suppose there are some methods to convert from "X" to "Y" and vice versa; the conversion may fail in some cases, and exceptions are used to signal conversion errors in those cases. Which would be the best option for defining exception classes in this context?   1. A single `XYConversionException` class, with an _attribute_ (e.g. an `enum`) specifying the _direction of the conversion_ (e.g. `ConversionFromXToY`, `ConversionFromYToX`).   2. A `XYConversionException` class, with two _derived classes_ `ConversionFromXToYException` and `ConversionFromYToXException`.   3. `ConversionFromXToYException` and `ConversionFromYToXException` classes _without_ a _common_ base class.