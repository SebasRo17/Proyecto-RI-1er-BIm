_This question is intended to apply to any OO programming language that supports exception handling; I am using C# for illustrative purposes only._ Exceptions are usually intended to be raised when an problem arises that the code cannot immediately handle, and then to be caught in a `catch` clause in a different location (usually an outer stack frame). **Q:** Are there any legitimate situations where exceptions are not thrown and caught, but simply returned from a method and then passed around as error objects? This question came up for me because .NET 4's `System.IObserver<T>.OnError` method suggests just that: exceptions being passed around as error objects. Let's look at another scenario, validation. Let's say I am following conventional wisdom, and that I am therefore distinguishing between an error object type `IValidationError` and a separate exception type `ValidationException` that is used to report unexpected errors:               partial interface IValidationError { }          abstract partial class ValidationException : System.Exception     {         public abstract IValidationError[] ValidationErrors { get; }     }      (The `System.Component.DataAnnotations` namespace does something quite similar.) These types could be employed as follows:               partial interface IFoo { }  // an immutable type          partial interface IFooBuilder  // mutable counterpart to prepare instances of above type     {         bool IsValid(out IValidationError[] validationErrors);  // true if no validation error occurs         IFoo Build();  // throws ValidationException if !IsValid(â€¦)     }      Now I am wondering, could I not simplify the above to this:               partial class ValidationError : System.Exception { }  // = IValidationError + ValidationException          partial interface IFoo { }  // (unchanged)          partial interface IFooBuilder     {         bool IsValid(out ValidationError[] validationErrors);         IFoo Build();  // may throw ValidationError or sth. like AggregateException<ValidationError>     }      **Q:** What are the advantages and disadvantages of these two differing approaches?