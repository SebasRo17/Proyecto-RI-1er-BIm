This question has been asked in different ways, but nothing that's actually what I want to know. Got me confused at work now. They tell me there should be as little logic as possible in getters and setters. Yet, I am convinced that a lot of stuff can be hidden in getters and setters to shield users/programmers from implementation details. An example of what I do:               public List<Stuff> getStuff()     {        if (stuff == null || cacheInvalid())        {            stuff = getStuffFromDatabase();        }        return stuff;     }      An example of how work tells me to do things (they quote 'Clean Code' from Uncle Bob):               public List<Stuff> getStuff()     {         return stuff;     }          public void loadStuff()     {         stuff = getStuffFromDatabase();     }      Any suggestions? How much logic is appropriate in a setter/getter? What's the use of empty getters and setters except a violation of data hiding?