I have always kept the code to load an object within the object itself. That way no matter what method is creating the object, it always has access to the method to load the object. However this does mean that if I'm loading a lot of objects I have to create a blank copy of an object to retrieve an array of objects, and it doesn't seem to be the most logical way of loading an array of objects. Take this code as an example, a page is loading a bunch of products.               class Product() {              // product variables...              public function LoadProducts($dbConn, $where) {             $products = array();             $query = "SELECT * FROM products $where";             $results = $dbConn->query($query);             while($row = $results->fetch_assoc()) {                 $products[$row['pId']] = new Product();                 $products[$row['pId']]->StoreVars($row);             }             return $products;         }              public function StoreVars($row) {             foreach($row as $key => $val) {                 $this->$key = $val;             }         }          }               class Page() {              // page variables...              public function DrawPage($dbConn) {             $product = new Product();             $where = "Some where clause";             $products = $product->LoadProducts($dbConn, $where);             // Do something with products to output HTML to the page...         }          }      Most of my objects like `product` follow a similar pattern. Is this good practice? Is there different / a standard way of doing this? Am I doing this correctly? It just seems a bit pointless to me to have to call a blank instance of product to load all the products, but I don't know where else to put that function so I don't have to have many copies of the same query.