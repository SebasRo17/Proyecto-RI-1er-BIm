I have a class, which wraps another class of a common base type. Because the base type interface is quite large this involves writing a lot of pass-through functions. I am looking for a way to avoid this. Let's make an example:                     Car          /   \     Volvo     VolvoWithTrailer      Now I have to implement each and every function in the car interface for VolvoWithTrailer and call the appropriate function on the wrapped Volvo object except maybe GetMaxSpeed() which will return something lower. Basically I will have many functions like               int VolvoWithTrailer::GetNumSeats() {       return mVolvo.GetNumSeats()     }      An obvious way to solve this would be to make VolvoWithTrailer a subclass of Volvo                   Car          |        Volvo          |     VolvoWithTrailer      but that seems to violate the principle of favoring composition over inheritance. How else could I avoid writing all those wrappers (the language is C++)? Or - if that is your position - why should I just write them/just use inheritance? Is there any template magic that could help with this?