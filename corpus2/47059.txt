One of the side effects of the recent trend of "Lean" startups, and the app store era, is that consumers are more acclimatised to paying small prices for small games / products. Eg.:   * Online SAAS that charges ~$5 / month (the basecamp style of product)   * Games which are short, fun, and cheap ($0.99 from the app store This market has been defined by "doing one thing well, and charging people for it." DHH of Rails / 37 Signals fame argues that if your website isn't going to make money, don't bother making it. Why doesn't the same rule apply to frameworks? There are lots of software framework projects out there - many which are mature and feature-rich, which offer developers significant value, yet there doesn't seem to be a market or culture of paying for these. It seems that the projects which do charge money are often things like UI component toolsets, and are often marginalized in favour of free alternatives. Why is this? Surely programmers / businesses see the value in contributing back to projects such as Ruby, Rails, Hibernate, Spring, Ant, Groovy, Gradle, (the list goes on). I'm not suggesting that these frameworks should start charging for anyone who wants to use them, but that there must be a meaningful business model that would allow the developers to earn money from the time they invest developing the framework. Any thoughts as to why this model hasn't emerged / succeeded? **Edit** To be clear: This isn't a post about down playing the importance of free, open source software. This is a post about asking why a culture of paying for frameworks doesn't exist.