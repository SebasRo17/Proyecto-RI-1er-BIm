## Short Doing the design / for an api we're building we noticed there is little to nothing to be found on how your resource server can validate a token given by a client with the authorizationserver/identity manager. ## Longer So in our system the resource server and identity manager are seperate systems (we call it the identity manager because we also implement an authentication layer there). I believe we have a pretty good grasp of what oAuth is/defines but in a lot of examples and essentially how we always implemented it in the past (mainly just experimenting) the authorization server and the resource server were the same. But in this setup we want to split that up. This to seperate the authentication/authorization from the actual API. That creates a problem, since there's little to nothing said in oAuth 2.0 about how to then validate a token with the authization server as far as we know. I made a diagram to illustrate the situation. ![oAuth seperate systems/communications, it's simplified, a lot is missing](http://i.stack.imgur.com/UbqRs.png) I am talking about the communication between **Identity Manager** and **Resource server** to validate the token. We have 2 proposed solutions to the problem, but are not sure what is acceptable.   1. We can make a call (https) over to the Identity Manager from the Resource Server to validate the token, and get authorization scope, cache that for the given lifetime.   2. We could also make a shared (Redis?) cache (only for the tokens) to which the Resource Server gets read only access. This would reduce overhead and we would be able to invalidate tokens from the Identity Manager by simply removing it it from the cache without having to notify the Resource server. We would limit access to this cache to only be able to get using a client/token combination, so no 'get all', if it's not set we assume the client is not authorized. The reason we want to do it this way is to seperate the responsibilities and over time be able to add different Resource Servers (APIs) while still keeping user management central to our organisation, tho currently it would only be a single api. **What would be a good way to tackle this problem?** One of our suggestions or something completely different? Does oAuth 2.0 say anything about this that I missed? **P.S.** I did find this post about the same problem, but that doesn't answer what might be a proper solution to this problem given the situation. I will keep looking until I find something I am not too unsure about and post the direction we take if this doesn't get answers :)