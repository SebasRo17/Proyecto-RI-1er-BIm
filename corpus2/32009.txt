I'd like to find the point on a Bezier curve that's closest to some other point. The tricky thing is that because Bezier curves can loop around, the distance function can have multiple local minima along the length of the curve. I figured the easiest way to find the point I'm after would be to use NMinimize. So I create a curve, create a BezierFunction, and then use NMinimize. Here I'm trying to find the Bezier point closest to {9,5}:               bezXY = {{3, -9}, {3., -4}, {14, -4}, {16, -12}};     bezF = BezierFunction[bezXY];     dist2D[p_, q_] := Sqrt[Apply[Plus, (p-q)^2]];     NMinimize[{dist2D[{9, 5}, bezF[t]], 0 <= t <= 1}, t]      This fails with multiple errors of the form:               Part::partw: Part 2 of BezierFunction[1,{{0.,1.}},{3},{{{3.,-9.},{3.,-4.},{14.,-4.},{16.,-12.}},{}},{0},MachinePrecision,Unevaluated][t] does not exist. >>      I believe the problem is that NMinimize is handing bezF values outside of [0,1], in which case bezF doesn't return a point. Restricting the domain of t to [0,1] unfortunately doesn't solve the problem - this line produces similar errors:               NMinimize[{dist2D[{9, 5}, bezF[t]], 0 <= t <= 1}, {{t, 0, 1}}]      I've tried wrapping bezF in various ways so that it always returns something valid. Here's a typical attempt:               bezF2[v_] := bezF[Max[0, Min[1, v]]];      If I use bezF2 instead of bezF in the call to NMinimize, it too fails with multiple errors. Writing bezF2 as a Module doesn't improve things. I'm not sure exactly what's going wrong here, so I'm not sure how to fix it. Any guidance would be appreciated; the more concrete and practical the better. Thank you!