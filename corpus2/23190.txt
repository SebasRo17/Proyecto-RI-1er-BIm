**How can I force`Graph` to evaluate all its options without actually displaying the graph itself?** Evaluating the following code ignores the `Print` statements in `VertexShapeFunction`, `EdgeShapeFunction` and possibly in other options too meaning that these options are not evaluated and I assume that the graph is not built at all, until displayed (notice the `;` at the end):               g = Graph[{Print["entered Graph"]; 1 -> 2, 2 -> 3, 3 -> 1},        VertexShapeFunction -> (Disk[Print[#]; #, .1] &),        EdgeShapeFunction -> (Line[Print[#]; #] &),        ImageSize -> {Print["imagesize"]; 100, 100}];      > entered Graph > > imagesize I assume this is because of some kind of optimization going on in the background, like when dynamic objects are only updated when they are onscreen. However, this delayed behaviour is inconsistent with other functions' policy on options (see later) and is rather dangerous, as now calling for the presumed static object `g`, I do not expect extra evaluations:               g      > {-0.866025,-0.5} > > {0.866025,-0.5} > > {1.83697*10^-16,1.} ![enter image description here](http://i.stack.imgur.com/0xNCx.jpg) For comparison, a similar (partly dynamic) object is a chart, which behaves as expected (again, note `;`):               BubbleChart[{{1, 0, 1}, {0, 1, 2}, {1, 2, 3}},         ChartElementFunction -> (Disk[Print[#]; First@#, .1] &)];      > {{0.942265,1.05774},{-0.11547,0.11547}} > > {{-0.0816497,0.0816497},{0.836701,1.1633}} > > {{0.9,1.1},{1.8,2.2}} In general, I had the impression, that functions work like `BubbleChart` (i.e. `Plot`, `ListPlot`, etc.) so `Graph` is the odd one out. Is this delayed evaluation a feature or a bug?