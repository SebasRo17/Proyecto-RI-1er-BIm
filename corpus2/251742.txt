I have started to learn c++ for some time ago. It is a big subject and I am not very use to it yet. Thus is this question asked more of curiosity, than something else. In the book that I read to now learn there is a discussion about portability. I agree that the discussion comes quite earky for someone in the beginning of their learning period, but when reading I came to Think about something. What I wonder is: is there ever is a reason to define custom type to use instead of the fundamental builtin types? For example, would it be useful to define a type `int_c` as in "int custom"? The reason I think about this is since some code may be compiled for example both a 32-bit compiler and a 64-bit compiler. It seems as if it would be easier since if you change platform and all the integers are defined as `int_c` instead of `int`, since the latter would require changing type in every place an int is used? However, I also know that `<cstdint>` contains definitions of different integer as `int64_t`. However I have not heard of a header with floating Point types. So to conclude: Is there a reason to define custom integers or floats like `int_c` or `double_c` Or int other case what is the best apporach?