**Please read the question carefully: it asks _how_ , not _why_.** I recently came across this answer, which suggests using a database to store immutable data: > It sounds like many of the magic numbers you describe - particularly if they > are part dependent - are really data, not code. [...] It may mean an SQL > type database, or it may simply mean a formatted text file. It would seem to me that if you have data that is part of what your program does, then the thing to do is to put it _in the program_. For example, if your program's function is to count vowels, what's wrong with having `vowels = "aeiou"` in it? After all, most languages have _data structures_ designed for precisely this use. Why would you bother to _separate data_ by putting it in a "formatted text file", as suggested above? Why not just make that text file formatted in your programming language of choice? Now is it a database? Or is it code? I'm sure some will think this is a dumb question, but I ask it in all seriousness. I feel like "separate code and data" is emerging culturally as some sort of self-evident truth, along with other obvious things like "don't give your variables misleading names" and "don't avoid using whitespace just because your language considers it insignificant". Take for example, this article: The Problem with Separating Data from Puppet Code. _The Problem_? What problem? If Puppet is a language for describing my infrastructure, why can't it also describe that the nameserver is 8.8.8.8? It seems to me that the problem isn't that code and data are mingled,1 but that Puppet lacks sufficiently rich data structures and ways to interface to other things. I find this shift disturbing. Object oriented programming said "we want arbitrarily rich data structures", and so endowed data structures with powers of code. You get encapsulation and abstraction as a result. Even SQL databases have stored procedures. When you sequester data into YAML or text files or dumb databases as if you are removing a tumor from the code, you lose all of that. Can anyone explain how this practice of separating data from code came to be, and where it's going? Can anyone cite publications by luminaries, or provide some relevant data that demonstrates "separate code from data" as an emerging commandment, and illustrates its origin? 1: if one can even make such distinctions. I'm looking at you, Lisp programmers.