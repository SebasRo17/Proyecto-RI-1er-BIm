My company is considering consolidating all their tier-1 (i.e. top end production) applications and sites into one all-encompassing code base. The theory is that their permissions, design and overall functionality can be homogenised and centrally managed. I have no end of concerns about this approach since the data structures underpinning each application are very different, the business rules are complex and unique to each application and the overall code bases for the existing applications are extremely disparate and very neglected. **EDIT** : The current environment consists of three ASP.Net 1.1 sites that have barely seen any real love since first being written (due chiefly to an absence of experienced developers in the company) and one MVC2 application that was also an ASP.Net 1.1 site before being upgraded last year. We write exclusively in C#. The company is a fairly small one, with about 50 staff; three of whom are actual developers. Management (even IT management) do not have any IT background or experience other than project management of IT projects (and therefore some passing knowledge of terminology and business impacts). The applications are chiefly online services to support the products sold by the company. The company doesn't sell any software directly. So to phrase this whole situation in a reasonably specific and answerable question: What are some compelling reasons for and against trying to pull all your systems together into one over-arching solution given the current conditions (i.e. old code base, complex business systems and rules)?