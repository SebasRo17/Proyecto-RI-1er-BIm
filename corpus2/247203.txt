Having looked at some languages for functional programming, I always wondered why some fp-languages use one or more whitespace characters for function application (and definition), whereas most (all?) imperative/object-oriented languages are using parentheses, which seems to be the more mathematical way. I also think that the latter style is much more clear and readable than without the parens. So if we have a function _f(x) = xÂ²_ there are the two alternatives to calling it:   * FP: `f x` Examples:     * ML, Ocaml, F#     * Haskell     * LISP, Scheme (somehow)   * Non-FP: `f(x)` Examples:     * Almost all imperative languages (I know, see the comments/answers)     * Erlang     * Scala (also allows "operator notation" for single arguments) What are the reasons for "leaving out" the parentheses?