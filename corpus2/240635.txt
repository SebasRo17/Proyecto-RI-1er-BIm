## Background Test Driven Development was popularized after I already finished school and in the industry. I am trying to learn it, but some major things still escape me. TDD proponents say lots of things like (hereafter referred to as the "single assertion principle" or **SAP** ): > For some time I've been thinking about how TDD tests can be as simple, as > expressive, and as elegant as possible. This article explores a bit about > what it's like to make tests as simple and decomposed as possible: aiming > for a single assertion in each test. Source: http://www.artima.com/weblogs/viewpost.jsp?thread=35578 They also say things like this (hereafter referred to as the "private method principle" or **PMP** ): > You generally don't unit test private methods directly. Since they are > private, consider them an implementation detail. Nobody is ever going to > call one of them and expect it to work a particular way. > > You should instead test your public interface. If the methods that call your > private methods are working as you expect, you then assume by extension that > your private methods are working correctly. Source: How do you unit test private methods? ## Situation I am trying to test a stateful data processing system. The system can do different things for the exact same piece of data given what it's state was prior to receiving that data. Consider a straightforward test that builds up state in the system, then tests the behavior that the given method is intended to test.   * SAP suggests that I should not be testing the "state build up procedure", I should assume that the state is what I expect from the build up code and then test the one state change I'm trying to test   * PMP suggests that I can't skip this "state build up" step and just test the methods that govern that functionality independently. The result in my actual code has been tests that are bloated, complicated, long, and difficult to write. And if the state transitions change, the tests have to be changed... which would be fine with small, efficient tests but extremely time consuming and confusing with these long bloated tests. How is this normally done?