This question is a result of the question Which programming language do you really hate? where, unsurprisingly, all of the most popular languages are listed. Most of the top 15 are extremely common programming languages. One comment brings up **haXe** as an alternative to ActionScript, a language that can target Flash, PHP, JavaScript or native applications. Another similar alternative to JavaScript is GWT. I worked at a company a year ago that decided to adopt GWT for our next product. That didn't pan out as well as hoped because GWT hasn't really taken off. There's little example of best practice, limited support libraries, and some features are so immature that they are ridiculously difficult to use. And, worst of all for something like haXe or GWT, it's nearly impossible to find programmers who are already familiar with the platform and are ready to go, let alone bring their own expertise when you lose a developer (or want to grow). With a language like Java, it's not terribly difficult to find a rock star programmer to jump in and immediately make a difference. So my question is, even though there are many complaints about established languages, and many innovative improvements, variations, or completely new languages, are the alternatives simply too dangerous or costly for the corporate environment? If so, how will these innovative languages ever become adopted? It seems like technology moves too fast for innovations, even really good ones, to have time to build a following big enough to stay around when things start to change.