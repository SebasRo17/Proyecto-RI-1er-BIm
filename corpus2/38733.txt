I had some code which could solve an ODE for the function $u$ and the eigenvalue $E$. Unfortunately, $E$ is a function of another parameter $k$. This meant, that upon solving the equations, I had to carefully specify a valid range of $E$ and $k$ to search for solutions, or else _Mathematica_ would confuse different "bands" of $E(k)$ values. In an attempt to make the code more automatic, I sliced up the regions into thin rectangles in $E-k$ space (as specified by the tables below)               L = 8; Clear[k, e]; Clear[u];          Table[solution[n] =      NDSolve[{-D[u[x, e, k], x, x] + ((x - k)^2 - e) u[x, e, k] == 0.,       u[0, e, k] == 0, Derivative[1, 0, 0][u][0, e, k] == 1},      u, {x, 0, L}, {e, 0.1 (n - 1), .1 n}, {k, 0., 4.}], {n, 1, 40}];          Table[Eofk[n, k_] :=      e /. FindRoot[(u[L, e, k] /. solution[n]) == 0, {e, .1 n}], {n, 1,     40}];          Table[c[n] =      Plot[Eofk[n, k], {k, 0., 4.}, PlotRange -> {{-0.05, 5.}, {0, 12.}},      PlotStyle -> {RGBColor[1, 0, 0]}], {n, 1, 40}];      The first table solves a second order ODE for a function $u[x,e,k]$. The second table finds values of $ $such that $u[L,e,k]=0$ (i.e., solves the eigenvalue problem). The third should plot the various $e$ values found in the second table as a function of $k$. My original code is similar but it is messy because I have carefully chosen $e,k$ ranges for `NDSolve`. This new code does not work at all (try it). Can anyone tell me why it doesn't work and what I should do to fix it?