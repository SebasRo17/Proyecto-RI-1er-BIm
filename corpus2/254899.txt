I've written code like this before:               private void Strings_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)     {         var onAdd = new Action(() =>         {             if(e.NewItems != null)             {                 foreach(string item in e.NewItems)                 {                     // Do something                 }             }         });         var onRemove = new Action(() =>         {             if(e.OldItems != null)             {                 foreach(string item in e.OldItems)                 {                     // Do something                 }             }         });              switch(e.Action)         {             case NotifyCollectionChangedAction.Add:                 onAdd(); break;             case NotifyCollectionChangedAction.Remove:                 onRemove(); break;             case NotifyCollectionChangedAction.Replace:                 onRemove(); onAdd(); break;         }     }      I find this style useful when there is some small reusable function that only applies within the scope of another function. However during code review, I received feedback that this was unnecessarily complicated and hard to read. Personally I find this style somewhat elegant, but I can see the argument for readability. What other benefits and drawbacks are there to this style?