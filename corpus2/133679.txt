I've been reading the book "The Drunkard's Walk: How Randomness Rules Our Lives" by Leonard Mlodinow and it's a truly enlightening read. The book deals with probabilities and human reasoning. And let's just say, for the record, that while some things sometimes work, there's a chance that the things you thought made it work, are unrelated to what actually made it work. > Probabilities are unintuitive. However, it gave me an idea. There ought to be studies on this already, that have attempted to quantify the results of software engineering endeavors (which of course is a hard problem in itself). And these studies should point to what kind of software engineering practices are really important in terms of quantifiable success. i.e.   * A team that employs TDD is `this` much less likely to have `this` kind of problem.   * A team that employs SOLID principles is `this` much less likely to have `this` kind of problem.   * etc. etc. What I'm looking for here is software engineering practices that show strong correlation between implementation and success. I'm confident that these things exist but that they are hard to come by and that's why I pose this question. What studies or what practices do you know of that have strong correlation between implementation and success (where success is **somewhat arbitrary** but I think you get the idea)? > If we're gonna sell that idea that software engineering is better than > cowboy coding, I think we need proofs.