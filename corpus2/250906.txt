I had learned sometime ago that abstract classes should always abstract their functions to an interface. So instead of having something like this -               abstract class a{         public int i;         public int foo();     }          class b : a{         public int foo(){return 42;}     }      we have something like this -               interface Ia{         public int foo();     }          abstract class a : Ia{         public int i;     }          class b : a{         public int foo(){return 42;}     }      From my perspective, this is better because of single responsibility, modularity, and maintainability. My colleague disagrees though, and states that there is no perceivable advantage to this and that it only adds to complexity. I tried to find some writing on this topic, but I cant remember the pattern name and my googling hasn't turned anything up. Is this pattern an actual thing? Was I right to abstract everything as much as I can, or is my colleague correct?