I have an ASP.NET MVC application, that uses a query service to get data and a command service to send commands. My question is about the command part. If a request comes in, the command service uses a command dispatcher that will route the command to its designated command handler. This command handler validates the comand first and if everything is acceptable, it executes the command. Concrete example: the AddCommentToArticleCommandHandler receives an AddCommentToArticleCommand, which has an ArticleId, CommentText and EmailAddress. First; validation has to occur, like: \- check if article exists \- check if article is not closed \- check if comment text is filled in and between 20 and 500 characters \- check if email address is filled in and has a valid format. I'm wondering where to put this validation? 1/ in the command handler itself. But then, it cannot be reused in other command handlers. 2/ in the domain entity. But as a domain entity doesn't know about repositories or services, it cannot do the needed validation (cannot check whether an article exists). But on the other hand, if the entity doesn't contain logic, than it becomes a simple data container, which is not following DDD principles. 3/ the command handler uses validators, so that validation can be reused in other command handlers. 4/ Other mechanisms? I'm looking for the chain of responsibilities for this particular example and what objects (entities, repositories, ...) play a role in it. Do you have ideas on how you would implement this, starting from the command handler up to the repositories?