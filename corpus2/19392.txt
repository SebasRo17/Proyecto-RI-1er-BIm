Okay, I'll cop to it: I'm a better coder than I am at databases, and I'm wondering where thoughts on "best practices" lie on the subject of doing "simple" calculations in the SQL query vs. in the code, such as this MySQL example (I didn't write it, I just have to maintain it!) -- This returns the username, and the users age as of the last event.               SELECT u.username as user,             IF ((DAY(max(e.date)) - DAY(u.DOB)) &lt; 0 ,               TRUNCATE(((((YEAR(max(e.date))*12)+MONTH(max(e.date)))            -((YEAR(u.DOB)*12)+MONTH(u.DOB)))-1)/12, 0),              TRUNCATE((((YEAR(max(e.date))*12)+MONTH(max(e.date))) -                        ((YEAR(u.DOB)*12)+MONTH(u.DOB)))/12, 0)) AS age        FROM users as u     JOIN events as e ON u.id = e.uid     ...      Compared to doing the "heavy" lifting in code: Query:               SELECT u.username, u.DOB as dob, e.event_date as edate     FROM users as u     JOIN events as e ON u.id = e.uid      code:               function ageAsOfDate($birth, $aod)     {    //expects dates in mysql Y-m-d format...          list($by,$bm,$bd) = explode('-',$birth);          list($ay,$am,$ad) = explode('-',$aod);               //Insert Calculations here           ...          return $Dy; //Difference in years     }          echo "Hey! ". $row['user'] ." was ". ageAsOfDate($row['dob'], $row['edate']) . " when we last saw him.";       I'm pretty sure in a simple case like this it wouldn't make much difference (other than the creeping feeling of horror when I have to make changes to queries like the first one), but I think it makes it clearer what I'm looking for. Thanks!