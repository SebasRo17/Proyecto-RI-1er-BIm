My (first and current) workplace (a .NET shop) suffers from an over-abundance of anemic domain models, to the extent that I don't really know how validation and data persistence should be handled in a proper domain model. ### Data Persistence One option would be to give the domain model a way to do persistence itself. You could, for example, inject an `IFooRepository` via constructor injection, and have that resolved by an IoC container to ensure you don't create a dependency on it (Ã  la onion architecture). But I'm not sure if the code that uses the domain model should be responsible for calling methods to save the data, etc., or if it should be done implicitly behind the scenes on a background thread. Perhaps this breaks that purity of the domain model and is more along the lines of the active record pattern. The other option I see is to not tie the domain model to data persistence at all and instead have a coordinating service layer responsible for that aspect. What are the best practices for data persistence in the domain model pattern? ### Validation Another problem I don't know how to solve with a proper domain model is how to indicate to the UI _why_ the current model state is invalid without coupling to (or at least catering to) the UI. For example, let's say I have a form an user fills out with various fields. We want to validate that input, and if something is wrong, indicate an error on that specific field with a message. How would we handle validation with that level of granularity without adding significant complexity to the domain model, or doing hack-ish stringly-typed things (like throwing an validation exception with the property's name and a message)?