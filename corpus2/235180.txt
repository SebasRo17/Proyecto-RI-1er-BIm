This is a code example: My entities (Domain Layer):               class Account:         def __init__(name, author):             self.name = name             self.email = email      My repositories interfaces (Domain Layer):               class AccountRepository:         def add(self, account):             """ @type account Account """             pass              def find_by_name(self, name):             pass              def find_by_email(self, email):             pass              # remove, and others...      My domain services (Domain Layer):               class SignUpService:         def __init__(self, account_repository):             """ @type account_repository AccountRepository """             self._account_repository = account_repository              def create_account(self, username, email):             account = Account(username, email)             self._account_repository.add(account)              # other methods that uses the account_repository      My repositories strategies implementations (Infrastructure Layer):               class MongodbAccountRepository(AccountRepository):         def __init__(self, mongodb_database):             self._mongodb_database = mongodb_database              def add(self, account):             account_data = account.__dict__             self._mongodb_database.accounts.insert(account_data)              # and the other methods      So I can do: **A** :   * Functional test for MongodbAccountRepository, testing the add, and directly querying to mongodb to check if the data is persisted as i suppose.   * Unit test for SignUpService, mocking the AccountRepository   * **Pros:** Too quickly   * **Cons:** can I really suppose that if my infrastructure works fine, and my domain service works fine with mock, the real integration will work fine?.   * And if i'm introducing a bug in my mock object, and the test passes when should be failing? **B** :   * Functional test for SignUpService, using the real MongodbAccountRepository.   * **Pros:** I can be sure that SignUpService really works fine.   * **Cons:** too many tests (with all strategies, etc), too slow What do you think?