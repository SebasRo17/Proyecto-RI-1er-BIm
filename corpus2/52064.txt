I've heard lots of people say a function is a first-class object in _Mathematica_. "Everything is an expression, including function." "There is no distinction between functions and data." Having read the book _Power programming with Mathematica_ up to Chapter 5, I think I already have some basic knowledge about _Mathematica_ , but I'm still confused with this point. To be more specific, I think there is a critical difference between functions and data. When we treat `f` as a function, we would use `f[3]` ( **must use the brackets** ); whereas to have `f` treated as a usual expression, we would simply use `f`. So I think a function (such as `f[x_] := x^2`) and data/expression (such as `f := x^2` or `f = 123`) are totally different! A function can accept several arguments, but a normal expression can not! "There's no difference between functions and data", is it real? I also have another question (which has nothing to do with above). If we let symbol `f` have two characters "function" and "data(expression)" in the meantime, there will cause some problem. 1.               ClearAll[f]     f = 9     f[x_]:=x^2 (* message is printed *)      2.               ClearAll[f]     f[x_]:= x^2     f = 9   (* MMA considers it is legal here *)     ?f      ( *MMA shows the two definition of f above, but f is no longer                related to squaring something, as we can see below. *)     f[100]  (* this returns 9[100] *)     f       (* this returns 9 *)      Why is 2 OK, but not 1? In case 2, why does _Mathematica_ not erase the definition of "function" f when we define `f = 9`? Furthermore, why does _Mathematica_ allow the apparent error syntax `9[100]` without giving an error message? (We are very certain about numbers must not be a function name, the head of an normal expression!)