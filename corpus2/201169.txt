I just ran into an odd scenario. Iâ€™m sure that I must have run into the same situation in the past and yet somehow not noticed it until now. I am writing a program that requires at least two command-line arguments. Dealing with this is simple enough, just check that there are sufficient arguments. For example:               A:  if (argc < 3) PrintHelpAndQuit();      However, I also want to allow the user to specifically request the help- screen(s) using a single command-line argument. For example:               B:  if (args[1] == "/?")  PrintHelpAndQuit();     C:  if (args[1] == "/?1") PrintHelp1AndQuit();     D:  if (args[1] == "/?2") PrintHelp2AndQuit();         The problem is that if I put line _A_ first, it ensures that at least two arguments were specified, which prevents then lines _B_ , _C_ , and _D_ from being called, and so the user cannot access those screens. If I put line _A_ after the others, then the program will crash if no arguments are specified (accessing the first member of the argument array is undefined).    There seems to be (only?) two ways to approach this:   * Put the help-screen lines in a conditional block that checks that there is at least one argument (which duplicates the work of line _A_ ):              if (argc > 1) {       if (args[1] == "/?...     }          if (argc < 3) PrintHelpAndQuit();           * Put an extra line at the top that checks if there are no arguments and prints help and quits if so:              if (argc < 2) PrintHelpAndQuit(); // now almost entirely duplicates line A     if (args[1] == "/?...     if (argc < 3) PrintHelpAndQuit();         Both of these approaches are redundant to varying degrees.    How do others deal with this situation? Is there a more elegant (and less redundant) way to require a minimum number of arguments without precluding a single argument?