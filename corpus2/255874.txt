Let's say we have an opaque type `handle_t` that is managed through a simple interface with functions such as:               handle_t *handle_init(void);     int handle_do(handle_t *);     void handle_free(handle_t *);      The problem is that the size cannot be always determined in the initialization step and it has to be calculated in `handle_do`. One solution I have seen is calling `handle_do` two times, the first of which returns the size needed to allocate, but doesn't that affect the performance? Is it a bad practice to allocate or reallocate memory in `handle_do`? Does it even matter when using handle types (since the init/free routines are made clear)?