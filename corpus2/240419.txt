Consider this piece of code from the PHPUnit manual(I'm using PHP only as an example):               class StubTest extends PHPUnit_Framework_TestCase     {         public function testStub()         {             // Create a stub for the SomeClass class that could be later injected into another class, but removed here for simplicity.             $stub = $this->getMock('SomeClass');                  // Configure the stub.             $stub->expects($this->any())                  ->method('doSomething')                  ->will($this->returnValue('foo'));                  // Calling $stub->doSomething() will now return 'foo'.             $this->assertEquals('foo', $stub->doSomething());         }     }      Now I just stubbed the method `doSomething()` to return `foo`. What if some time later in the future I decide to implement `SomeClass` like this:               class SomeClass{              function doSomething(){             return 'bar';         }     }      Of course i have tests for `SomeClass` that test for `bar`, but I totally forgot to test for `foo`. Now I have a lying test. How does TDD handle this situation?