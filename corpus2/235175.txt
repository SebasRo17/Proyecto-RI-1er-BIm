I have a few related questions on closures: Are closures considered impure in functional programming? It seems one can generally avoid closures by passing values directly to a function. Therefore should closures be avoided where possible? If they are impure, and I am correct in stating that they can be avoided, why do so many functional programming languages support closures? **Edit:** I'm adding a little more context to help explain why I am confused about this. I read on wikipedia that one of the criteria for a pure function is that "The function always evaluates the same result value given the same **argument value(s)**." http://en.wikipedia.org/wiki/Pure_function Suppose               f: x -> x + y      `f(3)` will not always give the same result. `f(3)` depends on the value of `y` which is not an argument of `f`. Thus `f` is not a pure function. Since all closures rely on values which are not arguments, how is it possible for any closure to be pure? Yes, in theory the closed value could be constant but there is no way of knowing that just by looking that the source code of the function itself. Where this leads me to is that the same function may be pure in one situation but impure in another. One cannot _always_ determine if a function is pure or not by studying its source code. Rather, one may have to consider it in context of its environment at the point when it is being called before such distinction can be made. Am I thinking about this correctly?