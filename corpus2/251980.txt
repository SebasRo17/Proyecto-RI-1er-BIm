Here is my code:               public class StrategyDemo {                  public static void main(String[] args) {                      Phone ipPhone = new IPPhone("1234", "ProviderA");                 Phone tdmPhone = new TDMPhone("4567", "ProviderB");                      ipPhone.getRecordingResource();                 tdmPhone.getRecordingResource();                      ipPhone.setRecordingResource(Resource.IPRecorderIP2);                        ipPhone.getRecordingResource();                  }              }      ![enter image description here](http://i.stack.imgur.com/SX1HE.gif) As I understood, a strategy pattern made that I would be able to change dynamically objects. I always have hard time to actuality think of something to implement to practice on them. This implementation is actually a strategy implementation ? How should I improve it? * * * Regarding comments asking to clarify my needs, I will try to explain the problem that I created that it will be more clear to determine if I used strategy correctly. A phone should have an ability to be recorded. A phone can be one of 2 types - `IPPhone` or `TDMPhone`.   A recording resource can be one of 2 types - TDMRecorder or IPRecorder. IPRecorder should but not must to record an IPPhone.   TDMRecorder should but not must to record an TDMPhone. An actual recorder is a host in that case that is represented with an `IP`. I was trying to implement it that way, that I would be able to change dynamically during _runtime_ the resource the a phone is been recorded on (an `IP` address). As I understood the part that is missing for me is to have under Record class an abstract method `startRecording` and the ability to change the recording resource from `IPRecorder` to an `TDMRecorder` and vice versa? Is the problem that I defined suitable for a strategy design pattern?