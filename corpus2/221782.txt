I want to present a list of products to the user. This list is paginated and can be sorted by the user by product ID or product name in ascending or descending order. I am using an MVC setting, where I would like to query the database in the model. **How would I write functions that query the database?** I can think of several options which all have their drawbacks:   1. Have one function for each possible combination of sort columns and sorting directions, each with a different query inside:              func GetProductsOrderByIdAsc() []*Product { … }     func GetProductsOrderByIdDesc() []*Product { … }     func GetProductsOrderByNameAsc() []*Product { … }     func GetProductsOrderByNameDesc() []*Product { … }      This is obviously unmaintainable as it leads to lots of almost-identical SQL queries, aka “duplicate code.”   2. Concatenate strings of SQL:              func GetProducts(orderBy string, orderDirection string) []*Product {         return db.query(`               SELECT id, name, description                 FROM products             ORDER BY ` + orderBy + ` ` + orderDirection + `         `)     }      This is inelegant, unreadable and unmaintainable as it quickly becomes a mess—imagine adding pagination and filtering. Parameter binding won’t work here as these are columns and not values.   3. Sort, filter and paginate in Go instead of in SQL. This would solve the code duplication problem but it can be a performance problem when having gazillions of records. What is the usual _concrete_ way of solving this problem? Ideally there would be no duplicate code, no ugly query synthesis and no major inefficiencies.