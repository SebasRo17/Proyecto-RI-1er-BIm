My product owner wants us to report more information on the state of the product when a user contacts customer service through an in-app form. The form eventually results in an email being sent to a customer service email list and handled elsewhere. The part I'm struggling with is how to augment my existing iOS project to allow for some controller to collect diagnostic information from a variety of disparate classes, and do it in a way that's minimally invasive and won't cause a headache if refactoring later. ## Blocks I've experimented with a few ideas, including having an interface that allows an arbitrary class to register a block to be executed when attempting to collect the diagnostic information:               [DiagnosticCollectionController addBlockForDiagnosis:^(DiagnosticCollectionController *controller){         // Add some information here to the controller to send in the diagnostic report     }];      ## Notifications Another idea I had in mind was to have the diagnostic controller broadcast a notification when it's ready to start gathering information, so that other objects can attach what they need to. The (potential) advantage here is that I can get away from using blocks thus prevent myself from having block copy issues:               [[NSNotificationCenter defaultCenter] addObserver:self                                               selector:@selector(someSelectorToHandleDiagnosticPopulation:)                                                   name:DiagnosticCollectionControllerWillSendDiagnostics                                                 object:someDiagnosticController];     // Elsewhere     - (void) someSelectorToHandleDiagnosticPopulation:(NSNotification *)note {         DiagnosticController *controller = [note object];         [controller addDiagnosticData:someDataDictionary];     }