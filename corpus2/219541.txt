In _A Critique of Common Lisp_ written by Rodney A. Brooks and Richard P. Gabriel from Stanford in 1984, some design decisions retained by the normalizing committee of Common Lisp are discussed. While most of the discussion remains valid, there are two statements that refer to the technology available at the time and may be false today. These two statements are: > Too many costs of the language were dismissed with the admonition that ‘any > good compiler’ can take care of them. No one has yet written—nor is likely > to without tremendous effort—a compiler that does a fraction of the tricks > expected of it. As I am a Common Lisp novice, or even an apprentice, I am not able to be more specific than the authors are. They seem to state that a great generality and flexibility has been built into several aspects of the language, which makes writing a good compiler quite difficult. > In COMMON LISP a little too much control was placed on floating-point > arithmetic. And certainly, although the correct behavior of a floating- > point-intensive program can be attained, the performance may vary wildly. As far I understand, it seems that writing efficient numerical code in Common Lisp is possible but more challenging than it has to be. This was thirty years ago. How should I regard these statement today if I am willing to write Common Lisp programs for one of the common free software implementations (CLISP, SBCL et al.)?