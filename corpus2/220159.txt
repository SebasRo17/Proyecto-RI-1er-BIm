I'm about to start working on a V2 of a mobile application and I'd like to adopt a more object-centric approach. Primarily because I think it makes for more maintainable code, but a secondary benefit is easier testability. V1 of the app is pretty controller-centric. The Login ViewController has its login fields and it hits the backend via AFNetworking, reports errors if necessary, and receives a token which gets stored away securely for later use. There's only ever a single user. When the user logs out, all local data is deleted, so essentially the current user is 'global' and can either be nil (need a login) or not (doesn't). The situation is complicated of course by the idea of token expiry. Essentially any network request (either explicit GETs or asynchronous, delayed POSTs) can fail because the token expired and we want the user to re- authenticate. The V1 model of a login screen at startup if there's no current user doesn't easily extend to this model, and I feel,I'm missing an object somehow I'd route everything through. An Authenticator that provides a token, or throws up the login screen if it doesn't have one. Then we could do something like - when any request fails, we delete the current token and retry the request. The request asks the authenticator for the token, and the authenticator asks the user. Or something. How this could be better modelled? I feel like the code needs to be centralised, but that's hard as requests are used throughout the apps. Its almost like a filter layer is needed to handle auth errors centrally, but other errors / successes wherever they're needed (in a success/fail block).