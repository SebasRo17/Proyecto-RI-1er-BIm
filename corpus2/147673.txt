I am studying OOP in C++ and, even though I am aware of the definitions of these 3 concepts, I cannot really realize when or how to use it. Let's use this class for the example:               class Person{         private:                  string name;                  int age;         public:                  Person(string p1, int p2){this->name=p1; this->age=p2;}                  ~Person(){}                       void set_name (string parameter){this->name=parameter;}                                   void set_age (int parameter){this->age=parameter;}                       string get_name (){return this->name;}                  int get_age (){return this->age;}                       };      1.Singleton **HOW** does the restriction of the class to have only one object work? **CAN** you design a class that would have **ONLY** 2 instances? Or maybe 3? **WHEN** is using a singleton recommended/necessary? Is it good practice? 2.Abstract Class As far as i know, if there's only one pure virtual function, the class becomes abstract. So, adding               virtual void print ()=0;      would do it, right? **WHY** would you need a class whose object is not required? 3.Interface If an interface is an abstract class in which all the methods are pure virtual functions, then **WHAT** is the main difference between the 2 of them? Thanks in advance!