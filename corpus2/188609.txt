I was recently discussing with some friends which of the following 2 methods is best to stub return results or calls to methods inside same class from methods inside same class. This is a very simplified example. In reality the functions are much more complex. Example:               public class MyClass     {          public bool FunctionA()          {              return FunctionB() % 2 == 0;          }               protected int FunctionB()          {              return new Random().Next();          }     }      So to test this we have 2 methods. Method 1: Use Functions and Actions to replace functionality of the methods. Example:               public class MyClass     {          public Func<int> FunctionB { get; set; }               public MyClass()          {              FunctionB = FunctionBImpl;          }               public bool FunctionA()          {              return FunctionB() % 2 == 0;          }               protected int FunctionBImpl()          {              return new Random().Next();          }     }          [TestClass]     public class MyClassTests     {         private MyClass _subject;              [TestInitialize]         public void Initialize()         {             _subject = new MyClass();         }              [TestMethod]         public void FunctionA_WhenNumberIsOdd_ReturnsTrue()         {             _subject.FunctionB = () => 1;                  var result = _subject.FunctionA();                  Assert.IsFalse(result);         }     }      Method 2: Make members virtual, derive class and in derived class use Functions and Actions to replace functionality Example:               public class MyClass     {               public bool FunctionA()          {              return FunctionB() % 2 == 0;          }               protected virtual int FunctionB()          {              return new Random().Next();          }     }          public class TestableMyClass     {          public Func<int> FunctionBFunc { get; set; }               public MyClass()          {              FunctionBFunc = base.FunctionB;          }               protected override int FunctionB()          {              return FunctionBFunc();          }     }          [TestClass]     public class MyClassTests     {         private TestableMyClass _subject;              [TestInitialize]         public void Initialize()         {             _subject = new TestableMyClass();         }              [TestMethod]         public void FunctionA_WhenNumberIsOdd_ReturnsTrue()         {             _subject.FunctionBFunc = () => 1;                  var result = _subject.FunctionA();                  Assert.IsFalse(result);         }     }      I want to know wich is better and also WHY ? Update: NOTE: **FunctionB can also be public**