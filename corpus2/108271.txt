A web application is often designed to be layered. Typically there would be a Repository (Dao) layer, a Service layer and a Control (web handling) layer. The Control layer uses the Service layer which in turn uses the Repository layer. Often you'll see the Control layer using the Repository layer directly. Also quite prevalent is Services using other Services. Quite often all Services inherit from a base service class which will contain all references to all Repository components. So my question is really how and why do you design your serverside application (in terms of layers) and what rules do you apply to them? What are the generally accepted justifications for these layers and these rules? What rules do you see that should be considered 'bad practice'? What rules do you considered essential? Have you tried anything new in this area that worked?