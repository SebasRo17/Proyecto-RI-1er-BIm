I'm creating an app in javascript/nodejs and using neo4j as database. Let's say I have an entity `User` in my database. It has a bunch of properties, like `boxes_collected` and `places_visited`, which keep updating independently of one another throughout the course of running my app. So far I have functions that talk to the database to update these properties directly. But it's getting a bit messy and I'm thinking of making a single high level object/class that handles everything in a much cleaner, nicer, and eloquent way. Here's a tiny version of my "model" to better explain what I mean: Suppose I have a function like this               function UpdateUserValue_plants(number) {// update database}      But then if were to create a `User` object and incorporate the above into it,               var User = function User(plants, other...) {         this.plants= plants;     }          User.prototype.updateValue_plants = function(number) {         this.plants += number; // first update the model itself     }      Then when am I supposed to update the database? And wouldn't I be doing the updatation twice that way: first the object's property, _then_ the database? Is there an elegant solution to this?