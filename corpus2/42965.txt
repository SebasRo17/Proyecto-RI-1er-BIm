As a designer, I like providing interfaces that cater to a power/simplicity balance. For example, I think the LINQ designers followed that principle because they offered both dot-notation and query-notation. The first is more powerful, but the second is easier to read and follow. If you disagree with my assessment of LINQ, please try to see my point anyway; LINQ was just an example, my post is not about LINQ. I call this principle "dial-able power". But I'd like to know what other people call it. Certainly some will say "KISS" is the common term. But I see KISS as a superset, or a "consumerism" practice. Using LINQ as my example again, in my view, a team of programmers who always try to use query notation over dot-notation are practicing KISS. Thus the LINQ designers practiced "dial-able power", whereas the LINQ consumers practice KISS. The two make beautiful music together. I'll give another example. Imagine a C# logging tool that has two signatures allowing two uses:               void Write(string message);     void Write(Func<string> messageCallback);      The purpose of the two signatures is to fulfill these needs:               //Every-day "simple" usage, nothing special.     myLogger.Write("Something Happened" + error.ToString() );          //This is performance critical, do not call ToString() if logging is     //disabled.     myLogger.Write( () => { "Something Happened" + error.ToString() });      Having these overloads represents "dial-able power," because the consumer has the choice of a simple interface or a powerful interface. A KISS-loving consumer will use the simpler signature most of the time, and will allow the "busy" looking signature when the power is needed. This also helps self- documentation, because usage of the powerful signature tells the reader that the code is performance critical. If the logger had only the powerful signature, then there would be no "dial-able power." So this comes full-circle. I'm happy to keep my own "dial-able power" coinage if none yet exists, but I can't help think I'm missing an obvious industry- standard designation for this practice. What is that name? And if there is none, does "dial-able power" work? p.s. Another example that is related, **but is not the same** as "dial-able power", is Scott Meyer's principle "make interfaces easy to use correctly, and hard to use incorrectly."