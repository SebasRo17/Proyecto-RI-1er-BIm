I've got some general questions about modelling a series of betting markets and bets within them. I'm writing in Ruby but it's ultimately agnostic towards which language I want to use. I have a concept of "games", for example, a soccer league. While the league is running, people can place various types of bets. A bet might be the winner of the league, or it might be the top three winners in any order. Or the top three winners in order. This is called a "market". Within a game I also have participants. These are the teams that make up the league. A bet consists of one or multiple participants, the order of these participants is important plus an amount. It is stored against the market. My question is how should I got about organising this? At the moment I have market types (say Win) inheriting off a base market class. The base class I'm using looks like this:               class Base         def self.make(game, market_name)             puts Kernel.const_get("MatchMaker::Markets::#{market_name}")         end     end      The make function is a factory method for generating win classes based on a string passed in with the name off the bet type. This generation seems a bit clunky at the moment, and I'm somewhat concerned that it might cause me further problems down the track. I realise this question is somewhat rambling and doesn't have a clear answer. I'm interested more in other peoples ideas in how they would go about putting something like this together.