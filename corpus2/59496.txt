I have trick taking based card game with 32 cards. Initially each player has 8 cards. After each trick number of cards in all players' hands are decreasing by one. I'm writing an AI Bot which knows only its own cards (8 cards), so 24 are unknown in its point of view. When it searches for a best move/card to play it iterates 4000 times (hard-coded number) using Monte Carlo Tree Search, and on each iteration it assigns a permutation of cards for the other 3 players (thus, I have a game with perfect information for a current iteration). For example if P0 is Bot player, and P1, P2, P3 are the other players, then here is number of cards distribution (after every trick):               ------------------------------------ P1 ---- P2 ---- P3 ---- NC ------     Searching a best move for Trick 1:    8       8       8 ---> 24 cards     Searching a best move for Trick 2:    7       7       7 ---> 21 cards     Searching a best move for Trick 3:    6       6       6 ---> 18 cards     ....     ....     Searching a best move for Trick 8:    1       1       1 ---> 3 cards      How to calculate number available cards permutations in order to avoid hard- coded iterations, because on Trick 8 there is only one permutation of 3 cards but algorithm still iterates 4000 times. I know permutations are calculates as factorial, but the problem is more complicated because of fact that each permutation is divided on 3 groups (3 players), and cards' permutations in each player's hand must be ignored. Examples of card distribution on Trick 6:               1)     Trick 6: --- P1 ---- P2 ---- P3                 1 2 3    3 4 5   6 7 8           2)      Trick 6: --- P1 ---- P2 ---- P3                 2 1 3    3 4 5   8 7 6           3)     Trick 6: --- P1 ---- P2 ---- P3                 1 3 2    3 5 4   6 7 8      1), 2) and 3) should be counted as one permutation.