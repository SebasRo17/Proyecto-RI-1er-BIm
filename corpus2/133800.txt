We've been building a CRM for a client. Now that the first major phase has been finished, and a second one agreed upon, the client would like to pick up some of the work, making minor amendments to the database schema and business processes the first phase _while we build the second_. I'm undecided whether this is at all practical, but assuming it is, I'd like some pointers on which measures can be taken to make this at all workable. Here's what I've got so far:   * Until now, the client has _mostly_ seen the project from a user's point of view; clearly, a two-part seminar ought to take place where we introduce him to the inner workings:     * first, showing the existing database schema and, by way of example, extending it,     * then, showing some sample code, and writing a new business process for the schema enhancement.   * The code currently resides in an internal Subversion repository. While we could set up a public one or one on _his_ network (which we can VPN to), I feel a distributed system would work better. I appear to be the only one who feels that way, however, so I could use some good convincing arguments.   * I'm not sure how to mandate/ensure that code that runs in production is committed. Seems like "x made a critical, undocumented change right before going on vacation; now y's trying to figure out this bug that's been occurring ever since" disasters are inevitable. Ideally, all changes, before deployment, would:     * be documented in an issue tracking system,     * occur on a separate testing environment first, and     * have to pass automated tests. Alas, I doubt the discipline for _any_ of those will prevail. Assume that a plug-in architecture or separate project aren't viable options, because 1) the former doesn't exist, and 2) the latter would prohibit the client from looking at and possibly modifying existing code, an ability I believe he would insist on.