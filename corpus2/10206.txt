I came across this list of management behaviors (http://suven.posterous.com/dos-and-donts-leading-software-development-te). I think it has some gems, but I'm not 100% on some of them. I've marked those ones with italics and my name. Do you, as a software developer, think that these are appealing? Which three would be your TOP "gotta have 'em" items from your management? **Don't**   * Don't scale teams vertically by adding more people   * Don't create a team with more that 10 people   * Don't call people resources, its not cool and is really offensive   * Don't assume that people in teams are interchangeable   * Don't compare teams to each other when highlighting weaknesses   * Don't pitch teams against each other   * Don't create fake deadlines   * Don't force standardisation of tools and processes across teams _(I think this one can be argued for some situations - Todd)_   * Don't hire product managers who don't have a clue about software development   * Don't exclusively use KPI's to drive your teams _(Not only is it ineffective, but developers will find ways to drive the KPI metrics - "You want lines of code? I've got your lines of code!" - Todd)_   * Don't force your teams to work overtime, even asking is bound to create tension   * Don't assume that double the people equals half the time **Do**   * Do scale horizontally by creating more teams of about 5-8 people   * Do have a vision for the product and team   * Do appreciate that every team is different, so allocate projects appropriately   * Do motivate your teams _(Wow - that is one slippery, hard-to-define one. I agree with the sentiment, but it's like saying "Be effective" with no guidelines. -Todd)_   * Do allow people to move between teams   * Do have sessions to discuss the product vision, strategy, technology and process   * Do involve the team when determining the team/product name   * Do allow your teams to make their own decisions especially if they are the ones with the expertise   * Do involve your team on any decision that impacts how or what they work on   * Do encourage a development methodology that matches the team and the project   * Do pay attention to every individual's personal development plan