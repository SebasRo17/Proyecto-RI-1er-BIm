I like to raise a `NotImplementedError` for any method that I want to implement, but where I haven't gotten around to doing it yet. I might already have a partial implementation, but prepend it with `raise NotImplementedError()` because I don't like it yet. On the other hand, I also like to stick to conventions, because this will make it easier for other people to maintain my code, and conventions might exist for a good reason. However Pythons documentation for NotImplementedError states: > This exception is derived from RuntimeError. In user defined base classes, > abstract methods should raise this exception when they require derived > classes to override the method. That is a much more specific, formal use case than the one I describe. Is it a good, conventional style to raise a `NotImplementedError` simply to indicate that this part of the API is a work in progress? If not, is there a different standardised way of indicating this?