Creating richer interactive interfaces that are generated by a `DynamicModule` invariably requires more complex data structures and in particular, a larger argument space as specified by `DynamicModule`'s local variables. Managing the extra functionality within `DynamicModule`'s body then inevitably involves the need for ongoing code modularization which in turn requires repeated passing down of this argument space. Here's an example for a 2-element argument space.               SetAttributes[Component1,HoldAll];     SetAttributes[Component2,HoldAll];     SetAttributes[Component3,HoldAll];     Component1[x_,y_]:=Button["Increase x",x++];     Component2[x_,y_]:=Button["Decrease y",y--];     Component3[x_,y_]:={Dynamic@x,Dynamic@y};          DynamicModule[{x=1,y=2},     Row[{Component1[x,y],Component2[x,y],Component3[x,y]}]]      This is not a problem for only 2 arguments but becomes a serious issue for larger argument spaces both for reading and writing code. For writing not only does the whole argument space need to be re-typed each time a new piece of modularization or functionality is added, but any changes to this argument space (as part of ongoing design changes for example) then requires changes throughout the code base. The reading issue revolves around a function's arguments clogging valuable space while distracting from the function's logic. Ideally what is needed is to replicate the "magic" of `OptionsPattern[]` but for local `DynamicModule` variables in which these variables can be modified in a single place and have the effects automatically cascade (a bonus would be for the syntax colouring to be maintained in the body of any function accessing variables in this space). Roughly - with `obj` denoting the variable space - something like:               (* not correct syntax *)          Component1[obj] := Button["Increase x", x++];     Component2[obj] := Button["Decrease y", y--];     Component3[obj] := {Dynamic@x, Dynamic@y};          obj = {x = 1, y = 2};          DynamicModule[obj,     Column[{Component1[obj], Component2[obj], Component3[obj]}]]