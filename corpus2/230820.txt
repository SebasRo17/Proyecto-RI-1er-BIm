I am designing the front end of an WPF application using MVVM where basically all we are doing (for now) is calling a method with some inputs and displaying the outputs. There are two types of inputs, I will call them common inputs and specific inputs to simplify things. With the common inputs you have one instance, and all of the common inputs are used (this is non-trivial). Then we have a list of specific inputs, these are each paired with the common inputs and fed into the method (there are reasons they all need to run at the same time). What distinguishes them is that the same variables you input can also be outputs. Also, you don't have to fill in all of the inputs, there are some where you can pick a subset and whatever the user does not fill in will be calculated and fed back as an output. Which brings us to the problem, the UI will have a grid which at first will have columns for every input (the other columns will be bound but not visible) and rows for how many specific inputs are in the batch. The user will fill in the inputs they want and hit a big button. The method will be called and the outputs generated, they will bind into the output columns which would become visible. Also, getting results for some inputs might not be possible, in the method if we can't run at a certain position but we can run for a position sufficiently close the input will be overwritten. We need to save both the input and the output and display some sort of attention drawing behavior of the cells. The only way I can think of to do this is have three lists, your inputs your outputs and a list of a view model with all common properties and a few for visibility and if the input and output agree. This third list would be bound to the UI and its properties would be pulled into the input list before running the method and the output of the method pushed to it afterwards. I think this will solve the problems but I have a vague sense of discomfort about doing this. For one thing mixing input and output properties on the view model seems like we are duplicating the model but with the business logic scrambled together. Does anyone have a suggestion for a better design, or a reason why this plan is good/bad? Thank you,