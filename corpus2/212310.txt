static void Main(string[] args)         {             var c2 = new Class2();             var c3 = new Class3();             var c1 = new Class1(c2, c3);             c1.Method1();         }              class Class1         {             readonly Class2 _class2;             readonly Class3 _class3;             public Class1(Class2 class2, Class3 class3)             {                 _class2 = class2;                 _class3 = class3;             }             public void Method1() {                 _class2.PerformM1();                 _class3.PerformM2();             }         }         class Class2         {             public void PerformM1()             {                 //do some operation             }         }         class Class3         {             public void PerformM2()             {                 //do some operation             }         }      **Question based on above code:**   1. How much memory does object of Class1 has when it is created?   2. Does any memory increases or decreases when I perform c1.Method1(); keeping in mind that none of the classes have any global fields that might acquire any space. * * * **Edit** Expanding with one more question:   1. If creating new objects of Class1 and calling methods of c1 object does not involve much memory usage, then is it correct to say that I don't need a lock in the above provided sample code.  I can simply create n number of objects and assign individual object to individual Task( or thread)?