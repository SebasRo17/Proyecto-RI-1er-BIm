A friend has written a programming language. It has a syntax reminiscent of SGML. He has written an interpreter for it, and an IDE. He and his colleagues use it in-house as a server-side language. It can also be used to write command-line tools. He wants to make it available to the public, in the expectation that people will purchase a license to use it. He wants to keep the code expressing the language implementation to himself, as there's a fair bit of intellectual property tied up in it. I keep telling him that the day of closed-source programming languages is gone. I say, "Look at all the major languages: the vast majority are open- source. You're going to have to go open-source too if you want anyone outside the company to pay any attention to what you've built." Am I giving him good advice or is there still room for proprietary languages that you pay for? **LATER** Den asked, "... could you please also explain how a language can be closed- source?" I said, "@Den you make a good point. What my friend wants to avoid, I suppose, is the situation where Microsoft cooks up a Java-alike language, calls it J++ and then gets into litigation with Sun about its Java-ness. How do you protect a syntax and a programming methodology from being hijacked by a company whose implementation could put you out of business?"