In his article on Virtual Environments (a part of his VFSM specification method) Ferdinand Wagner describes some new ways of thinking about Boolean Algebra as a software design tool. On page 4 of this PDF article, when describing operators in his system he says this: > Control statements need Boolean values. Hence, the names must be used to > produce Boolean results. To achieve this we want to combine them together > using Boolean operators. There is nothing wrong with usage of AND and OR > operators with their Boolean meaning. For instance, we may write: > > DI_ON OR AI_LARGER_THAN_8.1 AND TIMER_OVER > > to express the control situation: digital input is on or analog input is > larger than 8.1 and timer is over. > > We cannot use the NOT operator, because the result of the Boolean negation > makes sense only for true Boolean values. The result of, for instance, > > NOT (AI_LARGER_THAN_8.1) > > would be ambiguous. If "AI_LARGER_THAN_8.1" is acceptable, why would he consider "NOT (AI_LARGER_THAN_8.1)" to be ambiguous?