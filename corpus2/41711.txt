When I am fitting data with a pointwise function using `NonlinearModelFit`, the produced `FittedModel` fails to calculate variances and errors. Consider a toy example:               Clear[f, data];     data = {{1, 7.4}, {2, 1.9}, {3, 6.}};     f[1.] = 2. a + b;     f[2.] = 3. a/b;     f[3.] = 3. b/a + a;         fit = NonlinearModelFit[data, f[t], {a, b}, t, Method -> NMinimize]      When I take               fit["BestFitParameters"]      it gives a correct result `{a -> 2.19044, b -> 2.95013}`. However, when I try to take               fit["EstimatedVariance"]      it throws exception, since values of `a` and `b` can not be substituted in `fit["Function"]` (that's my guess). I found the following obvious workaround:               Clear[f, g, h];     f[1.] = 1; g[1.] = 0; h[1.] = 0;     f[2.] = 0; g[2.] = 1; h[2.] = 0;     f[3.] = 0; g[3.] = 0; h[3.] = 1;     fit =        NonlinearModelFit[data, (2 a + b) f[t] + 3 a/b g[t] + (3 b /a + a) h[t],         {a, b}, t, Method -> NMinimize]        but it is not elegant at all. What is the best way to obtain a complete `FittedModel` using `NonlinearModelFit` with a pointwise functions?