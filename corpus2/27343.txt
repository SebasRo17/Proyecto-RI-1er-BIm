Normally, semantics of symbols used in a function definition can be changed by their redefinitions in `Block`s surrounding the function invocation:               primeCheck[n_Integer] := If[PrimeQ[n], "prime", "composite"];          primeCheck[10]     (* composite *)          Block[{PrimeQ = True&}, primeCheck[10]]     (* prime *)      Is it possible to make a function definition immune to any symbol redefinitions in `Block`s or somehow restore the original global definitions of symbols being used in the function body (without making the symbols `Locked` that would globally prevent changing their meaning)? * * * A related question:   I assume there is no way whatsoever to unlock a `Locked` symbol, right?