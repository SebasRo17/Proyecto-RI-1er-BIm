I'm pretty sure that the following two snippets are equivalent but I wanted to double check: **CALLBACK STYLE**               function foo(input, callback) {         // do stuff with input              callback();     }          function bar(input, callback) {         // do stuff with input              callback();     }          foo("hi", bar("bye", function() {                            // do something cool                          }));      _Note that the callbacks take no arguments._ **PLAIN STYLE**               function foo(input) {         // do stuff with input     }          function bar(input) {         // do stuff with input     }          foo("hi");     bar("bye");     (function() {         // do something cool     })();      Of course if they are equivalent it would make sense to me to use **PLAIN STYLE** as it's simpler and cleaner. I realize the scope of the anonymous function (who does something cool) is different in the two cases.. I'm not concerned with that aspect of "equivalence". **UPDATE** I'm working on some legacy code and find quite a bit of it confusing. This is the original code that prompted this question. Specifically the noted 6 or so lines of code.               var CoolNamespace = (function () {         var container_element,             keysLength = 0;              //         // THE FOLLOWING 6 OR SO LINES IS WHAT I'M CURIOUS ABOUT         //         _createCoolObject(function (coolObject) {             _appendFrameToContainer(coolObject, function () {                      // Post form                 _sendForm(function (form) {                     container_element.appendChild(form);                     form.submit();                 });             });          });              function _sendForm (callback) {             // Sends client data via post.             if (keysLength != 0) {                 var form = _createForm();             } else {                 throw new Error("error message stub");             }             callback(form);         }              function _appendFrameToContainer (frame, callback) {             if (typeof container_element != "undefined") {                 container_element.appendChild(frame);             } else {                 throw new Error("error message stub");             }             callback();         }              function _createCoolObject (callback) {             var coolObject = { level: "very cool" };                  callback(coolObject);         }              function _handleMessage (event) {             // it's not really about this function         }              function _createForm() {             // it's not really about this function either             var form;             return form;         }     })();      When stepping through the code, it seemed to be the case that the body of `_createCoolObject` was invoked _before_ the argument (which is a function). I think my confusion was that a the argument to `_createCoolObject` is a function literal which evaluates to a function but that function _is not itself evaluated_ until the line `callback(coolObject)`. Thanks for the clarification!!