What do you do when you are writing a test and you get to the point where you need to make the test pass and you realize that you need an additional piece of functionality that should be separated into its own function? That new function needs to be tested as well, but the TDD cycle says to Make a test fail, make it pass then refactor. If I am on the step where I am trying to make my test pass I'm not supposed to go off and start another failing test to test the new functionality that I need to implement. For example, I am writing a point class that has a function **WillCollideWith( _LineSegment_ )**:               public class Point {         // Point data and constructor ...              public bool CollidesWithLine(LineSegment lineSegment) {             Vector PointEndOfMovement = new Vector(Position.X + Velocity.X,                                                    Position.Y + Velocity.Y);             LineSegment pointPath = new LineSegment(Position, PointEndOfMovement);             if (lineSegment.Intersects(pointPath)) return true;             return false;         }     }      I was writing a test for **CollidesWithLine** when I realized that I would need a **LineSegment.Intersects( _LineSegment_ )** function. But, should I just stop what I am doing on my test cycle to go create this new functionality? That seems to break the "Red, Green, Refactor" principle. Should I just write the code that detects that lineSegments Intersect inside of the **CollidesWithLine** function and refactor it after it is working? That would work in this case since I can access the data from **LineSegment** , but what about in cases where that kind of data is private?