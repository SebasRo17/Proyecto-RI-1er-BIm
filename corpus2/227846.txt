I have a database that generates a query result array, each position of the array being a hash like object. Since each array item must be mapped into a well defined class, I decided to implement an array-adapter that cast every item into the expected object class. This cast is done only upon request, not in advance. The native query only return **ids**. The adapter uses these to pull the object that must be adapted. This approach introduces a time delay between the query (native query result) and the provided final item. During this time any item could have been modified in the background by other process. There is also an ugly effect where different sections of the array have different eventual consistency. > Does this mean that any database query must be exhaustive (no lazy fetch of > results)? If a query should always be exhaustive, I am considering in making my adapter _smarter_ , capable of performing a limited query for my views. If the view request a point past the initial limit, it will load more results, however this seems to have the same consistency by parts problems as before. > How are the problems for lazy loading of past query results consistency > problems solved?