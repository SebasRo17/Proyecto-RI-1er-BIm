n =3; (*Number of atoms*) L = 3 (*No=umber of atomic levels*);     CT[xk_]:=CT[xk]=ConjugateTranspose[xk]          Fx[xk_]:=Fx[xk]=FixedPoint[ArrayFlatten,xk]          gb[k_] = {{1},{0},{0}};     eb[k_] = {{0},{1},{0}};     rb[k_] = {{0}, {0}, {1}};     e1[l_] = Table[{KroneckerDelta[l, m]}, {m, L}];     σ[l_, m_] = e1[l].Transpose[e1[m]];          Hop[t_, k_] = g[t] gb[k].CT[eb[k]] + g[t] eb[k].CT[gb[k]]+ Ω[t] rb[k].CT[eb[k]] + Ω[t] eb[k].CT[rb[k]];          I1[i_Integer]:=I1[i]=IdentityMatrix[L^(i-1)];          I2[i_Integer]:=I2[i]=IdentityMatrix[L^(n-i)];          Hn[t_]=Sum[Fx[I1[i]\[TensorProduct]Hop[t,i]\[TensorProduct]I2[i]],{i,n}];          PrrρT[i_Integer]:= PrrρT[i]=Fx[I1[i]\[TensorProduct]Transpose[σ[2,3]]\[TensorProduct]I2[i]]          PeeρT[i_Integer]:= PeeρT[i]=Fx[I1[i]\[TensorProduct]Transpose[σ[1,2]]\[TensorProduct]I2[i]]          Prrρ[i_Integer]:= Prrρ[i]=Fx[I1[i]\[TensorProduct]σ[2,3]\[TensorProduct]I2[i]]          Peeρ[i_Integer]:= Peeρ[i]=Fx[I1[i]\[TensorProduct]σ[1,2]\[TensorProduct]I2[i]]          Hint[p_] = Sum[If[i < j, 10.0 (2 Ω0^2)/ Sqrt[2. Ω0^2 + Γe^2/4.]      PrrρT[i].Prrρ[i].PrrρT[j].Prrρ[j],0], {i, n}, {j, n}];          Hfinal[t_] = Hn[t] +  Hint[p];          Lfull[X_?MatrixQ,t_?NumericQ]=Sum[     (-Γr/2 X.#1.#2-Γr/2 #1.#2.X+Γr #2.X.#1     -Γe/2 X.#3.#4-Γe/2 #3.#4.X+Γe #4.X.#3     )&[PrrρT[i],Prrρ[i],PeeρT[i],Peeρ[i]]     ,{i,n}];          (*Numerical Values*)     MHz = 2. N[π] 10^6; kHz = 2. N[π] 10^3;μs=1. 10^-6;          g[t_] = Ω0 N[Exp[-((t - tmax/2. - tmax/8.)^2/(2. (tmax/8)^2.))]];     Ω[t_] = g0 N[Exp[-((t - tmax/2. + tmax/8.)^2/(2. (tmax/8)^2.))]];     Γe = (38.0 MHz)/(2N[π]); Γr = (1. kHz)/(2N[π]);     Ω0 = 3. MHz; g0 = 3. MHz; tmax = 30. 10^-6;           (*Compile Function*)     m1 = With[{H1=Hfinal[t]},Compile[{{X, _Complex, 2}, {t, _Real}},      -I (H1.X - X.H1)+Lfull[X,t]]];          Fun[X_?MatrixQ,t_?NumericQ]:=m1[X,t];          mmu = MaxMemoryUsed[];          sol=NDSolve[{σ'[t]==Fun[σ[t],t],     σ[0]==Table[If[i == 1 ∧ j == 1,1.,0.],     {i,L^n},{j, L^n}]},σ[t],{t,0,tmax}, MaxStepSize -> 0.01,      MaxSteps -> 10^5 ];          mmu1=MaxMemoryUsed[]- mmu      If I consider n=6, then the NDSolve function is not working because of large memory problem...Please help me with this issue...