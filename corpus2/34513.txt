While trying to make this problem more efficient I tried different methods and dabbled with making `Greater` and `Equal` `Listable`. To my surprise, while `Greater` worked as expected, `Equal` on the other hand showed a strange behavior. Let's dig deeper: First let's look at `Greater`               Pick[#, DivisorSigma[1, #] > 2 #] &@Range[6]      Gives the error:               Pick::incomp: Expressions {1,2,3,4,5,6} and {1,3,4,7,6,12}>{2,4,6,8,10,12} have incompatible      shapes. >>      Now we make `Greater` `Listable`               SetAttributes[Greater, Listable]      And we can now evaluate the above command successfully               Pick[#, DivisorSigma[1, #] > 2 #] &@Range[20]      > {12, 18, 20} Okay, let's move on to `Equal`               Pick[#, DivisorSigma[1, #] == 2 #] &@Range[8]      > Sequence[] We now make `Equal` `Listable`               SetAttributes[Equal, Listable]     Attributes[Equal]      > {Listable, Protected} Now let's try again:               Pick[#, DivisorSigma[1, #] == 2 #] &@Range[8]      > Sequence[] Hmmm, what's going on here? Well, let's explicitly provide the list and see what happens:               Pick[{1, 2, 3, 4, 5, 6, 7, 8},       DivisorSigma[1, {1, 2, 3, 4, 5, 6, 7, 8}] == 2 {1, 2, 3, 4, 5, 6, 7, 8}]      > {6} Interesting, this works! okay now let's textually substitute using `With`, this should technically be the same thing right?               With[{p = Range[8]}, Pick[p, DivisorSigma[1, p] == 2*p]]      > Sequence[] I guess not. Finally, let's look at `Trace`. I'll shorten the input list here. First with explicit input of list:               Pick[{4, 5, 6}, DivisorSigma[1, {4, 5, 6}] == 2 {4, 5, 6}] // Trace      ![Mathematica graphics](http://i.stack.imgur.com/lKQal.png)               Pick[Range[4, 6], DivisorSigma[1, Range[4, 6]] == 2 Range[4, 6]] // Trace      ![Mathematica graphics](http://i.stack.imgur.com/FlHwM.png) We see that only in the explicit case does `Equal` act `Listable` What is going on here? Sorry about the tiny images.