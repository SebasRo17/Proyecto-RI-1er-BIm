I'm trying to plot the averaged autocorrelation function of a random wire profile $\xi(x)$ which is build from unitsteps which are each L units long. To calculate the average I'm generating nMax realizations of the profile, then I proceed to calculate the autocorrelator $\langle \int_{-\infty}^{\infty} \xi(x)\xi(x-y)~dx \rangle$. Brackets indicate averaging over the `nMax` copies of the profile. My final goal is to plot this expression as a function of `y`. I started out by using both the built-in `Mean` and `Convolve` functions, however it is ridiculously slow on my machine (late 2007 MacBook). To give you an idea, it takes 150 seconds to calculate `corr[0]` alone (even with `nMax=1`). Is there anything I'm completely missing here? Or can someone of you even hint at a faster and more elegant approach to this?               L = 1.; (* step length *)     nMax = 1; (* number of realizations for averaging *)     nSteps = 1; (* number of modules in wire *)          (* define module *)     mod[x_] := UnitStep[x - L + 1.5]*UnitStep[L - x - 0.5]     (* define random profile *)       xi[x_] :=        Sum[RandomReal[{-0.5, 0.5}]*mod[x - n L], {n, -nSteps, nSteps}];     (* get nMax realizations of random profile *)     xiTmp[x_] = Table[xi[x], {n, 1, nMax}]     (* define correlator; normalized to corr[0]=1 *)     corr[y_]:=Table[Convolve[xiTmp[x][[n]], xiTmp[x][[n]], x, y]/      Convolve[xiTmp[x][[n]], xiTmp[x][[n]], x, 0], {n, 1, nMax}]     (* plot mean autocorrelator *)     Plot[Mean[corr[y]],{y,-5,5},PlotRange->All,Filling->Axis]