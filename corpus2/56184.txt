I am working with stacks of 1024x1024 timelapse microscopy images that I am performing a series of image processing functions on to help segment each image. These functions include `Sharpen`, `Erosion`, `Dilation`, `RidgeFilter`, `FillingTransform` and `WatershedComponents` (with hand- selected markers). After some trial and error it seems I need to at least use the following functions to arrive at a generally acceptable segmentation:               watershedLabelMatrix = WatershedComponents[RidgeFilter[image],markersForWatershed]      I would like to know if there is anyway to speed up these image processing steps (particularly the bit of code above). I have not had success with use of `Compile` or `Parallelize`. I am not sure if it is possible to Compile a function that takes an image as its argument. Here's one example of what failed for me:               watershedCompile1 = Compile[{{imageIn, _Real}, {markersIn, _Real}},                           WatershedComponents[imageIn, markersIn]]      I get this message after evaluating: > Compile::extscalar: "WatershedComponents[imageIn,markersIn] cannot be > compiled and will be evaluated externally. The result is assumed to be of > type Real." Similarly, when I try to `Parallelize` I am told `WatershedComponents` cannot be parallelized. When I try to use `WatershedComponents` "on the fly" within a little `DynamicModule` interactive notebook I have written that iterates through a stack of images and allows me to save acceptable `WatershedComponent` masks, I get a long (maybe 5 to 10 seconds) pause while I wait for the `WatershedComponents` result and usually see the dreaded _Progress: Formatting Notebook Contents_ dialog window popup. Any suggestions on improving the performance of these image processing functions or suggestions for how to improve performance within a `DynamicModule` (or alternatives to `DynamicModule`) would be greatly appreciated.