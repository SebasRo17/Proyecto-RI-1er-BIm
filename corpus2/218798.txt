When designing a REST API, how deep should the resources levels go? For example; If I have the following database tables:   * Companies: ID, Name   * Employees: ID, Name, CompanyID   * Tasks: ID, Name, EmployeeID When exposing these through a REST API, it might look something like this (id is optional):   * Companies: GET /api/companies/{id}   * Employees: GET /api/employees/{id}   * Tasks: GET /api/tasks/{id} Lets say I want to retrieve all the employees working at company 1. I could do something like this: GET /api/companies/1/employees, right? Performing a GET on /api/employees would be useless, because you don't want to return all the employees stored in the database. Should the /api/employees resource only be used in this case for retrieving individual data about a specific employee? What if I want to get the tasks associated with an employee? Should the URL be: GET /api/companies/1/employees/123/tasks or GET /api/employees/123/tasks. If you don't want clients to have access to certain resources, without knowing its parent, how do you design your resources? If I'm not being clear enough, or have to many questions, please let me know.