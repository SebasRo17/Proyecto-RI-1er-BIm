So, I work in .Net. I make open source projects in .Net. One of my biggest problems with it isn't necessariyl with .Net, but with the community and frameworks around it. It seems everywhere that magical naming schemes and strings is treated as the best way to do everything. Bold statement, but look at it: ASP.Net MVC: Hello world route:                       routes.MapRoute(                 "Default",                                              // Route name                 "{controller}/{action}/{id}",                           // URL with parameters                 new { controller = "Home", action = "Index", id = "" }  // Parameter defaults             );      What this means is that ASP.Net MVC will somehow look up `HomeController` in your code. Somehow make a new instance of it, and then call the function `Index` apparently with an `id` parameter of some sort. And then there are other things like:               RenderView("Categories", categories);     ...or..     ViewData["Foobar"]="meh";      And then there are similar things with XAML as well. `DataContext` is treated as an object and you have to hope and pray that it resolves to the type you want. DependencyProperties must use magic strings and magic naming conventions. And things like this:                 MyData myDataObject = new MyData(DateTime.Now);             Binding myBinding = new Binding("MyDataProperty");       myBinding.Source = myDataObject;      Although it relies more on casting and various magical runtime supports. Anyway, I say all that to end up here: Why is this so well tolerated in the .Net world? Aren't we using statically typed languages to almost always know what the type of things are? Why is reflection and type/method/property/whatever names(as strings) prefered so much in comparison to generics and delegates or even code generation? Are there inherit reasons that I'm missing for why ASP.Net's routing syntax relies almost exclusively on reflection to actually resolve how to handle a route? I hate when I change the name of a method or property and suddenly things break, but there don't appear to be any references to that method or property and there are of course no compiler errors. Why was the apparent convenience of magic strings considered "worth it"? I know there are also commonly statically typed alternatives to some things, but they usually take a backseat and seem to never be in tutorials or other beginner material.