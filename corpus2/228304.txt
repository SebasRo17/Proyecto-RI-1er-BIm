I'm working on a new project, we want to build a new, modern, application working with our legacy data sources, and especially, legacy databases. We want to use an ORM and we want advanced features so the obvious choice seems to be between NHibernate and EF 6. We can eventually make some minor changed to the databases but not totally modified the model since it's used by many other apps. Now, obviously since it's legacy stuff, it sucks. The database has many flaws and at the moment, I'm writing some basic code to test EF and NH and see if we can work around these flaws. My current problem is with Entity Framework. In my database, many fields are used in a "non-standard" way. For example, I have fields that are representing datetime with special format strings, or xml data in string. I'd like to let EF do the convert work without exposing these special fields to my API and without using another layer on top of EF. I could solve this problem with IUserType in NHibernate but I didn't find a way in EF. Here's an example, let's say I have a field representing a date in my DB, and it should be formatted like this : ddmmyy (090214 for today). I don't want to expose this string in my object but I want to be able to manipulate this date with classical datetime like : var comp = ctx.Companies.First(c => c.Id == 1); comp.Date = DateTime.Now; ctx.SaveChanges(); And it automatically saves the date with the special format in the DB. I can do this by mapping a DateString property for example and makes my Date field with a getter/setter that do the transform but I don't want to expose this DateString property and it's a bit painfull to do it with all my Date fields across all my tables. IUserType in Nhibernate was perfect to solve this kind of problems, is there something equivalent in EF? Thanks