According to one page on code.google.com, "left recursion" is defined as follows: > Left recursion just refers to any recursive nonterminal that, when it > produces a sentential form containing itself, that new copy of itself > appears on the left of the production rule. Wikipedia offers two different definitions: >   1. In terms of context-free grammar, a non-terminal r is left-recursive if > the left-most symbol in any of r’s productions (‘alternatives’) either > immediately (direct/immediate left-recursive) or through some other non- > terminal definitions (indirect/hidden left-recursive) rewrites to r again. > >   2. "A grammar is left-recursive if we can find some non-terminal A which > will eventually derive a sentential form with itself as the left-symbol." > > I'm just barely starting out with language creation here, and I'm doing it in my spare time. However when it comes down to selecting a language parser, whether left recursion is supported by this parser or that parser is an issue that _immediately_ comes up front and center. Looking up terms like "sentential form" only leads to further lists of jargon, but the distinction of "left" recursion almost has to be something very simple. Translation please?