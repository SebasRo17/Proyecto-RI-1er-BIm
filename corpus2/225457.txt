Are there any kind of, even if rough, estimates how productivity scales with the number of programmers? (And, ideally, backed by numbers.) Here, by productivity I mean the _inverse of time_ that is needed to finish a project (given fixed projects, how it's time burden changes), though other measures may be as well of my interest (but other ones can be harder to be made objective). The standard wisdom is that _"Nine women can't make a baby in one month."_ , which in my language means that performance is sublinear. (The Brook's law goes even further - that the total performance declines, but AFAIK is related pumping people when there project is already ongoing). Sure, there is an overhead for: communication, coordination, common technology; and very likely latter programmers may be not as skilled and motivated as the first one. But how much? In general scenario it is called Ringelmann effect and, at least - for simple tasks like pulling rope, it is attributed to the loss of motivation. * * * Why the question? Mostly, academically and out of curiosity. Scaling laws in performance are an interesting thing. For example, for performance of scientists grow superlinearly (here: ~n^2) with team size, until the group reaches number of maximal effective collaborators. For most of cognitive tasks, group typically does better than a single person, but not n-times as good (scaling more like square root, ~n^0.5). And for institution management overhead can be directly measured, as ratio of administrative workers increase with the institution size. See references from my talk Does 2x bigger mean 2x better? - 1st Offtopicarium. A bit related to my question Performance of a group solving a cognitive task: How does it scale? - CogSci.SE. * * * Sure, it will depend on the task, and collaboration technique (e.g. two people pair-programming vs sitting at their own desks).