In python, if you wish to reverse a list, here is the trick:               range(10)[::-1]  => [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]      Note: `list[start:end:steps]` is the slice method in python. The above code omitted the first two arguments. It rings a bell in _Mathematica_ :               Part[list, Span[start, end, step]] <=> list[[start;; end;; step]]      However this isn't gonna work in MMA (or not yet? since mine is still MMA 7)               Range[10][[;; ;; -1]]      > `Part::take:` Cannot take positions 1 through -1 in {1,2,3,4,5,6,7,8,9,10}. > >>   >  `Part[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 1 ;; All ;; -1]` This error message gave clues to what happened. When step length is negative, the start index should be greater than the end one - no matter in python or MMA syntax. The problem why this didn't work lies in the omitted arguments. MMA filled them with **1** and **All** and then got stuck. By contrast python smartly exchanged the two. My actual question in this is: **How can I can look into the default values /optional arguments of a built-in function like`Span`?** I can't find it in the documentations. * * * Give another look at the fun code: `range(10)[::-1]` My implementation of this it to modify the definitions               Unprotect[Span, Part];     Part[x_List, Span[1, All, k_]] /; k < 0 := Part[x, Span[All, 1, k]];     Protect[Span, Part]          (*behold lol*)          Range[10][[;; ;; -1]]     (* {10, 9, 8, 7, 6, 5, 4, 3, 2, 1} *)      To clear the modifications:               Unprotect[Span, Part]; Clear[Span, Part]; Protect[Span, Part]      or               CompoundExpression@@ Through[{Unprotect, Clear, Protect}[Span, Part]]