Several Graphics primitives are listable. For instance, `Point` accepts lists of coordinates so that multiple calls to `Point` are often unnecessary. The results are the same, except for one thing I noticed while working on the eye fixation question, yesterday.               pts = RandomReal[10, {30, 2}];       pl1 = Graphics[Point@pts];    (* single Point function call    *)     pl2 = Graphics[Point /@ pts]; (* multiple Point function calls *)          GraphicsRow[{pl1, pl2}, Frame -> All]      ![Mathematica graphics](http://i.stack.imgur.com/wl3At.png) The difference lies in the effect on `PlotRange`. Whereas a list of `Point`s yields a `PlotRange` of:               AbsoluteOptions[pl2, PlotRange]          (*     ==> {PlotRange -> {{0.493385472, 9.588596333}, {0.2849334536, 9.012342799}}}     *)      using the multi-`Point` syntax gives:               AbsoluteOptions[pl1, PlotRange]          (*     ==> {PlotRange -> {{0., 1.}, {0., 1.}}}     *)      The Get Coordinates tool gets the same coordinates in both figures. The question is: is there any good reason for the `PlotRange` reported in `pl1` or is this a bug?