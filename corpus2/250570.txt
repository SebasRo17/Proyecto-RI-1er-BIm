In a project that I have started working on, the database has a lot of `FooDefinition` tables which act like an enum. It's a C# project using Entity Framework although that is not central to the question. The entities have an ID, a string Name field and an int Type field that is converted to an enum. For example:               public class FooDefinition     {         public int Id { get; set; }         public string Name { get; set; }         public FooType FooType { get; set; } // this is an enum that defines the entity     }      The FooDefinition table is populated with an entity for each defined enum value, and does not change unless there is a new enum value added. I am struggling to see the use in this pattern over just using the enum directly as opposed to joining on this Definition table. What are the possible benefits of this approach?