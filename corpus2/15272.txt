I'm working with Options to change the look and feel of some generated Graphics by passing Options to several functions, one of them being `Export[]`. For example:               Options[myPlot] := {Resolution -> 325, Size -> 12, FileName -> "A",        PlotStyle -> Automatic};          myPlot[f_, opts : OptionsPattern[myPlot]] := Block[{fig},     (* ... some calculations here *)     fig = Plot[f[x], {x, -\[Pi], \[Pi]},          Evaluate[FilterRules[{opts}, Options[Plot]]]];     fig = Show[fig, ImageSize -> OptionValue[Size]*72/2.54];+     Export[OptionValue[FileName] <> ".png", fig,  FilterRules[{opts}, Options[Export]]];     Print[fig];     ]      And using `f[x_] := x^2` use the function as                myPlot[f, Resolution -> 120, PlotStyle -> Red]      The Option to plot the function in `Red` is passed correctly to `Plot` but `Resolution` is not passed to `Export`. This is of course due to the fact that `Options[Export] = {}`. My question is: _How can I still pass Options to`Export` (i.e. how to determine, which are available, if they are not written in `Options[Export]`?_ And closely related: _How to do that on your own, i.e. now I defined`PlotStyle` to be an Option of `myPlot`, though it's only passed on, how can I pass Options, that I haven't given myself, without getting the message_ > OptionValue::nodef: "Unknown option PlotStyle for ...