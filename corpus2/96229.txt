> This is part of a series of questions which focuses on a project called the > Abstraction Project, which aims to abstract the concepts used in language > design in the form of a framework. > > Another page associated to it related to ease of use can be viewed here. The > meta-topic associated to an inquiry about the framework and the proper place > to post can be found here. I'm writing a framework which describes the concepts within static high-level languages (like C#, VB.NET, et cetera). As a part of that, it involves synthesis of the structures that describe those concepts. One question I had was about what's called Structural Typing, which I aim to implement through type-parameters (constructors with parameters would be a definite addition.) It's a concept that neither C# nor VB.NET implement. The question I have today is: is structural typing in a hierarchical model necessary? One small example that I can think of is models developed that rely on patterns, but don't necessarily have an interface to specify this pattern. This is useful in instances where you want to use the code for multiple base types without a common ancestor, but with similar structure. If you wanted to display a list of items to the Console via their name, you'd need to write one method for the lowest common ancestor that defines that name property. Person, Control, and Type would all use different methods, as an example. If implemented, the resulted code would look something like:               public static void DisplayNames<T>(IEnumerable<T> namedItems)         where T has         {             ///<summary>Returns the item's name</summary>             string Name { get; }         }     {         foreach (var namedItem in namedItems)             Console.WriteLine(namedItem.Name);     }      The '[' and ']' are used for disambiguation reasons (it'd be difficult to try to discern the body of a type-parameter's structure from an interface's structure otherwise.) Suggestions welcome.