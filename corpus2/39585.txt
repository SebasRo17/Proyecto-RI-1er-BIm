Say you are given the following list:               list={{3, 2, 1}, {3, 4, 2}, {2, 4, 1}, {1, 4, 3}};      Two numbers $x,y$, not necessarily distinct, are neighbors if one of the sub- lists contains both of $x$ and $y$. In more precise mathematical language: let $S=\{A_1,A_2,\dots,A_n\}$ be a collection of $n$ sets, each containing integers between $1$ and $m$. Then $x$ and $y$ are neighbors if $\exists A_i:x,y\in A_i$. I am looking for an efficient way of finding all the neighbors of each element. That is, let $S'=\{B_1,B_2,\dots,B_m\}$. Then $B_i$ contains all the neighbors of $i$. Note that $B_i$ may be empty if the integer $i$ does not appear in any of the sets in $S$. My current implementation is:               Union @@@Function[x, Select[list, MemberQ[#, x] &]] /@ Range@Max@list          (*{{1, 2, 3, 4}, {1, 2, 3, 4}, {1, 2, 3, 4}, {1, 2, 3, 4}}*)      However, it gets fairly slow on large lists. Is there a more efficient way of finding $S'$ in Mathematica?