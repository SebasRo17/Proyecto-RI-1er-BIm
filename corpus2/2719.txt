If I have an undirected graph represented with an adjacency matrix, how can I find all the subgraphs which are a cycle of length N? I don't really know the math nor the programming language well, so I find myself resorting to making a bunch of for loops to try traversing the graph. This is very slow, and I might as well just write it in C at that point. So I'm hoping to learn how to work better with mathematica here. So far, I think I've found a way to tell me the number of such subgraphs. For example, I might be able to get the number of cycles of length 3 in the graph given by the matrix m by doing something like...               Digitize[matrix_] := Map[Sign[#]&,matrix,{2}]      m=Digitize[m]; (* ensure it is normalized *)     ident = Table[KroneckerDelta[i,j],{i,1,Length[m]},{j,1,Length[m]}];     m1 = m*(1-ident); (* remove self-loops, giving steps away of length 1 *)     m2 = (m1.m1)*(1-ident); (* matrix of steps of length 2, with no repeats *)     m3 = (m2.m1); (* matrix of steps of length 3 *)     (* reading diagonal of m3 will tell how many paths lead back to the start? *)       This already looks a bit messy, and I'm not sure how much I can generalize it to larger N. And even then, it doesn't help me get the actual paths. Help? Clarification: Ideally I'd like to eventually write a module that given a length N and an adjacency matrix for an undirected graph, outputs a list of all the unique (up to cyclic reordering) lists of vertices which form a cyclic path of length N.