Erlang and Ruby both come with functions for flattening arrays. It seems like such a simple and useful tool to add to a language. One could do this:               >>> mess = [[1, [2]], 3, [[[4, 5]], 6]]     >>> mess.flatten()     [1, 2, 3, 4, 5, 6]      Or even:               >>> import itertools     >>> mess = [[1, [2]], 3, [[[4, 5]], 6]]     >>> list(itertools.flatten(mess))     [1, 2, 3, 4, 5, 6]      Instead, in Python, one has to go through the trouble of writing a function for flattening arrays from scratch. This seems silly to me, flattening arrays is such a common thing to do. It's like having to write a custom function for concatenating two arrays. I have Googled this fruitlessly, so I'm asking here; is there a particular reason why a mature language like Python 3, which comes with a hundred thousand various batteries included, doesn't provide a simple method of flattening arrays? Has the idea of including such a function been discussed and rejected at some point?