I am reviewing basic algorithms from a book called Algorithms by Robert Sedgewick, and I came across a problem in MergeSort that I am, sad to say, having difficulty solving. The problem is below: > _Sublinear Extra Space_. Develop a merge implementation that reduces that > extra space requirement to max(M, N/M), based on the following idea: Divide > the array into N/M blocks of size M (for simplicity in this description, > assume that N is a multiple of M). Then, (i) considering the blocks as items > with their first key as the sort key, sort them using selection sort; and > (ii) run through the array merging the first block with the second, then the > second block with the third, and so forth. The problem I have with the problem is that based on the idea Sedgewick recommends, the following set of arrays will not be sorted: {0, 10, 12}, {3, 9, 11}, {5, 8, 13}. The algorithm I use is the following:   1. Divide the full array into subarrays of size M.   2. Run Selection Sort on each of the subarrays.   3. Merge each of the subarrays using the method Sedgwick recommends in (ii). (This is where I encounter the problem of where to store the results after the merge.) This leads to wanting to increase the size of the auxiliary space needed to handle at least two subarrays at a time (for merging), but based on the specifications of the problem, that is not allowed. I have also considered using the original array as space for one subarray and using the auxiliary space for the second subarray. However, I can't envision a solution that does not end up overwriting the entries of the first subarray. Any ideas on other ways this can be done? **NOTE:** If this is suppose to be on StackOverflow.com, please let me know how I can move it. I posted here because the question was academic.