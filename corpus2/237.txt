Inspired by this answer, I am interested to know if there are best practices or rules of thumb for constructing patterns, for example for use in function definitions (`f[x_ _Pattern_ ]` or `f[x: _Pattern_ ]`), replacement rules (`expr /. x: _Pattern_ :> y`), or functions that use patterns as arguments (e.g. `Cases`). Leonid mentions that "syntactic patterns", without `Condition` or `PatternTest` elements, are faster for things like `Cases`. Is this a general observation for all pattern-matching constructs in Mathematica, or is it specific to `Cases`? Is there a definition of a syntactic pattern as opposed to other kinds? And if the test in question requires "slower" constructs like `BlankNullSequence` (`___`), are there workarounds or optimisations that are effective, or is it not worth the time spent optimising code?