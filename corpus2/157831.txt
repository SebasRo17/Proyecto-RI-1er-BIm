My development on Android is based on scientific programs and while I'm building these most of the code is in one or two long classes. When I come to deploy these programs I try to decouple everything and use classes and objects like I would on a Java desktop application. However reading guide Designing for Performance | Android Developers about Internal Getters/Setters it seems OO is not a good approach. My question is what is best approach when designed Android applications, should I still use lots of classes with getters/setters and lots of object passing around. This seems counter intuitive thinking about the architecture of Android, but it also does not seem right to have lots of code in long classes. I have looked at source codes from other projects and these seem to follow the OO approach. My applications involve heavy image processing and time and performance is important. I am more of a science researcher than a programmer so thanks in advance for any help.