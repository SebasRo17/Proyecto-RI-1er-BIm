According to Martin Fowler, code refactoring is (emphasis mine): > Refactoring is a disciplined technique for restructuring an existing body of > code, altering its internal structure **without changing its external > behavior**. Its heart is a series of small behavior preserving > transformations. Each transformation (called a 'refactoring') does little, > but a sequence of transformations can produce a significant restructuring. > Since each refactoring is small, it's less likely to go wrong. The system is > also kept fully working after each small refactoring, reducing the chances > that a system can get seriously broken during the restructuring. What is "external behaviour" in this context? For example, if I apply move method refactoring and move some method to other class, it looks like I change external behaviour, doesn't it? So, I'm interested in figuring out at what point does a change stop being a refactor and becomes something more. The term "refactoring" may be misused for larger changes: is there a different word for it? **Update.** A lot of interesting answers about interface, but wouldn't move method refactoring change the interface?