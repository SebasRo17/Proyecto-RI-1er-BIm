Is method overloading a type of polymorphism? To me it seems like simply the differentiation of methods with the same name and different parameters. So `stuff(Thing t)` and `stuff(Thing t, int n)` are entirely different methods as far as the compiler and runtime are concerned. It creates the illusion, on the caller's side, that it's the same method that acts differently on different kinds of objects - polymorphism. But that's only an illusion, because actually `stuff(Thing t)` and `stuff(Thing t, int n)` are completely different methods. Is method overloading anything more than syntactic sugar? Am I missing something? EDIT: A common definition for syntactic sugar, is that it is _purely local_. Meaning changing a piece of code to its 'sweetened' equivalent, or vice versa, involves local changes that don't affect the overall structure of the program. And I think method overloading precisely fits this criterion. Let's look at an example to demonstrate: Consider a class:               class Reader {         public String read(Book b){             // .. translate the book to text         }         public String read(File b){             // .. translate the file to text         }     }      Now consider another class that uses this class:               /* might not be the best example */     class FileProcessor {         Reader reader = new Reader();         public void process(File file){             String text = reader.read(file);             // .. do stuff with the text         }     }      Okay. Now let's see what needs to change if we replace the method overloading with regular methods: The `read` methods in `Reader` change to `readBook(Book)` and `readFile(file)`. Only a matter of changing their names. The calling code in `FileProcessor` changes slightly: `reader.read(file)` changes to `reader.readFile(file)`. And that's it. As you can see, the difference between using method overloading and not using it, are _purely local_. And that's why I think it qualifies as pure syntactic sugar. I'd like to hear your objections if you have some, maybe I'm missing something.