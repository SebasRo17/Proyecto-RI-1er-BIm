I thought I was doing breadth-first graph search correctly, but my instructor's grading script is telling me that my answer is incorrect. From the instructions: > Consider a breadth-first graph search on the graph below, where S is the > start and G is the goal state. Assume that ties are broken alphabetically > (so a partial plan S->X->A would be expanded before S->X->B and S->A->Z > would be expanded before S->B->A). You may find it helpful to execute the > search on scratch paper. > > Please enter the final path returned by breadth-first graph search in the > box below. Your answer should be a string with S as your first character and > G as your last character. Don't include arrows or spaces in your submission. > For example, if you believe the path is S->X->G, please enter SXG in the > box. ![breadth-first search on graph](http://i.imgur.com/gr3GuRr.png) I got and input the answer **SACBG** , which the grading script marked as incorrect. ("Your input was evaluated as SACBG, which is not correct.") Here are my steps for the breadth-first graph search on the above graph using the algorithm at http://en.wikipedia.org/wiki/Breadth-first_search#Pseudocode:   1. Enqueue the root node _S_. **Queue = [S], Path = []**   2. Dequeue _S_ and examine it. **Queue = [], Path = [S]**   3. Enqueue _S_ 's children, _A_ and _C_. **Queue = [A, C], Path = [S]**   4. Dequeue _A_ and examine it. **Queue = [C], Path = [S, A]**   5. _A_ has no children. Dequeue _C_ and examine it. **Queue = [], Path = [S, A, C]**   6. Enqueue _C_ 's children _B_ and _G_. **Queue = [B, G], Path = [S, A, C]**   7. Dequeue _B_ and examine it. **Queue = [G], Path = [S, A, C, B]**   8. _B_ 's only child _G_ is already in the queue. **Queue = [G], Path = [S, A, C, B]**   9. Dequeue the goal node _G_ and examine it. Quit the search and return. **Queue = [], Path = [S, A, C, B, G]** A node is placed in the path when it is dequeued and examined. Ties are broken alphabetically as required in the instructions. What am I doing wrong?