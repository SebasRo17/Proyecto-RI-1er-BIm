How **exactly** does _Mathematica_ determine that evaluation of particular expression should be finished and the result should be returned? Here are some examples of unclear behavior which have arisen, when I tried to understand deeper Todd Gayley's `Block` trick:               x := Block[{tried = True}, x + 1] /; ! TrueQ[tried]         x + y         (* 1 + x + y *)          x + 1      > During evaluation of In[3]:= $IterationLimit::itlim: Iteration limit of 4096 > exceeded. >>               (* Hold[4096 + x] *)      Why did the evaluation stop at `1 + x + y` in the first case and the second go into an infinite loop? The other interesting side of the trick is that when we evaluate just `x`, the infinite loop does not begin. The reason is that evaluation in this case does not go outside of the `Block` scope:               Clear[x];     x := Block[{tried = True}, x + 1] /; ! TrueQ[tried]     x /; ! TrueQ[tried] := x + 1     x     x /; TrueQ[tried] := x + 1     x          (* 1 + x *)      > During evaluation of In[1]:= $RecursionLimit::reclim: Recursion depth of 256 > exceeded. >>               (* 254 + Hold[RuleCondition[$ConditionHold[$ConditionHold[          Block[{tried = True}, x + 1]]], ! TrueQ[tried]]] *)      But if we try to use `Set` instead of `SetDelayed` we get a couple of infinite loops:               x = Block[{tried = True}, x + 1] /; ! TrueQ[tried];      ![](http://i.stack.imgur.com/j6XYg.png) What happens in this case?