I am developing a framework that makes common data management tasks easier for a couple of future applications built on top of it, including document management, data versioning, retention, locking etc. I am currently using .NET, SQL Server and EF Code First. One of the requirements is the ability to flexibly manage access control to the data. It should be easy to declare rules like > "If a user belongs to a project X, he should be able to access and modify > documents related to this project." During my research I came across **claim based access control** which seems to provide the necessary flexibility. I am a bit stunned however by the apparent complexity and not sure if using this would be overkill.   1. As far as I understand, claim based access control is usually used to retrieve the authorization information from an external provider. Does it still make sense to use this if the application manages the access control itself, i.e. the authorization rules are in the same database as the application data? I feel like setting up an external service just for authorization is definitely overkill for our applications.   2. I have found a lot of examples on how to retrieve the authorization with Windows Identity Framework (WIF), but not many on how to implement the authorization and storing of authorization rules.   How difficult would it be to implement something like this with WIF? Are there already any available providers that already use SQL Server to store the authorization information? Or anything in WIF I can simply extend to make this happen? All I found are examples using the application config file. I hope my questions are not too broad. I am rather new to the whole topic claim based access control and trying to determine if it is applicable for my scenario and if so, where to start. **Update** : I tried to narrow the scope of the question down a bit. If this is still considered too broad, I will split it up further. I think however that both questions are closely related and that it makes sense to ask and answer them together.