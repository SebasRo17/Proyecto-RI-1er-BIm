I am practicing using of immutable object in C++. My personal goal is representing generic object graph (in heap) with sequence of immutable graphs. Building the multi-version graph itself isn't that much hard. The problem is performance. Brute-force versioning needs full copy of graph, and this was not acceptable. I tried to share unchanged nodes. But in this case, I got a new problem; references. Reference to other object must be updated in whole graph. This needs visiting all nodes for each time I derive a new graph version. And this mutates the nodes with references, so they also should be derived (by copying). Performance won't be better much than brute-force copying. As far as I can imagine, there's no real efficient way to represent mutation of object graph with immutable states. So I am asking for some idea on this. Is it possible to represent mutation of object graph efficiently with immutable state?