I want to really opensource a project that did start as a personal hobby, but I'm an ignorant of licensing details. This project, provides some libraries for a given $language, and some wrapper command line utilities for those libraries. Those libraries, across many things, do generate more code in the same language, code which can be reused by the caller. On my drafts, I always used a MIT style license for the sake of brevity, but it's unreleased copies I'm reviewing right now to merge on a finally released version. I would like to use GPL style policies for usage/contribution of _my code_ (lets call it a framework). But. Could choosing GPLv2 (3?) for my project, limit the things that a given user can do with the code generated or managed by my libraries/utilities? (i.e. commercial profit of such generated code without release her improvements/changes to my code) Is there something to consider (in a plain language) when licensing code that generates code ? **Update:** To try to answer some comments:   1. _What do you wish to accomplish with your license?_   The best goals for the project health (from the view point of a community- based opensource project).   2. _Who do you want to use your code?_   Anybody   3. _What do you want to happen to changes?_   To be back-ported to the project as much as possible.   4. _What do you want to happen to generated code?_   To don't be affected by my licensing choice. It belongs to the user who generated it.   5. _What about money - if the user makes money do you want that to affect the licensing?_   If the user makes money from the generated code, great. If the user makes money _modifying_ my code, I would like to force to publish the changes. I did a group-therapy with those answers. Now, choosing GPL (2? 3?) I could be ok or not? **Update2** > So they have to bundle/compile your library in with theirs when they deploy > it, in order for it to run? yes, the library needs to be installed previously, or bundled with the result (there is an option for this).