I'm attempting to teach myself the basics of finite automata and have been exploring the differences between Deterministic Finite Automata and Non Deterministic Finite Automita. One thing that pops up quite often in the on-line examples, lectures slides and videos of various CS instructors is the epsilon transition. The problem is none of them do very good job of explaining epsilon transitions. They just kind of pop them out of nowhere as this mysterious property that allows a you to jump from one state to another without reading an input character. O.K. I get that, but how are these arbitrary jumps facilitated semanticly if we were to create this automata? Take the image below for example. Lets say we are in S0, there are two epsilon transitions to s1 and s4. How is it decided which one to go down. If you go to S1 and do not have an a, can you backtrack and try b? I say this because the arrows do not seem to infer this. Or have I conceived this wrong, could the automata actually be in both states S1 and S2 concurrently? Also s3 and s6, have epsilon transitions to s7, so why don't we have two accepting states S3 and s4 instead? Finally the S2, has two paths that react to a, s5 has two paths that react to b. How does that work in practice. How is the path to follow determined? When answering please try to limit the use of esoteric mathematics, and if you do use operators and symbols explain each one clearly. I'm not a maths wizz. ![NFA with Epsilon Transitions](http://i.stack.imgur.com/qUDyA.png)