Here's the relevant quote: > A common risk with software development includes communication breakdowns > between Developers and Business Stakeholders. BDD uses the specification of > desired behavior as a ubiquitous language for the project team members. This > is the reason that BDD insists on a semi-formal language for behavioral > specification: some formality is a requirement for being a ubiquitous > language. In addition, having such a ubiquitous language creates a domain > model of specifications, so that specifications may be reasoned about > formally. I'm thinking an actual formal rigorous "language" that has a grammar and compiler could be useful for, say, auto-generating test stubs from specs or for guaranteeing that specs have certain properties (consistently named nouns and verbs, etc.). In the BDD paradigm, then, why should the "ubiquitous language" be merely semi-formal and not completely formal/rigorous?