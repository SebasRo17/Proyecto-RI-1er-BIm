There are a lot of very smart and experienced people, who claim that if you don't write unit tests then your code will be buggy and God will kill all kittens. On other hand, another bunch of smart people will say that unittesting is counterproductive. So if you will write unittest then kittens will be damned too. Also, I heard very good arguments on both sides for and against integration testings, for and against TDD. Also, there are lot of popular open source projects. Some of them use some automated testings and some of them not. So, why different testing methods are so contradicting topic? _Update 1_ I wrote couple of examples of anti-unittesting sentiments in comments. However, just to be clear there are A LOT of very successful open source projects which doesn't have unittests. This implies that not everybody thinks that unittests are useful. _Update 2_ As soon as we start discussing some particular piece of testing (as example mocking, which came up in the comments), we immediately try to distinguish between being a core value or a mean. However, testing by itself isn't a core value. It's just a way to decrease support cost, which in it's turn, just a way to increase profitability. So, as I see it - unittests are something like 4 connections aways from a profit. _Update 3_ It's interesting that amount of people in "balanced" camp is quite small. Most of people have really strong opinion on this topic.