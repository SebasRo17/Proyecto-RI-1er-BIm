I am using several activities based on the `ListActivity`. All of them display information from different SQLite queries, and all of them use the `ViewHolder` optimization. The cursor adapter have to be specialized, and the view holder is also special for the purpose. Therefore, they are defined as `private class`es inside the `MyListActivity` definition. Not having too much experience with Java, my question is whether the chosen approach is correct. Possibly the non-nested classes (i.e. flat, separate *.java file) is not better for reasons unknown to me. What are the pros and cons of nested/flat approaches? To be more specific, here is the code skeleton:               public class MyListActivity extends ListActivity             implements LoaderManager.LoaderCallbacks<Cursor> {              private MyCursorAdapter myAdapter;              @Override         public void onCreate(Bundle savedInstanceState) {             ...             initLoaderAndSetListAdapter();         }              private static class MyViewHolder {             public TextView code;             public CharArrayBuffer codeBuffer = new CharArrayBuffer(20);             ...         }              private class MyCursorAdapter extends CursorAdapter {                  private final LayoutInflater mInflater;             private final int mLayout;                  public MyCursorAdapter(Context context, Cursor c, int flags) {                 super(context, c, flags);                 mLayout = R.layout.the_specific_view_for_the_list_item;                 mInflater = (LayoutInflater)                         context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);             }                  @Override             public View newView(Context context, Cursor cursor, ViewGroup parent) {                 View v = mInflater.inflate(mLayout, parent, false);                 MyViewHolder holder = new MyViewHolder();                 holder.code = (TextView) v.findViewById(R.id.code);                 v.setTag(holder);                 return v;             }                  @Override             public void bindView(View view, Context context, Cursor cursor) {                 MyViewHolder holder = (MyViewHolder) view.getTag();                 cursor.copyStringToBuffer(1, holder.codeBuffer);  // COLUMN_CODE                 ...                 holder.code.setText(holder.codeBuffer.data, 0, holder.codeBuffer.sizeCopied);                 ...             }         }              private void initLoaderAndSetListAdapter() {             getLoaderManager().initLoader(0, null, this);             myAdapter = new MyCursorAdapter(this, null, 0);             setListAdapter(myAdapter);         }              @Override         public Loader<Cursor> onCreateLoader(int id, Bundle args) {             Uri uri = ... set the uri based on situation... ;             String[] projection = { ... };             CursorLoader cursorLoader = new CursorLoader(this,                     uri, projection,                     null, null,                     orderingInfo);             return cursorLoader;         }              @Override         public void onLoadFinished(Loader<Cursor> loader, Cursor data) {             myAdapter.swapCursor(data);         }              @Override         public void onLoaderReset(Loader<Cursor> loader) {             myAdapter.swapCursor(null);         }     }      The question is specific to the described situation that I meet repeatedly. Please, do not consider it as general _nested classes or not_.