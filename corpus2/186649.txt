When I read pro and con lists of using Entity Framework (or any modern ORM really), I'm surprised that the following point doesn't arise (self quote): > Using strongly-typed domain entities allows for type checking at compile- > time which essentially performs a verification of all your database > operations. This is something that is not possible with ADO.NET (whether > using inline SQL or stored procedures). For me, this is one of the biggest advantages of using an ORM. An issue that I come across regularly when dealing with ADO.NET based applications are the run-time errors from SQL. Static checking completely eliminates this. Could anyone elaborate as to why this isn't hugely relevant to many developers? It appears that some don't even agree with the above statement. **Example of some pro & con resources:**   * Entity Framework VS LINQ to SQL VS ADO.NET with stored procedures? (stackoverflow)   * Five Reasons for using an ORM Tool   * Why use the Entity Framework? Yeah, why exactly?