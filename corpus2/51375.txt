I am trying to figure out how to create a function that can create the matrix pattern below, where: `f[1]` returns `{{1}}` `f[2]` returns `{{1,2,2}}`, i.e., inserts 2 cells to the back `f[3]` returns `{{3,3,3}, {{1,2,2}}}`, i.e., inserts a row of size 3 in front `f[4]` returns `{{4,4,3,3,3}, {4,4,1,2,2}}`, i.e., inserts 2 new cells in front of both rows `f[5]` returns `{{4,4,3,3,3}, {4,4,1,2,2}, {5,5,5,5,5}}`, i.e., inserts a row of size 5 at the back and `f[12]` returns               {      {12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11},      {12, 12, 8, 8, 7, 7, 7, 7, 7, 7, 7, 10, 10},      {12, 12, 8, 8, 4, 4, 3, 3, 3, 6, 6, 10, 10},      {12, 12, 8, 8, 4, 4, 1, 2, 2, 6, 6, 10, 10},      {12, 12, 8, 8, 5, 5, 5, 5, 5, 6, 6, 10, 10},      {12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10}     }      The function attaches `n` number of cells to the current matrix at every iteration in a counter clockwise direction. The odd number cells can be done by inserting a row of size `n`. for example `Insert[{{1, 2, 2}}, ConstantArray[3, 3], 1]` However I am stuck on the even numbered blocks because they would need to be inserted on multiple rows. Can someone please point me to where I can find how to create such a function?