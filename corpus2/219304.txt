I would like to understand the impact of different resourcing models for software projects. First, I would like to identify the different resourcing approaches that are used to resource software projects. Here are some models that I can think of based in my own experiences:   1. Product centred resourcing   2. Planned resource pooling   3. Chaotic resource pooling _Model 1_ \- has resources that are product focused. In this model the project team is dedicated to a product (e.g. a SOA service). In this model, the product is the central concept and the team stays and grows with the product. This model promotes continuous learning for the team in the product domain, and facilitates rapid development of new features because the project team is intimately knowledgeable about the product. This model seems to be very effective for evolving existing products in product centered companies. _Model 2_ \- pulls resources from a resource pool when starting up new projects. This model appears to be most suitable when developing new products from scratch. In this model team members need to acquire the domain knowledge required before starting the project. The model does not seem to be effective for product based companies because product domain knowledge is lost when resources disband after the project completes. This model is typical in consulting organisations. _Model 3_ \- is really an extension of Model 2. In Model 3, resources are replaced with other resources mid-project. Thus model treats resources as commodities where new project team members are expected to acquire the same knowledge as the resource that they replaced. This model leaks the most domain knowledge, and is is characterised by low morale and low productivity. This model is usually found in organisations that are constantly fire-fighting. **Question** : Is there a taxonomy of software resourcing models that I can use rather than creating my own?