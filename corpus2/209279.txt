I need some help with regards to implement a pre-designed system that has 4 components and several constraints. I've spent approximately 50 hours trying to determine the best way to build this system; however, I do not think I have a strong enough solution as of right now. ### ~~~ The Background Information ~~~ The purpose of this project is to allows for business owners (and their developers) to access data remotely. It has 4 components.   1. A Web Service    2. A Client   3. A Database For the webservice   4. A Database For the Client The user interface must be in the form of a web service as it is one of the design requirements. The Client is stored on a business owners computer (Which houses their database). It is a local program programmed in the .net platform. Business owners access the web service which then accesses a client, requests for data and passes that data to the client. The above is known and unchangeable (as I am not the person who makes the project specification) ### ~~~ The Real Problem ~~~ The problem is, The Client may not necessarily be at the same place every time, the IP of the client is subject to change. The Client may also simply not be online at the time of the request from the business owner. ### ~~~ My Present Solution ~~~ My Present solution to this problem is to create a TCP/IP Server on the Client. When the Client is turned on or started, it can "register" its TCP/IP Server credentials (the information needed to contact it) into the server along with some identification information. ~~~Editted for clarity~~~ When the Web Service gets a request, it can open a random TCP/IP connection and let the client (Remember the TCP/IP Server is on the Client) know it has a request for data. The Client can then get the request, process it and send a response with a 'request Id'. Based on this request Id, the web service can receive a call, let the client know it has a request, the client can go query the web service for the request, retrieve the request, process the request and send a response back to the web service which can then process the response (extract the request Id from it) and send it back to the appropriate web service caller.   ~~~ End Edit ~~~ (wow that sentence is a mouthful to read out loud) ### ~~~ What I Would Like ~~~ I feel my solution is sketchy and I would really like some feedback as to potential pitfalls that I may not see and better ways of approaching it.