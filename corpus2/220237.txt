There is a service:               createUser(User user)      where you can create a new user, with so many attributes (`name`, `address` lines...). Now, some user attributes are mandatory. Other attributes are not mandatory (like `nickname` or `image`). The problem is that, from the outside, you can't tell the difference (in compile time). You can't force yourself to set only mandatory fields; moreover, the list of mandatory fields can change in the future and your code will stop working (while still compiling). So we can   * `createUser(int userId, String username...)` \- explode the bean properties and don't use bean as an argument. Now every change will be reflected in the API, but method signatures may become huge. Also, when overloading methods for various combinations of mandatory fields with non-mandatory - that can be a mess, too.   * use multiple beans, and have methods like (given names are just illustrative) `createUser(UserCoreData user)`, `createUser(UserFull user)` but that still would not help much.   * or have service for storing mandatory User data and then having additional services for storing additional, non-mandatory data.   * (EDITED) or to split `User` into logical components (ie smaller beans) `Address`, `DateFrom`... and use those in service methods. Is there a pragmatical way to describe service method and its arguments in case like this? (in Java).