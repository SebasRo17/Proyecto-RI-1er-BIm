I often need to compute derivatives or integrals involving N-dimensional vectors (where the dimension could be equal to 2 or 3 but is not particularly relevant for the sake of the derivation). The only way I know to translate this into valid Mathematica input is to specialize to a particular N and define all quantities component-wise. A simple example: computing the time derivative of a normalized quantity ![Time derivative of a normalized quantity](http://i.stack.imgur.com/QnzXB.png) While correct, this can obviously get extremely messy fast. At that point, I find it easier to just do the computation by hand using generic vector calculus identities which work for vectors of any dimension. I was wondering if there is a way of doing such computations using an abstract vector type? This post references a `Vectors` command that is potentially related, but it was not clear to me how to use it for calculus. **Edit** : After some more experimentation with `Vectors`, I was able to get quite close to what I was looking for:               $Assumptions = V[t] \[Element] Vectors[3, Reals];     Simplify[D[V[t]/Sqrt[Dot[V[t], V[t]]], t]]      $$\frac{2 V(t).V(t) V'(t)-V(t) \left(V(t).V'(t)+V'(t).V(t)\right)}{2 (V(t).V(t))^{3/2}}$$ However, neither `Simplify[]` nor `TensorReduce[]` could simplify the commutative dot product in the expression above.