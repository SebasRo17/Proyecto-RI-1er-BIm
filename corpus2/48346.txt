I am pretty new to _Mathematica_. I need to create 2d array dynamicly. I got some code in C++(Qt) and it looks like this:               void Wave::getMatrix(int M, int N)     {         int k = -N;         while(k < N+1){             QVector<tsk_type> temp_vec;                  for(int i = -N; i < N+1; i++){                 temp_vec.push_back(getY(i));                 tsk_type temp_sum0;                      for(int ii = -M; ii < M+1; ii++ ){                     temp_sum0 += (getI(i-ii, b)/getY(ii)) * getJ(ii-k,b1,b2);                             }                 temp_vec[temp_vec.size()-1] = temp_sum0;                      if (k == i)                     temp_vec[temp_vec.size()-1] -= l;                          }                  temp_vec.push_back(getD(S)*getI(S-k, b));             main_array.push_back(temp_vec);             k++;         }          }      In _Mathematica_ , I have already written all the functions that I need to make some linear equation system matrix which I can solve. I even got a formula for this and I also implemented the functions I need.               getI[k_ , a_, b_];     getJ[k_ , a1_, b1_, a2_, b2_];      getGamma[n_]     getD[s_]      So `C_k` and `C_n` are unknown parameters which I need to find. Here is the formula ![enter image description here](http://i.stack.imgur.com/D9PEo.png) And the question is: How should I properly prepare and create matrix for which I could apply some lineral equation solving method like Gaussian or Gaussian- Jordan? P.S. I know that there are some C++ stuff like `librarylink`, but I need to use _Mathematica_ ;s built-in functions. **UPD:** Here's my attempt to create matrix. I run it but it's not working. Also there are no error messages. Whats wrong?               (*all globlas definiton is somewhere here*)                  k = -N;                  mainmatrix = List[[]];             While[k < N + 1,                         rowvalues = List[];                         For[i = -N, i < N + 1, i++,                             tempsum;                                 AppendTo[rowvalues, getGamma[i]];                             For[j = -M, j < M + 1, j++,                                                tempsum = tempsum +  (getI[i - j, a, b]/getGamma[j]) *                                            getJ[j - k, a1, b1, a2, b]                                 ]                                AppendTo[rowvalues, tempsum];                                    If[k == i, AppendTo[rowvalues, -l], 0]];                                AppendTo[rowvalues, getD[S]*getI[S - k, a, b]];                                AppendTo[mainmatrix, rowvalues];                   k++]