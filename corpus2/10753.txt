Here is a code sample that creates a control object which calculates the expressions inside `Maniplate` again and again and never stop (it's proved by the code in the note): _Sample 1:_               Manipulate[date = Table[0, {num}];      For[i = 1, i <= num, i++, date[[i]] = Sin[i]];(*Print@i;*)      ListPlot[{date}], {{num, 2}, 1, 20, 1}]      `While` has the same problem: _Sample 2:_               Manipulate[date = Table[0, {num}]; i = 1;      While[i <= num, date[[i]] = Sin[i]; i++];      ListPlot[{date}], {{num, 2}, 1, 20, 1}]      I know if I choose `Do`, the problem will no longer exist: _Sample 3:_               Manipulate[date = Table[0, {num}];      Do[date[[i]] = Sin[i], {i, 1, num}];      ListPlot[{date}], {{num, 2}, 1, 20, 1}]      Still, I know I can solve the problem if I throw the expression into `Module` if what I'm using is `For`: _Sample 4:_               Manipulate[Module[{i}, date = Table[0, {num}];       For[i = 1, i <= num, i++, date[[i]] = Sin[i]];       ListPlot[{date}]], {{num, 2}, 1, 20, 1}]      And…yeah, it doesn't work for the code above with `While`…: _Sample 5:_               Manipulate[Module[{j}, date = Table[0, {num}]; j = 1;       While[j <= num, date[[j]] = Sin[j]; j++];       ListPlot[{date}]], {{num, 2}, 1, 20, 1}]     (*This still creates a problematic control object*)      How to solve the problem with `While`? what actually happens inside `Manipulate`? what's the exact reason for the endless loop? * * * OK, the problem with _sample 5_ turns out to be a collaboration of _Sample 4_ and _Sample 5_ , before I run sample 5, a control object has been already created by _Sample 4_ (let's call it _Object 4_ below, and so we have _Object 5_ for _Sample 5_ ).I think the process should be like this: when `date = Table[0, {num}];` in _Sample 5_ is executed, it's tracked by _Object 4_ , and then `For[i = 1, i <= num, i++, date[[i]] = Sin[i]];` in _Sample 4_ is executed, so it is tracked by _Object 5_ …so this story tells us how important a good programing habit is…