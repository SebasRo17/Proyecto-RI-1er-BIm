I'm working on a single page application on the node-webkit desktop app platform, which means 99.9% of all of the logic is written in JavaScript. Since this is a reboot of a project we're working on, I wanted to approach the architecture from more of an MVC approach on the client side. I'm planning on creating a DAO layer for access to localStorage, IndexedDB, as well as Web services via REST requests. The problem is, the first tool I reach for to make HTTPS requests to the server is jQuery AJAX. It feels a bit weird to use jQuery in the DAO layer, even though I don't plan to manipulate the DOM, but it works really well on node-webkit and is a tried and tested tool for retrieving and sending data to the servers. Despite the popularity of certain JavaScript application frameworks that have a certain _way_ of doing things, we're not planning on using any frameworks other than JavaScript libraries that are fairly lightweight and unobtrusive, such as jQuery, Underscore, Mustache, Node.js modules, but nothing that forces us to unequivocally exclude certain technologies. I'm planning to inject jQuery into the DAO layer for the purposes of making calls via AJAX to the Web services. My question is this:   * How should I approach Web services? Do I treat Web services as just another data source like the local database?    * Or do I just simply use the raw XMLHttpRequest object? What's the proven method for dealing with this architectural problem on the client side, **_without JavaScript frameworks_**?