I've got trouble wrapping my head around a certain problem: In my data-flow app (a visual editor), I have both autonomous objects which communicate though ports via unordered simultaneous messages and thus represent an asynchronous system. ![in this picture, f would receive x from the first object, transform and immediately send the transformed value to the next](http://i.stack.imgur.com/MNRFL.png) Still, I also want to use functions which are synchronous, e.g they need input to compute it's value Now the problem is - how do I combine both with a non-trivial system? ![2](http://i.stack.imgur.com/wHG9E.png) In this picture, f needs x and y to compute its value, but during any point in time, only one input may be present (suppose x is present, y is not). Generalize this to higher dimensions I can see a possible way out:   * make x an array X = (x,y) and combine the first two objects resulting in a Type-1 like system ..   * or make f an active object, which caches x,y and then computes   * or make f always compute its value (e.g when only x is present, compute x*y = x*0 ...) * * * So the possibility of futures was mentioned. I'M using Java, so i'll frame my possible solution via Objects ![X is sent, y is missing -> create future \(maybe a copy of f\) waiting for y](http://i.stack.imgur.com/4N34O.png) X is sent, y is missing -> create future (maybe a copy of f) waiting for y ![enter image description here](http://i.stack.imgur.com/JJme0.png) ![enter image description here](http://i.stack.imgur.com/WWuPM.png)