A few times in my past I've wanted to store data in code. This would be data that seldom changes and is used in places where access to a database isn't possible, practical, or desirable. A small example would be storing a list of countries. For that you could do something like:               public class Country     {         public string Code { get; set; }         public string EnglishName {get;set;}     }          public static class CountryHelper     {         public static List<Country> Countries = new List<Country>             {                 new Country {Code = "AU", EnglishName = "Australia"},                 ...                 new Country {Code = "SE", EnglishName = "Sweden"},                 ...             };              public static Country GetByCode(string code)         {             return Countries.Single(c => c.Code == code);         }     }      I've got away with doing this in the past because the data sets were relatively small and the objects pretty simple. Now I'm working with something that will have more complex objects (5 - 10 properties each, some properties being dictionaries) and around 200 objects total. The data itself changes very rarely and when it does change it's really not even that important. So rolling it into the next release version is perfectly fine. I'm planning to use T4 or ERB or some other templating solution to turn my data source into something that is stored statically in the assembly. It seems my options are   1. Store the data in XML. Compile the XML file as an assembly resource. Load data as needed, store loaded data into a Dictionary for repeat-use performance.   2. Generate some kind of static object or objects that are initialized at startup. I'm pretty sure I understand the performance implications of option 1. At least, my hunch is that it wouldn't have stellar performance. As for option 2, I don't know what to do. I don't know enough about the internals of the .NET framework to know the best way to actually store this data in C# code and the best ways to initialize it. I poked around using .NET reflector to see how `System.Globalization.CultureInfo.GetCulture(name)` works, since this is actually a very similar workflow to what I want. Unfortunately that trail ended at an `extern`, so no hints there. Is initializing a static property with all the data, as in my example, the way to go? Or would it be better to create the objects on demand and then cache them, like this?                   private static readonly Dictionary<string, Country> Cache = new Dictionary<string,Country>();               public static Country GetByCode(string code)         {             if (!Cache.ContainsKey(code))                 return Cache[code];                  return (Cache[code] = CreateCountry(code));         }              internal static Country CreateCountry(string code)         {             if (code == "AU")                 return new Country {Code = "AU", EnglishName = "Australia"};             ...             if (code == "SE")                 return new Country {Code = "SE", EnglishName = "Sweden"};             ...             throw new CountryNotFoundException();         }      The advantage to creating them at once in a static member is that you can use LINQ or whatever else to look at all the objects and query them if you want. Though I suspect doing this has a startup performance penalty. I'm hoping someone has experience with this and can share their opinions!