What is the difference between building an application **Outside In** vs building it **Inside Out** using TDD? These are the books I read about TDD and unit testing:   Test Driven Development: By Example   Test-Driven Development: A Practical Guide: A Practical Guide   Real-World Solutions for Developing High-Quality PHP Frameworks and Applications   Test-Driven Development in Microsoft .NET   xUnit Test Patterns: Refactoring Test Code   The Art of Unit Testing: With Examples in .Net   Growing Object-Oriented Software, Guided by Tests\--->This one was really hard to understand since JAVA isn't my primary language :) Almost all of them explained TDD basics and unit testing in general, but with little mention of the different ways the application can be constructed. Another thing I noticed is that most of these books (if not all) ignore the design phase when writing the application. They focus more on writing the test cases quickly and letting the design emerge by itself. However, I came across a paragraph in xUnit Test Patterns that discussed the ways people approach TDD. There are 2 schools out there **Outside In** vs **Inside Out**. Sadly the book doesn't elaborate more on this point. I wish to know what is the main difference between these 2 cases.   When should I use each one of them?   To a TDD beginner which one is easier to grasp?   What is the drawbacks of each method?   Is there any materials out there that discuss this topic specifically?