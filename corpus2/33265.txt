The following example is a very simplified version of the problem I'm working with, though I hope it still captures the essentials. First, the definitions:               sigmoid[s_, a_][x_] := (a (-s + x))/Sqrt[1 + a^2 (s - x)^2];          plots[params_] := Module[{fns},        fns = sigmoid @@ # & /@ params;        Plot[#[x] & /@ fns, {x, -20, 20}, ImageSize -> Small]];      The `plots` function produces a plot containing as many sigmoid curves as there are parameter sets in the list `params`. E.g., with 5 parameter sets (differing only in the first parameter):               plots[{{-10, 1}, {-5, 1}, {0, 1}, {5, 1}, {10, 1}}]      `plots` produces ![5-curve plot](http://i.stack.imgur.com/kTwgA.png) More typically, however, I need to run `plots` with an argument consisting of ~100 sets of parameters, and I'm finding it to take considerably longer than I had expected. (Maybe I've gotten spoiled!) For example, running               plots[{#, 1} & /@ Array[# &, 100, {-15, 15}]]      takes ~40s on my desktop. Does this sound right? Currently I am in the process of producing several figures each consisting of a grid containing ~100 plots of comparable complexity (i.e. ~100 curves/plot), so I need to find ways to significantly speed this up. Any suggestions would be appreciated. NB: The details of the `sigmoid` function should not be an important aspect of the proposed optimization, since I chose this function for this example only because it is significantly simpler than the function that I am actually working with. (For one thing, the latter is parametrized by three rather than two numbers. Nevertheless, it produces s-shaped curves looking very similar those produced by `sigmoid`.)