I defined a function               getCell[sp_, i_, j_, x_] := Block[{target, n, m, k, l, k2, l2, cells},       n = Dimensions[sp][[1]];       m = Dimensions[sp][[2]];       cells = {};       Do[        Do[         (* This is one neighbor *)         k2 = Mod[i + k, n, 1];         l2 = Mod[j + l, m, 1];         If[(k2 != i || l2 != j) && sp[[k2, l2]] == x,           AppendTo[cells, {k2, l2}]],         {l, -1, 1}],        {k, -1, 1}];       If[Dimensions[cells][[1]] != 0,        target = RandomSample[cells, 1][[1]],        (* The default, if none was found, is to return the cell itself,         just for convenience *)        target = {i, j}        ];       Return[target];       ]      `getCell` given a square matrix `sp` filled with Integers attempts to find a cell neighboring `[[i,j]]` that contains a value equal to `x`. If it finds such a cell, it returns the coordinates of that cell; if not, it returns the input coordinates `{i,j}`. I now wanted to compile `getCell` to try to speed it up, but when I do so by putting `Compile` around the function and inserting type definitions, I get several error messages:               Compile::cset: Variable cells of type {_Integer,1} encountered in assignment of type {_Integer,2}. >>          Compile::cpts: The result after evaluating Insert[cells,{k2,l2},-1] should be a tensor. Nontensor lists are not supported at present; evaluation will proceed with the uncompiled function. >>          Compile::cset: Variable target of type {_Integer,2} encountered in assignment of type {_Integer,0}. >>          Compile::cset: Variable target of type {_Integer,2} encountered in assignment of type {_Integer,1}. >>      Does anyone know what I might be doing wrong, and how I could get this simple function compiled?