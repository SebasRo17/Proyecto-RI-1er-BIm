So I've created (and I'm sure someone else has come up with this before - I'm not claiming to have invented it) a data structure which consists of a binary search tree, only instead of each node having a single left and right child, they have two `Map<string, Node>` for the left and right, and the parent has a similar `Map<string, Node>` for the roots. When you create the tree, you give it a list of strings, which are the names of fields on the object you are storing on the tree. It creates one empty root for each name. When you insert an object, it is placed in each of the trees and sorted based on the data in that field. (The language in this case is C#, but it could be done in any OOP language. Storage should be by reference, so each object exists only once, but is referenced in multiple trees) So if I had an object like so:               class myObject     {         Map<string, object> attributes;         ...     }      And the map has one object (which must implement `IComparable`) for every string in the list of keys the tree uses. The benefit is that I can now choose a string as my sort-key, and quickly traverse through my tree in sorted order based on any of the sortable attributes. Likewise, I can perform a search on the tree based on any of the sortable attributes in O(log n) time. (A standard BST would allow this only on the single sort-key.) I've called mine a `MultiTree`, but I looked it up and that has another meaning which seems to be entirely unrelated. But I can't come up with a better name for it. Does this structure have an established name already?