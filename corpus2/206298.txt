Well, the title is not very appropriate, please read on (I couldn't get a better one). Note: Using Python 2.7, but an algorithm will help too. I'm making a side scroller game, in which I am generating the obstacles on the fly. The trouble I am having is figuring out how to generate the obstacles. o_O   I have a some kind of a logic, but then I'm having trouble in figuring out the entire logic. So here's my problem from an implementation perspective :   I have a `Surface`, in which I have put some `Element`s, which are all rectangles.   Think of it like:               0 0 0 0 0 0 0     0 0 0 0 1 1 0     0 0 0 0 1 1 0     0 0 0 0 1 1 0     0 0 0 0 0 0 0     0 1 1 0 0 1 1     0 0 0 0 0 1 1      As in the above structure, how can I determine if a `axb` rectangle can be added without overlapping another rectangle (of 1s), and where all. Also, that with maintaining a distance of x elements (even diagonally) from all the other objects, that means the entire rectangle is (x+3, x+4). Something like if `x=1, a=3, b=4`, there's only one possible arrangement:   (2s represent the new object)               2 2 2 0 0 0 0     2 2 2 0 1 1 0     2 2 2 0 1 1 0     2 2 2 0 1 1 0     0 0 0 0 0 0 0     0 1 1 0 0 1 1     0 0 0 0 0 1 1      Basically, I need to find all the points, from which an rectangle of sides `a` and `b` can have it's, say, top-left corner. How this be achieved? Note: Open to better ideas for generating the obstacles on the fly! PS: Am I unclear?