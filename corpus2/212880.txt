I need to write a simple API for a project I'm working on. This API will be used internally to perform some server side actions that were triggered by AJAX calls. To make things easier for me, I thought of using the Chain-of- Command/Responsibility pattern. Here are more details about what I want to do: I am creating a "dashboard" where admins of my app will be able to update information (meta data) about items stored in a database. To make things easy and simple for the admins, I chose to use AJAX. So, if an admin wants to delete an item, (s)he clicks on the "delete button". A POST request is then sent to `edit.php` page with all the information needed to perform the deletion (action : delete, element : link, id : xx ...). Where `action`, `element` and of course `id` can change. This is why I opted for a mini-API that will, depending on the `action` and the `element` data, call a different function from a different class. Now, to implement the API, I decided to use Chain-of-Responsibility design pattern. Why? Because I can easily add, delete or update classes without having to modify the API itself. Is the Chain of Responsibility design pattern good fit for my case?