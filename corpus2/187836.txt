Code documentation is usually related to a piece of code, be it small (method- level) or larger (class- or namespace-level). However, it is always about the _inputs_ and the _outputs_ of that piece of code, possibly describing its behavior and caveats. It doesn't make much sense to document events fired by a class in the methods that may fire them: they may be duplicated and, by the definition of events, the listener is not expected to care about what triggers them, only handling them. Documenting all events at the top of a class seems quite heavy, as someone willing to get an overview of the class behavior might not be so interested at deep diving at this “secondary interface”. This problem is mitigated in strongly-typed languages such as Java (yes, unless you use anonymous classes, but it doesn't seem so common), as the events will be defined in their own classes, which can then be documented. But, in languages with looser types, where an event is simply a String identifier and a series of parameters, it is much more difficult to find the proper place for documenting these id/params combinations. So: where should fired events be documented in languages that don't model them explicitly?