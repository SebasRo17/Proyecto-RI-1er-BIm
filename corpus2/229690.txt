I am working on several applications which depends on a framework which was developed by a prior engineer in the company. The framework was mainly developed and maintained in the early 2000s, and provide the same functionality available in `boost`, `Qt` or even `c++11`. I believe the framework was developed internally because the engineer in question is an autodidact, and that at this time he didn't knew a framework which will satisfy his need. Right now the framework has reached his limit, and we plan to switch to public and well known frameworks to do the same job. The issues we are facing :   * We have to deal with custom basic data structure implementations (strings, arrays)   * We are limited by the capacity to do event-driven or clean concurrent programming correctly   * Coupling and code complexity can be very high (due to people working on both framework and apps )   * Nobody even remotely want to maintain that library   * GUI application management is just inferior to Qt. For instance it is very hard (read _we still havent managed_ ) to make a CLI based on this framework. This is an issue when we want to create CLI executables which does some of the functionality of the UI. Basically **the application is very resistent to change**. One developer joked that _the source code became self aware, and that we have lost control_. We are a small team, and want to move away from our lib incrementally. We cannot go into full rework mode, as the application has features\bugs to be taken care of in the meantime. We are lucky that the management part of the company understood the issues and is in a cooperative mindset.   * What approach or strategy should we consider?   * What should we do in order to not be stuck midway with a unusable mutant?   * What are the opportunities? Is it teh occasion to improve the architecture? To improve testatibility? Or the development process?   * If several things come to mind, which one should be done first?