How to speed up MST algorithm? I work with graphs and I have adopted Prim's algorithm for my needs, from here. The graphs which I use are very dense (number of vertexes: $V=500$ and every vertex is connected with other $N-$1 vertexes). For such graph my computer (i5 2500K@4.6GHz) needs about 40 seconds to compute MST (Prim). I read this: Performance Tuning in Mathematica What is the best way to optimize this code?   1. Compile? I tried this but I can't force it to work...   2. Maybe change some procedural parts of code to functional? If it possible, how? For me, Prim, seems to be procedural in its roots.   3. Or should I change algorithm to Kruskal or Boruvka? For now, I successfully use `Parallelize` function, so I can compute many different graphs in parallel on 4 cores. But how make it faster when computing each single graph? This is my code (adopted for my needs;):               getMstPrim[metricMatrix_] :=      Module[{groupOne, groupTwo, kk, paths, current, rule = {}, n},       n = Length[metricMatrix[[2]]];       groupOne = {RandomInteger[{1, n}]} ;                               (*        initialaze from any points, groupOne is inside points of the tree *)       groupTwo = Complement[Range[1, n], groupOne];           (*        groupTwo is outside points of the tree *)       For[kk = 1, kk < n, kk++,        paths =          Table[{metricMatrix[[i, j]], {i, j}}, {i, groupOne}, {j,            groupTwo}]; (*         current possible connections between group one and two *)        current = Last[First[Sort[Flatten[paths, 1]]]];   (*         sort for shortest weight*)        groupOne = Union[groupOne, current];                              (*         add the current path to goupe one *)        groupTwo = Complement[groupTwo, current];                   (*         remove the current path from goupe two *)        rule =          Append[rule,           current]                                                   (*         store the paths for final use *)        ];       rule       ]        `metricMatrix` is list of lists (~500 x 100).