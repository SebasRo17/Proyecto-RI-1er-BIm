One moment I decided to assign symbolic names to all special spaces since they all look the same when put literally in FrontEnd editor, more or less like `""` or `" "`. I wrote the following macro:               Block[{Set}, Set @@@     ( MapAt[         Composition[Symbol         , StringReplace[#, "[" | "]" | "\"" | "\\" ] -> ""]& ]       , #, {1}] & /@       Select[         {ToString@FullForm@#, #} & /@         FromCharacterCode /@ (-1 + Range[2^16])       , StringMatchQ[First@#, ___ ~~ "Space]\""] &] ) ];      that checks all Unicode chars recognised by Mathematica as “smth-Space”, fetches symbol names and performs the assignments. After macro expansion I expect to get               Block[{Set}, Set @@@     { { NonBreakingSpace, " " }     , {       ThickSpace, " " }     , {        ThinSpace, " " }     ,            (…rest)        }]      However, while the expression in round brackets does evaluate to correct table of symbols and various spaces if evaluated independently, and `Set@@@` on it works perfectly well, the whole macro `Block[{Set}, …]` starts throwing lots of errors, from `$RecursionLimit` and `ToExpression`. (Being a bit too hasty, I put it into pre-loaded packages — naturally, it made Kernel crash every time I attempted to start it.) That said, `Block[{set}, set@@@(…) /. set -> Set]` works OK, but the question remains: what causes the problem in the original macro? This is not the first time I make assignment with `Block[{Set}, Set@@@table];`, and I would like to keep doing it further. The issue is surprising. The only explanation I see is that `Block`ing `Set` somehow interferes with evaluating the expression in round brackets (the one meant to evaluate to the table). But this behaviour is quite unexpectable unless I miss something obvious, and there also does not seem to be a way to trace the evaluation. 1) Is there a way to `Trace` the evaluation? 2) What really causes the problem? (In case it is possible to find out at all without cracking the kernel.)