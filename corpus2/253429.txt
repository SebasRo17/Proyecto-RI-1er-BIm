If we take the two below entities as en example.               public class Person     {         public string Username {get;set;}         public string DisplayName {get;set;}     }          public class Worker:Person     {         public string Title {get;set}         public int SecurityId {get;set;}     }      When anyone first registers with this app, basic information would be captured and a Person would be created. Once an admin comes along, they may want to assign a role to this Person. Now Roles in the sense of Authorisation are not in question, there is a RoleProvider. However, if I make someone a worker, some additional details need to be captured. How those new details are best stored is what is in question.   * I could have a WorkerProperties class with the fields and give Person \--> Worker a 0.1->1 relationship.   * I could have all the fields as part of Person and just fill in what is required. At runtime accessing the Persons role would be needed to work out what fields would be required.   * I could create a Worker as shown above. Inheriting from Person. With this option there is the problem that the PK is the username registered with. I would need to somehow change the discriminator column generated by EF to essentially change the object type to Worker.