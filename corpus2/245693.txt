1. Imagine you've got a finite deterministic automaton `A` defining some finite regular language `L`, consisting of `N` words.   2. The first question is: how would you determine the number of words `N`?   3. Then, I want to enumerate all these words, i.e. create a function like `f: {1..N} -> L`. Any suggestions? And the following restrictions apply:   * `N` may be large enough, for instance `[0-9A-Z]{8}` yields `N = 36^8` different combinations, so storing it all in memory is not an option.   * I want to be able to persist the state. For instance, compute `f(x)`, then store all the needed intermediate data in the DB, and some time later compute `f(x+1)`. What I've done for now is a simplification for fixed length words. Any suggestions for doing this for an arbitrary DFA? I suspect this is a common problem, so any algorithm references are welcome. Thanks!