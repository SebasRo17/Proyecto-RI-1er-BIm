Been trying to come up with a flow for a basic tiered web application, and have been reading conflicting information online. What I'm trying to figure out is if there is an advantage to still using DTO objects from your DAO to Service layer through the use of some sort of mapper. The basic flow I foresee is as follows:   1. UI Model / Form --> Controller   2. Controller converts Model into Domain Object (Entity)   3. Domain Object --> Service Layer   4. Domain Object --> DAO   5. DAO --> Domain Object(s)   6. Service --> UI   7. UI converts Domain into UI models If DTO was followed DAO would pass back a DTO not the Entity. After doing some reading it seems like DTO has become slightly defunct since (at least in Java) entities have become annotated POJOs meaning their memory footprint has become very small. Is this the case, or should DTOs be used to completely encapsulate the domain objects within the DAO layer, and, if this is the case, what would the service layer pass to the DAO? Thanks a bunch!