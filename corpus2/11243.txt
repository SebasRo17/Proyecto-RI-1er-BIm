I would like to utilize the MathLink option of having each `Install` of my package result in a linking object which I can use to control when and how certain elements are used in the underlying `C` code. However, I have difficulties when implementing Mathematica functions on top of the functions which require the `LinkObject`. Of course I need the `SetDelayed` statement due to variable passing etc. Take for instance the `counter.tm` example:               :Evaluate:      BeginPackage[ "counter`"]          :Begin:     :Function:      AddToCounter     :Pattern:       AddToCounter[$CurrentLink, n_Integer]     :Arguments:     {n}     :ArgumentTypes: {Integer}     :ReturnType:    Integer     :End:          :Evaluate:      EndPackage[ ]      This works great until I define additional functions, take for instance this additional function (it _is_ placed within the `BeginPackage/EndPackage`).               :Evaluate:   MyAddToCounter[$CurrentLink,n_Integer] :=                          Return[AddToCounter[$CurrentLink,n+1]]      However, when calling `MyAddToCounter` I only get the function call as a symbol:               In[2]:= MyAddToCounter[link,20]     Out[2]:= AddToCounter[$CurrentLink, 21]      Why is this?   And how can I preserve the separation of each `LinkObject` to the same package?