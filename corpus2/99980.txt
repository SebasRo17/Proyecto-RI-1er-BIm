> **Possible Duplicates:**   >  Frankly, do you prefer Cowboy coding?   >  Prototyping vs. Clean Code at the early stages   >  Good design: How much hackyness is acceptable?   >  Does craftsmanship pay off? Which is better:   1. Coding fast, not caring about possible errors and limits, maybe forgetting to check the input, NULL returns etc, just to complete the task or to get to the milestone, and then correct all possible errors.   2. Coding slow, checking every line you write many times, writing tests, and checking every possible input to make a code as bug free as you can but taking weeks to write a working program. Actually I'm using the 2nd way but it's frustrating to work, work, work and see only small improvements every day...