I'm trying to calculate every possible selection from different categories. 1 choice must be made from every category and the categories are always in the same order. I save a string where each character is the number of that choice from that category. I have solved this with recursion and it works well when there are thousands of possibilities but is too slow when there are millions. I'd like to change it to looping to hopefully speed it up. Here is my recursive function (C#):               private void GetPartNumberPermutations(IList<int> choices, string partNumber)     {         for (int i = 0; i < choices[0]; i++)         {             if (choices.Count > 1)                 GetPartNumberPermutations(choices.Skip(1).ToList(), partNumber + i.ToString());             else             {                 //add partNumber to the list             }         }     }      Choices is a list of the number of choices for each category and might look like { 2, 4, 5, 8, 2, 4 }. Let's ignore the problem when one of the entries is > 9. My final list of partNumbers comes out to: 000000   000001   000002   000003   000010   000011   000012   000013   000100   000101   etc