I am trying to follow the main ideas presented in this question, applying it to my own problem, which is a complex, time-dependent, nonlinear PDE: $$i \frac{\partial \psi}{\partial t} = \left[ -\nabla^2 + (|\psi|^2-1) \right] \psi$$ It is supposed to show the evolution of a vortex, so that is what I take as initial condition. The code is organized as follows I work in 2D, on a regular grid from xl to xr and yl to yr, on the time interval [0.,tmax].               xl = yl = -5.;     xr = yr = 5.;     tmax = 2.;      This is the phase of the (complex) initial condition:               ClearAll[ϕ]     ϕ[x_?MachineNumberQ, y_?MachineNumberQ] := ArcTan[x, y]     ϕ[0., 0.] := 0.      Taking the gradient of the phase and plotting it with `StreamDensityPlot`, one can see the winding velocity of the "quantum" fluid. ![currents](http://i.stack.imgur.com/3NLJ2.png) As for the spatial part of the initial condition, I take a Tanh profile, because the density $|\psi|^2$ in the center of the vortex should be 0, and far away it should be 1 (the equation in normalized in that way).               ClearAll[vortex];     vortex[x_?MachineNumberQ, y_?MachineNumberQ] :=      Tanh[4 Norm[{x, y}]] E^(I ϕ[x, y])      Here is the plot of the spatial profile: ![spatial- profile](http://i.stack.imgur.com/KljYq.png) Now for the main part of the code, which uses NDSolve to propagate the initial condition in time, with the appropriate boundary conditions. Finally, the solution is plotted at different instances of time and an animation is created.                sol = ψ /.             First[              NDSolve[                {(-1. + Abs[ψ[x, y, t]]^2)*ψ[x, y, t] - I*Derivative[0, 0, 1][ψ][x, y, t] -                    Derivative[0, 2, 0][ψ][x, y, t] - Derivative[2, 0, 0][ψ][x, y, t] == 0,                    ψ[x, y, 0.] == vortex[x, y],                    ψ[xl, y, t] == 1.,                    ψ[xr, y, t] == 1.,                    ψ[x, yl, t] == 1.,                    ψ[x, yr, t] == 1.                 }, ψ, {x, xl, xr}, {y, yl, yr}, {t, 0., tmax},                  Method -> {"MethodOfLines",                             "DifferentiateBoundaryConditions" -> False,                            "SpatialDiscretization" ->                                  {"TensorProductGrid",                                   "DifferenceOrder" -> 4,                                   "MaxPoints" -> 100,                                   "MinPoints" -> 100,                                   "AccuracyGoal" -> 2,                                   "PrecisionGoal" -> 2}                                 }]]];           Export["evolve.gif", pl, AnimationRepetitions -> Infinity, "DisplayDurations" -> .1]      There are various errors in the output of this code. Apart from the (I hope) benign complaint about the inconsistency of the boundary and initial condition, `NDSolve` simply chokes at t=0.02, complaining about convergency issues. I have tried playing with the parameters, but I have not found any way of circumventing this issue.