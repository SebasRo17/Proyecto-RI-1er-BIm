A friend of mine is a PhD candidate and posted a picture on Facebook with funny words starting with 'p', 'h' and 'd' like "Please hire. Desperate" or "Permanent head Damage". I thought I could try and programmatically generate some word combinations with Mathematica. Here is my version. Most of the results are meaningless, but occasionally a good combination will show up like "panegyric happiness date".   1. Could it be improved (i.e. increase its signal/noise ratio)?   2. Could the following construct be condensed `{"." -> "", ";" -> "", "," -> "", ... -> ""`? Schematically: `{".", ";", ","} - >""`   3. The reason I used `StringMatchQ` with `Map[]` is because I didn't know how to group the results based on the first letter of the words, e.g. {please, hire, permanent, damage, head, desperate} -> {{please, permanent}, {hire, head}, {damage, desperate}}`. Also, I used words from `DictionaryLookup[]`, picking those with the most meanings (to increase the likelihood of a meaningful combination), but the results were worse. Here is my code:               ClearAll["Global`*"];          allWords =        ExampleData[{"Text", "PrideAndPrejudice"}, "Words"] // DeleteDuplicates;          phdWords = Pick[          allWords,          StringMatchQ[allWords, #]] & /@ {"p" ~~ __, "h" ~~ __, "d" ~~ __};          phdWords =       StringReplace[#,          {"." -> "", ";" -> "", "," -> "", "!" -> "", "?" -> "",            "\"" -> ""}] & /@ phdWords;          filterWordsByPart[wordList_, part_] :=       Select[        wordList,        MemberQ[          WordData[#, "PartsOfSpeech"], part] &];          finalWords = MapThread[        filterWordsByPart,        {phdWords, {"Adjective", "Noun", "Noun"}}];          Table[       Flatten@(RandomSample[#, 1] & /@ finalWords),       {20}] // Grid[#, Frame -> All] &      And this is a sample output: ![enter image description here](http://i.stack.imgur.com/EAVBP.png)