I read .NET Domain-Driven Design with C#: Problem - Design - Solution and I noticed that the author created a domain service for each aggregate root. However, the domain services were only facades to the corresponding repository. For example this is a code sample from the application from his book               public static class CompanyService     {         private static ICompanyRepository repository;         private static IUnitOfWork unitOfWork;              static CompanyService()         {             CompanyService.unitOfWork = new UnitOfWork();             CompanyService.repository =                  RepositoryFactory.GetRepository<ICompanyRepository,                  Company>(CompanyService.unitOfWork);         }              public static IList<Company> GetOwners()         {             return CompanyService.GetAllCompanies();         }              public static IList<Company> GetAllCompanies()         {             return CompanyService.repository.FindAll();         }              public static void SaveCompany(Company company)         {             CompanyService.repository[company.Key] = company;             CompanyService.unitOfWork.Commit();         }              public static Company GetCompany(object companyKey)         {             return CompanyService.repository.FindBy(companyKey);         }     }      As you see almost all calls to the services are wrappers to repository calls. Is this a good pattern when building domain services? Should we always wrap our repositories in domain services? Is there a better approach?