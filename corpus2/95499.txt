I was wondering about good object oriented class design. In particular, I have a hard time deciding between these options:   1. **static** vs **instance method**   2. **method with no parameters or return value** vs **method with parameters and return value**   3. **overlapping** vs **distinct method functionality**   4. **private** vs **public method** * * * _Example 1:_ This implementation uses instance methods, with no return value or parameters, with no overlapping functionality, and all methods public               XmlReader reader = new XmlReader(url);     reader.openUrl();     reader.readXml();     Document result = reader.getDocument();      _Example 2:_ This implementation uses static methods, with return values and parameters, with overlapping functionality and private methods               Document result = XmlReader.readXml(url);       * * * In example one, all methods are public instance, which makes them easy to unit test. Although all methods are distinct, readXml() is dependent on openUrl() in that openUrl() must be called first. All data is declared in instance fields, so there's no return values or parameters in any method, except in the constructor and accessors. In example two, only one method is public, the rest are private static, which makes them hard to unit test. Methods are overlapping in that readXml() calls openUrl(). There's no fields, all data is passed as parameters in methods and the result is returned immediately. What principles should I follow to do proper object oriented programming?