I've got a project coming up, a very a small system, but one that needs to be extended in the future. Here's how I've designed it so far. It's 3-tier: presentation, business and data. For the presentation layer there will be ASP.NET webforms with user controls (.ascx). There are .NET validator controls on the usercontrols. In the business layer there will be a domain model, probably an Active Record- based object for _each_ type of business entity (e.g. class Trainee, class Course etc). These objects will contain the relevant data (user input or DB) in properties but also have behaviour such as CalculateCost(), Validate() and Save(). When a page passes input to a business object for processing, the object will validate the input. Any validation failures will be stored within a collection within the object. If the data is valid, the business object's Save() method can be called. Save() will call a Data Mapper which transforms the business object's data to a DTO, the Data Mapper then passes the DTO to a table data gateway. The Table Data Gateway takes the DTO and performs CRUD operations with it. Any data to be returned from the DB is tranformed into a DTO, passed to the mapper, and then returned to the relevant business object. Would you recommend the above approach for any future small TDD projects that are probably likely to be extended, or is it overkill? Any advice is appreciated. Even if it is to say "I have no idea what you're talking about" :)