I'm a huge fan of writing asserts, contracts or whatever type of checks available in the language I'm using. One thing that bothers me a bit is that I'm not sure what the common practice is for dealing with duplicate checks. Example situation: I first write the following function               void DoSomething( object obj )     {       Contract.Requires<ArgumentNullException>( obj != null );       //code using obj     }      then a few hours later I write another function that calls the first one. As everything is still fresh in memory, I decide not to duplicate the contract, since I know that `DoSomething` wil check for a null object already:               void DoSomethingElse( object obj )     {       //no Requires here: DoSomething will do that already       DoSomething( obj );       //code using obj     }      The obvious problem: `DoSomethingElse` now depends on `DoSomething` for verifying that obj is not null. So should `DoSomething` ever decide not to check anymore, or if I decide to use another function obj might not be checked anymore. Which leads me to writing this implementation after all:               void DoSomethingElse( object obj )     {       Contract.Requires<ArgumentNullException>( obj != null );       DoSomething( obj );       //code using obj     }      Always safe, no worries, except that if the situation grows the same object might be checked a number of times and it's a form of duplication and we all know that's not so good. What is the most common practice for situation like these?