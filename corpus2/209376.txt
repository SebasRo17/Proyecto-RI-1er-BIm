Explaining the difference between strictness of languages and paradigms to a colleague of mine, I ended up asserting that:   * Tolerant languages, such as dynamic and interpreted languages, are used best for prototypes and small projects or medium-size web applications. When choosing elegant dynamic languages such as Python or JavaScript with Node.js, the benefits are:     1. Fast development,     2. Reduced boilerplate code,     3. Ability to attract young, creative programmers who flee _“corporate languages”_   like Java.   * Statically typed/compiled languages are best for applications which require higher strictness such as business-critical apps or apps for medium to large-size apps.     1. Well-known paradigms and patterns developed for decades,     2. Ease of static checking,     3. Ability to find many professional developers with decades of experience.   * Strict languages such as Haskell, Ada or techniques such as Code contracts in C# are better for systems which favor safety over flexibility (even if Haskell can be extremely flexible), such as life critical systems and systems which are expected to be extremely stable. The benefits are:     1. Ability to catch as many bugs as possible at compile time,     2. Ease of static checking,     3. Ease of formal proofs. However, by looking at the languages and technologies used for large-scale projects by large corporations, **it seems that my assertion is wrong**. For example, Python is successfully used for large systems such as YouTube or other Google applications which require an important amount of strictness. Is there still a correlation between the scale of the project and the strictness of the language/paradigm which should be used? Is there a third factor that I've forgotten to take in account? Where am I wrong?