I have a `World`               class World:         def __init__(self):             self.size = 10             self.n_busStops = 10                  self.busStopMatrix = SpatialGraph(self.size, self.n_busStops, 1.0)             self.buses = [Bus([0,1,2,3,4,5,6,7,8,9])]      Now each of the buses are going to move around the world, dropping off and picking up passengers. The bus contains information about its route. When it gets to its next stop, it needs to query the `busStopMatrix` to find out how many passengers there are there, and how far away the next stop on its route is. Is it a good idea for an object to query its parent like this? If so, what is this design pattern called? Something like:               class World:         def __init__(self):             self.size = 10             self.n_busStops = 10                  self.busStopMatrix = SpatialGraph(self.size, self.n_busStops, 1.0)             self.buses = [Bus([0,1,2,3,4,5,6,7,8,9], owner =self)]          class Bus:         def __init__(self, route, parent):             self.route = route             self.currentStop = route[0]             self.parent = parent         def move(self):              ifAtDestination():                 pickUpPassengers(self.parent.getPassengersAtStop(currentStop))      I otherwise can't think how the `Bus` can get information about the world it is in. The alternative I can think of is that the route is made up of references directly to the BusStops, so it can directly query them. eg.               class World:         def __init__(self):             self.size = 10             self.n_busStops = 10                  self.busStopMatrix = SpatialGraph(self.size, self.n_busStops, 1.0)             self.buses = [Bus([busStopmatrix.getAllStops()])]          class Bus:         def __init__(self, route):             self.route = route             self.currentStop = route[0]              def move(self):              ifAtDestination():                 pickUpPassengers(currentBusStop)