I was wandering how can Object.Clone() access field fields that are actually defined in the subclasses, and not the actual implementation of this feature. What is bothering me is that I cannot see the logic to allow base class (even if it is "special") to access the fields defined in the subclasses - doesn't this breaks whole object inheritance concept? Consider this:               class Test implements Cloneable     {         private String test_field;              public Test()         {         }              public Test clone() throws CloneNotSupportedException         {            return (Test)super.clone();         }     }      Here, calling `Test.clone()` will copy the `test_field` also. Things are even getting weirder for me when it comes to the situation where `Test` is declared as an abstract class - calling `clone()` will allow me (in some way) to get the instance of the abstract class.