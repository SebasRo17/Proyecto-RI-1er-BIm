I have recently begun studying a codebase which I will soon be working with. The current codebase has been written by a team of about 5 rockstar developers (whatever that means), and it hasn't really been documented for a newcomer like me. I have a general understanding of what technologies are being used, but not enough to begin coding and adding features. I first need to understand the general architecture that's employed throughout the code, all the basic relationships, and the process flow from input to output, as well as read and write - from the server to the client and from the client to the server. When I'm able to understand their system at this level, developing on this codebase should be much more do-able. I'm not concerned with reading through the code and studying their use of the language. I know that I can Google syntax and a library or an API if I need to figure something out. But what are some approaches to understanding the architecture and all the important relationships for code that doesn't specifically document it? The codebase has been written by advanced-level developers who've used a lot of top-down method, so how does a newcomer come and understand it from the mind of the developer who initially wrote it? You'll find this quite often in code- bases that are hosted on GitHub and such. A lot of code. Little documentation. So where does one begin? What are some suggestions, and what has your experience been?