I am doing a final project in a C++ class writing a _very_ simple usenet-like client/server. I figure that since it's usenet-like I'll have a `NewsGroup` class and an `Article` class, I'm now working on my `Article` class. I can't really decide on a good design, though (this class is not about design patterns and I haven't taken any). This is what I have:               class Article {     public:         const std::string author;         std::string title;         std::string text;         const uint32_t id;         system_clock::time_point timestamp;              Article(const std::string auth&,                 const std::string tit&,                 const std::string txt&,                 const system_clock::time_point&);          private:         Article(const Article&);         void operator=(const Article&);         static uint32_t id_pool;     };      My motivation is this: `author` should never change -> `const` `title` could change if edited -> `non-const` `text` could change if edited -> `non-const` `id` should never change -> `const` `timestamp` could change but probably shouldn't, I'm not sure what to do with it yet. `id_pool` is just where I get IDs from. One specification is that IDs should never be reused so I just increment `id_pool` in the Article constructor. Coming from Java with all the getters and setters that I really don't like, and then some Python with it's "Everything public" and properties, that I do like, I'm getting a bit confused here. I mean, I could make the members private and have getters and setters (I can't think of any natural "verb-methods" that an Article can "do"), but it feels like I would gain very little. I would be thankful for some pointers on good design in this case.