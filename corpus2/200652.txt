This question is about the persistance of variables across different modules in nodejs when they don't directly "require" each other, but do "require" a common ancestor. It is also the generalised version of this stackoverflow question. Whilst I received an answer there that helped me solve my specific case, I'm still unclear as to the answer to the architectural problem I posed. I hoped that the general problem was a good fit for a programmers.stackexchange question. Assume we have a nodejs program structured like so:   * Module Alpha - exports variable a.   * Module Beta - requires module Alpha, reads variable a -> prints it to console periodically   * Module Gamma - requires module Alpha, periodically writes to variable a Is the instance of module Alpha, and thus variable a, common across all three modules. e.g. can module Gamma make changes to variable a that are successfully printed to the console by module Beta. If this is true, why is this true **even though there is no direct "requires" relationship between modules Gamma and Beta?** If this is not true, **can you explain the best way to share a variable than needs to be modified at runtime between multiple node modules?** Can you explain the underlaying data model which is causing this behaviour in nodejs modules?