We are currently refactoring our controller methods in ASP.NET MVC application. At the beginning we've separated data access layer (our goal was to remove LINQ from controllers entirely). Now we are thinking about another step - how to create a business logic layer to reduce number of lines and logic in controller. Currently we have something like this:               public ActionResult CustomerProjects(some parameters)     {         var collectionOfSomeType = this.CustomerRepository.GetSomeData();         var anothercollection = this.ProjectsRepository.GetAnotherData(collectionOfSomeType);              var viewModel = CreateSomeViewModel(anotherCollection);              return View("Index", viewModel);     }      Of course it's just an example with four lines of code. We have some methods which are bigger (but still IMO not so bad). We injected our helper classes through IoC container, more complex logic sits there. But now we'd like to remove even that parts. Is it worth our time to create another layer which would be our 'last gate' before controllers? The final result would be:               public ActionResult CustomerProjects(some parameters)     {         var viewModel = someSource.PrepareCustomerProjectsViewModel(params);              return View("Index", viewModel);     }      What do you think?