I am trying to write a simple program that should allow a user to save and display sets of heterogeneous, but somehow related data. For clarity sake, I will use a representative example of vehicles. The program flow is like this:   1. The program creates a **Garage** object, which is basically a class that can contain a list of vehicles objects   2. Then the users creates **Vehicles** objects, these **Vehicles** each have a property, lets say _License Plate Nr_. Once created, the **Vehicle** object get added to a list within the **Garage** object   3. \-- ** _Later on_** \--, the user can specify that a given **Vehicle** object is in fact a **Car** object or a **Truck** object (thus giving access to some specific attributes such as _Number of seats_ for the Car, or _Cargo weight_ for the truck) At first sight, this might look like an OOP textbook question involving a base class and inheritance, but the problem is more subtle because at the object creation time (and until the user decides to give more info), the computer doesn't know the exact Vehicle type. Hence my question: **how would you proceed to implement this program flow? Is OOP the way to go?** Just to give an initial answer, here is what I've came up until now. There is only one Vehicle class and the various properties/values are handled by the main program (not the class) through a dictionary. However, I'm pretty sure that there must be a more elegant solution (I'm developing using VB.net):               Public Class Garage         Public GarageAdress As String         Private _ListGarageVehicles As New List(Of Vehicles)              Public Sub AddVehicle(Vehicle As Vehicles)             _ListGarageVehicles.Add(Vehicle)         End Sub     End Class          Public Class Vehicles         Public LicensePlateNumber As String         Public Enum VehicleTypes             Generic = 0             Car = 1             Truck = 2         End Enum         Public VehicleType As VehicleTypes         Public DictVehicleProperties As New Dictionary(Of String, String)     End Class      NOTE that in the example above the public/private modifiers do not necessarily reflect the original code