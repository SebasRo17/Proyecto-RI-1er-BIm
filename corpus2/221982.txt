I'm trying to design a small web platform that would host several "applications", with a common user pool. My reflection is now focused on the authorization system. I define an application as an interface that allows users to perform CRUD and more custom operations on a set of resources. I tend to prefer to model an application as a collection of RESTful webservices to be consumed from various front ends. I really would like to generalize the authorization system and to make it application agnostic; I'm thinking of implementing it as a webservice, leveraging unstructured document databases. Assuming that:   * A users and groups management service is available to the application developer;   * The scope of any application would be limited to perform CRUD and more custom operations on resources, as stated previously; My idea is to provide to developers read/write access to a structure like this:               [{         "Application":"Application1",         "Ressource":"ResourceType1",         "id":"123",         "read":{             "whitelist_group_ids":[ 2 ],             "whitelist_user_ids":[ 1 ],             "blacklist_users_ids":[ 2 ]         },         "CustomOperation1":{             "whitelist_group_ids":[ * ],             "whitelist_user_ids":[ 1, 2 ],             "blacklist_users_ids":[ 3 ]         }     },{         "Application":"Application1",         "Ressource":"ResourceType2",         "id":"13",         "read":{             "whitelist_group_ids":[ * ],             "whitelist_user_ids":[ 1 ],             "blacklist_users_ids":[ 2 ]         },         "CustomOperation2":{             "whitelist_group_ids":[ 2 ],             "whitelist_user_ids":[ 1, 2 ],             "blacklist_users_ids":[ 3 ]         }     }]      They would then be able to store, check and update their access restrictions on demand; What would be the flaws of such an approach? Is there any standard strategy to achieve something close to what I described?