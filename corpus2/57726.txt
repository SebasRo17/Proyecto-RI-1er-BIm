I would like to formally prove the hairy ball theorem in Mathematica, initially just for $S^2$, and then see about generalizing. An approach I thought about to use the xAct package to define $S^2$ and then derive a contradiction from $$ \begin{align} x^i x_i &= 1 \text{ (unit norm)} \\ \nabla_i x^i &= 0 \text{ (divergence free)}\\ \nabla_{[i} x_{j]} &= 0 \text{ (curl free)} \end{align} $$ on $S^2$. This will turn into a rats nest of Christoffel symbols on multiple charts, but with Mathematica that should not be a problem. Is this a reasonable approach? Also I am new to xAct, what do I need to do to set up $S^2$ in xAct? Is that what xCoba is for? * * * ### Edit I have made some progress. It looks like I can define $S^2$ with:               Needs["xAct`xCoba`"]     DefManifold[S2, 2, {a, b, c, d, e, f, g, h}]     DefMetric[1, metric[-a, -b], CD, {";", "\[Del]"}, PrintAs -> "g"]          (* Using stereographic projection or Riemann sphere chart*)     DefChart[RS, S2, {0, 1}, {u[], v[]}]     MatrixForm[metricarray = 4/(1 + u[]^2 + v[]^2)^2 {{1, 0}, {0, 1}}]     MetricInBasis[metric, -RS, metricarray]     DefTensor[x[a], S2] (* the "hair" vector field*)     MetricCompute[metric, RS, All, CVSimplify -> Simplify]      This at least partially works:               In[69]:= RicciScalarCD[] // ToValues          Out[69]= 2          In[71]:= RicciCD // TensorValues          Out[71]= FoldedRule[{RicciCD[{1, -RS}, {0, -RS}] ->         RicciCD[{0, -RS}, {1, -RS}]}, {RicciCD[{0, -RS}, {0, -RS}] ->         4/(1 + u[]^2 + v[]^2)^2, RicciCD[{0, -RS}, {1, -RS}] -> 0,        RicciCD[{1, -RS}, {1, -RS}] -> 4/(1 + u[]^2 + v[]^2)^2}]      I will need to add a second chart and to get a complete atlas, but I want to do some work with what I have first I would like to evaluate general tensor expresions in the given chart. As first step I would like evaluete the norm of a vector: $$ x^a x_a \leadsto 4((x^u)^2 + (x^v)^2)/(u^2 + v^2 +1) $$ * * * ## Edit I have figured out how to do the above               In[1132]:=      metric[-a, -b] x[a] x[b] // ToBasis[RS] // TraceBasisDummy // ToValues          Out[1132]= (4  x[{0, RS}]^2)/(1 + u[]^2 + v[]^2)^2 + (      4  x[{1, RS}]^2)/(1 + u[]^2 + v[]^2)^2      but I still am not able to get values plugged in for Christoffel symbols. My attempt to simplify $\nabla_{[a}x_{b]}$:               In[1249]:=      (CD[-c][metric[-b, -a] x[a]]) // CovDToChristoffel //          SeparateBasis[RS] // TraceBasisDummy // Antisymmetrize // ToValues          Out[1249]= 1/2 (-(1/((1 + u[]^2 + v[]^2)^2))         4  xAct`xTensor`Basis[-a, {0, RS}]             xAct`xTensor`Basis[-c, {           0, RS}]  (xAct`xTensor`Basis[-b, {0, RS}]                xAct`xTensor`Basis[{0, -RS}, a]                ChristoffelCD[{0, RS}, {0, -RS}, {0, -RS}]   x[{0, RS}] +             xAct`xTensor`Basis[-b, {1, RS}]                xAct`xTensor`Basis[{0, -RS}, a]                ChristoffelCD[{0, RS}, {1, -RS}, {0, -RS}]   x[{0, RS}] +             xAct`xTensor`Basis[-b, {0, RS}]                xAct`xTensor`Basis[{1, -RS}, a]                ChristoffelCD[{1, RS}, {0, -RS}, {0, -RS}]   x[{0, RS}] +             xAct`xTensor`Basis[-b, {1, RS}]                xAct`xTensor`Basis[{1, -RS}, a]                ChristoffelCD[{1, RS}, {1, -RS}, {0, -RS}]   x[{0, RS}] -             xAct`xTensor`Basis[-b, {0, RS}]   ChristoffelPDRS[             a, {0, -RS}, {0, -RS}]   x[{0, RS}] -             xAct`xTensor`Basis[-b, {1, RS}]   ChristoffelPDRS[             a, {1, -RS}, {0, -RS}]   x[{0, RS}] +             xAct`xTensor`Basis[-b, {0, RS}]                xAct`xTensor`Basis[{0, -RS}, a]                ChristoffelCD[{0, RS}, {0, -RS}, {1, -RS}]   x[{1, RS}] +             xAct`xTensor`Basis[-b, {1, RS}]                xAct`xTensor`Basis[{0, -RS}, a]                ChristoffelCD[{0, RS}, {1, -RS}, {1, -RS}]   x[{1, RS}] +             xAct`xTensor`Basis[-b, {0, RS}]                xAct`xTensor`Basis[{1, -RS}, a]                ChristoffelCD[{1, RS}, {0, -RS}, {1, -RS}]   x[{1, RS}] +             xAct`xTensor`Basis[-b, {1, RS}]                xAct`xTensor`Basis[{1, -RS}, a]                ChristoffelCD[{1, RS}, {1, -RS}, {1, -RS}]   x[{1, RS}] -             xAct`xTensor`Basis[-b, {0, RS}]   ChristoffelPDRS[             a, {0, -RS}, {1, -RS}]   x[{1, RS}] -             xAct`xTensor`Basis[-b, {1, RS}]   ChristoffelPDRS[             a, {1, -RS}, {1, -RS}]   x[{1, RS}] +             xAct`xTensor`Basis[-b, {0, RS}]                xAct`xTensor`Basis[{0, -RS}, a]  xAct`xTensor`PD[{0, -RS}][     x[{0, RS}]] +             xAct`xTensor`Basis[-b, {0, RS}]                xAct`xTensor`Basis[{1, -RS}, a]  xAct`xTensor`PD[{0, -RS}][     x[{1, RS}]] +             xAct`xTensor`Basis[-b, {1, RS}]                xAct`xTensor`Basis[{0, -RS}, a]  xAct`xTensor`PD[{1, -RS}][     x[{0, RS}]] +             xAct`xTensor`Basis[-b, {1, RS}]                xAct`xTensor`Basis[{1, -RS}, a]  xAct`xTensor`PD[{1, -RS}][     x[{1, RS}]]) - (1/((1 + u[]^2 + v[]^2)^2))        4  xAct`xTensor`Basis[-a, {1, RS}]            xAct`xTensor`Basis[-c, {          1, RS}]  (xAct`xTensor`Basis[-b, {0, RS}]               xAct`xTensor`Basis[{0, -RS}, a]               ChristoffelCD[{0, RS}, {0, -RS}, {0, -RS}]   x[{0, RS}] +            xAct`xTensor`Basis[-b, {1, RS}]               xAct`xTensor`Basis[{0, -RS}, a]               ChristoffelCD[{0, RS}, {1, -RS}, {0, -RS}]   x[{0, RS}] +            xAct`xTensor`Basis[-b, {0, RS}]               xAct`xTensor`Basis[{1, -RS}, a]               ChristoffelCD[{1, RS}, {0, -RS}, {0, -RS}]   x[{0, RS}] +            xAct`xTensor`Basis[-b, {1, RS}]               xAct`xTensor`Basis[{1, -RS}, a]               ChristoffelCD[{1, RS}, {1, -RS}, {0, -RS}]   x[{0, RS}] -            xAct`xTensor`Basis[-b, {0, RS}]   ChristoffelPDRS[            a, {0, -RS}, {0, -RS}]   x[{0, RS}] -            xAct`xTensor`Basis[-b, {1, RS}]   ChristoffelPDRS[            a, {1, -RS}, {0, -RS}]   x[{0, RS}] +            xAct`xTensor`Basis[-b, {0, RS}]               xAct`xTensor`Basis[{0, -RS}, a]               ChristoffelCD[{0, RS}, {0, -RS}, {1, -RS}]   x[{1, RS}] +            xAct`xTensor`Basis[-b, {1, RS}]               xAct`xTensor`Basis[{0, -RS}, a]               ChristoffelCD[{0, RS}, {1, -RS}, {1, -RS}]   x[{1, RS}] +            xAct`xTensor`Basis[-b, {0, RS}]               xAct`xTensor`Basis[{1, -RS}, a]               ChristoffelCD[{1, RS}, {0, -RS}, {1, -RS}]   x[{1, RS}] +            xAct`xTensor`Basis[-b, {1, RS}]               xAct`xTensor`Basis[{1, -RS}, a]               ChristoffelCD[{1, RS}, {1, -RS}, {1, -RS}]   x[{1, RS}] -            xAct`xTensor`Basis[-b, {0, RS}]   ChristoffelPDRS[            a, {0, -RS}, {1, -RS}]   x[{1, RS}] -            xAct`xTensor`Basis[-b, {1, RS}]   ChristoffelPDRS[            a, {1, -RS}, {1, -RS}]   x[{1, RS}] +            xAct`xTensor`Basis[-b, {0, RS}]               xAct`xTensor`Basis[{0, -RS}, a]  xAct`xTensor`PD[{0, -RS}][     x[{0, RS}]] +            xAct`xTensor`Basis[-b, {0, RS}]               xAct`xTensor`Basis[{1, -RS}, a]  xAct`xTensor`PD[{0, -RS}][     x[{1, RS}]] +            xAct`xTensor`Basis[-b, {1, RS}]               xAct`xTensor`Basis[{0, -RS}, a]  xAct`xTensor`PD[{1, -RS}][     x[{0, RS}]] +            xAct`xTensor`Basis[-b, {1, RS}]               xAct`xTensor`Basis[{1, -RS}, a]  xAct`xTensor`PD[{1, -RS}][     x[{1, RS}]]) + (1/((1 + u[]^2 + v[]^2)^2))        4  xAct`xTensor`Basis[-a, {0, RS}]            xAct`xTensor`Basis[-b, {          0, RS}]  (xAct`xTensor`Basis[-c, {0, RS}]               xAct`xTensor`Basis[{0, -RS}, a]               ChristoffelCD[{0, RS}, {0, -RS}, {0, -RS}]   x[{0, RS}] +            xAct`xTensor`Basis[-c, {1, RS}]               xAct`xTensor`Basis[{0, -RS}, a]               ChristoffelCD[{0, RS}, {1, -RS}, {0, -RS}]   x[{0, RS}] +            xAct`xTensor`Basis[-c, {0, RS}]               xAct`xTensor`Basis[{1, -RS}, a]               ChristoffelCD[{1, RS}, {0, -RS}, {0, -RS}]   x[{0, RS}] +            xAct`xTensor`Basis[-c, {1, RS}]               xAct`xTensor`Basis[{1, -RS}, a]               ChristoffelCD[{1, RS}, {1, -RS}, {0, -RS}]   x[{0, RS}] -            xAct`xTensor`Basis[-c, {0, RS}]   ChristoffelPDRS[            a, {0, -RS}, {0, -RS}]   x[{0, RS}] -            xAct`xTensor`Basis[-c, {1, RS}]   ChristoffelPDRS[            a, {1, -RS}, {0, -RS}]   x[{0, RS}] +            xAct`xTensor`Basis[-c, {0, RS}]               xAct`xTensor`Basis[{0, -RS}, a]               ChristoffelCD[{0, RS}, {0, -RS}, {1, -RS}]   x[{1, RS}] +            xAct`xTensor`Basis[-c, {1, RS}]               xAct`xTensor`Basis[{0, -RS}, a]               ChristoffelCD[{0, RS}, {1, -RS}, {1, -RS}]   x[{1, RS}] +            xAct`xTensor`Basis[-c, {0, RS}]               xAct`xTensor`Basis[{1, -RS}, a]               ChristoffelCD[{1, RS}, {0, -RS}, {1, -RS}]   x[{1, RS}] +            xAct`xTensor`Basis[-c, {1, RS}]               xAct`xTensor`Basis[{1, -RS}, a]               ChristoffelCD[{1, RS}, {1, -RS}, {1, -RS}]   x[{1, RS}] -            xAct`xTensor`Basis[-c, {0, RS}]   ChristoffelPDRS[            a, {0, -RS}, {1, -RS}]   x[{1, RS}] -            xAct`xTensor`Basis[-c, {1, RS}]   ChristoffelPDRS[            a, {1, -RS}, {1, -RS}]   x[{1, RS}] +            xAct`xTensor`Basis[-c, {0, RS}]               xAct`xTensor`Basis[{0, -RS}, a]  xAct`xTensor`PD[{0, -RS}][     x[{0, RS}]] +            xAct`xTensor`Basis[-c, {0, RS}]               xAct`xTensor`Basis[{1, -RS}, a]  xAct`xTensor`PD[{0, -RS}][     x[{1, RS}]] +            xAct`xTensor`Basis[-c, {1, RS}]               xAct`xTensor`Basis[{0, -RS}, a]  xAct`xTensor`PD[{1, -RS}][     x[{0, RS}]] +            xAct`xTensor`Basis[-c, {1, RS}]               xAct`xTensor`Basis[{1, -RS}, a]  xAct`xTensor`PD[{1, -RS}][     x[{1, RS}]]) + (1/((1 + u[]^2 + v[]^2)^2))        4  xAct`xTensor`Basis[-a, {1, RS}]            xAct`xTensor`Basis[-b, {          1, RS}]  (xAct`xTensor`Basis[-c, {0, RS}]               xAct`xTensor`Basis[{0, -RS}, a]               ChristoffelCD[{0, RS}, {0, -RS}, {0, -RS}]   x[{0, RS}] +            xAct`xTensor`Basis[-c, {1, RS}]               xAct`xTensor`Basis[{0, -RS}, a]               ChristoffelCD[{0, RS}, {1, -RS}, {0, -RS}]   x[{0, RS}] +            xAct`xTensor`Basis[-c, {0, RS}]               xAct`xTensor`Basis[{1, -RS}, a]               ChristoffelCD[{1, RS}, {0, -RS}, {0, -RS}]   x[{0, RS}] +            xAct`xTensor`Basis[-c, {1, RS}]               xAct`xTensor`Basis[{1, -RS}, a]               ChristoffelCD[{1, RS}, {1, -RS}, {0, -RS}]   x[{0, RS}] -            xAct`xTensor`Basis[-c, {0, RS}]   ChristoffelPDRS[            a, {0, -RS}, {0, -RS}]   x[{0, RS}] -            xAct`xTensor`Basis[-c, {1, RS}]   ChristoffelPDRS[            a, {1, -RS}, {0, -RS}]   x[{0, RS}] +            xAct`xTensor`Basis[-c, {0, RS}]               xAct`xTensor`Basis[{0, -RS}, a]               ChristoffelCD[{0, RS}, {0, -RS}, {1, -RS}]   x[{1, RS}] +            xAct`xTensor`Basis[-c, {1, RS}]               xAct`xTensor`Basis[{0, -RS}, a]               ChristoffelCD[{0, RS}, {1, -RS}, {1, -RS}]   x[{1, RS}] +            xAct`xTensor`Basis[-c, {0, RS}]               xAct`xTensor`Basis[{1, -RS}, a]               ChristoffelCD[{1, RS}, {0, -RS}, {1, -RS}]   x[{1, RS}] +            xAct`xTensor`Basis[-c, {1, RS}]               xAct`xTensor`Basis[{1, -RS}, a]               ChristoffelCD[{1, RS}, {1, -RS}, {1, -RS}]   x[{1, RS}] -            xAct`xTensor`Basis[-c, {0, RS}]   ChristoffelPDRS[            a, {0, -RS}, {1, -RS}]   x[{1, RS}] -            xAct`xTensor`Basis[-c, {1, RS}]   ChristoffelPDRS[            a, {1, -RS}, {1, -RS}]   x[{1, RS}] +            xAct`xTensor`Basis[-c, {0, RS}]               xAct`xTensor`Basis[{0, -RS}, a]  xAct`xTensor`PD[{0, -RS}][     x[{0, RS}]] +            xAct`xTensor`Basis[-c, {0, RS}]               xAct`xTensor`Basis[{1, -RS}, a]  xAct`xTensor`PD[{0, -RS}][     x[{1, RS}]] +            xAct`xTensor`Basis[-c, {1, RS}]               xAct`xTensor`Basis[{0, -RS}, a]  xAct`xTensor`PD[{1, -RS}][     x[{0, RS}]] +            xAct`xTensor`Basis[-c, {1, RS}]               xAct`xTensor`Basis[{1, -RS}, a]  xAct`xTensor`PD[{1, -RS}][     x[{1, RS}]]))      xAct knows the metric components in the RS so it should also know the Christoffel symbol component, so what do I need to make it use them?