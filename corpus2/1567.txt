Is it possible to create a function with optional arguments that also takes options? Here is a simple example. I have a function `f` with option "g". It also has optional arguments `y` and `z` which are set to default values.               Options[f] = {"g" -> Identity};          f[x_, y_: 2, z_: 3, OptionsPattern[]] :=       OptionValue["g"][x + y + z]      Now, if I give values for all of the arguments and an option value it works just fine.               In[3]:= f[1, 2, 3, "g" -> (#^2 &)]          Out[3]= 36      If I give only the required argument, no problems.               In[4]:= f[1]          Out[4]= 6      However, if I give the required arg and an option value but don't give the optional arguments, I run into trouble..               In[5]:= f[1, "g" -> (#^2 &)]          Out[5]= 4 + ("g" -> (#1^2 &))      Is there a good way around this? **EDIT:** Obviously, it is possible to write multiple definitions...               f[x_, y_, z_, OptionsPattern[]] := OptionValue["g"][x + y + z]          f[x_, y_, OptionsPattern[]] := OptionValue["g"][x + y + 3]          f[x_, OptionsPattern[]] := OptionValue["g"][x + 2 + 3]      I'm curious if there is a clean way to do it with a single definition.