Alright so I've learned this: **Classes** have public methods that perform operations on the class's data and they hide away their implementations. **Data structures** on the other hand, completely expose their implementation through properties (getters and setters) and don't usually have methods. So my question is, let's say that I have customer data structure that looks like this:               public class Customer     {        public string FirstName { get ; set; }        public string LastName { get ; set; }        public List<Offer> Offers { get ; set; }     }      I would assume this to be a **data structure**. but what if later during the project, I realize that I need to add some business logic to my customer data structure? Like a method to add new offers because there's more logic in doing so than just adding it to the list? It seems to me that this logic would belong inside of the data structure. What happens then? Does the data structure turn in to a class? Or into some kind of third object type that I'm unaware of? Is this **bad design**?