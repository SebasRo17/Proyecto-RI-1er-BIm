I am investigating the use of the `Notation` package facilities to create strict the equivalence between pretty-printed symbols such as `OverBar[SuperStar[af]]` that formats as $\overline{af^*}$, and easy to type (but hard to read) symbols such as `afstarbar`. My issue is that I fail at making two such symbols strictly equivalent. **I would like that** , after typing `Notation[ParsedBoxWrapper[\[Beta]]\[DoubleLongLeftRightArrow]ParsedBoxWrapper[beta]]`, I get the following behavior:                In[] beta = 3      Out[] 3           In[] \[Beta]      Out[] 3           In[] \[Beta] = 0      Out[] 0           In[] beta          Out[] 0           In[] beta = 4      Out[] 4          In[] Information[beta]      Out[] \[Beta]           \[Beta] = 4      It is to be noted that with Mathematica 8.0.0.0, the Notation behaves differently on Windows and Linux and on Mac, as I figured out by starting this reddit discussion, but on all platforms, I could not manage to get assignments to one symbol propagate to the other symetrically. **The behavior that I get instead** of the above is:                In[] beta = 3      Out[] 3           In[] \[Beta]      Out[] 3           In[] \[Beta] = 0      Out[] 0           In[] beta          Out[] 3           In[] beta = 4     Out[] 4          In[] Information[beta]      Out[] \[Beta]           \[Beta] = 4      Is there a way to get the scrict and robust equivalence between symbols instead of the assymetrical behavior shown above?