I feel like I have a reusable "something" here and I'm not sure whether to think of it as a pattern or an algorithm (or neither). It's characterized by having an unknown amount of work to accomplish a task because the subtasks can encounter various conditions which cause them to add "Issues" to a global queue. Then, the command is run repeatedly coupled with a round of "Issue Fixing" until either there are no issues left or the number of issues does not change. I'm just putting enough code here to show what I'm talking about - there's a bit more to it (let me know if I should post more).                       public void FindNewCampaigns()             {                 var findNewCampaigns = Locator.Get<ICommand<IEnumerable<Campaign>>>("FindNewCampaigns");                 var campaigns = findNewCampaigns.Execute();                 var issues = Locator.Get<ICollection<Issue>>("CommandIssues");                 while (issues.Count > 0)                 {                     int before = issues.Count;                     FixIssues(issues);                     issues.Clear();                     campaigns = findNewCampaigns.Execute();                     int after = issues.Count;                     if (before == after)                     {                         System.Console.WriteLine("No issues got fixed, quitting ({0}/{1}).", before, after);                         break;                     }                 }                 if (issues.Count == 0)                 {                     CreateCampaigns(campaigns);                 }             }                  private void FixIssues(ICollection<Issues.Issue> issues)             {                 foreach (var issue in issues)                 {                     System.Console.WriteLine("ISSUE: " + issue.GetType().Name + " - " + issue.ToString());                          if (issue is AdvertiserDoesNotExist)                     {                         var specificIssue = (AdvertiserDoesNotExist)issue;                         var command = Locator.Get<ICommand<string, DirectAgents.SynchService.Model.EomDatabase.Advertiser>>("CreateAdvertiser");                         command.Execute(specificIssue.AdvertiserName);                     }                     else if (issue is AccountManagerDoesNotExist)                     {                         var specificIssue = (AccountManagerDoesNotExist)issue;                         var command = Locator.Get<ICommand<string, DirectAgents.SynchService.Model.EomDatabase.AccountManager>>("CreateAccountManager");                         command.Execute(specificIssue.AccountManagerName);                     }                     else if (issue is AdManagerDoesNotExist)                     {                         var specificIssue = (AdManagerDoesNotExist)issue;                         var command = Locator.Get<ICommand<string, DirectAgents.SynchService.Model.EomDatabase.AdManager>>("CreateAdManager");                         command.Execute(specificIssue.AdManagerName);                     }                     else if (issue is MediaBuyerDoesNotExist)                     {                         var specificIssue = (MediaBuyerDoesNotExist)issue;                         var command = Locator.Get<ICommand<string, DirectAgents.SynchService.Model.EomDatabase.MediaBuyer>>("CreateMediaBuyer");                         command.Execute(specificIssue.MediaBuyerName);                     }                 }             }      Here's the code for `FindNewCampaigns`. It adds issues as it finds them. An _Issue_ is supposed to be something that needs to happen before a new campaign is able to actually get created in a target store.                   public class FindNewCampaigns : Command<IEnumerable<Campaign>>         {             private IFactory<CakeEntities> cakeEntities;             private IFactory<DADatabase> eomDatabase;                  public FindNewCampaigns(IFactory<CakeEntities> cakeEntities, IFactory<DADatabase> eomDatabase)             {                 this.cakeEntities = cakeEntities;                 this.eomDatabase = eomDatabase;             }                  public override IEnumerable<Campaign> Execute()             {                 using (var eom = eomDatabase.Create())                 using (var cake = cakeEntities.Create())                 {                     // Get EOM campaigns                     var campaigns = eom.Campaigns.Select(c => c.pid).ToList();                     // Get Cake offers                     var offers = cake.CakeOffers.Select(c => c.Offer_Id).ToList();                     // Get Cake offers that don't match to EOM campaigns                     var newOffers = offers.Except(campaigns).ToList();                     // Get default values                     int accountManagerID = DefaultAccountManagerId(eom);                     int adManagerID = DefaultAdManagerId(eom);                     int advertiserID = DefaultAdvertiserID(eom);                     int campaignStatusID = DefaultCampaignStatus(eom);                     // Create new campaigns in memory                     var newCampaigns = (from offer in cake.CakeOffers                                         where newOffers.Contains(offer.Offer_Id)                                         select new                                         {                                             Offer = offer,                                             Campaign = new Campaign {                                                 pid = offer.Offer_Id,                                                 campaign_name = offer.OfferName,                                                 campaign_status_id = campaignStatusID,                                                 account_manager_id = accountManagerID,                                                 ad_manager_id = adManagerID,                                                 advertiser_id = advertiserID,                                             }                                         }).ToList();                     // Set campaign status                     var campaignStatus = eom.CampaignStatus.ToDictionary(c => c.name, c => c.id);                     campaignStatus.Add("Private", campaignStatus["Active"]);                     campaignStatus.Add("Apply To Run", campaignStatus["Active"]);                     campaignStatus.Add("Inactive", campaignStatus["default"]);                     foreach (var item in newCampaigns)                     {                         string statusName = item.Offer.StatusName;                         if (campaignStatus.ContainsKey(statusName))                         {                             item.Campaign.campaign_status_id = campaignStatus[statusName];                         }                         else                         {                             AddIssue(new CampaignStatusDoesNotExist(statusName));                         }                     }                     // Set advertiser                     var cakeAdvertisers = cake.CakeAdvertisers.ToDictionary(c => c.Advertiser_Id);                     foreach (var item in newCampaigns)                     {                         int offerAdvertiserID = int.Parse(item.Offer.Advertiser_Id);                         var offerAdvertiser = cake.CakeAdvertisers.FirstOrDefault(c => c.Advertiser_Id == offerAdvertiserID);                         string offerAdvertiserName = offerAdvertiser.AdvertiserName;                         var eomAdvertiser = eom.Advertisers.FirstOrDefault(c => c.name == offerAdvertiserName);                         if (eomAdvertiser != null)                         {                             item.Campaign.advertiser_id = eomAdvertiser.id;                         }                         else                         {                             AddIssue(new AdvertiserDoesNotExist(offerAdvertiserName));                         }                     }                     // Set account manager                     foreach (var item in newCampaigns)                     {                         int offerAdvertiserID = int.Parse(item.Offer.Advertiser_Id);                         var offerAdvertiser = cake.CakeAdvertisers.FirstOrDefault(c => c.Advertiser_Id == offerAdvertiserID);                         string offerAccountManager = offerAdvertiser.AccountManagerName;                         if (offerAccountManager != null)                         {                             AccountManager am = eom.AccountManagers.ToList().SingleOrDefault(c => c.NameIsEquivalentTo(offerAccountManager));                             if (am != null)                             {                                 item.Campaign.account_manager_id = am.id;                             }                             else                             {                                 AddIssue(new AccountManagerDoesNotExist(offerAccountManager));                             }                         }                         else                         {                             AddIssue(new OfferHasNoAccountManager(item.Offer.OfferName));                         }                     }                     // Set ad manager                     foreach (var item in newCampaigns)                     {                         int offerAdvertiserID = int.Parse(item.Offer.Advertiser_Id);                         var offerAdvertiser = cake.CakeAdvertisers.FirstOrDefault(c => c.Advertiser_Id == offerAdvertiserID);                         string offerAdManager = offerAdvertiser.AdManagerName;                         if (offerAdManager != null)                         {                             AdManager ad = eom.AdManagers.ToList().SingleOrDefault(c => c.NameIsEquivalentTo(offerAdManager));                             if (ad != null)                             {                                 item.Campaign.ad_manager_id = ad.id;                             }                             else                             {                                 AddIssue(new AdManagerDoesNotExist(offerAdManager));                             }                         }                         else                         {                             AddIssue(new OfferHasNoAdManager(item.Offer.OfferName));                         }                     }                     return newCampaigns.Select(c => c.Campaign).ToList();                 }             }