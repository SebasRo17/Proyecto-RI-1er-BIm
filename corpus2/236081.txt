I have a system in which I will perform queries to a database. I want Query1, Query2 and Query3 to use the same methods in their way to the data source layer. To do that I would like to make something similar to Strategy or Template Patterns, where I have a part of the code which is a default behavior for all queries (getting to the database layer, connection, executing the query and so on) and a variable part (building the query itself). I think this idea is good and feasible. I would receive a parameter from the client specifying the query to be built, build it and run. The only question is: given this parameter, how can I decide which method to call to build the query? This is my current solution: (is this solution a pattern?)               public Query QueryFactory(string queryIdentifier){        if(queryIdentifier == "query1")           return BuildQuery1();        else if(queryIdentifier == "query2")           return BuildQuery2();      }      It works, but I don't think this is "pretty enough", I would like something nicer. It would be perfect if it didn't require the developer to add a new if statement when he created a new query. **Is there any way to improve this if/else chain? And to make this decision automatic?** Edit: The problem I want to solve is: I have queries that are going to be called against a database. I want to have the same flow so I don't have duplicated code for the queries that do not have any business logic applied to it (ex: get all users, get all students, and so on)