It seems like we still resort to C or C++ when we are going to do "serious" systems programming. We have some small languages which try to come up with new stuff inside systems programming such as Go and D (I have had a little experience with D and I like it a lot so far), but those aren't very widely used (Go is from 2009, so it shouldn't be that surprising but D is from 2001). There are non-language-technical reasons why these aren't so popular, such as there aren't many jobs, frameworks etc., but exclude such things and instead focus on what features should the next generation systems programming language come with? What do you, as a systems developer, lack in the "traditional systems programming languages" (that is C, C++ etc.)? Why do these things matter now in today's world (concurrency etc. would matter, I guess)?