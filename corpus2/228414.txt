I have ASP.Net MVC project code with custom authorization as below:               public class UpdateAccrualAuthorize : AuthorizeAttribute     {         public override void OnAuthorization(AuthorizationContext authContext)         {             AccessPermissions securityObject = AppContext.CurrentUser.Permissions;             if (!securityObject.HasCostPageAccrualChangesAccess)             {                 authContext.Result = new RedirectToRouteResult(                                         new RouteValueDictionary(new { controller = Constants.HeaderPage.ErrorController, action = Constants.HeaderPage.AccessDeniedAction }));             }         }     }      Here the redirect route logic is inside the authorization logic Then I referred Changing my Action filter class to be a Custom authorization attribute. Here it says a different approach               if (!authorized)              base.HandleUnauthorizedRequest(filterContext);      and to make configuration entry               <system.webServer>         <httpErrors errorMode="Custom" existingResponse="Replace">             <remove statusCode="403" subStatusCode="-1" />             <error statusCode="403" path="/error/403" responseMode="ExecuteURL" />         </httpErrors>     </system.webServer>      and register a route               routes.Add("Error",                  new Route("error/{statusCode}", new { controller = "Error", action = "Details" })                            );      Update I also read Asp.net Mvc custom mechanism to handle unauthorized request about handling ajax requests in the AuthorizeAttribute **QUESTION** What are the advantages of this new approach over my approach?