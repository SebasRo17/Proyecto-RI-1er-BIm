We all know that it is good to use descriptive identifier names. However, the convention in java is to use a single letter for a type parameter identifier. The default most people go to is `T`, but if you are dealing with elements in a collection, you often see `E`. Now I can see how it makes sense to use single letter identifiers for unbounded type parameters, since they can really be anything, so you have no information to be represented by the identifier. But suppose you had two bounded type parameters, say `T extends Iterable<Integer>` and `S extends Consumer<Integer>`, wouldn't it make more sense to use more descriptive identifiers than `T` or `S` so you don't confuse them? You might be able to get away with using, say, `I` and `C`, but people would never (in my ideal world) be so terse with variable identifiers. So why are people so terse with type parameter identifiers? Or is the convention of single character type parameter identifiers not as pervasive as I imagine?