I'm thinking about something I've read in a book: "A well designed system is a testable system" and I'm wondering why it is so. Certainly, a system that is much tested is probably well designed. Build from the ground up on test-first principles and assuming basic competence, it is hard to imagine a very bad design. But the statement reverses the idea: that a well designed system is testable. Why? Is it because good tests are small and simple by default, so making good tests on a bad design (where bad design usually means large and complex classes) is more difficult? Or that it is hard to, say, test a single aspect of a class in isolation when the class in question is a god class?