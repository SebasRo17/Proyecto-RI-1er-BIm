During a recent project I've been working on, I've had to use a lot of functions that kind of look like this:               static bool getGPS(double plane_latitude, double plane_longitude, double plane_altitude,                            double plane_roll, double plane_pitch, double plane_heading,                            double gimbal_roll, double gimbal_pitch, double gimbal_yaw,                             int target_x, int target_y, double zoom,                            int image_width_pixels, int image_height_pixels,                            double & Target_Latitude, double & Target_Longitude, double & Target_Height);      So I want to refactor it to look something like this:               static GPSCoordinate getGPS(GPSCoordinate plane, Angle3D planeAngle, Angle3D gimbalAngle,                                 PixelCoordinate target, ZoomLevel zoom, PixelSize imageSize)      This appears to me to be significantly more readable and safe than the first method. But does it make sense to create `PixelCoordinate` and `PixelSize` classes? Or would I be better off just using `std::pair<int,int>` for each. And does it make sense to have a `ZoomLevel` class, or should I just use a `double`? My intuition behind using classes for everything is based on these assumptions:   1. If there are classes for everything, it would be impossible to pass a `ZoomLevel` in where a `Weight` object was expected, so it would be more difficult to provide the wrong arguments to a function   2. Likewise, some illegal operations would cause compile errors, such as adding a `GPSCoordinate` to a `ZoomLevel` or another `GPSCoordinate`   3. Legal operations will be easy to represent and typesafe. i.e subtracting two `GPSCoordinate`s would yield a `GPSDisplacement` However, most C++ code I've seen uses a lot of primitive types, and I imagine there must be a good reason for that. Is it a good idea to use objects for anything, or does it have downsides that I am not aware of?