I'm a python beginner, and I just learned a technique involving dictionaries and functions. The syntax is easy and it seems like a trivial thing, but my python senses are tingling. Something tells me this is a deep and very pythonic concept and I'm not quite grasping its importance. **Can someone put a name to this technique and explain how/why it's useful?** * * * The technique is when you have a python dictionary and a function that you intend to use on it. You insert an extra element into the dict, whose value is the name of the function. When you're ready to call the function you issue the call _indirectly_ by referring to the dict element, not the function by name. The example I'm working from is from Learn Python the Hard Way, 2nd Ed. (This is the version available when you sign up through Udemy.com; sadly the live free HTML version is currently Ed 3, and no longer includes this example). To paraphrase:               # make a dictionary of US states and major cities     cities = {'CA':'San Diego', 'NY':'New York', 'MI':'Detroit'}          # define a function to use on such a dictionary     def find_city (map, city):         # does something, returns some value         if city in map:             return map[city]         else:             return "Not found"          # then add a final dict element that refers to the function     cities['_found'] = find_city      Then the following expressions are equivalent. You can call the function directly, or by referencing the dict element whose value is the function.               >>> find_city (cities, 'New York')     NY          >>> cities['_found'](cities, 'New York')     NY      Can someone explain what language feature this is, and maybe where it comes to play in "real" programming? This toy exercise was enough to teach me the syntax, but didn't take me all the way there.