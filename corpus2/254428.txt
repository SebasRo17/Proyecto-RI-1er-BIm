I have a few optimization algorithms (for finding function minimum) and I'd like to check how good they are. Suppose I build test cases and compare the actual results to theoretical ones. What measures should I use to estimate if the function minimum was actually found? I thought about:   * mean number of function evaluations (Â± standard deviation)   * success rate (how often it actually finds minimum) Are there any others that I have missed (let's say algorithm finishes 1e-4 from known solution. so is it success already or not?) Edit: My main concern is **not** time complexity. It is algorithm accuracy in cases when exact solution might never be found (eg. multidimensional solution spaces). How do I calculate the rate of convergence?