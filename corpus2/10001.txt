This is the problem 39 of Project Euler, which I asked in the chat room two days ago. My original code runs as slowly as snails, and finally I got two answers from JM and Rojo. Unfortunately, both of them are faster than mine but still not enough. Here is the problem: > If p is the perimeter of a right angle triangle with integral length sides, > {a,b,c}, there are exactly three solutions for p = 120. > > {20,48,52}, {24,45,51}, {30,40,50} > > For which value of p <= 1000, is the number of solutions maximised? My terrible answer, runs **more than one minute** :               Last@Sort@ Table[{Select[      IntegerPartitions[i, {3}],      #[[1]] < #[[2]] + #[[3]] && #[[1]]^2 == #[[2]]^2 + #[[3]]^2 &]      // Length, i}, {i, 1, 1000}]      JM's suggestion (not finished):               Count[IntegerPartitions[900, {3}], tri_ /; First[tri] < Total[Rest[tri]]      && Norm[Rest[tri]]^2 == First[tri]^2]//Timing      > `{1.248, 4}` This is from Rojo (not finished):               Transpose[IntegerPartitions[900, {3}]]^2 /. {a_, b_, c_} :>      Length@a - Total@Unitize[a - b - c]//Timing      > `{0.124, 4}` I have noticed that many answers based on other languages ( _e.g._ , C, C++,...) in the forum of Project Euler can cost just **several seconds** , so how fast can MMa get? Since there are so many programming styles here, are there any rules for us to choose different programming styles for different problems? For this question, which style is the best?