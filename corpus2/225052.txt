I have this older project (1st release 2005-ish) I've inherited that a customer asks me to fix or add something to now and then. It's a bit of a mess architecture-wise. Basically it's an ASP.NET WebForms site where 90% of the logic is in the code behind file of each view and the other 10% is in the data access layer. Although "layer" might be the wrong word, since all data access is just piled into one service, an all-in-one 3500 line class with ADO.NET code. All other parts of the site use this one service for everything. I'm still a newbie myself, with about 2 years of work exp. And every time I come back to this project it feels worse because I've learned and seen how to do architecture better in other projects. So although I've been smelling the bad code in this project pretty much since day 1, it's now almost unbearable. No business logic is testable, and there are always smaller bugs I know would've been caught earlier with tests in place and a better defined business layer. So my dilemma is that I want to refactor this using MVP (for example https://github.com/webformsmvp/webformsmvp), move the logic from code behind and data access service into a business layer, and at the very least split the big repository class into smaller repositories. The problem is that the customer is not willing to dedicate the time or money for this amount of work in one batch so I'm considering refactoring bits and pieces as I come across them so that this will be refactored over a longer period of time. However I'm not sure if I should mess up the codebase even further by introducing a lot of new concepts, architecture and frameworks if I'm not sure that I can complete the work myself. It feels kinda bad leaving a project in a kind of partly- refactored state where the guy after me might not now where to begin or how to continue the refactor (or if he even will and continues down his own path instead).