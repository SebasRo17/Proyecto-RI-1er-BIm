I've been trying to teach myself about deconvolution through fourier transforms, but I seem to be missing something simple, as my results are garbage. I start by defining a test function and a window which I will convolve with it               Window[width_, x_] = UnitStep[x + width/2] UnitStep[width/2 - x];     Test[x_] = UnitStep[x] UnitStep[count - x] Sin[0.1 x]^2;      I then sample the convolution across a set of data points               count=100;          MakeData[width_] =        Simplify[Table[         Integrate[Window[width, x - i] Test[x], {x, -Infinity, Infinity},           Assumptions -> {count > width > 0}], {i, 0, count}]];          tempData = MakeData[20];      I make a similar list for my sample window               tempWindow = Table[Window[20, x], {x, -count/2, count/2}];      I use the convolution theorem to deconvolve my window from my data               deconvolved = InverseFourier[Fourier[tempData]/Fourier[tempWindow]];      I was expect that this will return the original function               expected = Table[Test[x], {x, 0, count}];      However, the results are completely different. ![Graph of Results](http://i.stack.imgur.com/MGke1.png) There's obviously something I'm doing wrong in my convolution or deconvolution, but I don't see what it is.