In Head First Design Patterns it teaches the strategy pattern by using a Duck example where different subclasses of Duck can be assigned a particular behavior at runtime. From my understanding the purpose of the strategy pattern is to change **a single** object's behavior at runtime, yet they are using inheritance of Duck to change the behavior of various types of Duck. ![Strategy Pattern](http://i.stack.imgur.com/EIsOf.png) ## Relevance? **Is context inheritance of Duck irrelevant to the strategy pattern or is varying Duck types and also varying their behaviors a good reason to employ the strategy pattern?** Do situations where you need to vary both constitute a good reason to use strategy pattern? Why would they include this as the strategy pattern example? ## A Simpler Example Could I further simplify this example by just having a Duck class (no derived classes)? Then when implementing one duck object it can be assigned different behaviors based on certain circumstances that aren't dependent on its own object type. For example: FlyBehavior changes based on the weather or QuackBehavior changes based on the time of day or how hungry a duck is. I realize this would be solving a different problem than from the one in the book, but what I am looking for is a relevant strategy pattern example to fall back on. Would my example above constitute the strategy pattern as well? ## Edit: I was successful in finding 2 simpler strategy pattern examples that adhere more strictly to being just strategy patterns without context inheritance: Hunter.java and solver.py.