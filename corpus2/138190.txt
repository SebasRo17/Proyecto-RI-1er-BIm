The Javadoc for ListIterator says: > A `ListIterator` has no current element; its cursor position always lies > between the element that would be returned by a call to `previous()` and the > element that would be returned by a call to `next()`. Why was Java's `ListIterator` implemented to point between elements rather than at a current element? It seems that this makes client code less readable when it has to repeatedly call `getNext()`, `getPrevious()`, so I assume there must be a good reason for the choice. As a side note, I just wrote a little library called peekable-arraylist that extends `ArrayList`, `Iterator`, and `ListIterator` that provides a `peekAtNext()` and `peekAtPrevious()` methods implemented like:                 @Override public synchronized T peekAtNext() {          T t = next();          previous();          return t;       }