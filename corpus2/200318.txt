Is there a best practice for calling language-native functions when writing testable code? I have experimented a little with php code and have come up with two methodologies:   * create a wrapper class for all native functions and mocking this wrapper when writing tests   * using "namespace magic": calling all native functions without specifying the global namespace (`aFunction` in stead of `\aFunction`) and then writing a method stub in the given namespace during testing, which will result in the code to be tested using the stub instead of the native function Is there a more commonly used approach? What are the benefits and shortcomings of the most commonly used methodologies to test language-native function calls?