You fix problems. You can do the _impossible_. Co-workers come to you with a wide range of questions and problems they want you to solve; which can usually be done with some simple custom program or script. Most things are fairly simple, and they are amazed at how you can take ten minutes of your time to write a little script that saves them hundreds of hours of work in a given year. People come to you with a problem and, having seen your past work, expect that you'll be able to take care of even the _impossible_ in short order. But every now and again, the problem they want you to solve is one of those ones that give programmers a headache - they're NP-Complete or otherwise computationally unsolvable. It could be an automated scheduling program, warehouse packing sorter, a system that predicts the company's stock price three years in advance, what have you. If you tell them it's **impossible** , it sounds like you're just trying to get out of doing the work, or they think that **impossible** means _impossible_ (as in "kind of hard, but I could do it in a few hours"). Likewise, you can't just point them to the CS theory section of your bookcase and tell them to read up on it. How do you explain to a non-technical co-worker (or supervisor) that some task they want you to complete is literally **impossible** not merely the same-old _impossible_ that you successfully deal with every day? _[Note: Offering a compromise (i.e. offering a near-optimal, not perfectly optimal, solution) or giving them what they really need, not what they think they want, is generally what I end up doing; but my question is about explaining why what they are precisely asking for isn't feasible without resorting to using highly technical terms, hand-waving, or "losing" that help ticket.]_