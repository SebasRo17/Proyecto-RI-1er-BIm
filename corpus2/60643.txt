This is neither a Holy War invocation nor is it http://stackoverflow.com/questions/661389/tfs-vs-svn \- This question is much more specific and would potentially make a team of developers very happy: I used an earlier version of TFS for two years but I have not used it for years. What advantages does it have over Tortoise SVN? For example, does the merging work seemlessly or does it involve a lot of manual work; and does the shelving actually work (we could not get it working)? The Platform is Windows (does TFS run on anything else) and the intended use is version control through Visual Studio 2008 / 2010 with the scope for Continuous Integration on x86 or 64bit build servers (depending on the product). There would any ever be one develop stream per product. Projects would typically last less than two weeks (large pieces of work would be broken down into these discrete chunks of this size). The maximum team size to work simultaneously on a product would be less than six developers. Checkins on a branch would occur at any time (only explicit rule is that it builds). Merges back into the trunk (head) occur after project completion. Running a TFS trial is likely to be costly to a business. Therefore, I have asked the question on here. I want to hear answers from those who already know (as well as those who anticipate pitfalls). There is no point reinventing the wheel. It makes no sense to incur unnecessarly research costs. To reiterate: my major concern is merging. I know SVN Tortoise works (it has a few quirks around ASP.Net .csproj files but I can live with that) but TFS is supposed to have a great deal of features. I want the best deal for the devs.