I am reading a review sheet for a class and the instructor said this of the modulo operator: Remember that modulus (%) has a runtime of O((logn)^2). He continued to display this piece of code: //Assumes n > 1               public boolean isPrime2 (int n) {         int sqrtN = (int) Math. sqrt (n) ;         for(int i = 2; i < sqrtN + 1; i++) {             if (n % i == 0) return false;         }         return true;     }      He said of this code: O(n) = sqrt(n) x n^2. As you can see, this method of checking if a number is prime only iterates from 2 to sqrt(n). Since we loop over a quadratic operation sqrt(n) times, the runtime is O(sqrt(n)). Two things I don't understand. One, why is the inside the for loop now an n^2 operation rather than a (logn)^2 operation. Two, even if it is only an n^2 operation, shouldn't the total runtime then be O(n)?