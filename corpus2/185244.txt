For his 1990 Turing award speech, Fernando J. Corbat贸 listed reasons why complex systems will inevitably fail. In his conclusion, he gives some suggestions for decreasing the probability of failure. He lists one idea as follows: > [U]se of constrained languages for design or synthesis is a powerful > methodology. By not allowing a programmer or designer to express irrelevant > ideas, the domain of possible errors becomes far more limited. What does he mean by "constrained language?" For a moment I considered constraint programming. However, constraint programming is about restricting the program's solution space. It is a tool that empowers a programmer. The feature Corbat贸 is referring to seems to be something which actually restricts the programmer, or at least makes her more inclined to write terser code. My second thought is that he is referring to conservative programming languages. Corbat贸 received his Turing award for work done in the 1960s and 1970s. It's my understanding that he dealt with a lot of punch cards. I have never seen a punch card, so I certainly don't know how to program one, but I might guess that punch card programming is extremely liberal. I suspect the notions of type checking, static analysis, and so forth simply didn't exist. So, is Corbat贸 perhaps referring to the idea of languages that restrict the developer from making dumb mistakes? This doesn't seem to be the case, either. Safety checking and data modeling have nothing to do with terseness, which is what he seems to be talking about when he mentiones "not allowing ... irrelevant ideas."