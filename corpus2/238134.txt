**Update:** Most answers are about how to write a wrapping interface or what is a good wrapper around ADO. but my question is more about when to do so and when not. I never found a good rule for deciding when to write a wrapper and when not. As nobody came up with a suggestion I think the reviewers are right in that this question has no general answer and is to broad. Even in the specific case of ADONET the answer may depend on the use case and for most use cases a wrapper has been written already. Dapper and Orseis for e.g. as MainMa points out. I would like to remove the question but I do not want to steel any ones points 8-) **Original Question** Let's take code executing a query using ADONET as an example.               var cmd = connection.CreateCommand();     cmd.CommandText = "SELECT 1 FROM DUAL";     cmd.CommandTimeout = 1000;     var dataReader = cmd.ExecuteReader();      Many will want to write this as a one-liner and create a bunch of utility functions in this example called as follows (or extension classes):               var cmd = connection.CreateCommand();     Utility.SelectToReader (connection, "SELECT 1 FROM DUAL", 1000);      So what are good rules to introduce or deprecate utility functions? Apart from ADONET this question arises using almost any framework.