Suppose I have a method               public List<User> GetBatchOfUsers(IEnumerable<int> userIDs)     {         List<User> users = new List<User>();              // some database stuff              return users;     }      I have read that it would be better to return an interface (either `IList` or `IEnumerable`) as opposed to returning a `List`. Some arguments I have heard for doing so is that it hides data, and gives the API developer the flexibility of changing the internal representation of the data at a later date. My concern about just returning an `IEnumerable` is that you lose functionality, such as random access and the `Count` property. I know that accepting an `IEnumerable` as a parameter makes sense, as it gives the consumer the best flexibility to send data to my method, the minimalist set of requirements for the method to operate. What is the best practice for the return type?