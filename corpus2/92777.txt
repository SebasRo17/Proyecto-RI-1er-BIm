What is the best approach to mapping between Entity, View Model or dataContract. For example I've seen the following modelling structures for SOA. **WCF** -> DataContract distributed to client. **Middle-tier** -> Models and Interface with then mapped to repository type and eventual a concrete class which implements a ORM. In some cases I've seen reflection used, others just setting the properties and third-party libraries like AutoMapper for C#. What is the most effective way to keep your system "easy to maintain" and functional or horses for courses? **EDIT:** Question wasn't focused on Microsoft, I've used SOA for java and the same problem happens regarding mapping. I'm asking about direct mapping vs. reflection and etc? Its really got nothing to do with ORMs. e.g.                   thesolution.models.interfaces         public interface IProduct { //bundle of properties and method signatures }              thesolution.models         public abstract class Product  implements IProduct { //implementation }              thesolution.repositories.sapMD         public class Product extends Product implments IProduct { //implements and do stuff}              thesolution.repositories.sapCRM         public class Product extends Product implments IProduct { //implements and do stuff}              thesolution.controllers           public class ProductController          {           public IActionResponse Save(IProduct product)           {               //save to sapMD repository               IAction actionMd = ((thesolution.repositories.sapMD.Product)product).Save();                     //save to sapCRM repository               IAction actionCrm = ((thesolution.repositories.sapMD.Product)product).Save();                    IActionResponse response = new thesolution.message.product.ActionResponse();                response.Actions.Add(actionMd);               response.Actions.Add(actionCrm);               return response;           }               }                thesolution.DataContracts           //XSD JAXB or etc.               thesolution.Services          //your service method          public class ProductServices ... {            public thesolution.DataContracts.ResponseAction Save(thesolution.DataContracts.Product product){              // so now how do you map back to IProduct manually, reflection or etc.          }          }