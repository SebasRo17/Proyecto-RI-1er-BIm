I wrote a function using dynamic programming to speed up the evaluation. For safety, I also want to protect this function. Take factorial for example:               fac[0] = 1;     fac[n_] := fac[n] = n*fac[n - 1];     Protect@fac;      `fac[3]` will return a `Set::write` error and give the right answer 6. Although `Quiet@fac[3]` or `Off[Set::write]` seems to work, the sacrifice is the speed, which can be verified by`?fac`: > Global`fac > > Attributes[fac]={Protected} > > fac[0]=1 > > fac[n_]:=fac[n]=n fac[n-1] i.e. after the evaluation of `fac[3]`, _Mathematica_ does not store the values: fac[1],fac[2],fac[3].(Of course it doesn't, since the fac is protected.) So what can be done to make `Protect` and dynamic programming process live with each other?