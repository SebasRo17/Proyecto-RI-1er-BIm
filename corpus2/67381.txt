Consider a somewhat contrived model that goes something like:               class Player     {         public int Health;         public int Ammo;         public Weapon CurrentWeapon;         public PhysicalState State         {             get             {                 if (this.speed <= 0.1)                     return PhysicalSpeed.Standing;                 /* and so-on for Strafe_left, Running, etc. */             }         }     }      In the expected visual for such a game it is known that the heads-up display (HUD) will display things like Health and Ammo, whereas the avatar will show the weapon and the animation based on the physical state. So, assuming you have a HUD_View and a Player_View that draw the HUD and the player respectively, is it correct, within the confines of MVVM to have 2 view-models for the Player model, that are only ever intended to expose a subset of information in the model or is it expected that the model will be split in two as well? Is there anything that I'm missing? Can someone point me to, or provide a more concrete example of the correct solution (even if my thinking is correct, so that I might solidify my understanding here)?