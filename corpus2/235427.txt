I ask in terms of high cost classes, with a particle engine as an example. I read somewhere that an instance of a class with a high cost to initialize, like a particle manager, should have its state variables altered at run time rather than reinitialize the particle manager with new data every time it is used in a different way. The particle manager would create perhaps thousands of instances of particles on initialization and then manage them from then on. For example, let's say this particle manager is used to manage shrapnel in an explosion; and you're creating a ground zero simulation for an artillery attack; thus there are many explosions. Instead of multiple managers for each explosion, which is extremely expensive, you alter the variables for each explosion and have a scattered sequential set of explosions using the same manager and the same particles. So I ask: is it fine to reuse a class instance at run time? Or is the above really just a super optimization case?