While solving any problem, we write algorithms. Some efficient, some not, some work, some fail. But sometimes we end up writing something which is mostly a success when we do a dry test run, perhaps, the way we frame the test data is prejudiced, but the algorithm fails in some other cases. For some algorithms , the nature of data can be diverse and magnitude large, for example like the problem: > Find the maximum subsequence sum of an array of integers which contains both > positive and negative numbers and return the starting and ending indices > within the array. Can anyone tell me is there any specific and generic thumb rule by which we can design the most stringent of test cases to test the correctness of algorithms like this one ?