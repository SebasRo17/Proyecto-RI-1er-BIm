I've just learned that .NET 4.5 introduced a change to how exceptions inside a `Task` are handled. Namely, they are quietly suppressed. The official reasoning for why this was done appears to be "we wanted to be more friendly to inexperienced developers": > In .NET 4.5, Tasks have significantly more prominence than they did in .NET > 4, as theyâ€™re baked in to the C# and Visual Basic languages as part of the > new async features supported by the languages. This in effect moves Tasks > out of the domain of experienced developers into the realm of everyone. As a > result, it also leads to a new set of tradeoffs about how strict to be > around exception handling. (source) I've learned to trust that many of the decisions in .NET were made by people who really know what they're doing, and there is usually a very good reason behind things they decide. But this one escapes me. If I were designing my own async task library, what is the advantage of swallowing exceptions that the developers of the Framework saw that I'm not seeing?