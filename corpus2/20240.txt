I want to solve the following equation self-consistently. So,               H.u = e.u          {{1, d}, {d, 1}}.{u1, u2} = e.{u1, u2}        1. I guess an initial value for `d`   2. Diagonalize `H` and get eigenvectors and eigenfunction `u` and `e->Eigenvector[H] Eigenvalue[H]`   3. Define `d -> d = u1 + u2`   4. Plug `d` in the matrix again   5. Diagonalize `H...` once and again until I get certain convergence, i.e., until the value I get for `d` does not change within a certain convergence range `dmin`. Of course, this a really simplified kind of problem of my actual problem I have to solve with a huge matrix. This is really easy to do in Fortran90, but I wonder how do you do this kind of things in _Mathematica_.