This is a continuation off of previous help on the first part of my project: fourier issue arising from input miscommunication Now I want to go one step further in the current code. Here's the code from earlier with some comments to explain the thought-process:               xdomain = Table[i, {i, -10, 10, .1}];     initialState= E^-2#^2 & /@ xdomain;          f1 = E^-I #^2*Δt & /@ xdomain;      (* For the first step, I want to multiply my initial function by a second function and then fourier transform it. So I'm breaking down both function into a table of points and then fourier-transforming the product of the multiplied-points, because (I think) this is the most efficient way of doing this numerically.*)               f2 = E^-I #^2*Δt & /@ xdomain;      (* The second step is the same principle. We then take this fourier'd result, multiply it by another function, and then Inverse-fourier transform back *)               finalstate=InverseFourier[Fourier[f1*initialState]*f2];       (* ^This line is doing the two steps mentioned in the above two comments. *) My result represents a wave that is propagated 1-unit-delta-t forward in time. To find out what this wave looks like 2-units in time, we need to take our "finalstate" function and use that instead of our intial state. (so to find something 10-units in time forward, I would have to run this 10 times, each time replacing the output with the input.) Eventually I'd want to have a series of plots that I would assemble to form a movie of the wave's behavior. This is what I have so far:               xdomain = Table[i, {i, -50, 50, .05}];     initialState = E^-#^2 & /@ xdomain;          cache = {initialState};     (*For 1\[Rule]10 *)     Δt = .001;          f1 = E^-I #^2*Δt & /@ xdomain;     f2 = E^-I #^2*Δt & /@ xdomain;          For[i = 0, i < 15, i++,      ftot = Abs@InverseFourier[Fourier[f1*initialState]*f2];      initialState = ftot;      cache = Join[cache, {ftot}];      ListLinePlot[        Partition[Riffle[xdomain, cache[[i + 1]]]/Norm[cache[[i + 1]]],          2]] // Print]      So there are two things that I'm looking for answers for:   1. If my method numerically fourier-transforming these functions by turning them into points and multiplying the points individually, makes sense and is the best way of handling it numerically in Mathematica.   2. How can I export these printed for-loop pictures into an animation. (I eventually will decrease the value of delta_t, and increase the amount of pictures taken, so I won't be able to export the animation by hand.)  Thanks again everyone for your help so far! Let me know what you think. P.S. In case anyone's interested, what I'm constructing is a program that numerically performs the Split-Operator method for solving the wave equation in an arbitrary potential (that commutes with p).