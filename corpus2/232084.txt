I'm new to TDD and wondering about methodolody. Given: A simple project which implements functionality of, for example, a console calculator. It has the following structure:   1. Fairly simple top-level class that takes console input, delegates it to a buisness-logic class and shows output in the console with some fancy formatting.   2. The forgoing buisness-logic class which does all the calculations and which is relatively complex. Also let's assume we have a nice thorough suite of acceptance tests for the whole project, which performs through the user interface. Do I need a suite of unit tests for inner business-logic class? Since it's going to replicate the acceptance test suite for 90%. Additional, but closely related questions:   1. Will the answer for the question remain the same if, for example, that acceptance test suite takes 30 sec to run? 5 mins? 1 hour?   2. If the inner business-logic class is not yet implemented, do I need write that suit of unit tests to guide its development, or it's fine to remain only with acceptance tests?