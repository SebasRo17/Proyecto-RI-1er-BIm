I hope I'm in the right place to ask that. I have a question regarding the practice of open-sourcing a proprietary library that we built and use at work. The licence will probably be MIT. I like the idea, but here comes the unusual part : I have been tasked to remove some of the most advanced features. Those will remain on our servers, available as a service. We will open-source the (JavaScript in case it is of interest) library, along with a minimal associated server code. I am _not_ asking a question about the technical problems (I imagine we will have to maintain and synchronize somehow different repositories, maybe with incompatible pull requests, but this question is for another day). What I would like to know is:   * How that would be perceived by the community at large ? Does it risk killing the eventual interest in this library?   * I don't personally know of any library that works like that. I'm pretty sure it is possible however, but any evidence of such a library is welcome (successful if possible). That's also because I'd like to see how they present it.   * More importantly, what could be the rationale for/against it? I'm not sure I understand the consequences of doing it so. **EDIT** After learning a thing or two from the answers and comments, I've collected here a few examples :   * http://www.jfrog.com/home/v_artifactorypro_overview   * http://www.easyrtc.com/pricing/   * http://rapidminer.com/the-core-of-rapidminer-is-open-source/ (note the angry comments on this one - but we're doing the opposite, from proprietary to open-core) As a developer, I would use the product we are going to release it in personal projects, so I think it's useful. But I have been working on it and I have an obvious bias. Also, most feedback I've seen basically says "you can try, but it won't work". See also http://blogs.gartner.com/brian_prentice/2010/03/31/open-core-the- emperors-new-clothes/ If someone is able to find a successful product doing open-core, I'd be grateful.