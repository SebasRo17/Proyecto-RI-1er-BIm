I want to do in _Mathematica_ what the following does in C.               int array[7] = {0, 0, 0, 0, 0, 0, 0};          int& foo(size_t idx)     {         return array[idx];     }          foo(4) = 43;          // array should now be {0, 0, 0, 0, 43, 0, 0}      In other words, I'd like to use `=` to assign to a reference (to some variable outside the scope of the function) returned by a function. I did read a few threads about references, but it seemed I'd have to "overload" the `=` operator (if that's even possible) to make things work. * * * ### Background I wouldn't be surprised if such practice were discouraged in _Mathematica_ , but would still appreciate the knowledge, as well as alternatives. My motivation for this is in trying to write a tool for non-programmers (or those with mostly C backgrounds but completely unfamiliar to _Mathematica_ ) for rapid testing of hypotheses, and the tool must be _intuitive, familiar, and easy to pick up_ (else I'm afraid my pitch to use _Mathematica_ wouldn't gain traction). To be more specific, the tool would analyze time-series data, the user specifying an expression to be run per time-step; and that expression would have "access" to a (pseudo-)array, say, `price`, such that `price[0]` refers to the _current_ price, `price[-1]` refers to the _previous_ price, etc.--so `price[0]` refers to a different price at each timestep. Of course C doesn't allow negative indexing; I just thought it'd be most intuitive that way--so my plan was to implement `price` as a function, and retrieve values from an array behind-the-scenes. You can probably see already where this is going: I'd also like for users to be able to _assign_ to `price[0]`, and that's where I'm stuck. I know I could (and perhaps _should_ ) just write a separate function like `set_price[0, val]`, but this would take away from the aesthetic goal I'm trying to achieve to win everyone over. I'm open to alternative ideas that may keep aesthetic though not in the same way.