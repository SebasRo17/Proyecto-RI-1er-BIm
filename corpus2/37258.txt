I am wanting to save and use the value of a variable within `NDSolve[]` but without that variable being part of the equation itself. Code below (ODE for the Leaky Integrate-and-Fire neuron) expresses what I want to do, with the value for the end of the refractory period updated within a `WhenEvent[]` statement. Unfortunately it doesn't work and the error message suggests why not - but I don't know the solution though I am sure a simple one must exist.               trest = 0;     With[{τ = 10, R = 1, Jm = 1.5, vthresh = 1, vreset = 0, v0 = 0, tref = 3 },      lif = NDSolve[{v'[t] == If[ t >= trest, -(v[t] - Jm R)/τ, 0],              v[0] == v0,              WhenEvent[ v[t] >= vthresh, {v[t] -> vreset, trest -> Evaluate[ t + tref ] } ]},             v[t], {t, 0, 60}] ]      > >     NDSolve::wenset: Warning: the rule trest->Evaluate[t+3] will not > directly set >     the state because the left-hand side is not a list of state variables. > >> >   I realise that this can be done by adding another variable into the ODE, making its time `derivative == 0` and just changing its value within the `WhenEvent[]` statement but this is rather messy and has potential to confuse the ODE solver.