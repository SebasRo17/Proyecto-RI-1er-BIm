I've attempted test first in Ruby on Rails using Test Unit and RSpec. I'm wondering how to do test first in situations that are more closely tied to the OS/filesystem. **Problem:** Building a USB stick of MP4 files. **Inputs:**   1. List of mp4 file name, destination directory pairs.   2. List of source directories   3. List of destination directories **Output:**   1. USB stick with a directory structure of mp4 files. Here is some code that does what I want. Written using puts debugging:               #!/bin/env ruby     # encoding: utf-8          require 'fileutils'          files = [         [ 'Keynote_ Architecture the Lost Years by Robert Martin.mp4', 'dev' ],         [ 'The Oak Beams of New College, Oxford.mp4', 'arch' ],         [ '1. How Buildings Learn - Stewart Brand - 1 of 6 - “Flow”.mp4', 'arch/how_buildings_learn' ],         [ 'Hexagonal Rails by Matt Wynne.mp4', 'dev' ]     ]          dirs = [         'arch',         'arch/how_buildings_learn',         'dev'     ]          sources = [         '/home/gnoll110/dwhelper',         '/home/gnoll110/Downloads',         '/home/gnoll110/GNUstep/Downloads',         '/home/gnoll110'     ]          dest = '/media/Lexar'          dirs.each do | dir |         if !File.exist?( dest+'/'+dir )             system( 'mkdir '+dest+'/'+dir )         end     end          files.each do | file |         actual_source = false         sources.each do | source |             res = File.exist? source+'/'+file[0]             actual_source = source if res         end              if actual_source             FileUtils.cp(actual_source+'/'+file[0], dest+'/'+file[1] )         end     end.      What the best approach?   * Junk the existing code. After all, I'm trying to do test first.   * Write a test(s) that invokes a Command Pattern object. Dependence inject the data arrays in the constructor.   * Then inject the 'file exist' and 'fileutils copy' as stub/mocks, to get separation from the OS/filesystem.   * Build, assert and refactor the run method within an inch of its life. All suggestions and ideas welcome.