Providing that clients would typically consume just one method, though methods would be conceptually related, why not always apply the Interface Segregation Principle to the extreme and have [many] single-method interfaces? Is there an objective rule against this? Not something like "oh it feels wrong" or "but you will have so many types, it's hard to read and manage" but rather something logical and clear. (Still want to name contracts clearly, so functions are not a good fit?). Example:               IGeometryManager     {        Shape CreateTriangle();        Shape CreateCircle();        Shape CreateSquare();        Shape CreateEllipse();        Shape CreateCurve();        Shape CreateLine();        void RemoveAll();     }      Result:               ITriangleCreator     {        Shape CreateTriangle();     }          ICircleCreator     {        Shape CreateCircle();     }          ISquareCreator     {        Shape CreateSquare();     }          IEllipseCreator     {        Shape CreateEllipse();     }          ICurveCreator     {        Shape CreateCurve();     }          ILineCreator     {        Shape CreateLine();     }          IShapeRemover     {        void RemoveAll();     }      This is a relevant blog post, but I am not 100% persuaded by the authors logic: http://blog.ploeh.dk/2014/03/10/solid-the-next-step-is-functional