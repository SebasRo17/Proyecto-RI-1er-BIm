We have quite a lot of places in the source code of our application , where one class has many methods with same names and different parameters. Those methods always have all the parameters of a 'previous' method plus one more. It's a result of long evolution (legacy code) and this thinking (I believe): " _There is a method M that does thing A. I need to do A + B. OK, I know ... I will add a new parameter to M, create a new method for that, move code from M to the new method with one more parameter, do the A + B over there and call the new method from M with a default value of the new parameter._ " Here is an example (in Java-like-language):               class DocumentHome {            (...)            public Document createDocument(String name) {         // just calls another method with default value of its parameter         return createDocument(name, -1);       }            public Document createDocument(String name, int minPagesCount) {         // just calls another method with default value of its parameter         return createDocument(name, minPagesCount, false);       }            public Document createDocument(String name, int minPagesCount, boolean firstPageBlank) {         // just calls another method with default value of its parameter         return createDocument(name, minPagesCount, false, "");       }            public Document createDocument(String name, int minPagesCount, boolean firstPageBlank, String title) {         // here the real work gets done         (...)       }            (...)     }      I feel like this is wrong. Not only that we can't keep adding new parameters like this forever, but the code hard to extend/change because of all the dependencies between methods. Here are few ways how to do this better:   1. Introduce a parameter object:              class DocumentCreationParams {            String name;       int minPagesCount;       boolean firstPageBlank;       String title;            (...)     }          class DokumentHome {            public Document createDocument(DocumentCreationParams p) {         // here the real work gets done         (...)       }     }        2. Set the parameters to the `DocumentHome` object before we call `createDocument()`                @In       DocumentHome dh = null;            (...)            dh.setName(...);       dh.setMinPagesCount(...);       dh.setFirstPageBlank(...);            Document newDocument = dh.createDocument();        3. Separate the work into different methods and call them as needed:                @In       DocumentHome dh = null;            Document newDocument = dh.createDocument();       dh.changeName(newDocument, "name");       dh.addFirstBlankPage(newDocument);       dh.changeMinPagesCount(new Document, 10);      **My questions:**   1. Is the described problem really a problem?   2. What do you think about suggested solutions? Which one would you prefer (based on your experience)?   3. Can you think of any other solution?