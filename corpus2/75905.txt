I really dislike regular expressions, each time I come back to it I seem to have to relearn it. It's also incredibly hard to maintain, modify and at a glance understand what it is doing. Has anyone ever tried writing another layer on top of it that turns more semantic 'sql like' statements into regex? I imagine it working along the lines of:               AnotherString = "coffee hello beep 15"          FindString.StartsWith string longer than 5     FindString.Contains "beep" after "hello"     FindString.EndsWidth int < 20     FindString.DoesntContain "no!!" and DoesntContain "what!"     Foreach FindString match in AnotherString         ...     Next      This is probably not the greatest example ever, but the idea is that the pattern is built with some sort of semantic meaningful language that can break down into traditional regular expressions. The above would be a lot easier for a developer to modify. I sort of invision it being like SQL/Linq to some degree. It would make regex a lot more semantic and maintainable. Has this been tried before, and is it a bad/good idea to try this? Could it work? **Edit** Perhaps this is a better example (I know URL's are notoriously difficult to parse and this is over simplified):               string UserInputtedURL = "http://www.google.com/page.html?ID=5"          Protocols = {"http", "https"};     Domains = {"com", "net", "org"}     Rule.CaseSensitive = false;     Rule starts with Protocols OR starts with "www";     Rule followedby string endson "."     Rule followedby Domains     Rule if stringend or endswidth " " end else continuewith Ruleset2          RuleSet2.startswith "/"     etc...          if(UserInputtedURL.Matches(Rule)){         // URL is valid!     }