I am trying to get a colour data plotted according to a coordinate. I am working with 4D vectors, with three spatial and one temporal coordinate. I tried the accepted answer at Plot 4D data with color as 4th dimension, but didn't get it to work. My data is stored as an array, whose spatial components depend on time only. As asked, the data basically looks like this:               Vector[t_]:={Vx[par1, par2, t], Vy[par1, par2, t], Vz[par1, par2, t], t}      where Vx, Vy and Vz are functions of par1, par2 and t. par1 and par 2 are time-independent parameters (that I vary from plot to plot), and they already have fixed values. The parameter t corresponds to time and has not yet been evaluated.   Next, I create an array               data = Array[Vector, 1000]      where the 1000 points are taken at t=0, t=1, t=2... , t=1000. The values of the spatial coordinates remain close to 1. When I plot the array from t=0 to t=1000 with               Graphics3D[ Point[data[[All, 1 ;; 3]], VertexColors -> Hue /@ data[[All, 4]]], Axes -> True, BoxRatios -> {1, 1, 1}]      it just makes all of the data points red. When I try to rescale exactly as suggested               Graphics3D[ Point[data[[All, 1 ;; 3]], VertexColors -> Hue[Rescale[#,{0,100}]] /@ data[[All, 4]]], Axes -> True, BoxRatios -> {1, 1, 1/GoldenRatio}]      all of the datapoints are now plotted as black. I looked through other solutions as well, and tried to guess the rescaling from them, but I didn't get it to work. I don't undestand the notation around "Hue" very well, so I suppose my tries were clumsy. For example, I also tried using arrays formed from 3D vectors, and defining own function for time, and trying to rescale like [taken from another example]               (Hue /@ Rescale[f[##] & @@@ data])         where I tried to define simply               f[t_]=t;      but it didn't work, unfortunately. What is wrong with my syntax? What does work?