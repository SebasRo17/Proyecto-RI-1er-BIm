Let's say I have a not-so-intuitive `if` statement in my code, but only if you're new to the codebase:               def set_markets(markets=None):         """         Will accept 'all' as markets to set all markets on.         For individual markets, pass in a list of ints.         """         if markets:             if type(markets) == list:                 markets = ','.join(map(str, markets))             self._set_markets(markets)      For those of you wondering: The existing system I'm interacting with (a database) expects a list of integers from the front end interface. This code does it from the backend, so a list of ints was chosen since it best represents what a user might feed in otherwise. The `markets` stuff is handed down from another class, so even though it appears like it's taking place over 5 lines, it's more like ~50 lines. My question is, would you consider this more readable? Why or why not?               def set_markets(markets=None):         """         Will accept 'all' as markets to set all markets on.         For individual markets, pass in a list of ints.         """         if markets:             if type(markets) == list:                 markets = ','.join(map(str, markets))           # else:               # markets are set to "all"             self._set_markets(markets)      EDIT: This code looks worse than it is because I left off a detail: if `None` is fed in for `markets` (the default parameter), then it will not modify the markets settings the database. Here's what I have now:                   if markets is not None:             if isinstance(markets, list):                 markets = ','.join(map(str, markets))             else:                 markets = 'all'             self._set_new_header_markets(markets)