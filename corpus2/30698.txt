I would like to know if someone knows how to compute the Multifractal Spectrum of a Financial Time Series (Currency) througth the Wavelet Transformation Modulus Maxima (WTMM). I would highly appreciate any hint in order to calculate `Dq`, `Tau(q)`, `alpha`, `f(alpha)`. I am pasting here the code I am using to get the Multifractal Spectrum (Ref: Gerd Baumann - Mathematica for Theoretical Physics (Mathematica 6.0), Springer Second Edition (2005), page 892) Comments: The following code helps to get the MultiFractal Spectrum, with _Mathematica_ 6.0. I have updated the function `ListPlot` to `ListLinePlot` and `PlotJoined` to `Joined` as suggested in the Help of _Mathematica_ 8.0. The code seems to work when the input are the probabilities `pi ={p1,p2,....pn}` and when the values of each subset of the probability space one is seeking to characterize. The code doesn't work 100% and I still don't know why (I am new to _Mathematica_ ). The thing is, that the package provided by Mr. Baumann works when you give the input of the probabilities - yet I need that such process should be automated by the WTMM so I can see (analyze) the Whole Multifractal Spectrum. ----------------- ## ----------------------------               BeginPackage["MultiFractal`"];     Clear[Dq, Tau, Alpha, MultiFractal];     MultiFractal::usage = "MultiFractal[p_List,r_List] calculates the              multifractal spectrum D_q for a model based on the probabilities             p and the scaling factors r. This function plots five functions             Tau(q), D_q(q), Alpha(q), f(q) and f(Alpha).";     Begin["Private`"];          (*---calculate the multifractal dimensions---*)     Dq[p_List, r_List] := Block[{l1, l2, listrg = {}},        (*---length of the lists---*)        l1 = Length[p]; l2 = Length[r];        If[l1 == l2,         (*---variation of q and determination of D_q---*)         Do[gl1 = Sum[p[[j]]^q r[[j]]^((q - 1) Dfractal), {j, 1, l1}] - 1;          result = FindRoot[gl1 == 0, {Dfractal, -3, 3}];          result = -Dfractal /. result;          (*---collect the result in a list----*)          AppendTo[listrg, {q, result}], {q, -10, 10, .101}]         ,         Print[" "];         Print["  Lengths of lists are different!"];         listrg = {}];        listrg];          (*----calculate Tau---*)     Tau[result_list] := Block[{l1, listtau = {}},        (*----lengths of the lists---*)        l1 = Length[result];        (*---calcultate Tau---*)        Do[AppendTo[          listtau, {result[[k, 1]],            result[[k, 2]] (1 - result[[k, 1]])}], {k, 1, l1}];        listtau];          (*---Legendre transform---*)     Alpha[result_List] :=        Block[{l1, dq, listalpha = {}, listf = {}, listleg = {}, mlist = {},          pl1, pl2},        (*---lengths of the lists---*)        l1 = Length[result];        (*---determine the differential dq---*)        dq = (result[[2, 1]] - result[[1, 1]]) 2;        (*---calculate Alpha by numerical differentiation---*)        Do[AppendTo[          listalpha, {result[[k,              1]], (result[[k + 1, 2]] - result[[k - 1, 2]])/dq}], {k, 2,           l1 - 1}];        l1 = Length[listalpha];        (*---calculate f and collect the result in a list---*)        Do[AppendTo[          listf, {result[[k,              1]], -(result[[k, 1]] listalpha[[k, 2]] - result[[k, 2]])}];         listalpha[[k, 2]] = -listalpha[[k, 2]], {k, 1, 12}];        (*---list of the Legendre transforms---*)        Do[AppendTo[listleg, {listalpha[[k, 2]], listf[[k, 2]]}];          AppendTo[mlist, listf[[k, 2]]], {k, 1, l2}];        (*---plot f and alpha versus q---*)        pl1 = ListLinePlot[listalpha, Joined -> {True, False},           AxesLabel -> {"q", "\[Alpha]"}, Prolog -> Thickness[0.001]];        pl2 = ListLinePlot[listf, Joined -> {True, False},           AxesLabel -> {"q", "f"}, Prolog -> Thickness[0.001]];        Show[{pl1, pl2}, AxesLabel -> {"q", "\[Alpha],f"}];        (*---plot the Legendre transform f versus alpha---*)        ListLinePlot[listleg, AxesLabel -> {"\[Alpha]", "f"}];        (*---print the maximum of f=D_ 0---*)        maxi = Max[mlist];        Print[" "];        Print["   D_0 = ", maxi]];          (*---calcultate the multifractal properties---*)     MultiFractal[p_List, r_List] := Block[{listDq, listTau},        (*---determine D_q---*)        listDq = Dq[p, r];        ListLinePlot[listDq, Joined -> {True, False},            AxesLabel -> {"q", "Dq"}, Prolog -> Thickness[0.001]]          (*---calculate Tau---*)           listTau = Tau[listDq];        ListLinePlot[listTau, Joined -> {True, False},           AxesLabel -> {"q", "\[Tau]"}, Prolog -> Thickness[0.001]]         (*---determine the Hoelder exponent---*)          Alpha[listTau]];          End[];          EndPackage[];