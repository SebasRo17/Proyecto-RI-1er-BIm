Problem says that: > There are `N` lanes, and the speed of each lane is given. There are many > cars in all the lanes and the start position and the length of each car and > its corresponding lane is given. There is a frog which can do 2 functions: > `wait()` or `jump()`. Find if there is a path for the frog to go from lane > `1` to lane `N` without getting hit by any of the moving cars. I am not able to solve it. I took the data structures `speed[1..n]` to denote speed of cars at `i`th lane, `length[1..n]` denoting length of cars, `start[1..n]` denoting starting position of cars. Then I took starting lane and on the basis of time calculations I decided whether to jump or wait. **My algorithm** : for each lane   1. I will assume that it is safe to jump to the next lane.   2. Then I will calculate the time period within which frog can be hit (time when I will add car length in total distance and time when i will not add car length.)   3. Now if frog will reach to the next lane within that time period then it is good to wait on the current lane.   4. While waiting I will also check whether it will be hit by the car in current lane or not. But in some cases my algorithm will not work. How should I structure my code to solve this problem?