After reading a few articles about **Newable** vs **Injectable** objects and how these concepts relate to DDD's services, entities and value objects, I was left with some doubts about using newables in my code especially in my unit tests. Main candidates for newables were Entities and Value objects meaning that instead of injecting these dependencies into other objects one should just `new` an instance of these objects and use them directly in the code. However, good DDD practices advocate assigning responsibilities to entities and value objects if they were deemed appropriate. So the entities and value objects will end having some serious business logic in them. Now if a service operates on an entity or a value object should I mock the entity or value object and pass the mock to the service (mocking will require an `interface` for the value objects or entities which seems to be advocated against) ? Or should I just `new` an entity/value object and pass a concrete implementation to the service and thus violating the unit testing principle of testing only one unit?