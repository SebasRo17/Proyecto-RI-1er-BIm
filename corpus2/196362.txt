I've read it at many places that unit tests should be independent. In my case I have a class that does data transformation. These steps must be done sequentially, otherwise they don't make sense. For example,               load_data     parse_float     label     normalize     add_bias     save_data      For example, I cannot normalize the data before I label it, because then values have changed and I don't have access to the original values of my data anymore. Or I cannot save the data before I actually loaded it. So my test class looks something like this               class TestTransform(Testcase):       def setUp(self):         self.trans = Transform()            def test_main():         self.load()         self.parse_float()         self.label()            def load(self):         self.trans.load()         assert ....            def parse_float(self):         self.trans.parse_float()         assert ....      In this case, my unit tests clearly depend on each other, but I can't see how else I could do it. As an alternative, I could write something like this                 def test_normalize(self):         # setup         self.trans.load()         self.trans.parse_float()         self.trans.label()         # test begins here         self.trans.normalize()         assert ....      But in this case, I run a lot of code multiple times, which is inefficient and makes my tests run a lot longer. So does the best practice of keeping unittests independent apply in this case or not?