I'm building an web application is ASP.NET MVC 3 (.NET 4) and trying to unit test as much as possible. I have a controller action `Details(int customerId)` which should display a view who's model is a `Customer`               public class Customer     {         public int? Id { get; set; }              [Required]         [Display(Name = "Customer Name")]         public string Name { get; set; }              ...              public IList<CustomerComment> Comments { get; set; }     }       The controller action looks like this:               public ActionResult Details(int customerId)     {         var model = service.Get(customerId);         if (model != null)             return View(model);              return RedirectToAction("Index");     }      As you can see, this directly calls `service.Get`               public Customer Get(int id)     {         return repository.Get(id);     }      The service has an `ICustomerRepository` injected in it and calls the `Get` method of that repository directly. My question regards populating the `Comments` collection. **How/where should the`Comments` be populated and how do I test it?** The `Details` view is the only place that displays the list of comments, so it needs this data. I can see two ways of populating this.   1. Do it all in the `ICustomerRepository.Get` implementation.   This might lead to a situation down the line where I'm using Get but not displaying the comments. This would mean I'm doing an _expensive_ (maybe) `JOIN` but not using the results.   2. Have an `ICustomerCommentsRepository/Service` injected into either my Service or Controller which is used to populate the `Comments` when required. Is there a preference? Secondly, how would you test this? In the second instance, I could assert that `ICustomerCommentsRepository.Populate(Customer customer)` is called on my mock by the Controller/Service. In the first situation all the responsibility lies in my repository so in a Unit Test sense, is untestable as the concrete implementation used in the actual app needs to speak to the DB and so is an integration test. Am I missing something? Would the `ICustomerCommentsRepository` be a bad idea?