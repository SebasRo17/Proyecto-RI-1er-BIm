An HTTP query can be parametrized to a list of pairs like `name=value` that can be encapsulated in general as `Map<String, String>` since an HTTP GET query is string pairs. I could need something for any combination of objects and primitives. A varargs method for example `update(String s1...)` could be written in general as `update(Map<String, String>)` where the key is the name and the value is the data. Therefore I wonder if it could be good to use a definition as `Map<K, V>` instead of writing a custom object in this case wrapping the specific 3 parameters to a class in their specific types which can't be reused whereas a `Map<K, V>` can be used to encapsulate any 2-tuples when we must write a pair like `Integer i` or `int i` or `int i=0`. But I think it will only work for classes and not for primitive types, so the primitive types must be boxed in their objects so I must also box an `int` to an `Integer` for this to also work with primitive types. Is there a better way than `Map<K, V>`to encapsulate method parameters when we must select a list of unknown length and unknown types where the types could be primitives or objects? So instead of being specific about types and their values in the method, can I use a `Map<K, V>` instead of a list of named pairs such as `String s, int i, Object o...`