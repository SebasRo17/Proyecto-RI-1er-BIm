There's a widespread belief among programmers that the more dynamic and loosely typed the language, the more productive the programmer will be in it. Guido van Rossum wrote about programming productivity using python in 1998 and searching around the web I still see people referencing this exact claim: > Syntactically, Python code looks like executable pseudo code. Program > development using Python is 5-10 times faster than using C/C++, and 3-5 > times faster than using Java. In many cases, a prototype of an application > can be written in Python without writing any C/C++/Java code. Often, the > prototype is sufficiently functional and performs well enough to be > delivered as the final product, saving considerable development time. Other > times, the prototype can be translated in part or in whole to C++ or Java -- > Python's object-oriented nature makes the translation a straightforward > process. Has this issue been properly scientifically evaluated? If not for python then perhaps for sibling scripting languages like ruby, perl or php? I'm not looking for rationalizations, analogies, or explanations why it could potentially be hard to answer, unless it's the opinion of researchers or experts that has taken the time to look into the issue. I initially asked this question over at skeptics.SE, and someone suggested I should ask it here too.