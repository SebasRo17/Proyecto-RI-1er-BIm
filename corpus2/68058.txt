When designing classes to hold your data model I've read it can be useful to create immutable objects but at what point does the burden of constructor parameter lists and deep copies become too much and you have to abandon the immutable restriction? For example, here is an immutable class to represent a named thing (I'm using C# syntax but the principle applies to all OO languages)               class NamedThing     {         private string _name;             public NamedThing(string name)         {             _name = name;         }             public NamedThing(NamedThing other)         {              this._name = other._name;         }         public string Name         {             get { return _name; }         }     }      Named things can be constructed, queried and copied to new named things but the name cannot be changed. This is all good but what happens when I want to add another attribute? I have to add a parameter to the constructor and update the copy constructor; which isn't too much work but the problems start, as far as I can see, when I want to make a _complex_ object immutable. If the class contains may attributes and collections, containing other complex classes, it seems to me the constructor parameter list would become a nightmare. So at what point does a class become _too complex_ to be immutable?