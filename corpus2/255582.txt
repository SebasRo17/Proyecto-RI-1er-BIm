I am in a bit of an awkward programming situation, and it will help me a lot to get your input in this situation. I am building a web app which expects to authenticate users from another, separate application (through API calls), and also authenticate users from it's own database. Essentially, there are two separate user bases. Let's say the app I'm building is App1, and the other app which I'm making API calls to is App2. This communication is only one-way; App1 makes API calls to App2, but App2 does not make calls to App1. Users can register in App1 and create an account in App1's database - but during this process, App1 makes an API call to App2 to make sure the email/username being entered into App1 is not already present in App2. Now, the other side of this. If a user is already registered in App2, they do not need to go and register again in App1. They can simply go to App1 and log in. In doing so, App1 sends an API call to App2 to authenticate the user, and creates a copy of the App2 user's account in it's own (App1) database. Problems arise when there are two distinct users, one in App1, and the other in App2, that share the same username. Now, when the App2 user attempts to log into App1, there will exist two users in App1 with the same username! How can a scenario like this be avoided? Is this even a place I want to be (working with App2's user base)?