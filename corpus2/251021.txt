Here are some examples of temporary/local code. It is needed in order to work with the codebase, but would be harmful to be part of it:   1. Project files. Paths may need to be edited in order to reflect the layout on the current PC.   2. Makefiles. For example optimization may need to be turned off during debugging, but not for the CI server.   3. Dirty ugly hacks. For example `return 7` in the middle of a function, in order to test something, depending on the function, and suspected to break at value of 7. Or 7 is the code of the not yet implemented button, that I am implementing and need to test throughout the life of my branch.  I have tried keeping those in a git commit that I always rebase to the top before pushing to the repo and then push `HEAD~`. This is quite inconvenient and doesn't work with svn. Stashing scares me even more - "did I remember to pop after pushing??". Keeping the code out of version control introduces unpleasant noise everytime a commit is being assembled plus it might accidentally get introduced into a commit some friday evening. What would be a sane solution for such throw-away code?