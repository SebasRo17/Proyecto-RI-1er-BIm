I have a debate with a programmer colleague about whether it is a good or bad practice to modify a working piece of code only to make it testable (via unit tests for example). My opinion is that it is OK, within the limits of maintaining good object oriented and software engineering practices of course (not "making everything public", etc). My colleague's opinion is that modifying code (which works) only for testing purposes is wrong. Just a simple example, think of this piece of code that is used by some component (written in C#):               public void DoSomethingOnAllTypes()     {         var types = Assembly.GetExecutingAssembly().GetTypes();              foreach (var currentType in types)         {             // do something with this type (e.g: read it's attributes, process, etc).         }     }      I have suggested that this code can be modified to call out another method that will do the actual work:               public void DoSomething(Assembly asm)     {         // not relying on Assembly.GetExecutingAssembly() anymore...     }      This method takes in an Assembly object to work on, making it possible to pass your own Assembly to do the testing on. My colleague didn't think this is a good practice. What is considered a good and common practice ?