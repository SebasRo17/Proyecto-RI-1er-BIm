I'm currently learning Clojure (my first functional programming language), and I'm curious as to its order of evaluation. Here is an example: `(take 10 (cycle [1 2 3]))` If the `cycle` expression was not wrapped in a `take` expression, this would cause a memory error, as it would iterate infinitely through the vector. So, how does Clojure _know_ that it has been wrapped with a `take` expression? (If I'm using any incorrect terminology here, I'd appreciate a nudge too!)