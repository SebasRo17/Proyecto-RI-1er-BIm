On the English Language Learning StackExchange, there is this seemingly simple question on whether you would throw a "be" in with "evaluates to": evaluates to be false vs evaluates to false The "be" is a word that most programmers -- I'd think -- would feel is _"in the way"_. Someone answered that part already. And I probably would not have thought much of this and clicked on... _if_ it hadn't been for the answer declaring the more natural phrase is _"the condition is false"_. That led me to internally consider that what I thought the right words would be in a simplification. _"The condition is **met** "_ ... _"The condition is **satisfied** "_ came to mind. Then I thought about the interchangeability of how we use "condition" to mean "conditional expression" and it made me want to talk about the subtler points. The risk I mention is that if we are to say that conditions are either "true" or "false" is that we have a limited vocabulary. When you have code that says `if (foo - bar)` then you run into problems when you talk about **"the condition"**. I'd say that common usage is that "the condition" mostly refers to "the conditional expression"; this is to say that "the condition" would be `foo - bar`. But even if we think throwing away "evaluation" is okay, then as false values in the language may be different from the logical falseness governing conditional statements, we should prefer "condition is not satisfied" or "condition is not met" unless we really wish to emphasize that an evaluation produced false. In that sense, I do not see "the condition is false" as being a good substitute; if one were to get literal then that might even suggest the code says `if (false)`. English Language Learners does not have a wide programmer audience, so I thought I'd bring the question here for insights. Think of `if (foo - bar)` where foo and bar are integers in a language with a separate boolean type (C++ for instance). What wording is best? When--if ever--is it okay to say "the guard condition is false"?