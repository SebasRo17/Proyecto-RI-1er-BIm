I've done some open source projects, and I plan to do more in the future. So far, I've released all my code under GPL, but I've read a few articles which claim GPL is too restrictive for any code to be used in corporate environment. This, supposedly, reduces contributions. Here's what I wanted to accomplish: For **full applications** :   * no commercial use with the exception of selling _support_ for the application (i.e. the app cannot be sold, but everything around it can) For **libraries** (components, plugins, ...):   * can be included into commercial projects **without modifications**   * any modification the the library/component must be open sourced (contributed back) - the rest of the project, commercial or not, is not affected For applications, GPL still seems the logical choice. For libraries, my primitive understanding of licences makes me think that LGPL is a good match, but, I'm not sure. I've looked at MIT licence, and that seems too permissive. Most of the time, I want people to use my code anywhere they want to, as long as any improvements are contributed back. This brings me to my question(s): is LGPL a logical choice for open source libraries, components, plugins etc? Is there a better alternative? Is GPL a good choice for my applications or is there something better? **Update:** For those who are interested in my final decision, I've decided to release my libraries under multi-license scheme, MPL, LGPL and GPL. This enables virtually _everyone_ to use my code with no obligations, unless they modify it under MPL, in which case it would have to be contributed back. This means the code can be used by both FSF and proprietary software, but "bad" commercial exploitation is prevented (or so I'd like to think).