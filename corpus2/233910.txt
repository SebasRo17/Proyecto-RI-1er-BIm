I'm working on some software at them moment and I'm not sure which route to take with this. I have some data to store somewhere on a mobile device. The data will never change, and has a hierarchical relationship, and will be used to populate the display. There is a reasonably amount of this data. I have the following options:   1. A set of enums/objects   2. An XML file   3. The embedded SQLite database In this particular case I think that the enums option is the least work, but I get a smell from the data being embedded in the code like that. The XML file makes the most sense I think, but parsing it will be a resource hit that seems like a waste since it will 'never' change. The database should provide less of a performance hit, but seems like overkill for static data. Which is the correct design path here? **Note:** By 'Never' change I mean that it will rarely change. The data in question is a model of a set of government standards, so they may well change at some point in the future but its not going to be regularly and its not going to automatically update our software either as a change in the standards could well trigger a change in our requirements.