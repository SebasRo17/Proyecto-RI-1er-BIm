I have multiple projects that will be using the same business objects (customer, order) but the projects operate in different databases within the organization and I would like to understand the proper architecture that I should create to service such needs. Here is a list of the different types of projects in play:   * ASP.NET MVC front end to handle all general user actions. This front end is deployed to a dedicated instance per customer.   * Centralized Windows Service to process FTP files and transmit the data to each customer instance.   * ASP.NET MVC front end to manage all customers and their instances. All business objects (customer, order, etc) are located in a Core class library. Each of the projects will need to use the business objects at one point or another but connect to a different database. Should the DBContext reside in the Core library or in the project? Should Entity Framework migration be located in the same location as the DBContext?