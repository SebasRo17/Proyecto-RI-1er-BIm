The "canonical" idea is pervasive in software; patterns like Canonical Model, Canonical Schema, Canonical Data Model and so on, seem to come up again and again in development. Like many developers, I've often followed, uncritically, the conventional wisdom that you _need_ a canonical model, otherwise you'll face a combinatorial explosion of mappers and translators. Or at least, I _used to_ do that until a couple of years ago when I first read the somewhat-infamous EF Vote of No Confidence: > The hypotheses that once supported the pursuit of canonical data models > didn’t and couldn’t include factors that would be discovered once the idea > was put into practice. We have found, through years of trial and error, that > using separate models for each individual context in which a canonical data > model might be used is the least complex approach, is the least costly > approach, and the one that leads to greater maintainability and > extensibility of the applications and endpoints using contextual models, and > it’s an approach that doesn’t encourage the software entropy that canonical > models do. The essay presents no evidence of any kind to support its claims, but did make me question the CDM approach long enough to try the alternative, and the resulting software didn't explode, literally or figuratively. But that doesn't mean a whole lot in isolation; I could have just been lucky. So I'm wondering, has any serious research been done into the practical, long- term effects of having a canonical model vs. contextual models in a software system or architecture? Or, if it's too early to be asking that, then have any developers/architects written about personal experiences switching from a CDM to independent contextual models, or vice versa, and what the practical effects were on things like productivity, complexity, or reliability? What about the differences at different levels, i.e. using the same model across a single application vs. using it across a system of applications or an entire enterprise? (Facts only, please; war stories are welcome but no speculation.)