I can't decide how to refactor code right. Let's say I have a complex hypothetical logic piece:               public class ImageService     {          public void UploadImage(VectorData data) {              var image = ConvertVectorDataToImage();              var thumbnail = CreateThumbnail(image);              SaveThumbnail(thumbnail);              SaveImage(image);              SendEmail(image);              ...          }     }      _(If something in example is out of single responsibility, let's pretend, that I could make up a better example)_ If I make UploadImage visible (public), then writing tests become complicated. They tend to be long, hard to read and if you would like to avoid code duplication, then logic in tests appears. If I make all those small pieces visible, the API becomes messy (because in my example, the only interesting thing to everyone is UploadImage method). Even worse, after some time people will tend to use those small methods, because they are public, not because they should be used outside the class. So my question is, how do you balance between visibility and test complexity? Or am I doing something wrong in first place?