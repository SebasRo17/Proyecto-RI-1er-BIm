I have a db design question that I am sure has been quite extensively covered but I cannot find a good answer already. The problem is how to efficiently link a single school course to a collection of textbooks, a course may have 0 books and it may have 10. The problem here is that multiple courses can use the same textbook as well. My first thought was to include the textbook tables PK as a FK in the courses table. Then the courses table has a composite PK of course id and textbook id. The problem with this approach is that the courses table could potentially have a lot of columns, and then I am repeating the entire course row for every textbook addition, in addition to having to set a fake textbook_id for courses that do not have a textbook. **courses**   * course_id   * course_name   * FK textbook_id   * PK(course_id, textbook_id) **textbook**   * textbook_id   * textbook_name  My next thought was to have a table that has 10 columns for textbooks, that I use for linking a course to all the textbooks. But, I'm not sure if there is a better approach (this will end up using less space), when I think about this I think why not have textbook1, textbook2 columns in the courses table in the first place. **courses**   * PK course_id   * course_name   * FK textbooks_ids **course_textbook**   * FK course_id   * FK textbook_1   * FK textbook_2   * FK textbook_3   * FK textbook_4 **textbook**   * isbn   * textbook_name A bit of background as well, using MySql, Hibernate ORM, and writing a separate search indexer. Anyone have any suggestions on a better approach or thoughts on which of these two approaches is better? Thanks in advance for the help