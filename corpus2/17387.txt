I want to implement Remainder Tree based on this. With the answers on SE I've come up with:               listProduct2[list_] := Times @@@ Partition[list, 2, 2]          T = NestList[listProduct2, Prime[Range[2^7]], 7]          n = 31415926535;          r = {n};     Do[r = Outer[Mod, r, T[[i]]], {i, 7, 1, -1}];      The final desired output is to calculate `n mod p` for all first 2^n primes using remainder tree but it's very slow rather than being fast. I don't know where I was wrong! **Updated** I have read somewhere that this method can be used for faster sieve implementation, around 10 times faster than any available sieve method!!.               Primo[n_] := Product[i, {i, Prime[Range[n]]}]          primeslist = Prime[Range[10^6]];          prod = Primo[10^6];          n = Primo[205000] + 1;          Timing[MemberQ[listMod[n, primeslist],0]]          {36.719, False}          Timing[GCD[n, prod] != 1]          {2.14, False}