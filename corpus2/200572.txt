I know that there are some other questions about c++ refactoring, but none satisfies my needs. I have a background in java and python programming, but now I'm approaching C++. I've read (and absolutely love) books about agile coding, tdd, refactoring, etc. The first that comes in my mind is "Clean Code". From this I have learned a lot of things: keep my functions short, keep my classes short, keep names of variables/classes consistent etc.. I like very much this way of working: first resolve the problem, then refactor in small functions (and one function does only one thing), adding subclasses, etc. I strongly believe that this way of working is made easy from modern IDE: add file, rename function, rename classes, etc.. I'm now coding in c++ with cmake inside QtCreator. All of those things are more difficult. Even adding a file is "more difficult" (I have to generate one header file, one source file, add them to cmakelist.txt, run again cmake, etc). Thinking about renaming files (I have to manually change all includes) or some strong refactoring methods that in Java with Eclipse has no cost now gives me a headache. I mean.. it is not "difficult" in the meaning that are "hard task", but the human mind is kind of lazy: if I can do other easiest way.. In Java with some modern IDE like Eclipse.. refactor is the fun parts, some clicks and voil√†, it is done, I do it every time I pass a test. It is easy, fun, and I like reading my clean code with small functions and nice names. Now everything is more difficult mainly because there is no tools that can do it without cost. I bare myself in bad attitudes driven by lazyness: write several classes in a single super-long .h file because I don't want to create new files, spent hours in modify classes/functions/variables with more appropriate names and change manually all includes, write long functions because when I automatically change a function attributes that concerns the std lib QTCreator is deleting the templates so I avoid it, and many others.. This is quite frustrating.. what can you advice me? Do I have to get more relaxed in the "rules" of writing clean code? Do I have to does not think about those stuffs and thinking only in getting things works? Or (maybe this is the more importart question) do I have to thinking about some other way of working? No more incremental/iterative/agile way but more waterfall and spend more time in design stuffs before coding in the hope of minimize the refactor when test are passed? Anyway, any comment are welcome because I am very far to be a good programmer : )