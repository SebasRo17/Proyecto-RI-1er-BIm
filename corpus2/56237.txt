This is somewhat similar to this question, except the problem I am encountering is to do with Fourier transforms of scalar multiples of functions and their derivatives. I wish to input `FourierTransform[a*f[t],t,x]` and have Mathematica simplify it to `a*FourierTransform[f[t],t,x]`, and, equivalently, to input `FourierTransform[f'[t],t,x]` and have Mathematica simplify it to `ix*FourierTransform[f[t],t,x]`. I'm taking the Fourier transform of a system of differential equations for functions `f[t]`,`g[t]`, etc., in order to instead only have to solve a system of algebraic equations for their Fourier transforms, but Mathematica seems to be having some problems doing this. Note that `LaplaceTransform` works exactly as expected, but for some reason `FourierTransform` doesn't perform the expected simplification. If someone could suggest a solution that also incorporates the distributive property that `FourierTransform` was shown to have a problem with in the question I linked, that would be ideal. # Example This is essentially what I'd like `FourierTransform` to do:               LaplaceTransform[{a*f[t]+b*g'[t]==0,c*f'[t]+d*g[t]==0},t,x]      which returns:               {a*LaplaceTransform[f[t],t,x]+b*(-g[0]+x*LaplaceTransform[g[t],t,x])==0,     c*(-f[0]+x*LaplaceTransform[f[t],t,x])+d*LaplaceTransform[g[t],t,x]==0}      Instead, however, `FourierTransform` of the same expression returns:               {FourierTransform[a*f[t]+b*g'[t]==0,t,x],FourierTransform[c*f'[t]+d*g[t]==0,t,x]}      # Edit There is a solution to this problem here, although it doesn't actually explain `FourierTransform`'s strange functionality.