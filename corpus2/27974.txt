For reasons that have never been entirely clear to me, _Mathematica_ has had a built-in `TakeWhile` function since version 6.0, but has no equivalent `DropWhile` function. This means that I find myself periodically writing my own. Since this is a function that I use fairly frequently, I'd like to have a version that is both fast and robust. It's also the kind of function that you can write in a bunch of ways; I've tested variants that depend on `While` loops, on using `Scan` and `Throw`, and on using `Position`. Of these, a version using `Position` is the fastest I've found:               DropWhile[list_, test_] :=       With[{pos =         Position[list, elt_ /; ! TrueQ@test[elt], {1}, 1, Heads -> False]},       pos /. {         {} -> {},         {{fail_}} :> Drop[list, fail - 1]        }];      The `TrueQ` slows things down a bit, but is there to match the observed behavior of `TakeWhile`, which takes elements only as long as the test function returns `True`. Are there good ways to make this function work faster?