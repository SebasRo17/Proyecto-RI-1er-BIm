I had a problem using `Pattern` with `Vectors` in `Assumptions`. Here's how I use `Pattern` in `Assumptions`:               (* Input := *) Simplify[Element[y[i], Anything], Element[y[_], Anything]]     (* Output:= True *)      _Mathematica_ does assume that any variable matching `y[_]` is an element of `Anything`. However, if I replace `Anything` by `Vectors[n]`, _Mathematica_ no longer assumes that:               (* Input := *) Simplify[Element[y[i], Vectors[n]], Element[y[_], Vectors[n]]]     (* Output:= Element[y[i], Vectors[n, Complexes]] *)      in which I expect to get an ouput of `True`. So where is the problem? * * * Update: The problem exists only in v9, in which `Vectors` is introduced as a built-in function. (Thanks MƒÅris Ozols for clarifying it.) Below Michael E2 gave a solution, replacing `Element[y[_], Vectors[n]]` by `HoldPattern@Element[y[_], Vectors[n,Complexes]]`. This partially solves the problem, but it is not what I want, because it does not really assume `y[_]` is a vector. See the following code.               (*Input := *) $Assumptions = {HoldPattern[Element[y[_], Vectors[n, Complexes]]],                     Element[x[1], Vectors[n]], Element[z[_], Vectors[n]]};     (*Input := *) Simplify[{Element[y[i], Vectors[n]], Element[x[1], Vectors[n]],                     Element[z[i], Vectors[n]]}]     (*Output:= {True, True, Element[z[i], Vectors[n, Complexes]]}*)     (*Input := *) TensorRank /@ {y[i], x[1], z[i]}     (*Ouput:=  {TensorRank[y[i]], 1, TensorRank[z[i]]}*)      Above only `x[1]` behaves as a vector, but `y[i]` and `z[i]` not. `HoldPattern` only makes `Element[y[i], Vectors[n]]` true, but will not make `y[i]` a vector. I want `y[i]` to behave like `x[1]`.