Let's say you work for a company and what you do is develop software for them. You have no idea of the big picture or maybe slight. What you do have are tasks assigned to you via issue tracking system. You're given tasks, you make them work the way the task describes them, you send them back. Like adding 2 integers:               function add(a,b){return a + b;}      But later, as the project goes forward, you notice that as `add` becomes more complex, you realize that it should have needed some form of architecture, more than just a function that adds parameters and returns a value. However, you didn't know that. In the first place, all they needed was that simple `add`. You didn't expect add to become so complex. The project progresses with more features, which you didn't expect to have in the first place. And in the end, you keep piling up hacks and layer upon layer of functions to avoid breaking/rewriting the existing code. How do you deal with these situations? How do you fight technical debt as "the lowest developer"? **Clarification:**   * You're the "implementer", the lowest in the hierarchy.    * You see the problem, but have no say with the matter.   * I'm not quantifying technical debt or looking for tools.   * Regarding the third "duplicate"     * Refactoring & Rewrite - You are locked to your tasks. You are not paid to do extra.     * Architecture Overview - You know the overall system, but no idea of the architecture.     * Code Freeze - Not your call. You're not management.     * Modularization - No idea of architecture. Modules change as requirements change.     * Automated Tests - None exists.