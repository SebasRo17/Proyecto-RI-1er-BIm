Please consider the following: From a fresh Mathematica kernel, `RandomVariate` is more efficient for `NormalDistribution` but `RandomReal` is for uniformly distributed noise.               RandomReal[NormalDistribution[0, 1], 100]; // Timing      > `{0.00535, Null}`               RandomVariate[NormalDistribution[0, 1], 100]; // Timing      > `{0.000069, Null}`               RandomReal[{0, 1}, 100]; // Timing      > `{0.00004, Null}`               RandomVariate[UniformDistribution[], 100]; // Timing      > `{0.005236, Null}` But if I re-evaluate, I get `Timing` results that are much more similar:               RandomReal[NormalDistribution[0, 1], 100]; // Timing      > `{0.000051, Null}`               RandomVariate[NormalDistribution[0, 1], 100]; // Timing      > `{0.000052, Null}`               RandomReal[{0, 1}, 100]; // Timing      > `{0.00003, Null}`               RandomVariate[UniformDistribution[], 100]; // Timing      > `{0.000058, Null}` Does caching the distribution definition really matter that much? Obviously `RandomVariate` has the advantage that it can generate data from mixed (not only fully continuous or fully discrete) distributions. So it is more general. But if one is generating random numbers from standard distributions like the normal or the Poisson, **is there any advantage – performance or otherwise – to using`RandomVariate` instead of `RandomReal` or `RandomInteger`?**