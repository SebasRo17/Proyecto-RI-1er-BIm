Suppose there is a deep expression with several instances of some `_f`. I want to get the most external case of `_f` from it (I also want to get the first instance of one, in a traditional _Mathematica_ 's sense of “the first”). Initially I tried `Cases[expr, _f, Infinity, 1]` but it actually turned out to be the internal subexpression. I probably should have expected that but was nevertheless a bit surprised. (Not that I'm saying the principle of the least astonishment was broken, though.) What is the proper way to get the external `_f`? (Sure, it could be more general than `Blank@something` but it probably doesn't matter.) An example:               In[1]:= deepExpression =             "External Head"[               "Just a filler"@"Just a filler, too",               "Head of interest"[                 "This should be the first part of the result",                  "Head of interest"@"But it is too deep"],               "Head of interest"@"But it is too late"];      The first naive attempt:               In[2]:= First@Cases[deepExpression, Blank@"Head of interest", Infinity, 1]     Out[2]= "Head of interest"["But it is too deep"]      Another unsuccessfull one:               In[3]:= Last@Cases[deepExpression, Blank@"Head of interest", Infinity]     Out[3]= "Head of interest"["But it is too late"]      Then I tried coordinate approach (minimizing sum of indices in `Position`):               In[4]:= minimumWRTTotal =              allPositions \[Function]              Select[allPositions              , And @@ ((arbitraryPosition \[Function]                         Total@# <= Total@arbitraryPosition) /@ allPositions) &];          In[5]:= findExternalByPosition[expr_, pattern_] :=              Part[expr             , ## & @@                First @ minimumWRTTotal @               Position[expr, pattern, Infinity]]          In[6]:= findExternalByPosition[deepExpression, Blank@"Head of interest"]     Out[6]= "Head of interest"["This should be the first part of the result",                                "Head of interest"["But it is too deep"]]      And I'm still not sure if it actually does what I need (a usual case for everything that is coordinate-based). Yet another approach:               In[7]:= FirstOrSkip = Quiet[First@# /. _First -> (## &[])] &;          In[8]:= parseForExternal[a_?AtomQ, pattern_] :=              Switch[a, pattern, a, _, ## &[]]          In[9]:= parseForExternal[notAnAtom_, pattern_] :=              Switch[notAnAtom             , pattern , notAnAtom             ,    _    , FirstOrSkip[parseForExternal[#, pattern] & /@ notAnAtom]]          In[10]:= parseForExternal[deepExpression, Blank@"Head of interest"]     Out[10]= "Head of interest"["This should be the first part of the result",                                 "Head of interest"["But it is too deep"]]      I'll probably use the last one but is there any better way? I feel there must be a very simple built-in way to do it that I overlook. `parseForExternal` in its present form probably does some unnecessary job with long expressions that have positives in the beginning, and I'd prefer to avoid that. In case it's true, and there's also no built-in algorithm, how do I make `parseForExternal` more efficient? Also, if anybody can clearly see if minimizing elements from `Position` w.r.t. to `Total` actually does the job, please comment on that.