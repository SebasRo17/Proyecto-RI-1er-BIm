I am currently learning about design patterns. I think most people would agree that these patterns are great tools, but should be used with moderation and not as the answer for everything. Using them too much would over-complicate the application with little benefit. Patterns should be used only where they can be the best solution or help in the creation of a good solution (do you agree?). With this in mind: The book I'm reading (Head First Design Patterns) frequently emphasizes the importance of **loose coupling**. This loose coupling is acheived by following principles such as 'program to an interface, not an implementation' and 'encapsulate what varies'. Basically, most patterns I learned so far exist mostly to allow designs to be loosely coupled, and thus more flexible. I understand the importance and benefits of loose coupling. But my question is, **how much effort should one actually invest in creating loosely coupled, flexible designs?** Those who oppose design patterns say that the costs to using these patterns often outweighs the benefits. You invest a lot of time in creating a loosely coupled design using some pattern, **where in reality - the loose coupling, 'programing to an interface, not an implementation', and all of these principles - might not actually be so important.** What I'd like to know, is how much effort should I actually put in creating additional levels of abstraction and designs, only to allow my application to follow OO principles such as loose coupling, programmign to an interface, etc. Is it really worth it? How much effort should I put in this?