Say Alice and Peter each have a 4GB USB flash memory stick. They meet and save on both sticks two files named `alice_to_peter.key` (2GB) and `peter_to_alice.key` (2GB) which contain randomly generated bits. They never meet again, but communicate electronically. Alice also maintains a variable called `alice_pointer` and Peter maintains variable called `peter_pointer`, both of which are initially set to zero. When Alice needs to send a message to Peter, she does (where `n` is the nth byte of the message):               encrypted_message_to_peter[n] = message_to_peter[n] XOR alice_to_peter.key[alice_pointer + n]     encrypted_payload_to_peter = alice_pointer + encrypted_message_to_peter     alice_pointer += length(encrypted_message_to_peter)      ~~(and for maximum security, the used part of the key can be erased)~~ Peter receives `encrypted_payload_to_peter`, reads `alice_pointer` stored at the beginning of message and does:               message_to_peter[n] = encrypted_message_to_peter[n] XOR alice_to_peter.key[alice_pointer + n]      ~~And for maximum security, after reading of message also erase the used part of the key.~~ \- EDIT: In fact this step with this simple algorithm (without integrity check and authentication) decreases security, see Pa≈≠lo Ebermann post below. When Peter needs to send a message to Alice they do the reverse, this time with `peter_to_alice.key` and `peter_pointer`. With this trivial schema they can send each day for the next 50 years 2GB / (50 * 365) = ~115kB of encrypted data in both directions. If they need more data to send, they could use larger keys, for example with today's 2TB HDs (1TB keys) it would be possible to exchange 60MB/day for the next 50 years! That's a lot of data in practice; for example, using compression it's more than hour of high quality voice communication. It seems to me that there is no way for an attacker to read the encrypted messages without the keys, because even if they have an infinitely fast computer, with brute force they can get every possible message under the limit, but this is an astronomical number of messages and the attacker doesn't know which of them is the actual message. Am I right? Is this communication scheme really absolutely secure? And if it is secure, does it have its own name? XOR encryption is well-known, but I'm looking for the name of this concrete practical application using large keys on both sides? I am humbly expecting that this application has been invented someone before me. :-) ~~Note: If it's absolutely secure then it's amazing, because with today's low cost large storage devices, it would be much cheaper to do secure communication than with expensive quantum cryptography, and this has equivalent security!~~ **EDIT:** I think this will be more practical in the future as storage costs decrease. ~~It can solve secure communication forever.~~ Today you have no certainty if someone successfully attacks existing ciphers even a year later and makes its often expensive implementations insecure. In many cases before communication occurs, when both sides meet personally, that's the time to generate the keys. I think it's perfect for military communication, for example between submarines which can have HDs with large keys, and military central can have a HD for each submarine. It could also be practical in everyday life, for example to control your bank account, because when you create your account you meet with the bank etc.