I have a static Jekyll website. The website is constructed _once_ , on my computer, and then sent to the server in the form of plain HTML, image, and CSS files, to be served by a regular HTTP server. This construction process involves a template engine that has to glue various components together. For example, this is the template for my posts and pages (the only other template I have is for the main page, which shares quite a lot with this one):               <!DOCTYPE html>     <html>         <head>             {% include head.html %}             <link rel="stylesheet" href="/css/main.css">             {% if page.title == "Tautological Cascade" %}                 <title>Tautological Cascade</title>             {% else %}                 <title>Tautological Cascade: {{ page.title }}</title>             {% endif %}         </head>              <body>             <div class="site" >                 {% include header.html %}                 {{ content }}                 {% include footer.html %}             </div>         </body>     </html>      The most important part to notice here is the `body` section. It basically sandwiches a processed markdown file between two HTML files. Currently, I only have one, main CSS file, which is used by ALL pages. I find this approach a bit unpractical. Everything is defined in there, and it's getting messy. Couple that with my general ignorance of anything but the basic CSS, and you get something close to a nightmare. My idea is this: inline CSS for all of these parts that I glue together. So header.html would have its CSS in its file, footer.html would have its CSS, and the file that describes the content int its own. **Is this the correct solution to my problem? Is there something wrong with this approach?**