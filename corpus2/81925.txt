I'm in the beginning phases of creating a QA system and I want to make sure that the design decisions that I'm making now make sense and won't bite me in the butt later on. If you have even the slightest nit-picky thing or whatever, please post, I'd appreciate hearing any feedback about this (I'm quite new to it all). **QA solution folder:**   * Assembly For Regression Tests (Class Library)   * Assembly For Integration Tests (Class Library)   * Assembly For Unit Tests (Class Library)   * Assembly for QA related Utilities (Class Library) **Each assembly has this basic structure:**               [TestFixture]     public class SomeComponent{         [Test]         public void SomeComponentFunction(){             bool someBool;             //Some stuff             Assert.IsTrue(someBool,"");         }         [Test]         //etc.     }      **Some specific things I'm wondering** (but I'm open to feedback about anything)   * Are class libraries the appropriate project type to use? I can see the advantage of using console applications so you can run these tests independent of NUnit (but I don't know why you'd do that instead of just using NUnit).   * I'm having a difficult time understanding the difference between regression level tests and system level tests. For a system level test, it seems like you run an end-to-end test, and compare the final result with some "Standard" result. Isn't that just regression testing?