The frequency of commits depend on two factors:   * the developer himself: some developers tend to commit often, others may spend hours without committing,   * the current work: the same developer may have to commit very frequently when effectuating risky refactoring operations or similar tasks, and quite rarely when working on other parts of the codebase. From what I observed, beginners tend to commit one or two times per day on average. Developers with a few years experience are probably committing once per hour on average. Committing every fifteen minutes is probably the best thing to do, but I've rarely seen this commit frequency. **Question:** I've spotted in Google Closure Library logs that it has commits nearly every three minutes from the same developer. What are the benefits of such high frequency? Are there consequences on the way the code is written? Is it related to the fact that at Google, codebase is compiled and tested on servers and so one should commit the code to see if it compiles and passes all the unit and integration tests?