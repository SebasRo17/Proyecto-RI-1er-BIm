I have been tasked with teaching other teams a new codebase, but I keep running into an issue. Whenever I go to actually walk through the code with people, we don't get very far before the entire exercise devolves into a bikeshedding exercise. Since they don't know the codebase, but think they need to help improve it, they focus on the things they _can_ understand: `Why is that named that?` (2 minutes to explain why it's named that, 10+ minutes debating a new name) `Why is that an abstract base class rather than an interface?` (2 minutes to explain, 10+ minutes debating the relative merits of this decision) ...and so on. Now, don't get me wrong - good names and good, consistent design are important, but we never get to discussing what the code actually _does_ or how the system is designed in any meaningful way. I've done some meeting refereeing to get people out of these tangents, but they're gone - distracted by what the code will/should be when their pet triviality is fixed, and they miss the bigger picture. So we try again later (or with a different part of the codebase) and since people didn't get enough knowledge to overcome the bikeshedding effect, it repeats. I've tried smaller groups, bigger groups, code, whiteboarding, visio diagrams, giant walls of text, letting them just argue it to death, cutting arguments short immediately... some help more than others, but nothing **works**. Hell, I even tried having other people from my team explain it because I thought it might be that I'm just bad at explaining things. So how do you educate other programmers enough that they stop fixating on trivialities and can meaningfully contribute to the design?