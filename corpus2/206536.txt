I am writing a Java web application that consists mainly of a bunch of similar pages in which every page has several tables and a filter that applies to those tables. The data on these tables comes from an SQL database. I am using myBatis as ORM, which may not be the best choice in my case, since the database is poorly designed and mybatis is a more database oriented tool. I am finding that I am writing a lot of duplicate code because, due to the database's poor design, I have to write different queries for similar things as those queries can be very different. That is, I cannot easily parametricise the queries. This propagates into my code and instead of populating rows on columns in my table with a simple loop I have code like: get _A_ Data (p1, ..., pi); get _B_ Data (p1, ..., pi); get _C_ Data (p1, ..., pi); get _D_ Data (p1, ..., pi); ... And this soon explodes when we have different tables with different columns. It also adds to the complexity the fact that I'm using "wicket", which is, in effect a mapping of objects to html elements in the page. So my Java code becomes an adapter between the database and the front end, which has me creating a lot of wiring, boilerplate code with some logic intermingled in it. Would the correct solution be wrapping the ORM mappers with an extralayer that presents a more homogeneous interface to the db or is there a better way to deal with this spaghetti code I'm writing? EDIT: More info about the database The database holds mainly phone calls information. The poor design consists of: Tables with an artificial ID as primary key that has nothing to do with the domain knowledge. No unique, triggers, checks or foreign keys whatsoever. Fields with a generic name that match different concepts for different records. Records that can be categorised only by crossing with other tables with different conditions. Columns which should be numbers or dates stored as strings. To sum it up, a messy / lazy design all around.