The rule of 3 (the rule of 5 in the new c++ standard) states : > If you need to explicitly declare either the destructor, copy constructor or > copy assignment operator yourself, you probably need to explicitly declare > all three of them. But, on the other hand, the Martin's "Clean Code" advises to remove all empty constructors and destructors (page 293, _G12:Clutter_ ) : > Of what use is a default constructor with no implementation? All it serves > to do is clutter up the code with meaningless artifacts. So, how to handle these two opposite opinions? Should empty constructors/destructors really be implemented? * * * Next example demonstrates exactly what I mean :               #include <iostream>     #include <memory>          struct A     {         A( const int value ) : v( new int( value ) ) {}         ~A(){}         A( const A & other ) : v( new int( *other.v ) ) {}         A& operator=( const A & other )         {             v.reset( new int( *other.v ) );             return *this;         }              std::auto_ptr< int > v;     };     int main()     {         const A a( 55 );         std::cout<< "a value = " << *a.v << std::endl;         A b(a);         std::cout<< "b value = " << *b.v << std::endl;         const A c(11);         std::cout<< "c value = " << *c.v << std::endl;         b = c;         std::cout<< "b new value = " << *b.v << std::endl;     }      Compiles fine using g++ 4.6.1 with :               g++ -std=c++0x -Wall -Wextra -pedantic example.cpp      The destructor for `struct A` is empty, and not really needed. So, should it be there, or should it be removed?