On a side project I'm working on I came up with a way of handling exceptions that's adjustable by configuration. So a try/catch block might look like this:               try     {         fileHelper.MoveFile(file, destFolder);     }     catch (IOException ex)     {         if (exceptionHandler.HandleException(ex))         {             return ResultCode.Fail;         }         throw;     }      The granularity of exception handling is controlled through an `enum` that's set in the app.config file:               public enum SystemFailureMode     {         AlwaysThrow = -1,         Aggressive = 0,         Standard = 1,         Lenient = 2     }      This determines whether an exception is "handled" and returned as an error, or if it bubbles up and crashes the system. At first I thought I'd uncovered a new design pattern but now it seems like it's probably an anti-pattern. What do you guys think? * * * After reviewing the comments and thinking about it myself, I've decided this is definitely an anti-pattern. The fact that this has the potential to turn writing unit tests into a nightmare is enough to turn me off of it.