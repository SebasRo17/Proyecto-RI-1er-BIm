Actually, I'm helping a small software shop on their Scrum Implementation. Recently the Scrum Master reported me that he has a problem because the Team is working **Over Time** to achieve the Scope (Committed Backlog). So they have an **Unreal Velocity**. My formal question(s) is / are:   1. Apart from speaking about on the Retrospective Meeting; do you think that is a good idea to implement some hard-blocks to avoid Over Time?   2. If so, what techniques / tools do you suggest?      * Revision Control system (SVN, GIT, HG, etc...), blocks by hours (8 to 5)     * Work station blocks by hours (8 to 5) or cumulative hours (up to 8 hrs/day)?     * Other(s)...   3. Or, maybe, do not hard-block this kind of things; but implement some **"Penalty System"** for **Unjustified Extra Hours**? * * * First: Tks all for your fast responses. @Baqueta (and others with similar questions): No they are not been paid for Extra Hours. My first advise to them was to review their estimates because _maybe_ they were underestimating. This was my favorite advise: > **If they have an interest in working overtime, remove it.** Development > isn't something you can do for 60 hours a week and stay productive, and > there are numerous studies out there that prove this. If overtime pay is the > issue, get rid of it and improve their base pay so they're getting what > they're worth. Also, I think that the root problem (for this team), is a combination of the following: >   1. The developers are being told what they must achieve in a sprint/aren't > being consulted on what's achievable/are being ignored when they say there's > too much work. >   2. The developers are consistently underestimating how much time tasks > will take/how many units of work are involved in each task. > **Summary:** I'll talk to the Team to review their estimates, and with the P.O. because I feel that _they are not being consulted_ about the scope, as you mentioned.