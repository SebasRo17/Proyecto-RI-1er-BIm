I've an HttpHandler, which allows users to login to a system by passing in an encrypted code. Inside the `ProcessRequest` it performs quite a few steps.   1. Retrieve the encrypted code from request (could be in Form/X-Header/Query)   2. Decrypt it. (Results in an JSON string)   3. Deserialize to a dynamic type   4. Determine the type of request, could be login/register/activate   5. Validate request   6. Load user subscription   7. Load User entity   8. If Req.Type = Login -> Login using FormsAuth   9. If Req.Type = Register -> Create user   10. If Req.Type = Register -> Send Activation email This goes on. Currently this is something like a long if/else statement which I'm trying to refactor. I'm thinking of using the Chain Of Responsibility pattern to convert these steps in if/else to a chain which executes sequentially. However, this will be different from original CoR as only last few steps will actually "handle" the request, first steps will just do some pre-processing and make stage for last steps to perform it's job. My main problem is, different steps in the chain will work on different input data. First few steps (Decryption, Deserialization, etc) will work on strings while latter half should ideally work on deserialized dynamic object. I don't like the way it sounds. Am I trying to fit a round lid to an square bottle? Is this not a scenario where CoR can/should be applied? Are there any other patterns/strategies I could use to solve such scenarios. I thought of using the decorator pattern as well, but that doesn't suite me very well, as I'd like to be able to switch certain steps in and out (ex: email activation) for some scenarios. NOTE: I've seen this question as well, but not sure if it answers my question.