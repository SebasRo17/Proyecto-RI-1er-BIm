I am currently developing a new library for RESTful web requests in Puredata, and am about to release version 1.0.0. This version will not implement all HTTP verbs, only GET, PUT, POST and DELETE. In the next version, this library will most likely include the other HTTP verbs for RESTful requests, PATCH, HEAD, OPTIONS, CONNECT, TRACE. I am using Semantic Versioning for the version numbers. In the specs it says: > Minor version Y (x.Y.z | x > 0) MUST be incremented if new, backwards > compatible functionality is introduced to the public API. It MUST be > incremented if any public API functionality is marked as deprecated. It MAY > be incremented if substantial new functionality or improvements are > introduced within the private code. It MAY include patch level changes. > Patch version MUST be reset to 0 when minor version is incremented. > > Major version X (X.y.z | X > 0) MUST be incremented if any backwards > incompatible changes are introduced to the public API. It MAY include minor > and patch level changes. Patch and minor version MUST be reset to 0 when > major version is incremented. Now, I am unsure what to after implementing the remaining verbs: On the one hand, the functionality is backwards compatible, as the already implemented functionality does not change. On the other hand, the functionality is changing, as issuing a HEAD request will not result in an error message on the console, but in an output. In the first case, only an increase to the minor version is needed, in the second case, the major version must be increased. What is the correct interpretation in this case?