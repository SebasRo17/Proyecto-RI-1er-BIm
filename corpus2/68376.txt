I'm designing a web application that is locally focused on JSON objects to do all the data stuff (and after that I would pass it to a server to cloud synchronize). However, somebody in an answer from another question suggested me to use Node.js to up/download data directly formatted as JSON. I read some stuff at the developer's website, and they claim it's as a web server. However, I'm not sure if it's just a data server (which makes sense to me) or it could be a replacement to Apache (I would go for no). I'm aware that your answers depend on the needs of my application, so, to sum up: _it should be able to dispatch data from a database ([No]SQL, whichever) and synchronize it back when I choose (either in the background or by direct action). The client-side should store the data as a mid-step (before syncing and after downloading the stuff) in JSON. Eventually in the future, it should need to synchronize across a bunch of accounts at the same time (you know, team modifications, just like Google Docs and so)._ And now, back to the question: **Which are the pros and cons of Node.js?** I'm pretty sure that the direct use of JSON objects from the server to the client and the _pushing_ calls are pretty good reasons to choose Node.js. However, I'm not sure if security (either my code or the data itself) or concurrent connections are mature enough, or I should go for a typical Apache with PHP files querying a MySQL, and in the early future poll instead of push (or find a pushing server). I know the question may sound easy to answer if you're already on one side (just node, node+Apache, just Apache), but these days I'm from nowhere. Thanks for your answers, mates.