In trying to understand basic image transformations, I have attempted to code my own image resize function that uses bilinear interpolation. I checked my work against Mma's `ImageResize[...,Resampling->"Bilinear"]` command and the results are similar, but not the same. The following minimal example demonstrates how I do not fully understand Mma's algorithm. Let `im={{1,.5,0}}`, a `3x1` picture of grayscale values. "Common sense" and knowledge of bilinear interpolation tell me that resizing this image to `5x1` should give `{{1,.75,.5,.25,0}}`. However, `ImageData[ImageResize[Image[{{1, .5, 0}}], {5, 1}, Resampling -> "Bilinear"]]` returns `{{1,.8,.5,.2,0}}`. Resizing to a `6x1` gives `{{1., 0.875, 0.625, 0.375, 0.125, 0.}},` where the middle 4 terms are equally spaced at `.25` apart, but the first and last two elements are spaced `0.125` apart. Resizing to a `9x1` gives `{{1., 1., 0.833333, 0.666667, 0.5, 0.333333, 0.166667, 0., 0.}},` which further confuses me as the first and last two entries are repeated. These results are similar to what MATLAB produces, though Octave (I am told) produces what I think should be right - where all entries are equally spaced apart from `1` down to `0.` I checked with two image editing programs, and one gave results similar to Mma and one gave results similar, but not exactly the same, to my "common sense." Can anyone explain how _Mathematica_ is implementing bilinear interpolation?