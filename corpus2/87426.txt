The benefit of a compiled application was that all the libraries and classes are loaded one time and sit waiting for input right? I come from a background working with PHP and the resources/classes that used are loaded each page request which puts an bad load on the server memory. For example, given the PHP core uses 1MB of memory, and a wordpress loads another 7MB of objects - you end up with 8MB being loaded _every request_. I assumed this was the same process for other scripting languages like Python and Ruby also. However, I have started looking at node.js (because JavaScript is so beautiful) and it seems that it is loaded _once_ (and whatever memory needed is only taken once) and then sits around waiting for requests sharing the classes it has loaded among any new threads (is that the right term?) so they don't have to re-load them. So PHP would take `8MB process * 10 requests = 80MB` for ten concurrent requests to wordpress. This sounds like node.js would take `8MB process + 10 requests = ~14MB`. **Is this really true? Are there any other scripting languages that do this?**