Let me give a bit background: As many of my answers imply, I often use the auto-parallelization (meaning, that _Mathematica_ distributes the calculation automatically over several cores when list-arguments are given) of `Compile` and I often compile to `"C"`. Therefore, in my packages there are things like the following               $adjustGraylevelFunc := ($adjustGraylevelFunc = Compile[{{values, _Real, 1}},       Map[Floor[255.0 * Min[Max[0.0, #], 1.0]^(0.25) + 0.5] &, values, {1}],       RuntimeAttributes -> {Listable}, Parallelization -> True,       RuntimeOptions -> "Speed", CompilationTarget -> "C"     ]);      When the package is loaded, this delayed assignment evaluates instantly, because the function is not compiled until first use. Therefore, the loading of the package is very fast, compared to when all functions in it would be compiled on the `Get` call. Evaluate the next line two times and see the effect               $adjustGraylevelFunc[RandomReal[1, {5, 5, 3}]]      However, I cannot assume that all people have a running C compile installed. Therefore, I would like a _short_ and _simple_ way to test whether I can use C-compiling. Without research, two possibilities come to my mind:   1. Loading the `CCompilerDriver`` package and use `CCompilers` to check. This has two drawbacks. I have to load an additional package which is not really used, except for this one tiny test. More importantly, an installed C-compiler does not indicate whether _Mathematica_ can really create library code with it. I have seen this often (especially on Windows machines) that installed C-compilers could not be used.   2. Compile a small test function which sets a package variable. Such a check could be as simple as              If[Quiet[Check[TrueQ[Compile[{}, 0, CompilationTarget -> "C"][] == 0], False]],       $compileTarget = CompilationTarget -> "C",       $compileTarget = CompilationTarget -> "MVM"     ]      Are there other possibilities? Maybe _Mathematica_ already does this kind of check on startup and the result can be accessed somehow?