I've heard the argument that you should use the most generic interface available so that you're not tied to a particular implementation of that interface. Does this logic apply to interfaces like _java.util.Collection_? I would much rather see something like the following:               List<Foo> getFoos()      or               Set<Foo> getFoos()      instead of               Collection<Foo> getFoos()      In the last case, I don't know what kind of data set I'm dealing with, whereas in the first two instances I can make some assumptions about ordering and uniqueness. Does _java.util.Collection_ have a usefulness outside of being a logical parent for both sets and lists? If you came across code that employed _Collection_ when doing a code review, how would you determine whether its usage is justified, and what suggestions would you make for its replacement with a more specific interface?