I'm refactoring existing code. Right now the code has a main server with a CLI and restful interface as seperate applications which communicate with the server via a home-brewed message passing package that they share. The system is written by a few hardware engineers with no real programing experience. It looks a bit ugly at times, but it has been working in this code for a year+ with minimal hassle, beyond limiting passing of a single serialzed object per command. We now have to implement JMS communication to interface with a third system and I jumped all on it. I'm certain were use JMS queues to push some information that really should be pushed as well. My first inclination was to replace the whole home-brew message passing system with JMS. However, the home-brew system is written for synchronous calls, with an obvious "I make a request, wait and send me a response" sort of behavior. JMS is really used for async calls. I could make JMS work for synchrnous calls with a little hacking, but that hacking needs to exist in three applications... My question is, would it be better to remove an existin system that seems to mostly work with JMS to have the extra robustness of an enterprise level system, and a single communicaton protocol, or is it best to leave well-enough alone and not waste programing time trying to remove the homegrown system that seems to work? Incidentally, as far as I know there is no built-in tool to make JMS handle sycnrhnous calls without my maintaining a state machine is there? If there is a way I can tel JMS to send responses to my requests the way a restful interface would work and JMS will handle the blocking and keeping of tate to make it happen without my writing it I would definately switch entirely to JMS.