Let's take Fidelity for example, one can set to sell a stock with a trailing stop lost of 2% of last price, or even more simpler, one can set a limited sell order at any given price. And it must have millions of such orders outstanding at any given time. On a high level, how did they implement logic so they can check all pending orders and fulfill them on a timely basis? (Or is that a core functionality brokers don't have to implement, but stock exchange have to provide? - in which case, my question will be, how does stock exchange implement such logic.) I assume you can simply check all orders repeatedly but that's very inefficient. For example -               while (true) {        foreach (user)           foreach (outstanding order in user)              if (should sell)                 sell;        wait(1)     }      Or, something like               while (true) {        foreach (stock)           foreach (order in stock with price = last)   // stored in a stock-to-order look up table              if (should sell)                 sell;        wait(1)     }      How would they sort or scale such an order among a large volume?