About 9 months ago, I asked a question about creating a service layer for my application. Unfortunately, in the ensuing time, no progress in that area was made, primarily due to time constraints. As such, I am now re-evaluating this idea, and have another which might be a stopgap with a quicker development time. I work with a large monolithic application that really is made up of two distinct applications (except for the fact that they do, and must, share data). This doesn't sit right with me, and I would like to try to start breaking them apart into separate entities, for a variety of reasons. For example, the test suite is huge (and therefore very slow), and changing something in one "subapp" shouldn't affect the other anyhow. Scalability is another consideration, as one "subapp" receives significantly more traffic than the other. When I approached this idea last year, I was thinking about separating all the data out into its own layer, that the subapps could query, but as mentioned this seems to be more of a commitment than I could sell at the moment. Instead, what I am thinking now would be to extract the models (or at least the shared models) into a gem (or, I suppose a Rails Engine) that is required by each subapp. The upside would be that each subapp could be developed independently, tested independently, and scaled independently. Also, once in place, it might be easier to rip out an external "model provider" and replace it with proper SOA (as at that time, everything will already be split up at least), than making the jump straight from monolithic application. The downsides I can think of center around ease-of-use. New code would require touching multiple repositories, and keeping mental context might be difficult. Similarly, my developers who are less experienced with design might have trouble finding the code they need, or keeping the separation intact. Of course, these can be mitigated with proper tools and code review, and the same downsides likely apply for SOA. Can anyone weigh in on if they think this is a good or bad idea? Is it worth taking the effort for what is clearly an "intermediary" step, rather than trying to find time to do it "properly" (whenever that will be). Are there any other downsides (or upsides) that I am not considering?