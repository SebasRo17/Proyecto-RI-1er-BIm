In the past few years, the languages I like to use are becoming more and more "functional". I now use languages that are a sort of "hybrid": C#, F#, Scala. I like to design my application using classes that correspond to the domain objects, and use functional features where this makes coding easier, more coincise and safer (especially when operating on collections or when passing functions). However the two worlds "clash" when coming to design patterns. The specific example I faced recently is the Observer pattern. I want a producer to notify some other code (the "consumers/observers", say a DB storage, a logger, and so on) when an item is created or changed. I initially did it "functionally" like this:               producer.foo(item => { updateItemInDb(item); insertLog(item) })     // calls the function passed as argument as an item is processed      But I'm now wondering if I should use a more "OO" approach:               interface IItemObserver {       onNotify(Item)     }     class DBObserver : IItemObserver ...     class LogObserver: IItemObserver ...          producer.addObserver(new DBObserver)     producer.addObserver(new LogObserver)     producer.foo() //calls observer in a loop      Which are the pro and con of the two approach? I once heard a FP guru say that design patterns are there only because of the limitations of the language, and that's why there are so few in functional languages. Maybe this could be an example of it? EDIT: In my particular scenario I don't need it, but.. how would you implement removal and addition of "observers" in the functional way? (I.e. how would you implement all the functionalities in the pattern?) Just passing a new function, for example?