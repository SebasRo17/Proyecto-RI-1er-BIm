So the issue I have as an undergraduate Software Engineering student, is the topic on which languages must one carry under their belt for future markets. I've been having this debate with teachers and students alike on which language takes the stand. The other debate I've been having is: what does it mean to be "knowledgeable" or "proficient" when it comes to a specific language? More specific:   1. Is it how well you can organize and structure and construct your code, based on the language's syntax, structure etc, but little knowledge about what's under the hood, e.g libraries ?   2. Is it how much experience you've had working with language: graphics, animation, complex projects, vast knowledge of libraries etc. Although this may seem trivial, if a person has never coded in a specific field, such as graphics, does that make him less worthy of a candidate for a job? Does it make the person less "knowledgeable", if you will, in that language? In other words, if you've been working with C# for most of your career, and suddenly are faced with a Java-based project, given that you fall under category 1 (above), would you be worthy to be part of this project? The reason I'm asking this, is because I'm trying to figure what to learn and to what extent. Learning to do animations won't do you any good if you're future career is going to be doing everything BUT that. Or are things in the real world not measured in that way? If I don't make sense, I do apologize as I'm trying to make sense of it myself!