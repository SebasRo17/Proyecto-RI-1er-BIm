Provided a starting string `initialString`, and a particular alphabet of allowed characters `{"A","B","C","D","E",...}`, how can I generate the set of all strings such that `EditDistance[initialString,setElement] = k`, where `k` is specified as desired? How can I do the same if I only consider `HammingDistance`? Rather, I should say, how do we do the above without generating all of the `Tuples` of relevant length, then checking each one for `EditDistance` or `HammingDistance`, which is probably the most naive way to proceed? Here's a partial example of that naive strategy (partial because for `EditDistance` we need to generate tuples of the string length of the initial string $\pm \space k$):               k = 1;          stringTestLength = 8;          alphabet = {"0", "1", "R"};          tuples = Map[StringJoin, Tuples[alphabet, stringTestLength]];          testString = "00000000"          distanceOneList = {};     editDistanceCounter = 0;     For[i = 1, i <= Length[tuples], i++,       If[EditDistance[tuples[[i]], testString] == k,         editDistanceCounter += 1;         distanceOneList = Append[distanceOneList, tuples[[i]]];         ];       ];          distanceOneList     editDistanceCounter      The output here is of course the following length sixteen array:               {"00000001", "0000000Q", "00000010", "000000Q0", "00000100", "00000Q00", "00001000", "0000Q000", "00010000", "000Q0000", "00100000", "00Q00000", "01000000", "0Q000000", "10000000", "Q0000000"};      The "real" answer for `EditDistance` is 1 (for the length 7 tuple set) + 19 (for the length 9 tuple set) + 16 (for the length 8 = length of the initial string) tuple set. Thus, there are 36 strings over this alphabet within `EditDistance k = 1` of the initial string `"00000000"`.