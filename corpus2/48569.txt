I've run into an issue where threading two lists with a generic function, `f`:               Thread[f[{{1,1}, {2, 2}, {3, 3}}, {4, 5, 6}]]      yields the wanted result: > >     {f[{1, 1}, 4], f[{2, 2}, 5], f[{3, 3}, 6]} >   However, if I define a function, `g`:               g[angle_, position_] := RotationMatrix[angle].position;      then the threading of those same two lists with `g` yields what seems like an inconsistent result: > >     {RotationMatrix[{1, 2, 3}].4, RotationMatrix[{1, 2, 3}].5, > RotationMatrix[{1, 2, 3}].6} >   It doesn't seem to thread the same way with the explicit function g as it does with the generic function `f`. It appears that it's treating the first thread as some type of atomic element and threading it individually to each element of the second list. This behavior _almost_ makes sense (as I don't quite understand how functions work at different sub-levels of lists yet), but it still doesn't explain the inconsistency between the generic and explicit functions.