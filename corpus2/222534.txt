I would like to know arguments for/against this concept. Technologies in use from the bottom up:   * MSSQL 2012 DB (exclusively accessed via sprocs)    * Entity Framework    * WCF Web Service    * ASP.NET Webforms Someone on my team would like to use Entity Framework to map the sprocs to ComplexTypes, and then use those ComplexTypes as DTOs, eventually using them as a view model to display on the page. His argument is that it's the fastest/easiest way and we'll get noticeable/valued changes more quickly. Also, he does not like the idea of the numerous mappings that would be necessary to go from DB -> Entity -> DTO -> ViewModel. Another consideration is, the majority of things from the DB are going one direction (db -> web), with only a few things actually needing to be changed on the UI and saved/persisted to the DB. To scope this question, there are thousands of previously existing sprocs written against poorly designed database structure (think tables that are 276 columns wide and single rows actually contain multiple entities). The poor structure isn't about to change soon because there are over 200 legacy apps written on top of it.