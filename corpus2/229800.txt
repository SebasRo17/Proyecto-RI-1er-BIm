I'm after a bit of OO design advice... I'm about to start developing a Windows application that communicates with an external machine via RS232. The machine has an onboard "system controller" consisting of registers (addresses). You can write a value to a register (e.g. to turn a pump on), or read a value from a register (e.g. to see if the pump is running). The app will have a config file detailing each register's settings, e.g. its address, whether it's 16- or 32-bit, a friendly "alias" (so other code can deal with "Pump XYZ" rather than address "50B3D124"), and a few other things. My first thought was to have a `Register` class reflecting these properties, plus `Read()` and `Write()` methods. But this raises the first question - should the `Read()` method have a return value, or should it populate a `Value` property on the class? Similarly, should the `Write()` method include a "valueToWrite" parameter, or should it write whatever value is currently held in the `Value` property? I could take this one step further (possibly even answering the above question) - instead of Read/Write methods, put the functionality into the `Value` property's getter and setter? Using a property for this purpose doesn't feel right though. I then started wondering if a `Register` class was even necessary, as its read/write functionality would be doing little more than calling Read/Write methods on a `SystemController` class, e.g.               long ReadRegister(string registerAlias);     void WriteRegister(string registerAlias, long value);      Why not just let the rest of the application read/write registers via the `SystemController` class? (I suspect I would still need some concept of a `Register` class, even if it's just to represent a register's config settings).