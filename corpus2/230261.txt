With the advent of "the web is the platform", JavaScript is fast becoming the most widely used programming language in the world. However, many tasks that are easy to accomplish in other modern languages are difficult or puzzling in JavaScript, because the language design is so "unique":   * JavaScript has a **prototype-based OOP system** ; most other modern languages have an inheritance-based one   * JavaScript has such a **weird typing system** that it doesn't fall into any of the standard categories (plenty of examples on WTFJS)   * JavaScript is **extremely lenient in how it parses the syntax** (semicolons are optional etc.) From a developer's point of view, most of these design decisions make developing in JavaScript harder. Conceptually, the JavaScript language seems one step behind Java, and two steps behind Python and Ruby. But since I don't believe that the people behind JavaScript are striving to create a language that is difficult to use, I can only reason that those design points must have something to do with the intended use of JavaScript as a scripting language for web sites, deeply connected to the DOM. **How (if at all) do these design points cater to the intended use cases of JavaScript? What reasoning is behind those seemingly random design decisions?**