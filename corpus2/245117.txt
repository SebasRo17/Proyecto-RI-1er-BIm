Considering favoring composition over inheritance and looking at various design patterns there are multiple approaches to modeling a domain. Say you have some Entities which are very similar in some respects, yet differ widely when it comes to technical implementations. To try portray the scenario here is the classic car example.               (Vehicles)     Car     Truck     Van      From a user perspective, they are all pretty much the same (all vehicles). From a **DDD** perspective, car, truck, van all share certain common state (number of tires, engine, ...) and certain behaviors (steering, changing speed, ...). However, they also have various state and behavior that is unique such as the Truck's bed, the van's internal storage, or the cars 5 seats. As time progresses there will be a fair amount of change. Validation would be different for certain things, and similar for others. Change speed, steer, etc. are similar, yet pull trailer is optional and even that differs between e.g. the Van and Truck. How would you design this to cope with change, yet remain DRY and adhering to the **DDD** mindset? Please explain how you would go about it (pseudo code?) and mention any design patterns or strategies you would try implement to model this (simple, yet dynamic) domain and which OO principles are being applied etc.