I see a lot of talk in the OOP world about principles and laws such as **Open/Close** and **Loose Coupling** , I can understand how they are so high valued, However I seem to have ran into a problem with applying these principles and laws once I start to include relational databases. For example purposes, if I have a application which we are able to separate well into multiple components( **Open/Close** design) and allow them to work with each other when if needed, I start to run into problems when trying to enforce **referential integrity**. If I enforce a relational setup, and enforce integrity through foreign keys and so on, the tables become dependent on each other, gradually my OOP application logic starts to fall apart and become one big system. I can of course remove all references to tables, but then I risk making data redundant and start to repeat code/data, which then goes against the Don't Repeat Yourself principle. Have you came across such problems before? If so how did you handle it? Perhaps there is a way to achieve both referential integrity and OOP open/close components. Thanks