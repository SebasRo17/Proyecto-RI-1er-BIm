How can one implement more efficiently/elegantly/memory savvily the following function which returns a matrix of all Euclidian distances between points in 3D within a cube of width `size`, while accounting for the periodicity of the cube?               Clear[PeriodicDistance];     PeriodicDistance[x_, size_: 1] := Module[{xm, ym, zm},     xm = {Outer[EuclideanDistance, x[[;; , 1]], x[[;; , 1]]],      size - Outer[EuclideanDistance, x[[;; , 1]], x[[;; , 1]]]};     xm = Map[Min[Abs[#]] &, Transpose[xm, {3, 1, 2}], {2}];     ym = {Outer[EuclideanDistance, x[[;; , 2]], x[[;; , 2]]],      size - Outer[EuclideanDistance, x[[;; , 2]], x[[;; , 2]]]};     ym = Map[Min[Abs[#]] &, Transpose[ym, {3, 1, 2}], {2}];     zm = {Outer[EuclideanDistance, x[[;; , 3]], x[[;; , 3]]],      size - Outer[EuclideanDistance, x[[;; , 3]], x[[;; , 3]]]};     zm = Map[Min[Abs[#]] &, Transpose[zm, {3, 1, 2}], {2}];     Sqrt[xm^2 + ym^2 + zm^2]     ]      As a side question, is it possible to carry out such computation within mathematica using e.g. octree so that it could be scaled up to millions on points? Thanks for your help