Where I currently work the general approach is - **avoid documentation as much as possible** **Only document if a different team will need it** just for clarification, I don't mean code-documentation - this we do, I mean all the documentation surrounding the design process - if it's UML or DB Schemas, class diagrams and word documents with specifications and the likes. I will list my Boss' reason to not document:   1. it's time consuming - focus on implementing   2. if design change - then the documentation should change, double trouble   3. in the end you just get hundreds of pages nobody wants to read, and nobody really edits so by time it will get out of date   4. Its a pain - nobody really wants to do it Now I realize we do work faster, but I also remember the time getting here and diving straight to some old code, not understanding anything. Actually, I still don't get most of this old code, and sometimes when I get in I see many patches from different developers trying to make small tweaks. I really think lack of documenting promotes these kind of patches and lack of system understanding in a broad sense. my question is: **How can we balance documentation so that we will promote continuous knowledge among the team and still be fast and efficient?**