A colleague and I were developing an ASP.NET MVC project and during this we created a new action method to handle one of our views. I initially started created the action like so:               public ActionResult Index(int id, int numberOfAssessments, int age)     {         // do stuff     }      However when I started writing we had a little discussion: **Him** : _"Why am I making these ints, they should all be strings"_ **Me** : _"Well they are ints so it makes more sense to make them strongly typed and so stop potential errors later in the code block"._ **Him** : _"Back what if we wanted to change the id to a alpha-numeric representation. We know have to change this signature everywhere where if it was a string it would already handle this"._ **Me** : _"It's not a string now and we don't have any plans for making it a string at this moment though"._ We didn't really decide explicitly what to do but it did get me thinking. **Question** : Should parameters to Action methods be all strings if that is going to make it more flexible in the future, or should they be specific to their type so that we can leverage MVC binding and error handling? What is the best or accepted practice in these situations. Are there too many considerations to take in for any definitive answer?