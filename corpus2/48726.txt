I'm trying to plot a 3d revolution plot from a set of 2d points. These data points form a 2d curve, then we rotate that curve around y axis and get a 3d surface. @J. M. has a well explained and very helpful post at here which deals exactly the problem I have. However, I tried to use the method, and get a 3d surface that is very rough and not smooth. Here is the 2d data points:               points=Uncompress["1:"];      and this is how it looks like               Graphics[Line[points], Frame -> True]      ![enter image description here](http://i.stack.imgur.com/nscUw.png) and then I use J. M.'s method(code copied and modified from here) (it will take about 10 seconds to run)               parametrizeCurve[pts_List, a : (_?NumericQ) : 1/2] :=       FoldList[Plus, 0, Normalize[(Norm /@ Differences[pts])^a, Total]] /;        MatrixQ[pts, NumericQ]          tvals = parametrizeCurve[points];          m = 3;     knots = Join[ConstantArray[0, m + 1], MovingAverage[ArrayPad[tvals, -1], m], ConstantArray[1, m + 1]];     bas = Table[BSplineBasis[{m, knots}, j - 1, tvals[[i]]], {i, Length[points]}, {j, Length[points]}];     ctrlpts = LinearSolve[bas, points];          circPoints = {{1, 0}, {1, 1}, {-1, 1}, {-1, 0}, {-1, -1}, {1, -1}, {1,0}};     circKnots = {0, 0, 0, 1/4, 1/2, 1/2, 3/4, 1, 1, 1};     circWts = {1, 1/2, 1/2, 1, 1/2, 1/2, 1};          wgpts = Map[Function[pt, Append[#1 pt, #2]], circPoints] & @@@ ctrlpts;     wgwts = ConstantArray[circWts, Length[ctrlpts]];      and then generate the 3d surface               Graphics3D[{Directive[EdgeForm[]],        BSplineSurface[wgpts, SplineClosed -> {False, True},         SplineDegree -> {3, 2}, SplineKnots -> {knots, circKnots},         SplineWeights -> wgwts]}, Boxed -> False]      ![enter image description here](http://i.stack.imgur.com/Ds37G.png) We can see that the surface is not smooth. It looks like the surface is composed by flat rings. So how can we make the surface smooth? Edit: I think this unsmoothness may come from my data rather than the rotation process, so I tried to smooth my data using something like               pointsSmooth=ExponentialMovingAverage[points, 1/20];      then I get the a smoother surface, but `ExponentialMovingAverage` seems to have removed the end points and there is a hole on the surface, which I don't want. ![enter image description here](http://i.stack.imgur.com/oyGlp.png) Also smoothing using a smooth constant like 1/20 largely modified the original data:               Graphics[{Red, Line[ExponentialMovingAverage[points, 1/20]], Blue,        Line[points]}, Frame -> True, AspectRatio -> 1]      ![enter image description here](http://i.stack.imgur.com/kyf6Z.png) So is it possible to smooth the data while keep the general shape so that it will give a better smooth surface? Or there are other ways to contract a smooth surface from the data?