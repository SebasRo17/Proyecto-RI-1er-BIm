In one of many anti-OOP rants on cat-v.org I found a passage by Joe Armstrong raising several objections against the OOP model, one of which was the following: > Objection 4 – Objects have private state > > State is the root of all evil. In particular functions with side effects > should be avoided. > > While state in programming languages is undesirable, in the real world state > abounds. I am highly interested in the state of my bank account, and when I > deposit or withdraw money from my bank I expect the state of my bank account > to be correctly updated. > > Given that state exists in the real world what facilities should programming > language provide for dealing with state? > > OOPLs say “hide the state from the programmer”. The states is hidden and > visible only through access functions. Conventional programming languages > (C, Pascal) say that the visibility of state variables is controlled by the > scope rules of the language. Pure declarative languages say that there is no > state. The global state of the system is carried into all functions and > comes out from all functions. Mechanisms like monads (for FPLs) and DCGs > (logic languages) are used to hide state from the programmer so they can > program “as if state didn’t matter” but have full access to the state of the > system should this be necessary. > > The “hide the state from the programmer” option chosen by OOPLs is the worse > possible choice. Instead of revealing the state and trying to find ways to > minimise the nuisance of state, they hide it away. What exactly is meant by this? I have very little low level or procedural experience, mostly OOP, so that probably explains how unfamiliar with this I am. And from a more modern standpoint, now that most of the Object-Oriented hysteria is passed (at least as far as I can tell), how accurate/relevant do you guys think that passage is? Thanks for your help.