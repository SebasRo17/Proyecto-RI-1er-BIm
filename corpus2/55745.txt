The impossibility of `MatchQ`-ing inside and `Association` MatchQ-ing Associations (MMA 10) explains a problem I have. I would like to convert hierarchical lists of rules to hierarchies of Associations. As an example:               rdata = {"a" -> {"b" -> 1, "c" -> {7, 8, 9}}, "d" -> 3}      Then               rdata /. List -> Association      returns > >     <|"a" -> <|"b" -> 1, "c" -> Association[7, 8, 9]|>, "d" -> 3|> >   where a value that happens to be a list is converted to something meaningless, which is not wanted. I have tried a variety of things like:               rdata /. x : {__Rule} :> Association[x]      or               (rdata /. List -> Association) /. x_Association /; NotAssociationQ[x] :> List @@ x      or               rdata /. {x__Rule} :> Association[x]      but none of them solves the problem.   I finally managed it by picking out the locations of all the lists of `Rule`s, as follows:               rtoA = (# /. {x__Rule} -> Association[x]) &     RulesToAssociation[rdata_] := Module[{pos},       pos = Drop[#, -1] & /@ Position[rdata, Rule];       Association @@ MapAt[rtoA, rdata, pos]]     RulesToAssociation[rdata]      which returns the desired result > >     <|"a" -> <|"b" -> 1, "c" -> {7, 8, 9}|>, "d" -> 3|> >   In my real application the rules list comes from the `Import` of a fairly complicated _JSON_ file. This solution seems to work but I'm not sure how robust it is. Does anyone have a better idea?