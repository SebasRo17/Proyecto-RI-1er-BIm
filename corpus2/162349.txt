I'm working on a rails application, and I've been pulling functionality out of my rails code and into pure ruby classes in lib/. I've found myself often writing classes like this:                class MailchimpIntegration          def subscribe_email(email, fname, lname)         Gibbon.list_subscribe(:id => NEWSLETTER_LIST_ID, :email_address => email,           :merge_vars => {'fname' => fname, 'lname' => lname },           :email_type => "html",  :double_optin => false, :send_welcome => false)       end            def unsubscribe_email(email)         Gibbon.list_unsubscribe(:id => NEWSLETTER_LIST_ID, :email_address => email)       end            def change_details(old_email, email, fname, lname)         Gibbon.list_update_member(:id => NEWSLETTER_LIST_ID, :email_address => old_email,           :merge_vars => {'email' => email, 'fname' => fname, 'lname' => lname })       end            def get_email_info(email)         Gibbon.list_member_info(:id => NEWSLETTER_LIST_ID, :email_address => [email])["data"].first       end     end      My question is: Should I change these methods to be class methods? It seems reasonable to do, as I'll probably end up calling these by just newing up a MailchimpIntegration class each time. However, I generally prefer to have instance methods as they can be more easily stubbed etc, although this seems to be less of an issue in ruby. I have several classes like this in my system, so I'd be keen to see what people think about this.