I have a time dependent matrix $M(t)$ of $L^n \times L^n$ size and want to write differential equations like `D[M[i,j][t],t] = H[i,j][t]` Here is my code:               L=3; n=3;     Rho[t_] = Table[M[i,j][t], {i,L^n}, {j,L^n}]; //Timing(*Rho2[t]//MatrixForm*)     (* {0.00100,Null} *)          Hop[t_, i_] =         Transpose[           Table[If[i == j, 1, Cos[t]], {i, {1}}, {j, L}]]         . Table[If[i == j, 1, Sin[t]], {i, {2}}, {j, L}]          I1[i_Integer] := I1[i]=IdentityMatrix[L^(i-1)];     I2[i_Integer] := I2[i]=IdentityMatrix[L^(n-i)];          H[t_] = Sum[FixedPoint[ArrayFlatten, I1[i] \[TensorProduct] Hop[t,i]          \[TensorProduct]I2[i]],{i,n}];          Rho1[t_] =         Table[             D[Rho[t],t][[i,j]] == H[t][[i,j]],             {i,L^n}, {j,L^n}]; // Timing(*Rho1[t]//MatrixForm*)     (* {0.33500,Null} *)      I can make it faster by using the `Parallel` command:               Rho2[t_] =         ParallelTable[             D[Rho[t],t][[i,j]] == H[t][[i,j]],             {i,L^n}, {j,L^n}]; // Timing(*Rho1[t]//MatrixForm*)     (* {0.08100,Null} *)      Is there any other way by using `Map` or `Transpose` to make it more efficient?