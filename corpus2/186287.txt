I read few articles about composite pattern and I want to know whether its applicable in following situation, I found that "A Composite Entity object can represent a coarse-grained object and all its related dependent objects"               public class PatientRegistrationDTO     {         public string RegistrationNo;         public string ID;         public DateTime AdmitDate;         }               public class PersonDTO     {          public string ID{ get; set; }          public string FullName { get; set; }          public string FirstName { get; set; }     }      by using these two objects I need to create               public class Patient       {             public string ID{ get; set; }             public string FullName { get; set; }             public DateTime AdmitDate;       }      Can I use Composite pattern for enterprise applications in here? Is it possible for me to add some class like below?               public class PatientDTO     {         public static Patient ConvertToEntity(PatientRegistrationDTO pregDTO, PersonDTO person)         {             Patient p = new Patient();             p.ID= pregDTO.ID;             p.FullName = person.FullName;             p.AdmitDate = pregDTO.AdmitDate;                  return p;         }     }