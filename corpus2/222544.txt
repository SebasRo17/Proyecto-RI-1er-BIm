We all would like to work with good, easy to maintain code that follows best practices and design patterns. However, reality is far from ideal. After all, content on sites like The Daily WTF is not made up, and we all sometimes have to maintain code that is, to put it mildly, subpar in quality. I have problem working with that code. Of course, working with bad code is difficult from technical standpoint, but I have, well, emotional problem. When I have to, say, fix tiny bug in poorly designed application, I tend to focus on how bad the overall application is instead of how to fix simple bug. I think "jeez how one can be so stupid to write this". I treat work as punishment rather than challenge. It impeds my work productivity. How can I change my mindset to focus on task instead of contemplating how bad is the codebase I have to deal with? In this question I assume that obvious solution, i.e. fixing the bad code is not possible/applicable: it works, is too big, fixing it woud take too much effort, it will be soon phased out, was written by your boss etc. TO CLARIFY: I do not want to use overall code quality to justify spoiling it further. I assume overall code quality is wide known concern, but there just happen to be tasks with higher priority. Let's consider following example:               print "<h1>", sql("SELECT title FROM news WHERE id='$ID'"), "</h1>"      There are two problems:   1. Data and presentation layers are mixed   2. Code is vulnerable to SQL injection `#1` hurts maintainability of codebase, but do not cause any bugs or feature loss by itself. Moreover, fixing it, for example by moving to a proper MVC architecture requires significant effort. `#2`, on the other hand, may lead to data loss and is trivial ro repair (by escaping `$ID`). My question is, provided you are _assigned_ to fix `#2`, how focus on task instead of wishing "those guys writing Ruby on Rails apps are so happy".