I've run into an unusual quirk in a program I'm writing, and I was trying to figure out if anyone knew the cause. Note that **fixing** the issue is easy enough. I just can't figure out why it is happening in the first place. I have a WinForms program written in _VB.NET_ that is displaying a subset of data. It contains a few labels that show numeric values (the `.Text` property of the labels are being assigned directly from the Decimal values). These numbers are being returned by a DLL I wrote in _C#_. The DLL calls a webservice which initially returns the values in question. It returns one as a string, the other as a decimal (I don't have any control over the webservice, I just consume it). The DLL assigns these to properties on an object (both of which are decimals) then returns that object back to the WinForm program that called the DLL. Obviously, there's a lot of other data being consumed from the webservice, but no other operations are happening which could modify these properties. So, the short version is:   * WinForm requests a new `Foo` from the DLL.   * DLL creates object `Foo`.   * DLL calls webservice, which returns `SomeOtherFoo`.              //Both Foo.Bar1 and Foo.Bar2 are decimals     Foo.Bar1 = decimal.Parse(SomeOtherFoo.Bar1); //SomeOtherFoo.Bar1 is a string equal to "2.9000"     Foo.Bar2 = SomeOtherFoo.Bar2; //SomeOtherFoo.Bar2 is a decimal equal to 2.9D        * DLL returns Foo to WinForm.              WinForm.lblMockLabelName1.Text = Foo.Bar1 //Inspecting Foo.Bar1 indicates my value is 2.9D     WinForm.lblMockLabelName2.Text = Foo.Bar2 //Inspecting Foo.Bar2 also indicates I'm 2.9D      So, what's the quirk? WinForm.lblMockLabelName1.Text displays as **"2.9000"** , whereas WinForm.lblMockLabelname2.Text displays as **"2.9"**. Now, everything I know about C# and VB indicates that the format of the string which was initially parsed into the decimal should have no bearing on the outcome of a later decimal.ToString() operation called on the same decimal. I would expect that `decimal.Parse(someDecimalString).ToString()` would return the string without any trailing zeroes. Everything I find online seems to corroborate this (there are countless Stack Overflow questions asking exactly the opposite...how to keep the formatting from the initial parsing). At the moment, I've just removed the trailing zeroes from the initial string that gets parsed, which has hidden the quirk. However, I'd love to know why it happens in the first place.