I have a File database table with the following columns: `Id (PK), Filename` And a Document database table with the following columns: `Id (PK), Name, Description, FileId (FK)` When a user wants to "save" a Document, my client-side JavaScript does it in two quick AJAX calls (in an attempt to be RESTful and save each resource individually):   1. Uploads the file they have selected. This will create a File record in the database, and the client will receive its Id in response.   2. Saves the Document with the given data (Name, FileId, etc.). This will create/update a Document record in the database. I have a service set up that allows a user to download a file, provided they specify its Id. However, there is some security logic in the service that checks whether a user has _permission_ to download the file, by checking whether there is at least one database "entity" associated with it that the user has access to. For example, a Document would be one such entity. So if a user can access a particular Document (determined by some business rules - but let's just say multiple users can access the same Document), they can download its file. This all seems fine on the surface, **but there is a problem**. The 2-step save process for a Document is all client-side Javascript, so a hacker could easily modify step 2 so that any arbitrary FileId is sent to the server. This would then associate that file with the Document, meaning afterwards the user will have permission to download it! What are some ways I can solve this problem?