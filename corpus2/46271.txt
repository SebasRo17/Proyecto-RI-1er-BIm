newbie here. I want to define a function that takes a ragged array and return another one, but how. Say, I want to define a simple function behaves like this `{var,itr} := {var,itr+1}`. `var` can be anything, while `itr` is an integer. First, I know, this will work. ` fun[{var_,itr_}] := {var,itr+1} ` But how to use `Function` to do this, because I want to generate a function that takes a ragged array. I tried this without a second thought. ` gen[d_]:=Function[{{var,itr}},{var,itr+d}] ` Which had failed, of course. It seems `Function` could only use a symbol or a list of symbol as its first parameter. **Appending** The reason is, I'm trying to get the iteration times of `NestWhile[f, expr, test]`, it seems `f` could only takes 1 parameter. So I need a function that will take a ragged array to do this. But I don't want to write such function every time, so I want to define a function that could generate one for me. **Completely example** Oringinally. ` NestWhile[#+1&, 1, #<100&] ` What I want to do is below. ` NestWhile[gen[#+1&],{1,0},#<100&] ` And `gen` is a function that generates a such function. Below is what I do. ` gen[fun_]:=Function[{var,itr},{fun[var],itr+1}] ` That's where I'm wrong.