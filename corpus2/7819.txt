I'd like to see how addition and xoring bitvectors mix together. To do this, I implemented (a primitive) vec_add and vec_xor:               makevar[x_, i_] := ToExpression[StringJoin[x, ToString[i]]]          ClearAll[ADD];     S[x_, y_, c_] := c + x - 2 c x + y - 2 c y - 2 x y + 4 c x y     Ca[x_, y_, c_] := c x + c y + x y - 2 c x y     ADD[fa_, fb_, i_] := Module[         {CC, SS, obit},         CC[0] := Ca[fa[0], fb[0], 0];         CC[n_] := Ca[fa[n], fb[n], CC[n - 1]];         SS[0] := S[fa[0], fb[0], 0];         SS[n_] := S[fa[n], fb[n], CC[n - 1]];         obit := SS[i];         Return[obit];         ]     VECADD[fa_, fb_, n_] := Module[         {o},         o := Table[ADD[fa, fb, i], {i, 0, n}];         Return[o];         ]     xor[a_, b_] := a + b - 2*a*b     BITS := 8     xt := Table[{makevar["x", i]}, {i, 0, BITS}]     yt := Table[{makevar["y", i]}, {i, 0, BITS}]          fx[n_] := xt[[n + 1]]     fy[n_] := yt[[n + 1]]          t1 := VECADD[fx, fy, BITS]      fa[n], fb[n] are functions that return n-th variable from a table. The SS and CC functions are SUM/CARRY respectively. Clearly, this doesn't look like a good implementation so my question is: how to do this nicely? It would be perfect to overload operators for ADD/XOR and just write (a+b)^(b+c). EDIT: If the implementation isn't clear: the SS/CC functions implement a FULL ADDER