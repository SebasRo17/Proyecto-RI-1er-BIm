REST API frameworks like Python Eve handle concurrency control via an entity tag. This ensures that several clients which loaded the same resource will not overwrite the changes of each other, because they will find a modified entity tag upon write and be able to update their copy before writing. This is critical for web applications where a page or resource can remain for a lot of time in the browser before being sent back with some changes. My question is about one or several backend services integrating in this scenario. If a service is modifying some resources, it should take concurrency with clients into account. The possible ways that i see are:   1. Just update resources through the REST API   2. Reuse the concurrency logic from the REST framework in order to coherently modify the resources The first solution seems to be quite inefficient especially in the case of bulk updates, while the second builds a strong constraint among different components, which would have to be written in the same language, use the same version of the framework, etcetera. Albeit this seems to be a quite common use case, I could not find documentation about the recommended way to do it, even in other frameworks like Django or Rails. I see this as a common architectural question: how should services and REST APIs integrate in an ideal way, with respect to concurrency? I hope that it is fine to ask a cross technology question, since we may benefit from learning how the problem is handled in several frameworks.