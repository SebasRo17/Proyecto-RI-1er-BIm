I've posted questions pertaining to this issue before, but they've all tackled different aspects of the problem (Just so you know that I'm not reposting the same question to get more answers). So, in a nutshell, here is my problem: I have a `Timeline` class, which has-a `Content` interface member variable. The Timeline manages WHEN the content gets activated. There is also a `Trigger` class, which gets a reference to the `Timeline` class and call the `Timeline`'s `play()` methods at certain times (like when the user hits spacebar). To organize the `Triggers` and the `Timeline` together, they're bound together in a class called `Cue` (which is the only class the rest of the program cares about). This leads me to a design problem, since this `Cue` class is used so often throughout my code, it would be a pain to change it later. Because of the Law of Demeter, should I not make getters and setters for the `timeline` and `triggers` member variables, and instead copy many of their functions into `Cue` (and just call the functions of the member variables in turn). That way, other classes won't know the inner workings of it?