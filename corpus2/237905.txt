I was reading a proposal for value types in Java, and I came across this sentence: "Object identity serves only to support mutability, where an objectâ€™s state can be mutated but remains the same intrinsic object." From what I understand about object identity (though I'm likely wrong, in which case please correct me), it's the idea of your variable acting as a pointer or reference to an object located elsewhere in memory (usually on the heap, a la Java and C#). So what would this have to do with object mutability? Does this imply that for example, instantiated objects on the stack in C++ are immutable? I'm having trouble seeing the link here.