I wrote a simulation to approximate the law of a stochastic differential equation via a Monte Carlo method using the stochastic Euler scheme. Then I thought, it would be a good idea to speed up things by means of parallelization, but although I think it is an easy example (and similar problems were discussed here lots of times), none of my attempts was successful. First the code (you can find some explanations below):               (* Parameters of the SDE and radius of the Ball *)     T = 10; sigma = 3.0; z = 1; R = 5*10^6;          (* w denotes the noise and h the step size *)     Euler[x_, w_, h_] := x - x^3*h + sigma*w;          (* Noise is a List of Lists of random numbers *)     MCEuler[h_, StepsMC_, Noise_] := Quiet[Check[       Total[Table[        Fold[ Euler[#1, #2, h] &, z, Noise[[i]]]        , {i, 1, StepsMC}]       ]/StepsMC,     Indeterminate     ]];          MCEulerMT[h_, StepsMC_, Noise_] :=       Total[Table[Catch[Fold[If[Abs[Euler[#1, #2, h]] >= R, Throw[0],          Euler[#1, #2, h]] &, z, Noise[[i]]]], {i, 1, StepsMC}]]/StepsMC;          Comparison[h_, StepsMC_] := Module[{Noise},       Noise = Table[RandomReal[NormalDistribution[0, Sqrt[h]], T/h], {StepsMC}];       Return[{StepsMC, h, MCEuler[h, StepsMC, Noise], MCEulerMT[h, StepsMC, Noise]}];     ];          Result =       Table[Table[Comparison[h, StepsMC], {h, {2^0, 2^-2, 2^-4, 2^-6}}], {StepsMC, {10^3}}]      MCEuler implements the Monte Carlo Simulation using the standard stochastic Euler scheme. Since the coefficients of the stochastic differential equations doesn't fulfill standard assumptions like Lipschitz-continuity, it is possible, that some "discrete trajectories" explode. Therefore, I added the `Quiet` and `Check` commands. MCEulerMT uses again the Euler scheme, but if some "discrete trajectory" leaves a ball of radius R, we set the value to zero. The Comparison-method should test both procedures on the same noise. Then I replaced the Table-Commands in MCEuler, MCEulerMT and the last line of the code (I didn't use it creating the noise, but I think there are no side- effects!?) by "ParallelTable" and the runtime was awful. It was much slower than the code above, and I tried other implementations and commands (e.g. Parallelize) but I didn't make any progress. Perhaps here are some guys, who could explain me, what's wrong about my idea, and how I could fix it.