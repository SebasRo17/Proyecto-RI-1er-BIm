**A short summary of how we do branch managing** : From the MASTER branch one or many feature branches can be made (for mid to long term development), when deploy-able changes have been merged to MASTER then release branches are made. Release branches are kept for maintaining deployed version until the next release occurs and they are merged to PRODUCTION in order to build TAGS which are deployed to Live Environments. **First verse of the question** : Is it actually necessary to have the PRODUCTION branch step? Surely TAGS can reliably be created off a Release Branch at the same point that it would have been merged to the PRODUCTION branch? If they are worth having then the **second verse of the question** : Would it be a suitable source control to have more than one PRODUCTION branch while having just one MASTER? **The motivation** : We will soon have an internal project starting that will (hopefully) be a "white-label" product we can use to replace three separate internal applications we use currently (as well as for any future applications). It would be one back-end, one library, one API but three teams using it and managing their own User Interfaces and adding reusable functionality to the back-end. A thought was the project could be one repo with one MASTER, various feature branches for any of the teams as they need to develop things (mid- to long term). But should we then have a PRODUCTION branch for each of the three 'versions' of the product or just TAG off from the respective Release branches? So that they could deploy independently from each others' sprints and requirements (as long as they do not break the shared infrastructure). PS: Each of the three applications deploy to independent Live environments and used by different departments in the company. PPS: If you know of any other versioning-flows which would be better suited please tell me! [EDIT - After reading jhr's answer] Think of this as one BIG project/application. But instead of having one BIG team working on the sections used by 3 departments (each with their own required UI flows and features etc) we may be split into three teams, each working on a department's features, on the same code base (repo). This is not a technical spec question per-say but rather one for opinion, experience or preference etc.