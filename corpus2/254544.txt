I'm currently in the class modeling phase of my project. Real life Scenario: Let's say I have a Project that is composed of Main Components and each Main Component is composed of Sub Components and each of Sub Components use multiple Materials. I created a class based on the entities:               public class Project     {         public List<MainComponent> MainComponents {get; set;}         // other properties..     }          public class MainComponent     {         public List<SubComponent> SubComponents {get;set;}         //other properties..     }          public class SubComponents     {         public List<Material> Materials {get;set;}         //other properties..     }          public class Material     {         //properties..     }      However I will be having a hard time accessing a Material because I will have to go through a nested `foreach` loop Let's say projectAlpha is an existing Instance of a Project class               foreach(MainComponent mainComponent in projectAlpha.MainComponents)     {         foreach(SubComponent subComponent in mainComponent)         {             foreach(Material material in subComponent.Materials)             {                 //do something with material here..             }         }     }      What are efficient ways of designing a class that are based on entities that are designed like this? (Avoiding nested loops).