Consider the following "if cast":               class A     { public void f1() { ... } }     class B : A { public void f2() { ... } }          A a = foo(); // might return A or B          if ( a is B ) {         //  Inside block, implicitly "redeclare" a as type B         //  It's B, go for it         a.f2();         //  Wouldn't compile.         a = new A();     }      We don't enter the block unless `a` is a `B`, therefore within the block, the compiler treats `a` exactly as if it had been declared as type `B`. You could assign null to it in the block if it's a reference type, but it would be a compile-time error to assign `new A()` to it, for example (thanks @ThomasEding for bringing up that question). Anything that could break that assumption that `a` is `B`, could just as easily break the following legal C# as well:               if ( a is B ) {         B b = a as B;              b.f2();     }      The former looks to me like syntactic sugar for the latter. Even if this feature makes sense, I'm sure Anders Hjelberg's lads have more useful features to implement. I'm just wondering if it's a worse idea than I think it is. **UPDATE** A serious objection would be that the feature as described adds semantics without adding syntax: From one version of the language to the next, the meaning of the above block would change significantly. It would be more tolerable with a new keyword. But then you'd be adding a new keyword.