I have a question about object oriented design that is not specific to Python but since my code is in Python, I tagged it as such. How do I decide which of my classes should be responsible for implementing certain functionality that may affect more than one class? What are some good guidelines >(if any) or considerations? In the below example of a _Town_ class, the behavior of moving to/from a town is split up among the _Town_ class and _Inhabitant_ class. The code works. But I am wondering if there are compelling reasons to assign this behavior to only one class, e.g. allow the _Town_ method _addpeople_ to update the _Inhabitant_ attribute _town_ so it's possible to track each inhabitant's place of residence. Just trying to get a sense of what would be good practice or smart object oriented design.               class Town():              def __init__(self,name):             self.name = name             self.inhab = []              def addpeople(self,person):             self.inhab.append(person)              def removepeople(self, person):             self.inhab.remove(person)               class Inhabitant():              def __init__(self,name):             self.name = name             self.town = ""              def move(self,town):             if self.town:                 print self.name,"is moving from",self.town.name, "to",town.name                 self.town.removepeople(self)             else:                 print self.name,"is moving to",town.name             self.town = town             town.addpeople(self)