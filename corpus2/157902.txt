> One of the few things that most software developers agree on is that you > shouldn't rely on code to work correctly unless you test it. If you don't > test it, it may have hidden bugs that are only going to cause you more work > down the road. I understand how to test my normal code, but **how should I test my test code to make sure it can effectively find and report errors when they are present?** I personally have been stupid enough to write erroneous test cases that would pass when they should not have, thus defeating the purpose of my writing tests in the first place. Fortunately, I found and fixed the errors in time, but according to testing mantra it seems like no test suite would be complete without having its own set of tests to make sure it worked. It seems to me that the best way to do this would be to make sure the test fails for buggy code.* If I spend 2 minutes alternately adding bugs to the code and making sure it fails, I should have an acceptable degree of confidence that the tests 'work'. This brings me to my second question: **What are good ways to introduce bugs to make sure that they are caught by the test cases?** Should I just randomly comment out statements, make sure the wrong branch of an `if-else` gets run by negating its condition, and change the execution order of code with side-effects, etc., until I'm satisfied my tests will catch _most_ common bugs? How do professional developers validate that their tests actually do what they're supposed to do? Do they just assume the tests work, or do they take the time to test them as well? If so how do they test the tests? I'm not suggesting the people should spend so much time testing their tests and then testing the tests for their tests that they never actually write the real code, but I've done stupid enough things that I feel like I could benefit from a bit of 'meta-testing', and was curious about the best way to go about it. :D * I could check to see if the test passes when testing 'bug-free' code, but using the code as a spec for the test seem quite backwards...