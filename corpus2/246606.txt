I am currently porting a large library (150+ files, 15k+ LOC) from Javascript to Java. Fortunately, the original library is already very object-oriented, so this has largely been a matter of reformulating the existing code into classes. Truth be told, I'm a bit of a novice and this is one of my first large scale projects. In the past, I've written, tested, and debugged projects incrementally - get something running, add a feature, test that it still runs, and repeat. In this case, I can't compile the entire library until it's nearly completed, which makes checking calls between classes difficult and time- consuming. After importing the project into Intellij, I was able to perform some static code analysis to check for straightforward errors in syntax and style, but this is often insufficient and does not catch many of the errors the compiler would, especially those outside of the scope of a single file. What is the best plan of attack here? I've attempted to break it down into smaller, compilable pieces, but the code is tightly coupled for the most part, so this may not reduce the problem much.