I understand most of the basic Git/Github concepts by now, however I still have trouble understanding the bigger picture. These are some things that I have managed to get working so far:   * Push commits   * Work with branches   * Integrate Github with Travis CI, a continuous integration system   * Via Travis CI, automatically build on every commit to master and put the release as a ZIP on Github under releases. However I have only worked on alpha/beta versions of projects so far, so I've never seen versioned releases in practice yet. Thus I want to learn more about versioning, maintaining separate versions, hotfixing the versions, etc. How would I ensure that the following things happen:   * Have different versions of my project, for example version 1.1.0 and 2.0.0   * Have the ability to push hotfixes on the versions, sort of bumping the version to 1.1.1 or 2.0.1, etc.   * Make a continuous integration system build that version automatically on commit and if succeeds, then publish a release for that specific version. I am doubting between the following options:   * Do I need to use tags for every version? If so, how can a continuous integration system build releases automatically?   * Should I create branches for every version? If so, would that not create a whole ton of branches (like an 1.1 and a 2.0 branch, hotfixes go onto that branch of course)   * How would I specify the version number? Is it okay to have a configuration file that specifies the version number, or are there smarter ways around it? In this case it would be a Java project, if that matters.