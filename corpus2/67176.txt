How should I keep up to date with the ever-changing Rails community? I have been trying to learn Rails off and on for a year now and the brick wall I keep running into is the fact that I'm trying to balance learning most of the Rails' community best practices and they keep changing direction. For example, I obviously need to learn Rails and Ruby (I've done some work with both but I've forgotten a bit). When I was using it before it was still Rails 2.3.4, so now Rails 3 is out and changed some things; I'm not sure if Ruby 1.9 had any major changes. I like my version control, and the Rails world is solidly behind Git, so I have to use Git (again I've used it before but not recently). I want to make sure my app is solid so I want to write tests; the new trend in Rails seems to be to use RSpec or similar BDD frameworks instead of the built-in test framework, and mocks/factories instead of fixtures. I'm having a very hard time keeping up with all the things I need to pick up to be successful using Rails, and it seems that it's always changing and I end up frustrated because I will choose something, then when I research how to do something I find loads of blog posts saying don't use it anymore, use this new thing instead. So I have to ask how much this matters? If I'm going to be revisiting Rails I obviously want to be using Rails 3. I've used Git so I can stick with that. Should I even bother with RSpec/HAML/SASS/whatever else the "cognoscenti" is hyping or should I just focus on mastering the framework and stick with the built-in stuff (e.g. use the built-in ERB engine for HTML, Test::Unit for testing, Fixtures instead of mocks/factories, etc) as much as possible (stupid thing to ask, I know, but the way my brain works I am always torn between doing the easiest thing that will benefit me and doing things the "right" way as the really high-end guys suggest) so I can focus on actually developing my application? Should I extend that to Javascript as well, meaning should I just say screw it and use RJS or is that actually worth using jQuery (I've used jQuery for my .NET work a fair bit although I'm by no means an expert) due to the benefits? I would like to "nail down" a stack that I can use and not deviate but again I find myself constantly wondering "If the top Rails guys are using XXX now am I hurting myself by not switching to it myself?" For example I'd like to just decide 100% on:   * Framework: Rails (obviously) Source   * Control: Git Test Framework:   * Test::Unit w/Factories HTML Engine:   * ERB Javascript Framework: jQuery but whenever I try this there's a voice in the back of my heading saying I'm "doing it wrong" and should be using RSpec/Shoulda/HAML/library du jour instead.