First of all I would like to make it clear that this is not a language-X- versus-language-Y question to determine which is better. I have been using Java for a long time and I intend to keep using it. Parallel to this, I am currently learning Scala with great interest: apart from minor things that take some getting used to my impression is that I can really work very well in this language. My question is: how does software written in Scala compare to software written in Java in terms of execution speed and memory consumption? Of course, this is a difficult question to answer in general, but I would expect that higher level constructs such as pattern matching, higher-order functions, etc, introduce some overhead. However, my current experience in Scala is limited to small examples under 50 lines of code and I haven't run any benchmarks up to now. So, I have no real data. If it turned out that Scala _does have_ some overhead wrt Java, does it make sense to have mixed Scala / Java projects, where one codes the more complex parts in Scala and the performance-critical parts in Java? Is this a common practice? **EDIT 1** I have run a small benchmark: build a list of integers, multiply each integer by two and put it in a new list, print the resulting list. I wrote a Java implementation (Java 6) and a Scala implementation (Scala 2.9). I have run both on Eclipse Indigo under Ubuntu 10.04. The results are comparable: 480 ms for Java and 493 ms for Scala (averaged over 100 iterations). Here are the snippets I have used.               // Java     public static void main(String[] args)     {         long total = 0;         final int maxCount = 100;         for (int count = 0; count < maxCount; count++)         {             final long t1 = System.currentTimeMillis();                  final int max = 20000;             final List<Integer> list = new ArrayList<Integer>();             for (int index = 1; index <= max; index++)             {                 list.add(index);             }                  final List<Integer> doub = new ArrayList<Integer>();             for (Integer value : list)             {                 doub.add(value * 2);             }                  for (Integer value : doub)             {                 System.out.println(value);             }                  final long t2 = System.currentTimeMillis();                  System.out.println("Elapsed milliseconds: " + (t2 - t1));             total += t2 - t1;         }              System.out.println("Average milliseconds: " + (total / maxCount));     }          // Scala     def main(args: Array[String])     {         var total: Long = 0         val maxCount    = 100         for (i <- 1 to maxCount)         {             val t1   = System.currentTimeMillis()             val list = (1 to 20000) toList             val doub = list map { n: Int => 2 * n }                  doub foreach ( println )                  val t2 = System.currentTimeMillis()                  println("Elapsed milliseconds: " + (t2 - t1))             total = total + (t2 - t1)         }              println("Average milliseconds: " + (total / maxCount))     }      So, in this case it seems that the Scala overhead (using range, map, lambda) is really minimal, which is not far from the information provided by World Engineer. Maybe there are other Scala constructs that should be used with care because they are particularly _heavy_ to execute? **EDIT 2** Some of you pointed out that the println's in the inner loops take up most of the execution time. I have removed them and set the size of the lists to 100000 instead of 20000. The resulting average was 88 ms for Java and 49 ms for Scala.