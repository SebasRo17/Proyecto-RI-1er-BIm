I was talking to a technical boss yesterday. Its about a project in C++ that depends on opencv and he wanted to include a specific opencv version into the svn and keep using this version ignoring any updates which I disagreed with.We had a heated discussion about that. His arguments:   1. Everything has to be delivered into one package and we can't ask the client to install external libraries.   2. We depend on a fixed version so that new updates of opencv won't screw our code.   3. We can't guarantee that within a version update, ex from 3.2.buildx to 3.2.buildy.   4. Buildy the function signatures won't change. My arguments:   1. True everything has to be delivered to the client as one package,but that's what build scripts are for. They download the external libraries and create a bundle.   2. Within updates of the same version 3.2.buildx to 3.2.buildy its impossible that a signature change, unless it is a really crappy framework, which isn't the case with opencv.   3. We deprive ourselves from new updates and features of that library.   4. If there's a bug in the version we took, and even if there's a bug fix later, we won't be able to get that fix.   5. Its simply ineffiecient and anti design to depend on a certain version/build of an external library as it makes our project difficult in the future to adopt to new changes. So I'd like to know what you guys think. Does it really make sense to include a specific version of external library in our svn and keep using it ignoring all updates?