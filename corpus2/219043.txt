In some of my code, I have a static factory similar to this:               public class SomeFactory {              // Static class         private SomeFactory() {...}              public static Foo createFoo() {...}              public static Foo createFooerFoo() {...}     }      During a code review, it was proposed that this should be a singleton and injected. So, it should look like this:               public class SomeFactory {              public SomeFactory() {}              public Foo createFoo() {...}              public Foo createFooerFoo() {...}     }      A few things to highlight:   * Both factories are stateless.   * The only difference between the methods are their scopes (instance vs static). The implementations are the same.   * Foo is a bean that does not have an interface. The arguments I had for going static was:   * The class is stateless, therefore doesn't need to be instantiated   * It seems more natural to be able to call a static method than to have to instantiate a factory The arguments for the factory as a singleton was:   * Its good to inject everything   * Despite the statelessness of the factory, testing is easier with injection (easy to mock)   * It should be mocked when testing the consumer I have some serious issues with the singleton approach since it seems to suggest that no methods should ever be static. It also seems to suggest that utilities such as `StringUtils` should be wrapped and injected, which seems silly. Lastly, it implies that I'll need to mock the factory at some point, which doesn't seem right. I can't think of when I'd need to mock the factory. What does the community think? While I don't like the singleton approach, I don't seem to have a terribly strong argument against it.