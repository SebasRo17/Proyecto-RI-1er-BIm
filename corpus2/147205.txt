Reading about the Google v Oracle case, I came across these questions (apparently from the presiding Judge) > ...   >  Is it agreed that the following is true, at least as of 1996? > > The following were the core Java Application Programming Interface: > java.lang, java.util and java.io. > > Does the Java programming language refer to or require any method, class or > package outside the above three?   >  ... source: Groklaw There are obviously lots of legal ramifications, Google and Oracle probably disagree on some points, and **I don't care**. Leave law to the lawyers. However, I suspect there's an interesting bit of history in here. My question is (as someone who first did any Java coding around 2001 in version 1.3), in version 1.0 of Java was anything required outside of `java.lang`, `java.util`, and `java.io` to compile a valid Java program? As an example (using C# 5.0), the `await` keyword is dependent upon ~~`Task<T>`~~ `GetAwaiter()` (amongst other things). The compiler couldn't function to spec without that class. Equivalently, were there any core runtime features (like ClassLoader*) that were dependent on other packages? I'll admit I ask out of curiosity, exactly what is necessary for minimum- viable Java (the language, ignoring all the legal bits around it) is interesting. *I am assuming that ClassLoader was even a feature in Java 1.0, it's part of the spec in 7.0 and presumably many earlier versions.