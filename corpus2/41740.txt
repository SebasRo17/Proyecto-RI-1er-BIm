"Abstract class" and "interface" are similar concepts, with interface being the more abstract of the two. One differentiating factor is that abstract classes provide method implementations for derived classes when needed. In C#, however, this differentiating factor has been reduced by the recent introduction of extension methods, which enable implementations to be provided for interface methods. Another differentiating factor is that a class can inherit only one abstract class (i.e., there is no multiple inheritance), but it can implement multiple interfaces. This makes interfaces less restrictive and more flexible. **So, in C#, when should we use abstract classes instead of interfaces with extension methods?** A notable example of the interface + extension method model is LINQ, where query functionality is provided for any type that implements `IEnumerable` via a multitude of extension methods.