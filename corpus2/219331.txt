According to WikiPedia "Some languages do not support mixins on the language level, but can easily mimic them by copying methods from one object to another at runtime, thereby "borrowing" the mixin's methods. Note that this is also possible with statically typed languages, but it requires constructing a new object with the extended set of methods." 1) LinqExtensions static library functions ( .Where() ) applied to collections of regular objects (int[]) that implement IEnumerable do essentially this. They use a _new object_ (LinqExtensions) to add the _extended set of methods_ ( Where(),etc ). Conclusion. LinqExtensions are mixins with all classes that support IEnumerable. 2) According to WikiPedia "In object-oriented programming languages, a mixin is a class which contains a combination of methods from other classes. How such combination is done depends on language, but it is not by inheritance. If a combination contains all methods of combined classes it is equivalent to multiple inheritance." By mixing **ALL** methods of classes that support IEnumerable ( List.HashCode, List.ToString, other List hierarchy baseline capabilities ), with **ALL** methods from the LinqExtensions static library ( .Where(), Max(), etc ) **an equivalent to multiple inheritance** is produced. An equivalent to multiple inheritance is produced, yes or no?