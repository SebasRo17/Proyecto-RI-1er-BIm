I am doing an Invoice application implementing MVC pattern design in Java. One of the features my application has to have is showing all info about a Customer: Personal data, Calls, Invoices, TelephoneNumber, etc. My model, which has access to all this data, has to pass and assemble this to pass it to the Controller. Then, my Controller will show it via my View.   I have thought how to make the connection between the Model and the Controller in a pretty way. One of my alternatives is to add every DTO (TelephoneNumber, CustomerData), and Collection of DTO (Collection, Collection, and more) to a Collection. IMHO, this is not a good approach to solve this problem well, because I am creating a lot of dependency in the Controller when receiving this information and casting according to the order of assembling. As I wanted to find another solution, I had the idea of creating a class (Bundle) which wraps me customer's data and then, in Controller's code, I use the methods of this class to get the data I need to display. My question is about if my solution is good or it would be another which will be better. I am not quite sure if the Bundle class will be a solution or just crap.   Thanks.