I am working through the course _Programming Paradigms via Mathematica_. One of the homework exercises for the section _Recursion I: Passing the Buck_ is as follows: > Use recursion to partition a list: "recurPartition[L_List,k_Integer]" should > return the same thing as "Partition[L,k]". Of course, don't use > "Partition[]". The following additional limitations are also applied: > First, use of a repetition function ("Map[]", "MapThread[]", "Nest[]", > "NestList[]", "Fold[]", "FoldList[]", "Table[]", "Apply[]", and so on, being > our "adverbs") will generally disqualify a method as purely recursive, for > the repetition is accomplished externally from the nested function calls. > Also, repetition accomplished with a loop structure, such as a "While[]", a > "Do[]", or some other repetition command, is explicitly forbidden. Here was my code, following many edits:               Clear[recurPartition]     recurPartition[{}, k_] := {}     recurPartition[L_List, k_Integer] :=       If[Length[L] >= k, {Take[L, k], recurPartition[Drop[L, k], k]}]     recurPartition[{1, 2, 3, 4, 5, 6}, 2]      Which produced the following output: > {{1, 2}, {{3, 4}, {{5, 6}, {}}}} By contrast `Partition[{1, 2, 3, 4, 5, 6}, 2]` would produce: > {{1, 2}, {3, 4}, {5, 6}} I can't figure out what I should have done differently and would appreciate some guidance.