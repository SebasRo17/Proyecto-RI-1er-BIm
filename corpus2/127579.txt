I am trying to make my code more robust and I have been reading about unit testing, but I find it very hard to find an actual useful use. For instance, the Wikipedia example:               public class TestAdder {         public void testSum() {             Adder adder = new AdderImpl();             assert(adder.add(1, 1) == 2);             assert(adder.add(1, 2) == 3);             assert(adder.add(2, 2) == 4);             assert(adder.add(0, 0) == 0);             assert(adder.add(-1, -2) == -3);             assert(adder.add(-1, 1) == 0);             assert(adder.add(1234, 988) == 2222);         }     }      I feel that this test is totally useless, because you are required to manually compute the wanted result and test it, I feel like a better unit test here would be               assert(adder.add(a, b) == (a+b));      but then this is just coding the function itself in the test. Can someone provide me with an example where unit testing is actually useful? FYI I am currently coding mostly "procedural" functions that take ~10 booleans and a few ints and give me an int result based on this, I feel like the only unit testing I could do would be to simply re-code the algorithm in the test. edit: I should also have precised this is while porting (possibly badly designed) ruby code (that I didn't make)