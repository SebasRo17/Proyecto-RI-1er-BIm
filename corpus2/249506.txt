I've been trying to implement the GSC algorithm in C++, however I need help with clarifying the definition: http://en.wikipedia.org/wiki/GSP_Algorithm >   1. GSP Algorithm makes multiple database passes. In the first pass, all > single items (1-sequences) are counted > Basically this means that you have something like this? :               std::vector<int> numberSequence = GenerateSequence();          std::vector<in> numberSequenceFrequence;     numberSequenceFrequence.resize(numberSequence .size());          for(int i = 0; i < numberSequence.size(); i++)     {         numberSequenceFrequence[i] = CountNumberOccurenceInVector(numberSequence[i]);     }      And then for part 2: >   1. A set of candidate 2-sequences are formed, and another pass is made to > identify their frequency. > But how do you construct the set of candidate 2-sequences? I'm not exactly sure what they mean. Does this mean that **X** number of elements from `numberSequence` with the lowest counts in `numberSequenceFrequence` are removed from `numberSequence` and the process is repeated? According to this: > Candidate Generation. Given the set of frequent (k-1)-frequent sequences > F(k-1), the candidates for the next pass are generated by joining F(k-1) > with itself. A pruning phase eliminates any sequence, at least one of whose > subsequences is not frequent. Does it mean popping the last element of the vector each step? > A pruning phase eliminates any sequence, at least one of whose subsequences > is not frequent. This part implies I need to be working with vectors of vectors, so I think I've completely missed the point. And finally: > Support Counting. Normally, a hash treeâ€“based search is employed for > efficient support counting. Finally non-maximal frequent sequences are > removed. The definition of **nonmaximal** means something that is not comparable, but an `int` is always comparable to an `int`: http://en.wiktionary.org/wiki/nonmaximal