Designing a programming language, I'm including the `**` exponentiation operator. In Fortran and Python, the two languages I know of which have this operator, it binds more tightly than unary minus, which makes sense for practicality as well as tradition. It should bind more loosely than the prefix increment operator `++` because the other way wouldn't make sense. Thus the usual single precedence level for the prefix unary operators gets split in two, which is fine as far as it goes. I'm also including the logical and bitwise _not_ operators `!` and `~`. Which side of the split should they fall on? Should they bind more loosely or tightly than `**`? I haven't been able to find either objective reason or relevant precedent for either choice. Is there any of either that I'm missing? Failing that, which would people find less surprising?