I am writing a simulation which unites discrete event and continuous system simulation. For example, you can use State Charts, System Dynamics and Queues side by side. Theese will then reduced to DEVS, a mathematically defined and executable modelling formalism. Now I became stuck on how to organize the systems architecture. I'd like to use some kind of MVC pattern, so I thought lets make a state machine model, controller and state diagram, lets make a system dynamics model, controller and a stock and flow visualization, and so on. But these are also expressible via the DEVS model but it would be a bit complicated doing the translation to DEVS on the fly inside the controller ... So, should i have multiple models and representations which are then reduced to DEVS (base model) OR should I work directly with the DEVS base, so that e.g. the state machine is visualized as a state diagram, but internally it is automatically converted to the base model. Which architecture would you recommend?