I will try to simplify my problem. Let say I have a collection (more specifically a List) with different types of elements, for explanation purpose let say we have objects "Person" with different age of birth and an ID. I will represent a person like this: `{<id>,<year>}` At some point, I want to get a sub list of all the persons born on 1988 and 1989, and **if** there is **no** persons born on that years, I want all the persons born in 1990:               [{1,1988},{2,1988},{3,1982},{4,1995},{5,1989},{6,1989},{7,1990}] ==>      [{1,1988},{2,1988},{5,1989},{6,1989}]               [{1,1990},{2,1981},{3,1983},{4,1993},{5,1981},{6,1989},{7,1990}] ==>     [{6,1989}]          [{1,1990},{2,1981},{3,1983},{4,1993},{5,1981},{6,1985},{7,1990}] ==>     [{1,1990},{7,1990}]      ## Option 0 At first I though about using the filter method on the apache commons library, but this wouldn't work as I would need to know about all the element on the list to decide if a particular element goes on the sub list or not, so I ruled this option out. ## Option 1 Then, the simplest way I can see to do this is loop through the list looking for elements that match the first condition (1988 or 1989), and then, if I can't find any, loop again to look for elements that match the second condition (1900). But I don't like this because you have to loop through the list more than once. ## Option 2 The other option I can think about is to loop through the list only once, and to have two different sub list, one with the elements that match the first condition and another with the elements that match the second condition. At the end, if the first sub list is empty, we return the second sub list. Which one of these two is better (more efficient)?   Which would you use and why?   Do you think there is a better solution than these?