I was thinking on how current key-value storages implement "expire date" for items. Currently I have 2 variants for that in my mind:   1. they don't do anything (keep expired data), and only do check when you do, for example, GET by some key. The problem here is that if you are limited in memory, expired items won't be deleted.   2. they keep additional data structures to be able to get "earliest to expire". I see it can be done with something like this:              storage_data = dict(key -> [value, expire_timestamp])     expire_tree = SomeBinaryLikeTree(expire_timestamp -> [keys])