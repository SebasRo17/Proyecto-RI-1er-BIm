I am having trouble compiling a function that uses the `MapIndexed` function on the second level. The compilation runs fine, but at evaluation time I get an error that I cannot explain right now. The following scenario shows the problem: First I define a compiled version and a noncompiled version of a simple funciton using `MapIndexed`:               MapIndexedCompileTest = Compile[{{list1, _Real, 2}, {list2, _Real, 2}},                                MapIndexed[list1[[#2[[1]], #2[[2]]]] + #1 &, list2, {2}]]          MapIndexedTest[list1_, list2_] := MapIndexed[list1[[#2[[1]], #2[[2]]]] + #1 &, list2, {2}]      `MapIndexedTest` shows that the function works just fine:               MapIndexedTest[{{1, 2}, {1, 2}}, {{1, 2}, {1, 2}}]      But `MapIndexedCompiledTest` yields the error: > >     "CompiledFunction::cflist: Nontensor object generated; proceeding with >      uncompiled evaluation" >   when evaluated the same way:               MapIndexedCompileTest[{{1, 2}, {1, 2}}, {{1, 2}, {1, 2}}]      Does anybody know what goes wrong? **New intel I just got when reading answers:** The problem seems to be that the index represented by the second argument is not correct when using compiled. To see that I defined the following functions, which should just return the current index inside the Mapping function:               MapIndexedGiveIndexCompiled = Compile[{{p, _Real, 2}}, MapIndexed[#2 & , p, {2}]];     MapIndexedGiveIndex[p_] := MapIndexed[#2 & , p, {2}];      The above functions should obviously return the same results when used on a 2 rank tensor, but they do not, `MapIndexedGiveIndexCompiled` delivers the wrong result:               MapIndexedGiveIndexCompiled[{{1, 2}, {3, 4}}]      delivers: > {{{1}, {2}}, {{1}, {2}}} while `MapIndexedGiveIndex` returns the expected result: > {{{1, 1}, {1, 2}}, {{2, 1}, {2, 2}}} This should explain why `[[2]]` is not working, but overall it looks like a bug to me.