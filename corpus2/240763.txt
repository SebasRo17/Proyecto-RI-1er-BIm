I am currently writing an application that isn't huge but will be used through-out my company of 200+ people and external customers about projects we are working on (not software projects), but there are a fair amount of business rules, along with the implied ones that go with creating, verifying, and maintaining user accounts. Semi-often I find myself writing code like this               If (A)     {        foo();     }     else If (B)     {        foo2();     }     else     {        throw new exception("Should not happen because XYZ");     }      or               foo()     {        //do stuff            if (D == F)        {            throw new exception("Method should not be called if D==F, you forgot how to use this method");        }            //do other stuff     }      Is this code-smell because it implies that my code might break? Is this good a programming practice for debugging when things WILL go wrong? Is this being paranoid?