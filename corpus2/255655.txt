I am trying to run an estimate on how long this quick find algorithm takes on Union Find type problems. Here is the code:               public int find(int p) {       return id[p];     }          public void union(int p, int q) {       int pID = find(p);       int qID = find(q);       if (pID == qID) return;            for(int i = 0; i < id.length; i++) {         if (id[i] == pID) id[i] == qID;       count--;     }      Note: count variable is based on the id length. So basically, what is the minimum time this algorithm would take (in days) that be able to solve a problem with `10^9` sites, `10^6` input pairs, on a computer capable of executing `10^9` instructions per second? Assume that each iteration of the inner for loop takes 10 instructions. My Work: Since there are `10^6` input pairs and `10^9` sites, I just multiplied them together and got `10^15` instructions that needs to be completed. After dividing by 10 and the number of seconds in a day, I got roughly around 11 days to complete. Is there any variables that I am missing? I have noticed that it said "minimum". I guess in minimum case, the array would be accessed `(N + N-1 + N-2 ... 1)` (Input Length).