I've read about DDD for days now and need help with this sample design. All the rules of DDD make me very confused to how I'm supposed to build anything at all when domain objects are not allowed to show methods to the application layer; where else to orchestrate behaviour? Repositories are not allowed to be injected into entities and entities themselves must thus work on state. Then an entity needs to know something else from the domain, but other entity objects are not allowed to be injected either? Some of these things makes sense to me but some don't. I've yet to find good examples of how to build a whole feature as every example is about Orders and Products, repeating the other examples over and over. I learn best by reading examples and have tried to build a feature using the information I've gained about DDD this far. I need your help to point out what I do wrong and how to fix it, most preferably with code as "I would not recomment doing X and Y" is very hard to understand in a context where everything is just vaguely defined already. If I can't inject an entity into another it would be easier to see how to do it properly. In my example there are users and moderators. A moderator can ban users, but with a business rule: only 3 per day. I did an attempt at setting up a class diagram to show the relationships (code below): ![enter image description here](http://i.stack.imgur.com/lVonP.png)               interface iUser     {         public function getUserId();         public function getUsername();     }          class User implements iUser     {         protected $_id;         protected $_username;              public function __construct(UserId $user_id, Username $username)         {             $this->_id          = $user_id;             $this->_username    = $username;         }              public function getUserId()         {             return $this->_id;         }              public function getUsername()         {             return $this->_username;         }     }          class Moderator extends User     {         protected $_ban_count;         protected $_last_ban_date;              public function __construct(UserBanCount $ban_count, SimpleDate $last_ban_date)         {             $this->_ban_count       = $ban_count;             $this->_last_ban_date   = $last_ban_date;         }              public function banUser(iUser &$user, iBannedUser &$banned_user)         {             if (! $this->_isAllowedToBan()) {                 throw new DomainException('You are not allowed to ban more users today.');             }                  if (date('d.m.Y') != $this->_last_ban_date->getValue()) {                 $this->_ban_count = 0;             }                  $this->_ban_count++;                  $date_banned        = date('d.m.Y');             $expiration_date    = date('d.m.Y', strtotime('+1 week'));                  $banned_user->add($user->getUserId(), new SimpleDate($date_banned), new SimpleDate($expiration_date));         }              protected function _isAllowedToBan()         {             if ($this->_ban_count >= 3 AND date('d.m.Y') == $this->_last_ban_date->getValue()) {                 return false;             }                  return true;         }     }          interface iBannedUser     {         public function add(UserId $user_id, SimpleDate $date_banned, SimpleDate $expiration_date);         public function remove();     }          class BannedUser implements iBannedUser     {         protected $_user_id;         protected $_date_banned;         protected $_expiration_date;              public function __construct(UserId $user_id, SimpleDate $date_banned, SimpleDate $expiration_date)         {             $this->_user_id         = $user_id;             $this->_date_banned     = $date_banned;             $this->_expiration_date = $expiration_date;         }              public function add(UserId $user_id, SimpleDate $date_banned, SimpleDate $expiration_date)         {             $this->_user_id         = $user_id;             $this->_date_banned     = $date_banned;             $this->_expiration_date = $expiration_date;         }              public function remove()         {             $this->_user_id         = '';             $this->_date_banned     = '';             $this->_expiration_date = '';         }     }          // Gathers objects     $user_repo = new UserRepository();     $evil_user = $user_repo->findById(123);          $moderator_repo = new ModeratorRepository();     $moderator = $moderator_repo->findById(1337);          $banned_user_factory = new BannedUserFactory();     $banned_user = $banned_user_factory->build();          // Performs ban     $moderator->banUser($evil_user, $banned_user);          // Saves objects to database     $user_repo->store($evil_user);     $moderator_repo->store($moderator);          $banned_user_repo = new BannedUserRepository();     $banned_user_repo->store($banned_user);      Should the User entitity have a `'is_banned'` field which can be checked with `$user->isBanned();`? How to remove a ban? I have no idea.