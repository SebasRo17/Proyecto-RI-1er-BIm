I recently implemented for fun Conway's Game of Life in Javascript (actually coffeescript but same thing). Since javascript can be used as a functional language I was trying to stay to that end of the spectrum. I was not happy with my results. I am a fairly good OO programmer and my solution smacked of same-old-same-old. So long question short: what is the (pseudocode) functional style of doing it? Here is Pseudocode for my attempt:               class Node       update: (board) ->         get number_of_alive_neighbors from board         get this_is_alive from board         if this_is_alive and number_of_alive_neighbors < 2 then die         if this_is_alive and number_of_alive_neighbors > 3 then die         if not this_is_alive and number_of_alive_neighbors == 3 then alive          class NodeLocations       at: (x, y) -> return node value at x,y       of: (node) -> return x,y of node          class Board       getNeighbors: (node) ->         use node_locations to check 8 neighbors         around node and return count          nodes = for 1..100 new Node     state = new NodeState(nodes)     locations = new NodeLocations(nodes)     board = new Board(locations, state)          executeRound:       state = clone state       accumulated_changes = for n in nodes n.update(board)       apply accumulated_changes to state       board = new Board(locations, state)