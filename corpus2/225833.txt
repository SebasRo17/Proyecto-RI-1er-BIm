I have an IP network and want to automatically find a free IP address to provision a new server. Due to frequent server additions/removals the used IPs might be quite fragmented over the whole address space. To effectively check if an IP is free I have to ping and ask the DNS system, which is considered expensive. So I want to minimise these lookups and store some information about used/free addresses in a relational database. This should give me good candidates and I only have to do a few such lookups. The question is how to do so in a most simple and efficient way that SQL can handle? One first idea was to generate all possible addresses and store them in the database. Used ones just get the use column set to true. Then just make a SQL query that returns like the first 10 addresses where the use value is false. Looks fairly simple to get a new address. But this approach could become a problem for big networks. Also I have to generate and remove unused addresses for every network change. If I only store the used addresses I don't see how to make a query that returns me free addresses. I have to retrieve the whole list and implement the logic on the client. But I was hoping I could off-load that to the database server. Are there any better alternatives? Scan for free addresses regularly and only store a few ones? Sort the list of used addresses, maybe in a tree like structure where the non-leafs hold some information about free addresses in their child segment? These solutions seem rather complicated to me. I would prefer a simple algorithm without any extra running scanners/generators, and then in the worst case I have to fall back to some other method. Is there anything SQL can provide me with? Like give me the smallest free element in a sorted list of integers? Cheers.