I have run across several times recently where I must match a sequence that is cyclically repeating. For example, with the sequence,               Sequence[a, b, c]      how would I write a pattern that matched against               a     a, b     a, b, c     a, b, c, a      etc., but not any of the surrounding elements? For a two element sequence comprising the entire list, this is straightforward, if a bit verbose:               MatchQ[#, {a | PatternSequence[a, b] .., a | PatternSequence[]}] & /@       {{a}, {a, b}, {a, b, a}, {a, b, a, b, a, b, a}}     (* {True, True, True, True} *)      But, this does not work when the sequence is part of a bigger list, e.g.               Cases[      {q, r, a, b, a, b, a, s, e, f, a},       x : PatternSequence[a|(PatternSequence[a, b] ..), a | PatternSequence[]] :> {x},       Infinity     ]     (* {{a}, {a}, {a}, {a}} *)      Even reversing the initial element to `(PatternSequence[a, b] ..)|a` returns the same thing. So, my questions are:   1. How can I write the pattern so it extracts parts of larger lists that may contain other elements?   2. How can I generalize the pattern to match against larger cyclically repeating sequences?