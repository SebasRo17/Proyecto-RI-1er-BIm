A few open source projects currently collect Apache-2.0 Contributor License Agreements, but distribute the software under a license such as MIT, BSD, or GPLv2. According to the following chart (from David Wheeler), these licenses are incompatible with the Apache-2.0 License. ![enter image description here](http://i.stack.imgur.com/DRGMY.png) The FSF explains why Apache-2.0 is incompatible with GPLv2: > Please note that this license is not compatible with GPL version 2, because > it has some requirements that are not in that GPL version. These include > certain patent termination and indemnification provisions. By the same logic, Apache-2.0 is incompatible with permissive licenses such as MIT and BSD, which also lack these patent clauses. The Apache-2.0 CLA is not identical to the Apache-2.0 License, but the patent termination clause appears to be equivalent modulo the roles Contributor->Project versus Project->User. A CLA defines an "inbound" license giving certain permissions to the project. If the CLA terms match the outbound license, then it merely formalizes what Red Hat counsel, Richard Fontana, calls "inbound=outbound". If the CLA grants _more_ privileges to the project than appear in the outbound license (e.g., Apache-2.0 inbound, GPLv3 outbound), then it becomes a "maximalist" CLA, which are considered harmful by folks like Fontana and Bradley Kuhn, due to the asymmetric relationship between project leadership and contributors. But my question is about projects doing the opposite, distributing the software under a license that is _more permissive_ than the CLA. I have been assured that corporate lawyers looked over the CLAs, but I have been unable to get an explanation for why they believe it is okay to combine with the outbound license. **Is anyone aware of a legal theory under which a CLA defining an inbound license that is incompatible with the outbound license would be acceptable?** I think the project may be taking on liability by distributing under terms that they do not have permission for (according to the CLA). Using no CLA at all would be safer for the project due to the "inbound=outbound" convention, which could be made explicit via a DCO.