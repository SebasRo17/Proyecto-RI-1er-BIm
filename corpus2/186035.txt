I've come to understand that long before Haskell, O'Caml or LISP, higher order functions were an academic research subject and in mathematics, SchÃ¶nfinkel (in 1967) and Haskell Curry (in 1968) already applied techniques such as currying, but that was before it was available in any programming language. Scheme, according to Wikipedia, was the first language to introduce proper higher-order functions as first-class citizens, but is there anybody we can attribute the original idea to? Maybe Alonzo Church, who invented lambda calculus in the 1930's? More specifically, who coined the following definition, which I saw in various paraphrases around in several books and online resources? > A function is considered to be of higher order when it takes another > function as an argument or when it returns a function. Any function not > taking functions as arguments or as return types is called a first order > function.