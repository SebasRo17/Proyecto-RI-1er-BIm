One of the "Service Locator" pattern drawbacks is that a caller can be misleaded about dependencies of a callee. Ok, but what if I put dependencies as generic parameters at a class level:               class Node<T> where T : ISomeInterface, new()     {       ISomeInterface obj       public Node()       {          obj = new T();       }     }      I have found a couple of opinions here. But I want a discussion to be continued. The most significant counterargument is that dependency injecting using generics makes late binding unavailable. But who cares in most cases? What if my app does not need this feature? I want to find some solid counterarguments. p.s. new() constraint is not necessary, as you understand.