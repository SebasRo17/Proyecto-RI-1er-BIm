Some higher-order functions for operating on lists or arrays have been repeatedly adopted or reinvented. The functions **map** , **fold** [ **l** | **r** ], and **filter** are found together in several programming languages, such as Scheme, ML, and Python, that don't seem to have a common ancestor. I'm going with these three names to keep the question focused. To show that the names are not universal, here is a sampling of names for equivalent functionality in other languages. C++ has _transform_ instead of _map_ and _remove_if_ instead of _filter_ (reversing the meaning of the predicate). Lisp has _mapcar_ instead of _map_ , _remove-if-not_ instead of _filter_ , and _reduce_ instead of _fold_ (Some modern Lisp variants have _map_ but this appears to be a derived form.) C# uses _Select_ instead of _map_ and _Where_ instead of _filter_. C#'s names came from SQL via LINQ, and despite the name changes, their functionality was influenced by Haskell, which was itself influenced by ML. The names _map_ , _fold_ , and _filter_ are widespread, but not universal. This suggests that they were borrowed from an influential source into other contemporary languages. Where did these function names come from?