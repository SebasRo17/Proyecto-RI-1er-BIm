Let's say we're making a parser. One implementation could be:               public sealed class Parser1     {         public string Parse(string text)         {            ...         }     }      Or we could pass the text to the constructor instead:               public sealed class Parser2     {         public Parser2(string text)         {            this.text = text;         }              public string Parse()         {            ...         }     }      Usage is simple in both cases, but what does it _mean_ to enable parameter input to `Parser1`, compared to the other? What message have I sent to a fellow programmer, when they look at the API? Also, are there any technical advantages/disadvantages in certain cases? Another question comes up when I realize that an interface would be quite meaningless in the second implementation:               public interface IParser     {         string Parse();     }      ...where an interface on the first one could serve at least some purpose. Does that signify anything in particular, that a class is "interfaceable" or not?