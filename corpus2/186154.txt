**Background / The Problem** I need to make a (large) application with a certain set of _core_ functionality, and certain functionality for multiple _clients_ within it. Each client has _different_ requirements and while they may share some functionality, I need to separate the code for each client, so a change to one won't affect others. Each client section of the application should also inherit some features from the core application. Ideally I would like to separate the databases for each client too. In terms of a user system, _core_ users should be able to have access to each client's functionality, but _client_ users should only be able to interact with their specific client section of the site. **Current Solution** Each client has its own subdomain and the MVC can override the core's MVC files IF they exist. In a nutshell, my custom MVC's autoloader checks the client directory for the matching M,V, or C file when a subdomain is present in the URL and loads that particular client's file INSTEAD OF the core file. It's an override ability in a sense. **Questions**   1. Am I solving this problem in a way that would be considered good practice in terms of software design?   2. If I were to use an existing PHP Framework (I would like to), how might I go about setting it up to solve this problem? Specifically I have been looking at Yii and CodeIgniter. Thanks in advance! **Update:** I have discovered a design pattern called HMVC (Hierarchical MVC) and it seems to be essentially what I have described. I see that Kohana 3 is built using it and that Codeigniter has an extension that allows it.