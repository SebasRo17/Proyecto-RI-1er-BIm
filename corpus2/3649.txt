When using `Orthogonalize[]` one can specify which definition of "inner product" is to be used. For example, `Orthogonalize[vectors,Dot]` presupposes that all values are real. When dealing with non-hermitian matrices, the "inner product" definition (apparently) needs to be $|z|^2 = zz$, just like with real numbers. Consider this matrix:               mat = {{0. + 1.002 I, -1}, {-1, -I}}      The following code does not orthonormalize the eigenvectors of my matrix, as can be seen:               Orthogonalize[N[Eigenvectors[mat]]];     N[%[[1]].%[[2]]]          -2.90378*10^-15 + 0.999 I      The `Dot` option does not work, it presents me with an error > Orthogonalize::ornfa: The second argument Dot is not an inner product > function, which always should return a number or symbol. If its two numeric > arguments are the same, it should return a non-negative real number. which is not surprising, since I have complex entries. How can I force `Orthogonalize[]` to use the real number inner product definition, without `Dot`? _I'm using the words "inner product", but feel free to correct me as it seems they're not appropriate. Maybe I should say "involution"?_ **EDIT** As there's a bounty on this question, I'm leaving it open until the last day it's effective. Thanks for the answers. After talking with my supervisor, turns out we'll have to "manually" orthonormalize eigenvectors _that share the same eigenvalue_ , since the eigenvectors are otherwise already orthonormal, as in this case: ![Mathematica graphics](http://i.stack.imgur.com/zcPGN.png)