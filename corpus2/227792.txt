This is the very first time that I think I want to create a program which really uses OOP principles and I want to do it in the most effective and efficient way. First of all we are given this (great) riddle : > 100 prisoners are imprisoned in solitary cells. Each cell is windowless and > soundproof. There's a central living room with one light bulb; the bulb is > initially off. No prisoner can see the light bulb from his or her own cell. > Each day, the warden picks a prisoner equally at random, and that prisoner > visits the central living room; at the end of the day the prisoner is > returned to his cell. While in the living room, the prisoner can toggle the > bulb if he or she wishes. Also, the prisoner has the option of asserting the > claim that all 100 prisoners have been to the living room. If this assertion > is false (that is, some prisoners still haven't been to the living room), > all 100 prisoners will be shot for their stupidity. However, if it is indeed > true, all prisoners are set free and inducted into MENSA, since the world > can always use more smart people. Thus, the assertion should only be made if > the prisoner is 100% certain of its validity. > > Before this whole procedure begins, the prisoners are allowed to get > together in the courtyard to discuss a plan. What is the optimal plan they > can agree on, so that eventually, someone will make a correct assertion? So I've got a solution and I want to create a program to run it. I want my program to be as modular as possible, meaning that if I find a better solution, I don't to have to rewrite all of my code. I think OOP is really suited for this. Here's what I've done so far:   * A **Main** class : where I just run several games to test solutions   * A **Game** class : which just runs one 'attempt'. It has a 'jail' (which is just an array of prisoners), a day counter and other useful stuffs.   * And a **Prisoner** class : which just represent one single prisoner. After thinking this through, the only things that one prisoner can do are _changing the light where they're picked_ and _stating (or not) that everyone has come in the room_. In the solution I've come up with, I have two types on Prisoner. What I've done is that I just implemented my Prisoner class with the most classic type of Prisoner and created a subclass which simply overrides methods from the Prisoner class. Right now, I see two possible improvements if I want to reuse my code :   * make the **Prisoner** class a Java interface, so that when I want to create a new type, I'd just have to implement a Prisoner. But the main issue is that I mostly have 'typical prisoners', a lot of people having the same pattern. Do I just create a implementation 'Classic_Prisoner' ?   * creating a **Behaviour** class which handles what behaviour one Prisoner have given a single situation. But isn't just the same problem ? I mean I would also have to create one Behaviour subclass for each type of Prisoner I'm considering. What to do to have the cleanest code there and be able to reuse it when the time comes?