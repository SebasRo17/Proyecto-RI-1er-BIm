There are column-oriented databases, like HBase or Teradata. My question is whether there are programming language implementations that store the objests/structures in a similar format when they are stored in a collection. (To improve cache locality, possibly reduce memory footprint in some cases.) (Searching did not reveal these kind of languages for me, but probably I tried the wrong keywords.) What I mean is the following (in Scala syntax):               case class Data(a: Int, b: Array[Byte])     var someData: Array[Data] = new Array(Data(2, new Array[Byte](2)), Data(3, new Array[Byte](3))     var someData(1).b(1) = 1.toByte      Could be represented as the following: Array for the `a` parts:               ---     |2|     ---     |3|     ---      Array for the `b` parts:               ---------------               -----     |byteArrayRef0|   ------>     |0|0|     ---------------               -----   -------     |byteArrayRef1|   ----------------->  |0|1|0|     ---------------                       -------      Object passing would require more stack space with this structure, for example to pass the only second element from `someData` it would require to pass the the array references (for the `a` and the `b` parts) and the index `1`. Probably this is its main drawback, but I guess there might be clever solutions, or this would not be a huge problem. (The arrays should be internal implementation details, not visible, unless the container for `someData` is immutable. Probably arrays are not ideal for this kind of data primitives, but an ArrayList implementation would be better.) **Edit:** This question is not about whether this is a good/bad idea or which implementation is better. This is only about existence -or probably also announced plans, articles if they exists. (I am quite busy currently, so cannot check the suggestions yet, but will check them during the weekend.) If my question is not clear, I'll try to reformulate it.