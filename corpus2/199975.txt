I've inherited a hosted system (system "A") which can be used to manage products, inventory, and orders, and can send those products to various third- parties. Quite simply, system "A" doesn't work. The product and inventory systems are slow, convoluted, and buggy. The third-party integration doesn't work at all. The code is an unholy, spaghettied mess, so fixing things is not simple. My task is to try and salvage the system into something usable, and my original plan was to just refactor, refactor, and refactor some more until the system worked. However, my company also has a separate system (system "B") that we use to build e-commerce websites. Among other things, system "B" can manage products, inventory, and orders as well - just in a lesser capacity in some cases. System "B" is also constantly being worked on and updated by a team. My new plan is to essentially throw out system "A", and re-create it based on system "B". Since my refactors would have eventually restructured system "A" entirely, I figure I can just save time by starting over with a different, existing framework. However, if I go that route, I would still have to re-code the third party integration, and minor functionality that system "A" has and system "B" does not. Right now, system "A" is basically defunct - nobody is really using it, so I do have the freedom of a slightly extended rewrite period if I choose. Is this a good idea, or should I stick with the original plan of refactoring system "A"?