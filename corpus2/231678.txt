We currently have an interface for an asynchronous video decoder that runs on its own thread. Basically you feed it some data and it'll eventually call you back on its thread through some events, like so (not real code):               interface IDecoder {         void Decode(parameters);         event FrameReady;         event FrameDropped;         // lots of other possibilities     }      It's a bit messy and I'd like to convert it to a C#5, async-based version, something like:               interface IDecoder {         async Task<DecodeResult> DecodeAsync(parameters);     }      Where DecodeResult will have all the information that would have otherwise been transmitted via events, and the client code can be written cleanly with async/await rather than a mess of event handlers and thread dispatching. It is my understanding that Tasks are scheduled on the ThreadPool by default. We want all Decode operations to happen sequentially on a single, decoder- specific thread. Can this be achieved using Tasks, if so, how? Are Tasks even appropriate for this use or is there a more obvious pattern I'm missing?