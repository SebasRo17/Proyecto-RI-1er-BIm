`Accumulate` can be used to compute the partial sums of a list. The partial sums can also be computed using a `For` loop but this method should not be used according to following answer. I have the following questions:   * Why is `Accumulate` much faster than using a `For` loop? Please give a more elaborate answer than the fact that Mathematica is inherently a functional programming language.   * What is the exact algorithm for `Accumulate`?    * Can this algorithm be used in object-oriented languages (I am familiar with C++) to compute partial sums of an array faster than a `for` loop? If no, then why not? If yes, then how much will the performance gain (big- _O_ notation is preferable) in C++ be compared to Mathematica? P.S. I am not very familiar with algorithm stability so if that is a part of your answer, please provide links/details on the same.