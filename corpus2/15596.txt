There was an interesting discussion on MathGroups dealing with the fact that image-processing functions in _Mathematica_ (and many other software, including Adobe Photoshop) work with RGB, Grayscale etc. intensity values as if they would be linear and additive while in fact these values are powers of the _physical_ intensity values and consequently must be linearized before making additive operations on them. This topic is expanded in the linked article where examples of incorrect default image resizing and blurring are given along with the general explanation of the correct algorithm and images generated with it. Matthias Odisio (Wolfram Research) replied: > This genuine issue will be properly addressed in a future release of > Mathematica. So, _Mathematica_ 9 is released. But I cannot find any example in the Documentation on how to linearize a colorspace correctly. Obviously, the linearization algorithm must depend on the colorspace used. The question is: is there efficient and straightforward way to linearize a colorspace in _Mathematica_ correctly? ## UPDATE Here is an excerpt from the documentation for Adobe After Effects which highlights some benefits of linear color space: > By performing operations in a linear color space, you can prevent certain > edge and halo artifacts, such as the fringing that appears when high- > contrast, saturated colors are blended together. Many color operations > benefit from working in a linear color space, including those operations > involved in image resampling, blending between layers with blending modes, > motion blur, and anti-aliasing. > > <...> > > _Note: A linearized working color space works best with higher color > depths—16 bpc and 32 bpc—and is not recommended for 8-bpc color._ Also, good explanation of the difference between linear RGB and sRGB color spaces can be found here.