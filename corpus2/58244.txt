Minimizing and maximizing interpolation function has already been asked and answered, see here for example. Yet, I observe a strange behaviour. Well, I can understand that the wrong guess of Mathematica is due to several maxima, but still I'm surprised I don't manage to get a better result. ## Generation of the considered function Here is how I get the interpolation function `Theta[t]`:               OmegaS = 1.32; OmegaP = 1; l0 = 1; tmax = 100;          eqn1[t_] = r''[t]/l0 - r[t]*theta'[t]^2/l0 + OmegaS^2*(r[t]/l0 - 1) - OmegaP^2*Cos[theta[t]];     eqn2[t_] = r[t]*theta''[t]/l0 + 2 r'[t]*theta'[t]/l0 + OmegaP^2*Sin[theta[t]];          sol = NDSolve[{eqn1[t] == 0, eqn2[t] == 0, r[0] == .9, r'[0] == 0,      theta[0] == 0.001, theta'[0] == 0}, {r, theta}, {t, 0, tmax}][[1]];          Theta[t_] = theta[t] /. sol      This is what `Theta` looks like:               Plot[Theta[t], {t, 0, 100}, PlotRange -> All,  AxesLabel -> {"t", "Theta(t)"}]      ![plot Theta](http://i.stack.imgur.com/iIIKh.png) ## Attempts to identify the maximum I now want to find the maximum of `Theta[t]` for $t\in[0,100]$. I underline that the peak could be _anywhere_ in $[0,100]$ so I cannot indicate any relevant initial guess. I tried all the following solutions, which obviously give an incorrect result:               MaxValue[{Theta[t], 0 <= t <= tmax}, t]     (* 0.243314 *)     NMaxValue[{Theta[t], 0 <= t <= tmax}, t]     (* 0.243314 *)     FindMaximum[{Theta[t], 0 <= t <= tmax}, t]     (* {0.000999881, {t -> 0.0146385}} *)     Maximize[{Theta[t], 0 <= t <= tmax}, t]     (* {0.243314, {t -> 92.1206}} *)     NMaximize[{Theta[t], 0 <= t <= tmax}, t]     (* {0.243314, {t -> 92.1206}} *)      The best (inelegant) way I found to approximate the maximum is brute-force:               Max[Table[Theta[i], {i, 0, tmax, .001}]]     (* 0.687071 *)      ## Question Do you know:   * why my attempts fail?   * a good way to find the (global!) maximum?