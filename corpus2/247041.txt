`shelve` is a Python module that makes it easy to persist a Python dictionary to disk (under the right conditions). The documentation for shelve gives this example to demonstrate one of the pitfalls of using a shelf:               import shelve          d = shelve.open(filename)          # ...snip...          # as d was opened WITHOUT writeback=True, beware:     d['xx'] = range(4)  # this works as expected, but...     d['xx'].append(5)   # *this doesn't!* -- d['xx'] is STILL range(4)!      The documentation explains: > Because of Python semantics, a shelf cannot know when a mutable persistent- > dictionary entry is modified. By default modified objects are written only > when assigned to the shelf (see Example). To say that shelves behave this way "because of Python semantics" seems to me to be measuring Python via a high bar! It would be hard to for shelve to know whether any object contained in a shelf has a reference to something which has been mutated (or a reference to something that has a reference to something that has been mutated). Can this be done in any programming language?