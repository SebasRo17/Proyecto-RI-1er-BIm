I'm designing a client to the Tomtom WEBFLEET.connect API in PHP. (You can read more about the API through the full documentation here: https://uk.support.business.tomtom.com/ci/fattach/get/488198/1396263217/redirect/1/filename/WEBFLEET.connect- en-1.19.1.pdf) The API provides a CSV over HTTP(S) interface (JSON and SOAP are also available but their JSON interface has a couple of issues I've noticed at present). I am using the CSV method of interacting, which is a little unorthodox but does work. I am designing my PHP classes to particularly be compliant with the Single Responsibility Principle, Open-Closed Principle and the Dependency Inversion Principle. Writing this API client library is as much as personal programming exercise as I'm trying to better my OOP and class design principles. I've included a brief class diagram below. Please excuse the verbose names, this is of course expressing the PHP namespaces. I would be most appreciative of some comments regarding:   * General class design thoughts and critique (e.g. compliance with SRP, etc.)   * Whether distinct objects for each type of Request and Response are recommended, as I have proposed below (this mirrors each API method).   * How the public API to external calling code should appear. For example, should I have a 'factory' class return an instance of the chosen Transport to the calling code? Or should a central class (similar to the command pattern) hold an instance of the transport class and offload requests to it? ![UML Class Diagram](http://i.stack.imgur.com/HzFIC.jpg) Larger image URL: http://i.imgur.com/kneY9GE.jpg