Most of the time in my program is spent on this single line of code:               out = RandomVariate[MultinomialDistribution[nt, tmp]];      `tmp` is a vector of `np+1` probabilities which sum to 1. `nt` is an integer. `out` is an np-component vector of integers that sums to `nt`. pseudo-code:               Loop:          Get new np and nt values     set up tmp.     out = RandomVariate[MultinomialDistribution[nt, tmp]];          Do stuff with out     End Loop      Here is an example with timing results. In the real problem `nt` and the length of `tmp` are random but this example is enough to illustrate the difficulty. Is there an obvious way to improve the performance?               tmp = {.1, .1, .8}     nt = 2;     timer = TimeUsed[];     For[i = 1, i < 10000, i++,        (* tmp may be changed here *)        out = RandomVariate[MultinomialDistribution[nt, tmp]];     ];     Print["time in loop=", TimeUsed[] - timer];      Sorry if this has been discussed before.