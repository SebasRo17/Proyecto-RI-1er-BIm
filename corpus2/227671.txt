I have inherited an API implemented using ASP.NET WebApi 2. The actions on the controllers are all like this:               public object Get(long id) {         LoginContext loginDetails = GetLoginDetails();         if (loginDetails.IsAuthorised) {             return _dependency.DoSomething(loginDetails, id);         }              return new HttpResponseMessage(HttpStatusCodes.Unauthorised);     }      The `_dependency` will have many methods all with similar signatures, and it will have dependencies of its own, and those will also use the `LoginContext` class until you finally reach the bottom of the call stack at the data access layer, where the `LoginContext` class is actually used. Dependencies are currently all injected into the constructor by the IoC container. So there are a number of issues here that bother me - the repetitive checking in each controller action that the user is authorized, and the need to have a `LoginContext` on every method of every dependency referenced anywhere by the controller. Now in the first case, I have created an action filter that handles the authentication, and writes a custom identity (which contains the `LoginContext` details) back to the `HttpContext`. That then leaves the meat of my question - what is the best way to pass my `LoginContext` down through the layers to the data access layer? **UPDATE:** just to clarify, in response to some of the questions below, authentication itself is not being checked by the data access layer (although the business layer will obviously do things differently based on the caller's authorisation claims); but rather we are passing data gathered during the authentication process to the data access layer, where it is then being used to access particular resources, or for infrastructure concerns such as auditing. The problem still remains though, should every method of my business layer and every method of my data layer, take a LoginContext as one of its parameters, or are there better ways?