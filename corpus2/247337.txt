I'm trying to better understand performance in PHP. One issue I'm thinking about is the n+1 problem. By n+1 I mean something like this:               $posts = Posts::getPosts();          foreach($posts as $post) {       $comments = Comments::getComments(array('post_id' => $post->id));       // do something with comments..     }      It's quite inefficient as we have to do many queries for every post to get the comments. Is something like this better? It's more PHP code but only two queries will be executed:               $posts = Posts::getPosts();          // get the ids into an array     $post_ids = array();     foreach($posts as $post) {       array_push($post_ids, $post->id);     }          // get comments for ALL posts in one query by passing array of post ids (post_id IN (...))     $comments = Comments::getComments(array('post_id' => $post_ids));          // map comments to posts     foreach($posts as $key => $post) {       foreach($comments as $comment) {         if($post->id == $comment->post_id) {           $post->pushComment($comment);         }       }     }          foreach($posts as $post) {       $comment = $post->comments;       // do something with comments..     }      This is much more PHP, and kinda messy too, but this time I'm only using two queries (one for posts, the other for fetching ALL comments of those posts in one query). Is this a good proposal to tackle the n+1 problem in PHP? Also, how do frameworks generally deal with this under the hood?