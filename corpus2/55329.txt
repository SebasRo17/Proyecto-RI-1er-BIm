I tried to implement some logic gates for a series of "0 & 1" strings, just like _and_ , _or_ , _nand_ , _nor_ and _not_ listed below. How could I limit _xor_ only accept a two strings list as its argument?               str2 = {"11000000", "10000001", "11111111"};          or[str : {__String}] :=        StringJoin[        MapThread[Or,           Characters[str] /. {"0" -> False, "1" -> True}] /. {False -> "0", True -> "1"}];          and[str : {__String}] :=        StringJoin[        MapThread[And,           Characters[str] /. {"0" -> False, "1" -> True}] /. {False -> "0", True -> "1"}];          nand[str : {__String}] :=        not[StringJoin[         MapThread[ And,            Characters[str] /. {"0" -> False, "1" -> True}] /. {False -> "0", True -> "1"}]];          nor[str : {__String}] :=        not[StringJoin[         MapThread[ Or,            Characters[str] /. {"0" -> False, "1" -> True}] /. {False -> "0", True -> "1"}]];          not[str : _String ] :=        StringJoin[         Characters[str] /. {"1" -> False, "0" -> True}  /. {False -> "0", True -> "1"}];          (* ????? *)     xor[str : {_String, _String}] :=        StringJoin[        MapThread[Xor,           Characters[str] /. {"0" -> False, "1" -> True}] /. {False -> "0", True -> "1"}];      ![enter image description here](http://i.stack.imgur.com/fSJx9.gif)