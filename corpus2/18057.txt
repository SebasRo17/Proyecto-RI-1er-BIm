How to avoid recursion in the following example?               Clear[MyRule];     Clear[MyHead1];          MyRule1 = MyHead1[x_MyHead2] | MyHead1[x_MyHead3] -> x;          MyHead1[x_] := Replace[MyHead1[x], MyRule1];          MyHead1[a]          MyHead1[MyHead2[b]]      How to make first rule in example below treated by `Replace` as not applicable?               In[17]:= ComplexRule1 = a -> Block[{},         12         ];          In[18]:= ComplexRule2 = a -> Block[{},         13         ];          In[19]:= Replace[a, {ComplexRule1, ComplexRule2}]          Out[19]= 12