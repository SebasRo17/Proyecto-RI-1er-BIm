I am conducting academic research on the topic of Extreme Programming and whether its practices lead to creating space for more errors and bugs in applications. From the experiences I gathered from many, I have comments that fall on both sides. Many support it and consider it a daily necessity, with dynamics that can facilitate changing project requirements. Many others argue that it leads to many problems, such as:   * Over-involvement with the customer in the process leads to the expression of customer wishes rather than needs   * Many products have multiple customers which lead to conflicting needs and opinions, creating unnecessary blockades   * Many products donâ€™t have any external customers, where the product is made for internal use or to be sold in the future. In these cases, the team itself is playing the user as well as the developer, hence killing the effectiveness of the process.   * Not many things exist in formal documentation, this informality leads to vague vision and can create problems where the customer might say that this is not what we asked etc. etc. The questions is why such conflicting opinions exist regarding XP. Is it a matter of different scenarios? Is there something else? To what extent is the claim (as written in the title) true? I would like people who are working or have worked with XP here to contribute their learning and real world experiences. It would be ideal if you have any facts or references to support you answer.