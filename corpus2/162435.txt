If I have a function in my code that goes like:               class Employee{              public string calculateTax(string name, int salary)         {             switch (name)             {                 case "Chris":                     doSomething($salary);                 case "David":                     doSomethingDifferent($salary);                 case "Scott":                    doOtherThing($salary);                           }     }      Normally I would refactor this to use Ploymorphism using a factory class and strategy pattern:               public string calculateTax(string name)     {         InameHandler nameHandler = NameHandlerFactory::getHandler(name);         nameHandler->calculateTax($salary);     }      Now if I were using TDD then I would have some tests that work on the original `calculateTax()` before refactoring. ex:               calculateTax_givenChrisSalaryBelowThreshold_Expect111(){}         calculateTax_givenChrisSalaryAboveThreshold_Expect111(){}          calculateTax_givenDavidSalaryBelowThreshold_Expect222(){}        calculateTax_givenDavidSalaryAboveThreshold_Expect222(){}           calculateTax_givenScottSalaryBelowThreshold_Expect333(){}     calculateTax_givenScottSalaryAboveThreshold_Expect333(){}      After refactoring I'll have a Factory class `NameHandlerFactory` and at least 3 implementation of `InameHandler`. How should I proceed to refactor my tests? Should I delete the unit test for `claculateTax()` from `EmployeeTests` and create a Test class for each implementation of `InameHandler`? Should I test the Factory class too?