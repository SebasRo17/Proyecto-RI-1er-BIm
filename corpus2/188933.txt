In my job I have to maintain a poorly written codebase which is both hard to understand, has tons of comments that are just plain wrong, has a bunch of weird decisionmaking going on in it and a whole lot more. I primarily do bugfixing which ranges from finding that little comment somewhere in the code that makes some random part not work, to understanding complex circular dependencies with some kind of singleton'a'palooza going on, and occasionally I actually get to write some real code, which is when I'm the happiest. But I'm concerned about the bugfixing witch I must confess many times ends up in being sloppy patchwork because I don't have the time or the mental fortitude to look at the horrendous code anymore. Now the biggest problem this project has is not that I'm just a whiny guy, I'm most certainly not alone in having above mentioned sentiments about the codebase. The biggest problem is probably the cost of maintaining it... But i digress. What I'm wondering is if there is some practices that I and my colleagues can try use to regain some respect for the codebase we've inherited and are working so that we don't walk down the path of creating more code rot?