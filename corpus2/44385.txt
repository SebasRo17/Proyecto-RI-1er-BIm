The following code works fine with the the function `f` defined as a module, however, when I convert it to be a compiled function, it gives me errors. Can some one help me identify the problem is with the following code:               demand[n_, k_] := Min[k Vf, n capacity];      supply[n_, k_] := Min[(n Kj - k) w, n capacity];      flo[n_, ku_, kd_] := Min[demand[n, ku], supply[n, kd]];     gamma[ku_, kd_] := Min[1, supply[L, kd]/(demand[L, ku] + 0.001)];      inflow [phi_, FQin_] := (phi - β FQin) dx; density[qin_, qout_, qr_] :=        (qin - qout + qr)/Vf;          dx = 1/6; capacity = 7500.; Kj = 150.; w = 100.; Vf = 100.; n = 60; m = 300; p = 24;      RML = 18;α = 4300.; β = 0.1; L = 3.; delta = 1.; dt = 4./3600.;           f = Compile[{{a1, _Real}, {a2, _Real} {a3, _Real}, {a4, _Real}, {a5,_Real}},        Module[{k0 = ConstantArray[0, n],                kr = Table[Table[0, {i1, 1, p}], {i2, 1, n - 2}],                ϕ = 0,                 Shutoff = False},         j = 0;         RMori =            Table[             If[i1 dx < 2, 100 a1,                If[i1 dx < 4, 100 a2,                  If[i1 dx < 6, 100 a3,                    If[i1 dx < 8, 100 a4, 100 a5]]]],              {i1, 1,n - 2}];         kr = ReplacePart[#, 1 -> (α delta/Vf)] & /@ kr;          NtwrkTT = TT = Plus @@ (Plus @@ kr);         While[TT > 0,            TT = 0;           qf = MapThread[flo[L, ##] &, {Most@k0, Rest@k0}];           ϕ = demand[1, #[[-1]] ] & /@ kr MapThread[gamma, {k0[[2 ;; -2]], k0[[3 ;;]]}];           qin = inflow[ϕ, Most@qf];           k0 += Join[{0}, density[Most@qf, Rest@qf, qin], {0}];           RM = MapThread[Min[#1, #2] &, {RMori, flo[1, #[[RML]], #[[RML + 1]]] & /@ kr}];           qr =              MapThread[Join[#1, {#2}, #3, {#4}] &,                {flo[1, ##] & @@@ Partition[#[[;; RML]], 2, 1] & /@ kr,                 RM,                 flo[1, ##] & @@@ Partition[#[[RML + 1 ;;]], 2, 1] & /@ kr, ϕ}];           kr =              MapThread[(#1 + #2) &,                {Join[{0}, #] & /@ (density[Most@#,Rest@#, 0] & /@ qr), kr}];           If[j > m && Shutoff == False, Shutoff = True;            kr = ReplacePart[#, 1 -> 0] & /@ kr];           TT += Plus @@ k0;            TT += Plus @@ (Plus @@ kr);            NtwrkTT += TT;            j++;];         NtwrkTT dt]]      When the function is evaluated at `f[39, 39, 39, 39, 39]`, it gives the following errors > >     ReplacePart::argrx: ReplacePart called with 2 arguments; 3 arguments are > expected. >> >     ReplacePart::argrx: ReplacePart called with 2 arguments; 3 arguments are > expected. >> >     ReplacePart::argrx: ReplacePart called with 2 arguments; 3 arguments are > expected. >> >     General::stop: Further output of ReplacePart::argrx will be suppressed > during this calculation. >> >     Compile::cpintlt: 3;;All at position 2 of k0[[3;;All]] should be either > a nonzero integer or a vector of nonzero integers; evaluation will use the > uncompiled function. >> >     Compile::cpintlt: 3;;All at position 2 of k0[[3;;All]] should be either > a nonzero integer or a vector of nonzero integers; evaluation will use the > uncompiled function. >> >     Compile::cset: Variable \[Phi] of type {_Integer,0} encountered in > assignment of type {_Integer,1}. >> >     Compile::cplist: density[Most[qf],Rest[qf],qin] should be a tensor of > type Integer, Real, or Complex; evaluation will use the uncompiled function. > >> >     Compile::cpapot: Compilation of > (flo[1,##1]&)@@Compile`GetElement[System`Private`CompileSymbol[4],System`Private`CompileSymbol[5]] > is not supported for the function argument flo[1,##1]&. The only function > arguments supported are Times, Plus, or List. Evaluation will use the > uncompiled function. >> >     Compile::cpapot: Compilation of > (flo[1,##1]&)@@Compile`GetElement[System`Private`CompileSymbol[4],System`Private`CompileSymbol[5]] > is not supported for the function argument flo[1,##1]&. The only function > arguments supported are Times, Plus, or List. Evaluation will use the > uncompiled function. >> >     Compile::cpapot: Compilation of > (flo[1,##1]&)@@Compile`GetElement[System`Private`CompileSymbol[4],System`Private`CompileSymbol[5]] > is not supported for the function argument flo[1,##1]&. The only function > arguments supported are Times, Plus, or List. Evaluation will use the > uncompiled function. >> >     General::stop: Further output of Compile::cpapot will be suppressed > during this calculation. >> >     Compile::cpintlt: RML+1;;All at position 2 of > Compile`GetElement[kr,System`Private`CompileSymbol[0]][[RML+1;;All]] should > be either a nonzero integer or a vector of nonzero integers; evaluation will > use the uncompiled function. >> >     General::stop: Further output of Compile::cpintlt will be suppressed > during this calculation. >> >     Compile::cset: Variable kr of type {_Integer,2} encountered in > assignment of type {_Integer,0}. >> >     Compile::cset: Variable \[Phi] of type {_Integer,0} encountered in > assignment of type {_Integer,1}. >> >     General::stop: Further output of Compile::cset will be suppressed during > this calculation. >> >     Compile::cplist: density[Most[qf],Rest[qf],qin] should be a tensor of > type Integer, Real, or Complex; evaluation will use the uncompiled function. > >> >