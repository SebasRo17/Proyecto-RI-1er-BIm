I heard somewhere that C# 5 async-await will be so awesome that you will not have to worry about doing this:               if (InvokeRequired)     {         BeginInvoke(...);         return;     }     // do your stuff here      It looks like the callback of a await operation will happen in the original thread of the caller. It has been stated several times by Eric Lippert and Anders Hejlsberg that this feature originated from the need to make UIs (particularly touch device UIs) more responsive. I think a common usage of such feature would be something like this:               public class Form1 : Form     {         // ...         async void GetFurtherInfo()         {             var temperature = await GetCurrentTemperatureAsync();             label1.Text = temperature;         }     }      If only a callback is used then setting the label text will raise an exception because it's not being executed in the UI's thread. So far I couldn't find any resource confirming this is the case. Does anyone know about this? Are there any documents explaining technically how this will work? Please provide a link from a reliable source, don't just answer "yes".