I am currently working on refactoring a summer camp registration system to include some new features and will also be using it as the basis for a new after-school class registration system. For this new version of the system, I want to start out by writing use case descriptions for the registration process (and ultimately I plan to document all the use cases). I understand that the purpose of a use case is to accomplish a user's goal, but I'm still not sure how the registration process should be divided into use cases. Here are the options I've been thinking about:   1. One big "Register Student(s) For Classes" use case   2. Divide it into separate use cases: "Enter Student Information", "Select Classes", "Pay for Registrations"   3. Have separate use cases but also have a "Register Student(s) For Classes" use case which "includes" the more granular use cases Another factor to consider is timing: parents may want to enter their students' basic information (name, age, etc.) prior to the time when registration begins, but of course some parents will complete the whole registration process in one sitting. Also, payment won't always immediately follow class selection; in some cases parents will be allowed to complete their payment later (within a 48 hour window). I read some articles about use cases on Alistair Cockburn's website but I'm still confused as to what the guidelines are for dividing up use cases in a case like this. My inclination is to go with option 3 since the system will have a wizard interface that could potentially guide the user through the registration from start to end, accomplishing the "user goal" of registering his/her student(s) for classes, but the "included" use cases could also be initiated on their own. I was also wondering if I should have a separate "Modify Class Selections" use case for the case when the parent logs back into the system later and changes class selections on behalf of the student, or whether that should just be an alternative scenario of the "Select Classes" use case. What would you recommend, and why? What guidelines should be used in general when analyzing use case boundaries, beyond the idea of a "user goal"? * * * **Update:** I found this quote from the first chapter of Alistair Cockburn's book to be helpful: > Depending on the level of view needed at the time, the writer will choose to > describe a multi-sitting or **summary** goal, a single-sitting or **user > goal** , or a part of a user goal, or **subfunction**. Communicating which > of these is being described is so important that my students have come up > with two different gradients to describe them: by height relative to sea > level (above sea level, at sea level, underwater), and by color (white, > blue, indigo). It seems to me that "Register Student(s)" is a summary level goal, since it could potentially take multiple sittings to complete. The line is blurred in this case, but I think this idea of a summary use case suggests that my approach #3 above is a reasonable one.