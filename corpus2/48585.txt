I am using the following code in order to minimize the function `chi`               R = {5.68, 6.81, 7.95, 9.08, 10.22, 11.35, 12.49, 13.62, 14.76, 15.89,         17.03, 18.16, 19.30, 20.43, 21.45, 22.47, 23.50, 24.52, 25.54,         26.56, 27.58, 28.6, 29.62, 30.65, 31.67, 32.69, 33.71, 34.73};     V = {235.5, 242.9, 251.1, 262, 258.9, 255.1, 251.8, 252.1, 251, 245.5,         232.8, 232, 235.7, 229.3, 227.6, 226, 225.7, 227.5, 227.4, 225.6,         224.4, 222.3, 222.1, 224.9, 228.1, 231.1, 230.4, 226.8};     dV = {17.8, 0.8, 0.7, 2.1, 6.9, 5.7, 17.1, 7.4, 18.6, 28.8, 1, 14.2,         4.6, 13.8, 28.8, 28.8, 28.8, 28.8, 28.8, 28.8, 28.8, 28.8, 28.8,         28.8, 28.8, 28.8, 28.8, 28.8};     ICov = Inverse[DiagonalMatrix[dV]*DiagonalMatrix[dV]];     G = 6.67*10^(-20);     Msol = 2*10^30;     kk = 3*10^16;     sl = 299792;     incl = 90*Pi/180;               Vth[a_, b_, c_, d_] =        Sqrt[(G*a*Msol)/(R*kk)*(1 - Exp[-(R/d)]*(1 + R/d))]*(1 -           b*Exp[-R/c]/R);               chi = (Vth[M, \[Delta], L, Ld] - V).ICov.(Vth[M, \[Delta], L, Ld] -           V);     NMinimize[{chi, M > 0 && L > 0 && Ld > 0}, {M, \[Delta], L, Ld}]      Since `M` is a mass, and both `L` and `Ld` are lengths, and I know nothing about `[\Delta]`, the constraint should be: `M>0 && L>0 && Ld>0`: When I use it, I find:               {5848.86, {M -> 1.58505*10^6, \[Delta] -> -1.18329*10^6,        L -> 1.15986*10^6, Ld -> 3118.75}}      Since I know that the mass should be `M>2*10^11`, I tried to use this a constraint, and I find:               {40.8086, {M -> 2.41901*10^11, \[Delta] -> 8.90217, L -> 2.12644,        Ld -> 4.78551}}      Much better! Why doesn't Mathematica find it by itself? How can I improve my constraints?