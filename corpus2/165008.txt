I am writing some code that has a very large number of reasonably simple objects and I would like them the be created at compile time. I would think that a compiler would be able to do this, but I have not been able to figure out how. In _C_ I could do the the following:               #include <stdio.h>          typedef struct data_s {         int a;         int b;         char *c;     } info;          info list[] = {         1, 2, "a",         3, 4, "b",     };          main()     {        int i;        for (i = 0; i < sizeof(list)/sizeof(*list); i++) {          printf("%d %s\n", i, list[i].c);        }     }      Using #C++* each object has it constructor called rather than just being layed out in memory.               #include <iostream>     using std::cout;     using std::endl;          class Info {         const int a;         const int b;         const char *c;     public:         Info(const int, const int, const char *);         const int get_a() { return a; };         const int get_b() { return b; };         const char *get_c() const { return c; };     };          Info::Info(const int a, const int b, const char *c) : a(a), b(b), c(c) {};          Info list[] = {         Info(1, 2, "a"),         Info(3, 4, "b"),     };          main()     {         for (int i = 0; i < sizeof(list)/sizeof(*list); i++) {             cout << i << " " << list[i].get_c() << endl;         }     }      I just don't see what information is not available for the compiler to completely instantiate these objects at compile time, so I assume I am missing something.