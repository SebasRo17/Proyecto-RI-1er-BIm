I'm still pretty new to Mathematica so my apologies if this is a dumb question. I wanted to plot some integrals of functions for no particularly good reason, but the only decent way I could come up with to do that in Mathematica is by getting an interpolation function from a table of points generated from my original function, and then NIntegrating that interpolation function. This seems awfully fiddly. Is there a better way that I've been too dumb to notice? Also, I wrote the "procedure" (very heavy quotes) in a block of text so I could use it later, is there a better way to write a simple program like this so that it can be called later without having to copy paste the text and run it again like I'm doing?               domainend = Input["Enter the maximum domain to calculate"]     iterator = Input["Enter the number of steps for each value of x in the domain."]     function = Input["Enter the function whose integral will be approximated."]     grdom1 = Input["Enter leftmost value to graph"]     grdom2 = Input["Enter rightmost value to graph"]     domainstart = (-domainend)          functionvar[x_] =        Interpolation[         N[Transpose[{           (Table[x, {x, domainstart, domainend, iterator}]),            (Table[function, {x, domainstart, domainend, iterator}] /. ComplexInfinity ->0)                }],          30],         x]     diff = NIntegrate[functionvar[x], {x, domainstart, 0}]     antiderivative[x_] = Integrate[functionvar[x], x]     f = Function[x, functionvar[x]]     i = Function[x, antiderivative[x]]     g = Function[x, antiderivative[x] - diff]          Plot[       {f[x], g[x]}, {x, grdom1, grdom2},          PlotStyle -> Thickness[0.0025], PlotLegends -> {function, \!\(         \*SubsuperscriptBox[\(\[Integral]\), \(0\), \(x\)]\(function \         \[DifferentialD]x\)\)}, Filling -> {1 -> {Axis, LightBlue}}     ]