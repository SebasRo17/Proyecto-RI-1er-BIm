I've got a team of developers which are trying to write specifications/tests concurrently for different (and sometimes adjacent) parts of the system. Typically, the person writing the specification/test is **not** the developer who will write the implementation and make the specification/test pass. Here's the problem we're having: the person _receiving_ the specification/test for which an implementation hasn't yet been written isn't familiar enough with the design of the system's many objects to know: _Do I solve this problem (the specification/test) with an existing object(s), or do I create (for the first time) the dependencies which will allow the system to pass this specification/test?_ Not all of the developers on the project have the domain knowledge to make these decisions _well_ , and we're colliding so far as disparate designs and objects created in relative isolation begin to conflict and duplicate each other. What is the solution(s) to this problem? Is it simply inescapable that every developer in the project must know (or be prepared to ask) the system's objects? Feel free to provide what you think are obvious answers.