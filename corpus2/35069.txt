I have a question regarding NDSolve and StiffnessSwitching. StiffnessSwitching is a method to provide automatic means to handle switching between a stiff and nonstiff solver. The StiffnessSwitching can be activated using for example               Method -> {StiffnessSwitching, Method -> {ExplicitRungeKutta, Automatic}}      as an option to NDSolve. The inner list with the two methods is the method to use for the nonstiff and stiff solver respectively. My question is: Why can't I use the ordinary TimeIntegration methods (for example Adams) as a submethod options for the nonstiff solver. As followed by the example in the tutorial:               Needs["DifferentialEquations`NDSolveProblems`"];     Needs["DifferentialEquations`NDSolveUtilities`"];     system = GetNDSolveProblem["VanderPol"];     time = {T, 0, 10};     sol = NDSolve[system, time, Method -> {StiffnessSwitching, Method -> {Adams, Automatic}}, AccuracyGoal -> 5, PrecisionGoal -> 4]          NDSolve::mdata: An invalid NDSolve`StiffnessSwitching method data object was encountered at the point T == 0.`. >>      Is there a way to combine TimeIntegration with StiffnessSwitching?