I have binary data in my database that I'll have to convert to bitmap at some point. I was thinking whether or not it's appropriate to use a repository and do it there. My consumer, which is a presentation layer, will use this repository. For example:               // This is a class I created for modeling the item as is.     public class RealItem     {         public string Name { get; set; }         public Bitmap Image { get; set; }     }          public abstract class BaseRepository     {         //using Unity (http://unity.codeplex.com) to inject the dependancy of entity context.         [Dependency]         public Context { get; set; }     }          public calss ItemRepository : BaseRepository     {         public List<Items> Select()         {             IEnumerable<Items> items = from item in Context.Items select item;             List<RealItem> lst = new List<RealItem>();             foreach(itm in items)             {                 MemoryStream stream = new MemoryStream(itm.Image);                 Bitmap image = (Bitmap)Image.FromStream(stream);                 RealItem ritem = new RealItem{ Name=item.Name, Image=image };                 lst.Add(ritem);             }                  return lst;         }     }      Is this a correct way to use the repository pattern? I'm learning this pattern and I've seen a lot of examples online that are using a repository but when I looked at their source code... for example:               public IQueryable<object> Select     {         return from q in base.Context select q;     }      as you can see no behavior is added to the system by their approach, so I was confused that maybe repository is something else and I got it all wrong. At the end there should be extra benifits of using them right?