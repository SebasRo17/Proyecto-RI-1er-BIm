What are the relative merits ( _or demerits_ ) for implementing an Erlang- style "Continuation" pattern in C#. I'm working on a project that has a large number of `Lowest` priority threads and I'm wondering if my approach may be all wrong. It would seem there is a reasonable upper limit to the number of long-running threads that any one Process 'should' spawn. With that said, I'm not sure what would signal the tipping-point for too many thread or when alternate patterns such as "Continuation" would be more suitable. In this case, many of the threads do a small amount of work and then sleep until woken to go again ( _Ex. Heartbeat, purge caches, etc..._ ). This continues for the life of the Process.