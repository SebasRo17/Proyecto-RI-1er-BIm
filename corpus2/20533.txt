I need to define the following function               MyWavelet[n_]["PrimalLowpass", prec_ : MachinePrecision] :=         Table[(-1)^(j - 1) h[[2*n - j]], {j, 0, 2*n - 1}]      which depends on the following code               num = T;     precis = 32;     p[n_, x_] := Sum[ Binomial[n-1+j,j]*x^j, {j,0,n-1}]     pol[n_, z_] := Expand[z^(n-1) * p[n, (1 - (z + 1/z)/2)/2]]     roo[n_] := NSolve[pol[n, x] ==0, x, precis]     absgreater[x1_, x2_] := Abs[x1] < Abs[x2]     sroo[n_] := Sort[roo[n], absgreater]     insidehalf[n_] := Take[sroo[n], n-1]          rootlist = x /. insidehalf[num];     prod = Expand[Product[(w - rootlist[[j]]), {j, 1, num - 1}]];     normalizer = prod 2^(num - 1/2) /. w -> 1;     polyn = Expand[(1 + w)^num * prod/normalizer];     h = Reverse[N[CoefficientList[polyn, w], precis]];      where T is an integer. My problem is I need to replace `num` with the value of `n` when calling the `MyWavelet` function and then dynamically evaluate, so I can get the `h` table values assigned to the specific `MyWavelet[n]`. I tried couple o'times using `With, but with no success.