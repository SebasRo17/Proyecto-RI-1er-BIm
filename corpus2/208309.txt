I am an experienced C++ developer, I know the language in great details and have used some of its specific features intensively. Also, I know principles of OOD and design patterns. I am now learning C# but I cannot stop the feeling not being able to get rid of C++ mindset. I tied myself so hard to the strengths of C++ that I cannot live without some of the features. And I cannot find any good workarounds or replacements for them in C#. What **good practices** , **design patterns** , **idioms** that are different in C# from C++ perspective can you suggest? How to get a perfect C++ design not looking dumb in C#? Specifically, I cannot find a good C#-ish way to deal with (recent examples):   * Controlling the lifetime of resources that require deterministic cleanup (like files). This is easy having `using` in hand but how to use it properly when ownership of the resource is being transfered [... betwen threads]? In C++ I would simply use shared pointers and let it take care of 'garbage collection' just at the right time.   * Constant struggling with overriding functions for specific generics (I love things like partial template specialization in C++). Should I just abandon any attempts to do any generic programming in C#? Maybe generics are limited on purpose and it is not C#-ish to use them except for a specific domain of problems?   * Macro-like functionality. While generally a bad idea, for some domain of problems there is no other workaround (e.g. conditional evaluation of a statement, like with logs that should only go to Debug releases). Not having them means that I need to put more `if (condition) {...}` boilerplate and it is still not equal in terms of triggering side effects.