I was reviewing some threads on Stack Overflow and started asking myself how I would design my classes and relationships to create such a system. ### My Goal - **I want to build a review system like the Stack Exchange review system.** * * * Let's take a look at how the review system works on Stack Exchange. I will only refer to the Suggested Edits functionality to keep it simple.   1. Un-experienced user (less than 2000 rep) edits someone post   2. Add an entry to the "review" system tagged 'suggested-edit'   3. Experienced user (more than 2000 rep) can review "suggested edits" one by one As an experienced user I can:   * See the diff between the original content and the edited content   * Approve the edit   * Reject the edit   * Improve the edit   * Skip to the next review Final note about other review types. We could imagine "tagging" the reviews with the corresponding types since the actions are the same. ### Design I would start with a `Review` model. We could have one sub-class for each review type, allowing custom attributes and methods for each type in the future. `ruby`               class Review     class Review::SuggestedEdit < Review     class Review::FirstPost     < Review     class Review::LateAnswer    < Review     class Review::LowQuality    < Review      A `Review` object would have 2 references:   * Original Content   * Edited Content Approve   1. Replace original content by edited content.   2. Mark the review as approved.   3. Move to the next review. Reject   1. Log the reason for rejection.   2. Mark the review as rejected.   3. Move to the next review. Improve   1. Directly edit edited content.   2. Approve.   3. (We could imaging creating a new Review for this improvement.)   4. Move to the next review. Skip   1. Move to the next review. * * * **How should I structure my classes in order to build such a review system?**