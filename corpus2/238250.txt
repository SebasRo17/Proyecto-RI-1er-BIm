It feels like it is not enough for working programmers just to "walk" 5 to 8 hours a day, and "quick walk" is not enough, but they have to "sprint", every day, year after year. For the company, it makes a lot of sense because to get the most out of workers, sprinting all day long, day after day is better than people who merely walk the whole day. Here I am comparing our "sprints" to normal day life of walking vs sprinting. While we can sprint 100 meter a few times or even two dozen time a day, for a total of 15 seconds x 25, can anybody sprint the whole day long for 5 hours, and day after day? What I mean is, doesn't it make more sense to sprint for 3 months, and then get back to normal, when people can just "walk" or "quick walk", being productive, for the rest of the 9 months in a year? Or sprint for 3 months, get back to normal for 3 months, and then sprint for another 3 months and back to normal for another 3 months? It sure make a lot of sense to the company, because if people can sprint the whole year, then the company can get a lot of things done, burn out people, and just later replace the burned out people by other fresher people (possibly replaceable contractors) -- and it is such a nice term to use too -- we have people sprinting the whole year round -- we are getting the "maximum" output -- so the directors now can have reasons to get promoted to be vice presidents. I really wonder, should sprints really be year round? I think in the old days, when companies such as Microsoft made people work 60 hours per week, some people described them as a velvet sweat shop. But if we begin to say, we are just having sprints (and not mentioning that it is sprints for 3 weeks, and then another one immediately following, and it just repeats again and again the whole year round), then it sounds like a very justified thing to do.