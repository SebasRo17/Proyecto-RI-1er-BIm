Sue is designing a JavaScript library, `Magician.js`. Its linchpin is a function which pulls a `Rabbit` out of the argument passed. She knows its users may want to pull a rabbit out of a `String`, a `Number`, a `Function`, perhaps even a `HTMLElement`. With that in mind, she _could_ design her API like so: # The strict interface               Magician.pullRabbitOutOfString = function(str) //...     Magician.pullRabbitOutOfHTMLElement = function(htmlEl) //...      Each function in the above example would know how to handle the argument of the type specified in the function name/parameter name. Or, she could design it like so: # The "ad hoc" interface               Magician.pullRabbit = function(anything) //...      `pullRabbit` would have to account for the variety of different expected types that the `anything` argument could be, as well as (of course) an unexpected type:               Magician.pullRabbit = function(anything) {       if (anything === undefined) {         return new Rabbit(); // out of thin air       } else if (isString(anything)) {         // more       } else if (isNumber(anything)) {         // more       }       // etc.     };      The former (strict) seems more explicit, perhaps safer, and perhaps more performant -- as there are little or no overheads for type checking or type conversion. But the latter (ad hoc) feels simpler looking at it from the outside, in that it "just works" with whatever argument the API consumer finds convenient to pass to it. **For the answer to this question** , I'd like to see specific pros and cons to either approach (or to a different approach altogether, if neither is ideal), that Sue should know which approach to take when designing her library's API.