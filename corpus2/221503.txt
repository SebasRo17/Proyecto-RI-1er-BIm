The question itself is already in the title, so here I will just provide additional details. I call a regular expression "deterministic", if, after converting the regular expression into a nondeterministic finite automaton in the obvious way, the result is already a deterministic finite automaton, without performing an explicit nondeterminism removal procedure. For example:   * **Deterministic:** `ab(cb)*`   * **Nondeterministic:** `a(bc)*b` I never use nondeterministic regular expressions. In particular, this means that matching my regular expressions never requires backtracking. I want a regular expression implementation that is explicitly designed to handle deterministic regular expressions, and takes advantage of them in order to match character streams that must be read sequentially, such as C++'s `std::istream`s. My preferred languages are Haskell, Standard ML, Rust and C++11, although I am open to suggestions for any statically typed languages.