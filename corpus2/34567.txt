I recently encountered a problem when combining multiple texture layers in an graphics object when the texture comes from an image with alpha channel. Apparently the alpha channel of the image passed to `Texture[]` as an argument is not represented as it should be in the obtained Graphics object. Instead of delivering true transparent texels I just get non transparent white ones. The same issue applies to usage of `Texture[]` with `Graphics3D`. Here is a simple test case: I first create two images, the second one containing an alpha channel:               layer1 = Image[RandomReal[1, {12, 12, 3}]];     layer2 = SetAlphaChannel[Image[RandomReal[1, {12, 12, 3}]],         Image[Join[ConstantArray[0, {6, 12}], ConstantArray[1, {6, 12}]]]];      Then I lay layer2 on top of layer1 and create a Graphics object of each layer using a Texture on a polygon:               Graphics[{Texture[layer1], Polygon[{{0, 0}, {1, 0}, {1, 1}, {0, 1}}, VertexTextureCoordinates -> {{0, 0}, {1, 0}, {1, 1}, {0, 1}}],        Texture[layer2], Polygon[{{0, 0}, {1, 0}, {1, 1}, {0, 1}}, VertexTextureCoordinates -> {{0, 0}, {1, 0}, {1, 1}, {0, 1}}]}]      Unfortunately I only get white pixels where layer2 should be transparent. ![enter image description here](http://i.stack.imgur.com/Ep9Ar.jpg) If I just pass the ImageData of layer2 things work, but the rest of the image information is lost (notice the additional blurring):               Graphics[{Texture[layer1], Polygon[{{0, 0}, {1, 0}, {1, 1}, {0, 1}}, VertexTextureCoordinates -> {{0, 0}, {1, 0}, {1, 1}, {0, 1}}],        Texture[layer2//ImageData], Polygon[{{0, 0}, {1, 0}, {1, 1}, {0, 1}}, VertexTextureCoordinates -> {{0, 0}, {1, 0}, {1, 1}, {0, 1}}]}]      ![enter image description here](http://i.stack.imgur.com/eT0jP.jpg) Is this a bug or am I missing something?