I have a function, say               minimizeme[Ω_][β_][ϵ_] = ϵ^2 Ω - Log[2 (Cosh[2 β] + Cosh[2 β ϵ])]/(2 β);      I want to find its critical points in $\epsilon$ for a given value of $\omega$, varying $\beta$, within certain ranges, i.e. $\omega\geq 0$, $\beta\geq 0$ and $-1\leq \epsilon \leq 1$. When I pick, say, $\omega$ equal to $0.2$, e.g. I define               min20 = minimizeme[0.20];      I can make a `ContourPlot` of the locus of couples $(\beta, \epsilon)$ for which $\frac{\partial m}{\partial \epsilon }=0$, using code               ContourPlot[D[min20[β][ϵ], ϵ] == 0, {β, 0, 10}, {ϵ, -1, 1}, Evaluated -> True]      while I cannot get the software to solve the related equation:               Solve[D[min20[β][ϵ], ϵ] == 0, β, MaxExtraConditions -> All]      yields a `Solve::inex:` message, while               Solve[D[minimizeme[Ω][β][ϵ], ϵ] == 0, β, MaxExtraConditions -> All]      yields `Solve::nsmet:`. Furthermore,               Table[NSolve[D[min20[β][ϵ], ϵ] == 0, ϵ], {β, 1.*^-10, 10}]      results in a few `NSolve::nsmet:` until `General::stop:` kicks in. Finally, `Reduce` behaves just like `Solve`, resulting in either a `Reduce::inex:` or a `Reduce::nsmet:` message. Yet I think that since `ContourPlot` manages to produce a result somehow, Mathematica has a way to find what I need. So, to summarize:   1. How does `ContourPlot` work "internally"? How does it manage to produce the results I see when even `Solve`, `NSolve` and `Reduce` fail?   2. Can I turn the results of this `ContourPlot` into one (or more) `InterpolatingFunction` objects?   3. (bonus question) Are there any alternatives for solving my equation beyond Taylor series expansion? (I have already solved this with Taylor expansion, so I'd like to avoid that at all if possible) Thanks a lot.