I've run 3 different experiments involving C++ lists and vectors. Those with vectors proved more efficient, even when a lot of insertions in the middle were involved. Hence the question: in which case do lists make more sense than vectors? If vectors seem more efficient in most cases, and considering how alike their members are, then which advantages are left for lists?   1. Generate N integers and put them in a container so that the container remains sorted. The insertion has been performed naively, by reading elements one by one and inserting the new one right before the first larger one.   With a list, time goes through the roof when dimension increases, compared to vectors.   2. Insert N integers at the end of the container.   For lists and vectors, time increased by the same order of magnitude, though it was 3 times faster with vectors.   3. Insert N integers in a container.   Start timer.   Sort the container using list.sort for lists, and std::sort for vectors. Stop timer.   Again, time increases by the same order of magnitude, but it is in average 5 times faster with vectors. I might continue to perform tests and figure out a couple of examples where lists would prove better. But the joint experience of you guys reading this message might provide more productive answers. You might have come across situations where lists were more convenient to use, or performed better?