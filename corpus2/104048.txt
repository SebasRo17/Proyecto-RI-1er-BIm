My professor keeps referring to this Java example when he speaks of "robust" code:               if (var == true) {         ...     } else if (var == false) {         ...     } else {         ...     }      He claims that "robust code" means that your program takes into account all possibilities, and that there is no such thing as an error - all situations are handled by the code and result in valid state, hence the "else". I am doubtful, however. If the variable is a boolean, what is the point of checking a third state when a third state is logically impossible? "Having no such thing as an error" seems ridiculous as well; even Google applications show errors directly to the user instead of swallowing them up silently or somehow considering them as valid state. And it's good - I like knowing when something goes wrong. And it seems quite the claim to say an application would never have any errors. So what is the _actual_ definition of "robust code"?