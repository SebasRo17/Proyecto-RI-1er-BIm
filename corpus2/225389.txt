If I have a rich domain library that gets included into a Java web application, but I want to achieve a level of dependency isolation with that domain library such that it is possible to build and test it totally independently(of larger libraries like Spring), how can I realistically use JSR-303 bean validation? The domain library itself can use the hibernate validation annotations, like @NotNull on fields and getters just fine, and this is still independent and testable. However, if I want to use newer features, such as method parameter validation, which requires AOP, how do I maintain minimal dependencies while maintaining testability (via JUnit)? Is this a simple matter of configuring the unit test to exercise the domain objects through an AOP proxy? The design philosophy of JSR-303 seems, on the face of it, to be at odds with rich domain design, favouring more of a dumb-bean, business layer service design.