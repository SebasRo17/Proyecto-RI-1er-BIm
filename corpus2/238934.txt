I have a number of operations that need to be performed, in series, on the same set of data. As the operations progress, later operations require information from the prior operations. So the initial object passed in to the first method snowballs as it collects results and metadata. At first I was passing around both a request and a response, but that painted me into a corner a couple times. So now what I intend to do is just have one parameter object that contains all the initial data, it remembers interim values, and delivers the final results, all within a single object that is passed around to many void methods. My questions: Is this a pattern? Or is this bad form? My contrived example is below.                   class Program         {             static void Main()             {                 var MyObj = new RequestResponseInfo();                 MyObj.InitalValue = "fo";                 foobar.DoStuff(MyObj);                 Console.WriteLine(MyObj.FinalAnswer);                 Console.ReadKey();             }         }              public static class foobar         {             public static void DoStuff(RequestResponseInfo myObj)             {                 DoSomething_A(myObj);                 DoSomething_B(myObj);                 myObj.FinalAnswer = myObj.A + myObj.B;             }                  private static void DoSomething_A(RequestResponseInfo myObj)             {                 myObj.A =  myObj.InitalValue + "ob";             }                  private static void DoSomething_B(RequestResponseInfo myObj)             {                 myObj.B = "ar";             }         }              public class RequestResponseInfo         {             public string InitalValue { get; set; }             public string A { get; set; }             public string B { get; set; }             public string FinalAnswer { get; set; }         }