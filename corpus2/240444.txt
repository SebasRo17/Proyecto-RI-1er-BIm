I'm developing a website (using **Django** ) which will depend on an API for it's main functionality which is create/update/delete objects. But the API also provides:   * User sign up and login   * User relations to their objects   * User groups and permissions This is great but I'm conserned about fully depending on the API for everything even user sign up and login, so I have 2 choices: **Using the API for everything** : Advantages:   * User authentication, objects, relations, permissions are already managed   * My job is only to query the API and display the results Disadvantages:   * Lots of HTTP requests to the API   * The website will break if the API goes down   * The website rendering time will be slower (will use ajax) **Using the API when needed** : Advantages:   * Fewer HTTP requests   * The website will be a little faster   * If the API goes down, not all the functions of the website will stop Disadvantages:   * I'll have to manage user authentication, permissions and relations to his objects in the API   * Duplicate user data in my database and the API (I'll have a copy of the user objects)   * Worried about the data sync (I'll update the database only on create/update/delete requests to the API) Which one is a better choice and why ? what design is usually used for such cases ?