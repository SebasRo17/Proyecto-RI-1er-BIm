I develop a Java web application with an upload-feature. The upload is devided into two parts:   * During a user-session the user can upload files at any time while navigating through the whole site.   * All uploads of a single user during a session will be collected on the server. Moreover the files of each user are stored into different directories, that is each named with the session-id of user.   * Only when the user commits this uploads explicitly all uploaded files of his directory will be transfered to a target. (The explicit commit is needed because it is a long running threaded action on a legacy-system).   * If the user doesn't commit the uploaded files, the temporary-directory of the user will be deleted at logout. Now the essential part of my question: If the user closes his browser the files won't be deleted, because I donâ€™t get an event. To workaround this situation I clean up all temporary directories by a scheduled task in this way:   * Get all directorynames (the session-id)   * Lookup each directoryname respectively session-id in a collection of active sessions.   * If the session is found, keep the directory, otherwise delete the directory. Now I'm in doubt if it is a security risk to use the session-id for naming the directory. Sure it's easy to lookup and cleanup, but I haven't found another way to link a directory to a concrete session. Do you have a clever and easy solution to handle upload into a user specific directory and especially deleting directories of lost users? Or is there another way to tell the cleanup task which directories are obsolete?