We're using agile methods in my current project at the moment, and we have heaps of stories like these:   * As an assistant, I want to pay a customer a refund so that they can get some money when they request it   * As a customer, I want to pay for a purchase so that I can receive my item. How we've done it so far is to pick the most important stories every sprint and elaborate it into a number of formal requirements specs (we group some of the stories that are similar together in the same spec). Depending on the story, it could just be a button on a screen or an entire workflow. The problem now is that because there's so many stories, it's not immediately clear, for any part of the system which stories relate to it. It works at the time of developers, every sprint the devs just get a spec outlining what they need to do and the changes they need to make. But in terms of maintaining this story list and for testing, its starting to get really hard tracking bugs and in general just maintaining the specs, because one piece of functionality in the screen might have been documented in a number of different places due to it being split by story. Is writing specs based on stories a good idea? Have we written the stories in the wrong way?