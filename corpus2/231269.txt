I am interested in the idea of C++-like `const` not that particular execution (like casting away `const`). Take for example C# -- it lacks C++-like const, and the reason for it is the the usual -- people and time. Here additionally it seems the C# team looked at the C++ execution of `const`, marketing CLR and had enough at this point (see why there is no const member method in c# and const parameter ; thank you Svick). Be if **we** move further than that, is anything else? Is there something deeper? Take for example multi-inheritance -- it is usually seen as hard to grasp (for the user) and thus not added to the language (like diamond problem). Is there something in **NATURE** of `const` that pose a problem that it is better for language to avoid it? Something like deciding if `const` should be deep or shallow (having `const` container does it mean I cannot add new element or alter existing elements as well; what if elements are of reference type)? **UPDATE** : while I mention C#, and thus making a historical perspective I am interested in the nature of potential problems of `const` to the language. _This is not a challenge of the languages. Please ignore such factors as current trends or popularity -- I am interested only in technical issues -- thank you._