I recently came across a Java construct I have never seen before and was wondering whether I should use it. It seems to be called initializer blocks.               public class Test {       public Test() { /* first constructor */ }       public Test(String s) { /* second constructor */ }       {         doStuff();       }     }      The code block will be copied into each constructor, i.e. if you have multiple constructor you do not have to rewrite code. However, I see three main drawbacks using this syntax:   1. It is one of the very few cases in Java where the order of your code is important, as you can define multiple code blocks and they will be executed in the order they are written. This seems harmful to me as simply changing the order of code blocks will actually change the code.   2. I do not really see any benefits by using it. In most cases, the constructors will call each other with some pre-defined values. Even if this is not the case, the code could simply be put into a private method and called from each constructor.   3. It reduces readability, as you could put the block at the end of the class and the constructor is normally at the beginning of the class. It is quite counter-intuitive to look at a completely different part of a code file if you do not expect that to be necessary. If my above statements are true, why (and when) was this language construct introduced? Are there any legitimate use cases?