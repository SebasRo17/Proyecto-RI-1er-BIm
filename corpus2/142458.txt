The majority of GUI Toolkits nowadays use the Signals + Slots model. It was Qt and GTK+, if I am not wrong, who pioneered it. You know, the widgets or graphical objects (sometimes even ones that aren't displayed) send **signals** to the main-loop handler. The main-loop handler then calls the **events** , **callbacks** or **slots** assigned for that widget / graphical object. There are usually default (and in most cases `virtual`) event-handlers already provided by the toolkit for handling all pre-defined signals, therefore, unlike previous designs where the developer had to write the entire main-loop and handler for each and every message himself (think WINAPI), the developer only has to worry about the signals he needs to implement new functionality on. Now this design is being used in most modern toolkits as far as I know. There are Qt, GTK+, FLTK etc. There is Java Swing. C# even has a language feature for it ( events and delegates ), and Windows Forms has been developed on this design. In fact, over the last decade, this design for GUI programming has become a kind of an unwritten standard. Since it increases productivity and provides greater abstraction. However, my question is: **Is there any alternative design, that is parallel or practical for modern GUI programming?** i.e Is the Signals + Slots design, the only practical one in town? Is it feasible to do GUI Programming with any _other_ design? Are any modern (preferably successful and popular) GUI toolkits built on an alternative design?