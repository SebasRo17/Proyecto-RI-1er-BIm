Ok, I know that using singletons is generally a bad practice, but if I do it (for db connection, logging et al.) am I allowed to go (in respect of clean design) with a module defined variable that is initialized during the startup. eg.:               if __name__ == '__main__':         datasources.database.db = DB(dbpath)      where db is declared here, at the top level of a module:               db = None          class DB(object):         def __init__(self, path):              ....      What could be a reasonable compromise between passing the db for each object that uses it in the "true OO way" and having the global?