In divide and conquer algorithms such as quicksort and mergesort, the input is usually (at least in introductory texts) split in **two** , and the two smaller data sets are then dealt with recursively. It does make sense to me that this makes it faster to solve a problem if the two halves takes less than half the work of dealing with the whole data set. But why not split the data set in three parts? Four? _n_? I guess the work of splitting the data in many, many sub sets makes it not worth it, but I am lacking the intuition to see that one should stop at two sub sets. I have also seen many references to 3-way quicksort. When is this faster? What is used in practice?