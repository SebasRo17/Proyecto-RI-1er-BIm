I'm designing a language conceptually similar to Go. In Go, for example, the keyword `func` is used for defining functions:               func abs (a int) uint { ... }      Same for defining types. However, I was thinking of a grammar that doesn't consider these keywords. For example:               abs (a int => uint) { ... }      Or, for structures:               Tree {size int; age int}      What's wrong with such a syntax? Are there some potential problems that could be encountered? For example, I thought that if there was a construct that would use the same grammar as a struct, such as an interface, it would be vague (is this a struct or an interface)?