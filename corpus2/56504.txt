V10 introduces an operator form for several functions perhaps primarily due to their role in queries as part of introducing data science functionality. At first pass it seems a lot of effort to add some syntactic sugar (given an equivalent pure functional form only ever requires an extra couple of symbols - (`#`, `&`) )? For example,`Map[f,#]&[{a,b,c}]`can now be shortened to `Map[f][{a,b,c}]`, - slightly more compact but then again perhaps not such an improvement on an existing operator (short) form - `f/@{a,b,c}`. So, are there some compelling examples that illustrate the rationale behind the introduction of this new construct? **Conclusion** To summarize the points made in all the informative responses:   * In addition to avoiding the symbols (`(#&)`) operator forms can eliminate the need for `Function` in nested definitions.   * The gains of using operator form are cumulative as they are chained together either in postfix, prefix or for some, infix form.   * While not necessarily restricted to this area the motivation and applicability of operator forms stems from the need to provide functions as arguments in `Dataset`.   * Many operator forms are built-in but when not they can be readily defined.   * The pure and operator forms are not always semantically equivalent (natively or user-defined) with, for example, `Query` using their different patterns to interpret differently.   * They can potentially be used to improve efficiency not just via code's reduced leaf-count but in reduced algorithmic complexity.   * They are potentially a rich source of language improvement from mimicking natural language patterns, code refactoring, debugging or automated and non-deterministic parsing via corpus-derived context.