I have a class which represents an entity object in our system (for sake of argument, a Customer object)               public class Customer()     {       private int id;       private String name;       ... // 30+ fields            public Customer()       {         // empty constructor!       }            // getters and setters     }      I'm trying to refactor this so that the fields are extracted into their own objects where they are more sensibly grouped, and at the same time creating parameterised constructors - with the intent I could then lose the setter methods and make my objects immutable (since this is apparently a Good Thing(TM)). However, this doesn't make any sense - sometimes I need to update a customer's information! It's clearly not immutable. Should I just not make this class immutable - and can I apply the same argument to all my entity classes?