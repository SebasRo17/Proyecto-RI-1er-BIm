NDSolve has an interface for repeatedly solving an equation with different initial conditions without having to analyze the equation and set up the solving algorithm each time. This can improve performance dramatically. For example,               In[1]:= nd = First@NDSolve`ProcessEquations[{y'[t] == -y[t], y[0] == 1}, {y}, t]          Out[1]= NDSolve`StateData[<0.>]           In[2]:= solve[y0_] := Module[{}, nd = First@NDSolve`Reinitialize[nd, y[0] == y0];                             NDSolve`Iterate[nd, 1]; NDSolve`ProcessSolutions[nd]]          In[3]:= Timing[NDSolve[{y'[t] == -y[t], y[0] == #}, {y}, {t, 0, 1}] & /@Range[0.001, 1, 0.001]] // First          Out[3]= 0.527396          In[4]:= Timing[solve /@ Range[0.001, 1, 0.001]] // First          Out[4]= 0.250309      Is there an analogous interface to `NIntegrate` that would allow me to process the integral once, then do integrations using the same integration method (as chosen by `NIntegrate`) repeatedly using different constants in the integrand and/or different limits of integration?