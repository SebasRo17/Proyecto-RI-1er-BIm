My question is in a sense a follow up of this post on Time Series in .Net. Ideally, you would like to expand the basic `TimeSeries<T>` class by something like `NumericTimeSeries<T>`, where you would want to make sure that the type `T` implements the common numerical operators `+`, `-`, `*`, `/', ... I am not sure what would be the most intelligent way to do this. My first idea is to create an abstract class `Number`, with abstract methods `Add(Number n1,Number n2)`, `Multiply(Number n1,Number n2)`, `Subtract(Number n1,Number n2)`, `Divide(Number n1,Number n2)` (and so on). I would then call these methods in the operator overloads. I can then create concrete classes such as `IntNumber`, `DoubleNumber`, `MatrixNumber`, `ComplexNumber` (and so on). The problem is that in the methods implementation, I would have to make an awful `switch` to determine what the class of each parameter is, and it's not very elegant. Would you have done it the same way? Has something already be done? In F# I would use and inline functions, or pattern matching using discriminated unions. But what should I do in C#? **EDIT** : There was an awesome answer by Olivier Jacot-Descombes. However, I would like to specify a feature. The numbers can apply the operator between them (you can multiply a matrix with a scalar for example). The problem with this is that you cannot know in advance the type of the result; multiplying a vector (transposed) and a vector returns a double...