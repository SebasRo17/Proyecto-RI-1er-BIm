I'm writing a Python library which exposes a certain event listener interface. The user can register callbacks to handle different types of events. There is also a function which handles the actual events. This function does something like this:               def get_event():         while(1):             event = wait_for_event() # blocking call             process_event(event)      This function is meant to be run in its own thread. So really, the way to use it is               def start_listening():         thread = threading.Thread(target=get_event)         thread.start()      For simplicity I'm ignoring locking mechanisms and such. In the module API, I can either expose `get_event` or `start_listening`. What are the pros and cons of doing one versus the other? Is there a "pythonic" way of doing this?