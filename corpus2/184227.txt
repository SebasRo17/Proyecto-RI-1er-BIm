I recently started working on a PHP application that was built many years ago before the advent of objects and namespaces in PHP. The code is procedural, does not separate presentation logic from business logic, lacks a front end point (front controller), and has files everywhere with a seemingly random folder heirarchy. However, it works great for customers and despite the code mess it's actually pretty fast. I'd like to slowly move the codebase into something more maintainable and organized. I put MVC in this title, but truthfully all I really mean is an organized and maintainable. Key objectives of this effort are:   * Not degrade the customer experience in any sort of way while this overhaul takes place (a rewrite is not an option)   * Fully separate views from logic    * At least have a "best practice" or method for implementing new application end points (routes)   * Have a consistent method or layer for persisting data   * Begin encapsulating as much code as possible in objects so that unit testing is feasible at some point in time.