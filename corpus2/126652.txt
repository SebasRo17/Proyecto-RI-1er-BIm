Should the expected results of a unit test be hardcoded, or can they be dependant on initialised variables? Do hardcoded or calculated results increase the risk of introducing errors in the unit test? Are there other factors I haven't considered? For instance, which of these two is a more reliable format?               [TestMethod]     public void GetPath_Hardcoded()     {         MyClass target = new MyClass("fields", "that later", "determine", "a folder");         string expected = "C:\\Output Folder\\fields\\that later\\determine\\a folder";         string actual = target.GetPath();         Assert.AreEqual(expected, actual,             "GetPath should return a full directory path based on its fields.");     }          [TestMethod]     public void GetPath_Softcoded()     {         MyClass target = new MyClass("fields", "that later", "determine", "a folder");         string expected = "C:\\Output Folder\\" + string.Join("\\", target.Field1, target.Field2, target.Field3, target.Field4);         string actual = target.GetPath();         Assert.AreEqual(expected, actual,             "GetPath should return a full directory path based on its fields.");     }      **EDIT 1:** In response to DXM's answer, is option 3 a preferred solution?               [TestMethod]     public void GetPath_Option3()     {         string field1 = "fields";         string field2 = "that later";         string field3 = "determine";         string field4 = "a folder";         MyClass target = new MyClass(field1, field2, field3, field4);         string expected = "C:\\Output Folder\\" + string.Join("\\", field1, field2, field3, field4);         string actual = target.GetPath();         Assert.AreEqual(expected, actual,             "GetPath should return a full directory path based on its fields.");     }