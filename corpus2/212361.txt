How can I unit test my generic repository? Unit testing code:               [TestClass]     public class UnitTestLanguage     {         private IUnityContainer _unityContainer;         private IUnitOfWork _uow;         private IGenericRepository<Language> _languageRepository;              [TestInitialize]         public void TestInitialize()         {             _unityContainer = new UnityContainer();             _uow = _unityContainer.Resolve<UnitOfWork>();             _languageRepository = _uow.GetRepository<Language>();         }              [TestCleanup]         public void TestCleanup()         {             _uow = null;             _unityContainer = null;             _languageRepository = null;         }                   [TestMethod]         public void TestMethodInsertLanguage()         {             var newLanguage = new Language { Name = "test_language" };             _languageRepository.Insert(newLanguage);             var insertedRowCount = _uow.SaveChanges();                  var insertedLanguage = _languageRepository.Find(newLanguage.Id);             _languageRepository.Delete(newLanguage);             var deletedRowCount = _uow.SaveChanges();                  Assert.AreEqual(insertedLanguage.Name, newLanguage.Name);             Assert.AreEqual(1, insertedRowCount);             Assert.AreEqual(1, deletedRowCount);         }     }      I use something like above. But I dont know this is the correct way to test repository. I cant find useful tutorial/article. How should be unit testing with generic repository CRUD operations?