Today I noticed that I basically never use `protected` methods in C++ code, because I rarely feel the need to call non-public methods of a parent. I do use protected in Java in the template method pattern, but since you can override private methods in C++, I don't need `protected` there, either. So what are some real-world scenarios where I would want to use `protected` methods in C++ code? (Note that I'm not too fond of implementation inheritance in general, that might explain a lot...)