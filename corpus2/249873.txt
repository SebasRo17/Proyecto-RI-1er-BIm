_Note: The business domain being a bit complicated to explain, I replaced the names of actual classes by more illustrative examples._ I'm writing an application in which the business layer returns a set of `Pet`s: either a `Cat` or a `Dog`:               class Pet(metaclass=ABCMeta): # Pet is abstract.         ...         getName(self):         ...          class Dog(Pet):         ...          class Cat(Pet):         ...      I want to display those pets using a given format which is determined by the user. For example, the user may ask to show only the name of each pet, or obtain a JSON representation, or have a rich representation which is biased towards cats, i.e. it _displays much more information about cats than about dogs_. In the presentation layer, I have an abstract class `Output` with an abstract method which outputs the pets, and then I have concrete implementations of every type of output: a `class NameOutput(Output)`, a `class JsonOutput(Output)`, or a `class RichOutput(Output)`. The first two ones are easy: they just use the abstract `Pet` class, and don't care if it's a dog or a cat. The problem is the last class, since the logic is different for a dog than for a cat.               class Output(metaclass=ABCMeta): # Output is abstract.         generateOutput(self):             for pet in self.pets:                 yield self.processPet(pet)              @abstractmethod         processPet(self, pet):             pass          class NameOutput(Output):         ...          class JsonOutput(Output):         ...          class RichOutput(Output):         ...         processCat():             ...         processDog():             ...      Determining the type of pet during the execution and calling different methods for each pet feels ugly. Also, when a maintainer would need to add `class Hamster(Pet)`, he will learn the hard way that he also should create an additional method in `RichOutput(Output)`. On the other hand, moving the output logic to the pets themselves doesn't look right either: what if I need to create an additional display format? What are my options? How is this problem usually solved?