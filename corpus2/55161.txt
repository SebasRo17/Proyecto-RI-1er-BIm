I am wondering if there is a way to speed up this function that solves a system of ordinary differential equations with NDSolve? Thus far I've tried specifying a few different methods such as LSODA, BDF, StiffnessSwitching; however, none of these has significantly affected the execution time. Is it possible to use Compile here?               Atotal = 100.;      Btotal = 100.;      Ctotal = 100.;      Rtotal = 100.;      input = Table[i, {i, 0.5, 6.5, 1.0}];     runs = Table[i, {i, 1, 6}];     simtime = 60*{15., 30.};           chiscore[input_Real, runs_Integer, simtime_Real, k1_Real,       k1m_Real, k2_Real, k2m_Real, a_Real, k3_Real, k3m_Real,        k4_Real, k4m_Real, k5_Real, k5m_Real, k6_Real, k6m_Real,       kn_Real, kc_Real, k8_Real, k8m_Real, k9_Real, k9m_Real,       k10_Real, k11_Real, negoff_, Atotal_Real, Btotal_Real,       Ctotal_, Rtotal_Real] :=       Block[{soln, t, A, B, Cin, Cout, R},          soln = NDSolve[             {               Derivative[1][A][t] == (((k1*input)/(1 + negoff*(R[t]/k10)))*               (Atotal - A[t]))/(k1m + (Atotal - A[t])) - (k2*A[t])/(k2m + A[t]),               Derivative[1][B][t] == (k3*A[t]*(Btotal - B[t]))/               (k3m + (Btotal - B[t])) - ((k4 + k11*R[t])*B[t])/(k4m + B[t]),               Derivative[1][Cin][t] == ((k5*B[t] + a*Cin[t])*(Ctotal - Cin[t] - Cout[t]))/               (k5m + (Ctotal - Cin[t] - Cout[t])) - (k6*Cin[t])/(k6m + Cin[t])               - kn*Cin[t] + kc*Cout[t],                Derivative[1][Cout][t] == kn*Cin[t] - kc*Cout[t],               Derivative[1][R][t] == (k8*Cout[t]*(Rtotal - R[t]))/               (k8m + (Rtotal - R[t])) - (k9*R[t])/(k9m + R[t]),             A[0] == 0.,             B[0] == 0.,              Cin[0] == 0.,             Cout[0] == 0.,             R[0] == 0.            },           {A, B, Cin, Cout, R},           {t, 0., simtime}][[1]]        ]          Table[chiscore[input[[i]], runs[[i]], simtime[[2]], 4.0, 0.0043,       0.0713, 0.039, .02, 1.561, 0.502, 0.0752, 0.000284, 1.48658,       0.0575, 0.746837, 0.442668, 0.182, 0.00176, 0.0375, 2.73359,       0.000685, 0.0567, 0.1735, 0.0367, 1.0, Atotal, Btotal, Ctotal,      Rtotal][[1]],     {i, 1, 5}]; // Timing