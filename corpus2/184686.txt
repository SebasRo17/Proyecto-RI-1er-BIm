I'm reading Accelerated C++ and in Chapter 4 they bring up the concept of lvalues. There's an example of something that _shouldn't_ work, but after trying it myself I found that it does indeed work. Specifically they state that, given these functions:               // return an empty vector     vector<double> emptyvec()     {       vector<double> v;       return v;     }          // read things from an input stream into a vector<double>     // (I'm leaving out the function body here because it's irrelevant)     istream &read_things(istream& in, vector<double>& hw);      This should not be allowed:               read_stuff( cin, emptyvec() );      Because emptyvec() is an expression and returns a temporary object (a _non- lvalue_ as they called it in the book). However, this not only compiles but actually runs (Windows 7/VisualStudio 2010). So, what's going on? Was this just a bad example on the authors' part, or is there something else happening that I don't understand. Thanks.