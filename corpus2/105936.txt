Test Driven Development implies _writing the test before the code_ and following a certain cycle:   * Write Test   * Check Test (run)   * Write Production Code   * Check Test (run)   * Clean up Production Code   * Check test (run) As far as I'm concerned, this is only possible if your development solution allows you to very quickly switch between the production and test code, and to execute the test for a certain production code part extremely quickly. Now, while there exist lots of Unit Testing Frameworks for C++ (I'm using Bost.Test atm.) it does seem that there _doesn't_ really exist any decent (for _native C++_ ) Visual Studio (Plugin) solution that makes the TDD cycle bearable regardless of framework used. "Bearable" means that it's a one-click action to run a test for a certain cpp file without having to manually set up a separate testing project etc. "Bearable" also means that a simple test starts (linking!) and runs very quickly. So, what tools (plugins) and techniques are out there that make the TDD cycle possible for native C++ development with Visual Studio? Note: I'm fine with free or "commercial" tools. **Please** : **No** framework recommendations. (Unless the framework has a dedicated Visual Studio plugin and you want to recommend the plugin.) * * * Edit **Note** : The answers so far have provided links on how to integrate a Unit Testing framework into Visual Studio. The resources more or less describe how to get the UT framework to compile and get your first Tests running. _This is **not** what this question is about._ I'm of the opinion that to really work productively, having the Unit Tests in a manually maintained(!), separate vcproj from your production classes will add so much overhead that TDD "isn't possible". As far as I am aware, you do _not_ add extra "projects" to a Java or C# thing to enable Unit Tests and TDD, and for a good reason. This _should_ be possible with C++ given the right tools, but it seems (this question is about) that there are very little tools for TDD/C++/VS. * * * Googling around, I've found one tool, VisualAssert, that seems to aim in the right direction. However, afaiks, it doesn't seem to be in widespread use (compared to CppUnit, Boost.Test etc.). * * * Edit: I would like to add a comment to the context for this question. I think it does a good summary of outlining (part of) the problem: (comment by Billy ONeal) > Visual Studio does not use "build scripts" that are reasonably editable by > the user. One project produces one binary. Moreover, Java has the property > that Java never builds a complete binary -- the binary you build is just a > ZIP of the class files. Therefore it's possible to compile separately then > JAR together manually (using e.g. 7z). C++ and C# both actually link their > binaries, so generally speaking you can't write a script like that. The > closest you can get is to compile everything separately and then do two > linkings (one for production, one for testing).