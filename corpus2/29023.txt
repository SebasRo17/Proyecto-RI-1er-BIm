Has anyone had any success using the `AbortEvaluation()` function in `IKernelLink` to stop a computation and then do more computation and retrieve results?   I've managed to find the jlink sample and some description on how to set it up; Put`Evaluate` and `WaitForAnswer()` on one thread, and call `AbortEvaluation()` from another. The following is a sample code that I'm written according to the description:                       var mlink = MathLinkFactory.CreateKernelLink();             var t = Task.Factory.StartNew(                 () =>                 {                     mlink.Evaluate("Do[2+2, {200000000}]");                     Debug.WriteLine("Waiting for Result...");                     mlink.WaitForAnswer();                 }             );                  Thread.Sleep(200);             Task.Factory.StartNew(                 () =>                 {                     Stopwatch st = new Stopwatch();                     st.Start();                     while (!t.IsCompleted)                     {                         if (st.ElapsedMilliseconds > 100)                         {                             mlink.AbortEvaluation();                             Debug.WriteLine("Action Aborted");                             break;                         }                     }                     st.Stop();                 }             );                  Task.WaitAll(new Task[] {t});                  Debug.WriteLine("Result = " + mlink.GetString());             mlink.Evaluate("1 + 1");             mlink.WaitForAnswer();             Debug.WriteLine("1 + 1 = " + mlink.GetString());             mlink.Evaluate("2 + 2");             mlink.WaitForAnswer();             Debug.WriteLine("2 + 2 = " + mlink.GetString());             mlink.Evaluate("4 + 4");             mlink.WaitForAnswer();             Debug.WriteLine("4 + 4 = " + mlink.GetString());             mlink.Close();      Output is: Waiting for Result..., Action Aborted, Result = In[1]:= , 1 + 1 = Null, 2 + 2 = 2, 4 + 4 = 4 I've tried the class `MathKernel` as well which results in the same problem where the results are shifted off (considering the implementation of `MathKernel` uses `IKernelLink` this is to be expected). Several other attempts has resulted in MLGet out of sequence errors or attempt to read protected memory. * * * EDIT: Nevermind, I forgot to discard the initial packet. Simply add the line `mlink.WaitAndDiscard()` at after `CreateKernelLink();` for it to work. MathKernel abort works as well. Trick appears to be launching them in two separate threads.