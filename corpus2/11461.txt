I know the following code will form a recursion:               Clear["Global`*"]     u[i_, n_] := u[i - 1, n] + u[i, n - 1]     u[0, n_] := n     u[i_, 0] := i          u[2, 2]      (* => 8 *)      But if I store the recursive relationship in a variable first, the recursion will fail:               Clear["Global`*"]     exp := u[i - 1, n] + u[i, n - 1]     u[i_, n_] := exp     u[0, n_] = n     u[i_, 0] = i          u[2, 2]      (* ERROR *)      Why? I guess maybe `exp` "shields" `i` and `n`, so, I tried something like:               Clear["Global`*"]     exp := u[i - 1, n] + u[i, n - 1]     u[i1_, n1_] := (i = i1; n = n1; exp)     u[0, n_] := n     u[i_, 0] := i     u[2, 2]     Table[Table[{i, u[i, n]}, {i, 0, 2}], {n, 0, 2}];     u[2, 2]     (* =>5        =>5 *)      …As you see, it doesn't give the right answer. A even "amazing" case is this:               Clear["Global`*"]     exp := u[i - 1, n] + u[i, n - 1]     u[i1_, n1_] := (i = i1; n = n1; u[i, n] = exp)     u[0, n_] := n     u[i_, 0] := i     u[2, 2]     Table[Table[{i, u[i, n]}, {i, 0, 2}], {n, 0, 2}];     u[2, 2]     (* =>5         =>14 *)      Ah…the process of recursion is so complex, how to explain all these? And, how to solve the original problem?