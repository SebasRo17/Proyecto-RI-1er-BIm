I have a class called `Parent`, and classes called `Child1`, `Child2`, etc, I have noticed that child classes have a series of function calls that had same (duplicated) lines of code that could be refactored into a function call. So I created a method `getData()`, which I put into the parent class and put those duplicated code lines in the method, and removed original lines from child classes. Two things happened:   * Dynamic nature of PHP allows child classes to call the method from the parent class, so things still work despite children not having (but calling) that specific function. **That's good**   * my IDE can no longer jump from function instantiation inside the parent class to function body in the child class(es). Because it doesn't know which one to pick, nor one exists in the parent class.   **That's kind of bad** \- at least I think that it is. I am losing the ability of IDE/PHP to tell me if there are errors. i.e. it looks like I can invent any function I want in parent class, and PHP will just think "oh maybe it's in the child class", when it in fact may not be - a fact that will only be discovered during run time, or using special static source code tools on PHP. Is there a more proper way to refactor my code? Namely, to have IDE/PHP be able to validate things a bit better than what I have now.