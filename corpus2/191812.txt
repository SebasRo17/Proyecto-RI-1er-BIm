I have the following situation: I have to create a website and a web service that will _`share a part of the functionalities`_. This is why I do not want to write code twice. I have thought of the following architecture: **MyApp.BusinessLogic** \--> here we save the DataModels to the database **MyApp.DataAccess** -> DataModels & Entity & mapping * * * **MyApp.UI.Models** -> ViewModels **MyApp.UI.ServiceLayer** -> Acceses the Business Logic, creates the UI ViewModels for the website, and transforms the ViewModels back into DataModels for saving with the help of the BusinessLogic Layer **MyApp.WebSite** * * * **MyApp.WS.Models** \- >Ws Models, these will be the objects passed between the client and the WS **MyApp.WS.ServiceLayer** -> Accesses the business Logic, creates the WS Models for the web service, and transfoms the WS.Models back into DataModels for saving with the help of the BusinessLogic Layer **MyApp.WebService** * * *   * Is the architecture overkill ?    * What problems will I encounter ?    * Will I have problems with the controllers in the ASP.NET MVC website ?