First define a function `meshGrid` to generate some points:               meshGrid[{x1_, x2_, y1_, y2_}, h0_] :=        With[{yh0 = h0*Sqrt[3.]/2},          Array[{(#1 - 1)*h0 + x1 + (1 + (-1)^#2) h0/4, (#2 - 1)*yh0 +              y1} &, Ceiling@{(x2 - x1)/h0, (y2 - y1)/yh0}]]~Flatten~1;          p = meshGrid[{-1, 1, -1, 1}, 0.05];      The computing time of `DelaunayTriangulation`:               Needs["ComputationalGeometry`"];     DelaunayTriangulation[p] // Timing // First      In my computer it gives `18.533s` Matlab saves much time if does the same thing: ![enter image description here](http://i.stack.imgur.com/5s0vV.png) **====================================Update=====================================** @halirutan really made a great attempt to point the way, but I failed to compile and didn't get the right answer, maybe I should learn something before. Here I find another way in this blogpost, which also relates to Qhull but easier to implement. You can get more infomation from here. Before changing anything, two files need to be downloaded, one is mPower, from which we need is mPower.m, another one is Qhull. You can get the rest steps from that blog, only step two is worthy of note: step 2: download qhull for windows, you may need to change the name, and put it into the folder C:\qhull. **Then Copy all the *.exe files in bin folder and paste them in folder qhull, errors will occur without this step.**