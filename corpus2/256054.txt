Basically, I have code that looks like this. It's a `typedef` and a set of methods that revolve around that `typedef`.               class foo {         // Foo stuff...              // Registration Stuff         private:             typedef std::map<std::string, std::string> MTRegistrationParams;                  void DispatchRegistrationMessage (MTRegistrationParams const &, std::string destination_id);             static std::string BuildRegistrationMessage (MTRegistrationParams const &, std::string message_id); // Only called by DispatchRegistrationMessage              // more Foo stuff...     };      I am thinking it might be clearer to just make a little mini-class, to help logically separate those methods from Foo's structure.               class foo {         // Foo stuff...              // Registration Stuff         private:             struct MTRegistrationParams : public std::map<std::string, std::string> {                 void DispatchRegistrationmessage (foo &, std::string const & destination_id);                 private:                     std::string BuildRegistrationMessage (std::string const & message_id);         };              // more Foo stuff...     };      The thing is... I don't usually make derived classes unless for the sake of virtual methods, and deriving from a standard container seems REALLY weird. Am I being overly concerned, or is deriving from standard containers just to decorate them with methods genuinely bad practice?