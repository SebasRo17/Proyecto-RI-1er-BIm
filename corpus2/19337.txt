Assume the following situation: I have a _WolframLibrary_ function which gets as parameter an integer tensor (which is for simplicity of rank 1) and the function should return an integer list through _MathLink_. My question is about the used types in this function only. The start of such a function could look like the following, where I use _WolframLibrary_ functions declared in `WolframLibrary.h`               EXTERN_C DLLEXPORT mint func( WolframLibraryData lib, mint argc,                                    MArgument *args, MArgument return_value)     {       MTensor tensor_u0 = MArgument_getMTensor(args[0]);       mint *u0 = lib->MTensor_getIntegerData(tensor_u0);           // ...     }      The full declaration of the last function is               mint* (*MTensor_getIntegerData)( MTensor);      The array `u0` contains the linear data of our tensor. Let's say I worked with this array, I used consistently `mint` in all procedures and I want to send now the `mint *result` array back through _MathLink_. In the _MathLink_ API we have several functions for sending integer lists               int MLPutInteger16List(MLINK link, short *a,int n)     int MLPutInteger32List(MLINK link, int *a,int n)     int MLPutInteger64List(MLINK link, mlint64 *a, int n)      Usually you just use `MLPutIntegerList` which uses the integer type of the machine. Unfortunately, since version 9 the _MathLink_ integer type and the _WolframLibrary_ integer type differ on my machine. Additionally, the types used in _MathLink_ seem to be completely unrelated to the _WolframLibrary_ types. While I can use the types in a pure _WolframLibrary_ function consistently and hopefully portable, mixing those two technologies seems not possible easily. What I would have to do is to look up the underlying type of `mint`, which is `long` on my machine here, but `int` on the Windows machine of my colleague and probably `long long` on our Windows 7 64bit box. After that I can select the appropriate `MLPut...` function for my special system. This is not portable and I basically have to repeat all system-dependent `#ifdef`s which are already there in `mathlink.h` and friends. **Question:** What am I missing here? There must be a portable and consistent way to cast both types.