First I want to say Java is the only language I ever used, so please excuse my ignorance on this subject. Dynamically typed languages allow you to put any value in any variable. So for example you could write the following function (psuedocode):               void makeItBark(dog){         dog.bark();     }      And you can pass inside it whatever value. As long as the value has a `bark()` method, the code will run. Otherwise, a runtime exception or something similar is thrown. (Please correct me if I'm wrong about this). Seemingly, this gives you flexibility. However, I did some reading on dynamic languages, and what people say is that **when designing or writing code in a dynamic language, you think about types and take them into account, just as much as you would in a statically typed language.** So for example when writing the `makeItBark()` function, you intent for it to only accept 'things that can bark', and you still need to make sure you only pass these kinds of things into it. The only difference is that now the compiler won't tell you when you made a mistake. Sure, there is one advantage to this approach which is that in static languages, to achieve the 'this function accepts anything that can bark', you'd need to implement an explicit `Barker` interface. Still, this seems like a minor advantage. Am I missing something? What am I actually gaining by using a dynamically typed language?