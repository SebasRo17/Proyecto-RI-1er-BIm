So I wanted to try out this challenge on reddit which is mostly about how you structure your data the best you can. I decided to challenge my C++ skills. Here's how I planned this.   * First, there's the **Game** class. It deals with time and is the only class main has access to.   * A game has a **Forest**. For now, this class does not have a lot of things, only a _size_ and a _Factory_. Will be put in better use when it will come to SDL-stuff I guess   * A **Factory** is the thing that deals with the _Game Objects_ (a.k.a. Trees, Lumberjack and Bears). It has a vector of all _GameObjects_ and a queue of _Events_ which will be managed at the end of one month.   * A **GameObject** is an abstract class which can be updated and which can _notify_ the _Event Listener_   * The **EventListener** is a class which handles all the _Events_ of a simulation. It can recieve events from a Game Object and notify the _Factory_ if needed, the latter will manage correctly the event. So, the **Tree** , **Lumberjack** and **Bear** classes all inherits from **GameObject**. And **Sapling** and **Elder Tree** inherits from **Tree**. Finally, an **Event** is defined by an _event_type_ enumeration (LUMBERJACK_MAWED, SAPPLING_EVOLUTION, ...) and an _event_protagonists_ union (a GameObject or a pair of GameObject (who killed who ?)). * * * I was quite happy at first with this because it seems quite logic and flexible. But I ended up questionning this structure. Here's why :   1. I dislike the fact that a **GameObject** need to know about the Factory. Indeed, when a Bear moves somewhere, it needs to know if there's a Lumberjack ! Or it is the Factory which handles places and objects. It would be great if a GameObject could only interact with the EventListener... or maybe it's not that much of a big deal.   2. Wouldn't it be better if I separate the Factory in three vectors ? One for each kind of GameObject. The idea would be to optimize research. If I'm looking do delete a dead lumberjack, I would only have to look in one shorter vector rather than a very long vector.   3. Another problem arises when I want to know if there is any particular object in a given case because I have to look for _all_ the gameObjects and see if they are at the given case. I would tend to think that the other idea would be to use a matrix but then the issue would be that I would have empty cases (and therefore unused space).   4. I don't really know if **Sapling** and **Elder Tree** should inherit from **Tree**. Indeed, a Sapling _is_ a Tree but what about its evolution ? Should I just delete the sapling and say to the factory to create a new Tree at the exact same place ? It doesn't seem natural to me to do so. How could I improve this ?   5. Is the design of an **Event** quite good ? I've never used _unions_ before in C++ but I didn't have any other ideas about what to use. * * * Well, I hope I have been clear enough. Thank you for taking the time to help me !