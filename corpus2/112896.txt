I have a degenerate string `S1=xadcdax`, where `x` can be replaced by any of the four characters `a`, `b`, `c`, or `d`. This `S1` string is match with another non-degerate string `S2=dcbaa`. I can first use brute force to find all possible strings of `S1`, which requires `4^n` (`n` is the number of degenerates in a string), so the complexity is `4^2`. After that, for each string of `S1` matched with `S2` by using dynamic programming which requires `(i x j)` running time (where `i` is the length of `S1` and `j` is the length of `S2`). But the total running time will be `4^n x ij = 4ij^n`, which is quite slow. Is there a more efficient algorithm for this?