After asking about the implementation in Ruby of the Identity Map pattern because the potential memory leak in long running server apps, I am considering my initial concept of that pattern. Initially I thought it was intended to cache database results AND guarantee that **only one instance of the same object exist in memory**. Is this last assumption right? Within DDD there is the tendency where Entity equality is based on having the same **id** not the same memory address, that fits perfectly with the memory problem, however after using many ORMs I always had the "feeling" of having a **unique instance** of my objects. Is this assumption a _dangerous idea_? Should I normally be concerned about my objects having multiple instances? Or even being out of sync with the database?