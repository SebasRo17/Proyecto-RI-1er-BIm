Feeling slightly witty the other day, I wrote an `eachWithIndex:` method in a `NSArray` category. It has a typedef like this:               typedef void (^processItem)(id item, int index);      and the method looks like this:               - (void)eachWithIndex:(processItem)block {         for (int i=0; i<self.count; i++) {             id item = [self objectAtIndex:i];             block(item, i);         }     }      However, if my block contains a `return` at any point, it doesn't jump out of the calling method (nor the block). Consider this code in Ruby:               def blah         %w{one two three}.each_with_index {|thing, i| puts "#{i}=#{thing}"; return "hello!" if i==1 }         puts "blah does more stuff"     end      when `i` reaches one, the `blah` method will end. This does not happen in Obj-C, and I feel that it should. Are blocks more integrated into Ruby than Objective-C?