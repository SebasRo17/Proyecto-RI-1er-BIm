I am new to caching and trying to understand how it works in general. Below is code snippet from ServiceStack website.               public object Get(CachedCustomers request)     {         //Manually create the Unified Resource Name "urn:customers".         return base.RequestContext.ToOptimizedResultUsingCache(base.Cache, "urn:customers", () =>         {              //Resolve the service in order to get the customers.              using (var service = this.ResolveService<CustomersService>())                     return service.Get(new Customers());          });     }          public object Get(CachedCustomerDetails request)     {         //Create the Unified Resource Name "urn:customerdetails:{id}".         var cacheKey = UrnId.Create<CustomerDetails>(request.Id);         return base.RequestContext.ToOptimizedResultUsingCache(base.Cache, cacheKey, () =>         {             using (var service = this.ResolveService<CustomerDetailsService>())             {                  return service.Get(new CustomerDetails { Id = request.Id });             }         });     }      My doubts:   1. I've read that cached data is stored on same/distributed server RAM. So, how much data can it handle, suppose in first method if customers count is more than 1 million, doesn't it occupy too much memory.   2. Ingeneral, do we apply caching only for GET operations and invalidate if it gets UPDATE'd.   3. Please suggest any tool to check memory consumption of caching.