Recently I came across a set of problems which would be solved most easily within an object-oriented approach. I first attempted to solve them by other means, but found the complexity of the code growing too fast and, while individual functions used a mixture of styles, the overall feel and organization of the code was de-facto procedural. Having looked at the final code, I saw that I would have written it much faster and cleaner in Java, which is when I realized that OO was needed. Basically, I needed it to reuse some behavior and decrease coupling between components. We all know that there were a number of attempts on implementing OO extensions for Mathematica. However, none of them IMO were very simple, and none of those I looked at had a natural "look and feel" for Mathematica (I could have missed some). OTOH, we also know that Mathematica has powerful metaprogramming capabilities, which should make it possible to implement the core of an OO extension rather easily. Since OO is a broad paradigm, here are some requirements to restrict the problem. The desired OO extension should   * _Be idiomatic_. Programming in it should feel natural for experienced Mathematica users. In particular, it should go well with immutable Mathematica expressions, and have the least possible problems concerning interoperability with Mathematica (garbage collection - related problems etc).   * _Support instantiation, inheritance and polymorphism_. By inheritance I mean reuse of behavior (methods) rather than state (fields).   * _Reuse_ as much of the Mathematica's core constructs as possible   * _Limit the things that can be done with it as little as possible_ , compared to the programming techniques and tricks we are used to in Mathematica   * _If possible, have at least minimally convenient syntax_ for things like method calls.   * _Implementation should be simple_ in the sense that it should not introduce too many exterior constructs, such as `ToString` \- `ToExpression` cycles, needless manipulations with contexts, creation of new symbols which are not strictly necessary, etc.  I am not so much worried about efficiency here, since the intended purpose for such an extension is more to help with larger-scale code organization for certain classes of tasks, than to be used with millions of light-weight objects. In many previous questions on similar topics, the two rather separate topics were often mixed together. One concerns mutable struct-like data structures and their possible implementations in Mathematica, and the other was about OO proper. So, to clarify a bit more, I am not so much interested in the former topic here. I am rather more interested in the dynamic aspects (behavior reuse), and ways to conveniently package code and organize larger projects, but not so much in efficient mutable data structures. In other words, the subject matter is what can the object orientation bring to the table for larger Mathematica projects, and how can we make the most out of it in Mathematica. **So, the question is** : can we have a core of such an OO extension in under 100 lines of Mathematica code?