I am currently at the task to create an hierarchic user management system. The requirements for me are to have **users** with rights (roles), **customers** with rights and **groups** (containers for customers and subgroups). The customers and groups can have users assigned to and those users should have access only to groups and customers below their assigned groups/customers. For this I am currently looking at ways how to implement it, my current preferred solution would be based on MongoDB with this concept: MongoDB array of ancestors The `ancestors` array would then be added to groups and customers so selecting all accessable groups/customers would be really fast by just looking into the `ancestors` array. Also updating the ancestors array seems to be pretty fast also if moving a group with ten thousands of groups/customers. Tough the problem I see is when the groups are being moved below other groups, for this I would have to remove the old parents from the ancestors trees with update and then add the new parents to the ancestors array with another separate update. The problem is that MongoDB is not able to isolate those 2 operations and therefore the chance for race conditions exist if the groups would be moved at the exact same time and the removing and adding of ancestors would overlap. Any ideas how to solve this within Mongo? I know an ACID conform relational DB could help me here, but I don't want to lose the ease of use when adding settings to a customer/user just by adding a new subdocument to them, also scalability may be easier.   Would LDAP be a good solution for this? Tough I have no experience at all in LDAP.   Another idea would to regularly check and update the ancestors if something is wrong by recursively checking all the elements. Tough ths doesn't sound very clean to me ;)