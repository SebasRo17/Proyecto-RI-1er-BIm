I was thinking about how I can decouple a web-application completely into a server-side and a client-side component. I want to decouple the app to the extent that I can host both components on seperate servers. So, for example, I would have:   1. Server 1 (API Server): A server-side component running on `Django` on something like Heroku or EC2.   2. Server 2 (Static Server): A client-side component running on `AngularJS` on a static server like S3 or CloudFront. The communication between these components will take place using a JSON REST API. **Questions:**   1. Is this approach common? advisable? > Does a company like Facebook or Twitter _mostly_ utilise the same API for > the webapp as it does for its mobile apps or its open API?   2. Is it a good idea to use oAuth2 for the login process? > So the user is redirected to a login page on **Server 1** (this is the only > page on Server 1) and then redirected back to **Server 2** with a token if > authentication succeeds. Is this the best approach? It seems like I am kinda > "breaking the flow" if I do this. Is this normal? The motivation for this is for me to be able to use the same API for my web, iOS and Android clients. Thanks!