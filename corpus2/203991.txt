I have a project written in Java that required some repetitive code. Basically the gist of it is that I'm taking one object and copying it into two different objects -- Which I would just use clone() for but it involves moving some exterior mappings. My question is, in a language like Java, if you are doing a long series of similar actions on two objects, which of the following ways (or perhaps another way) is more desirable: Either grouping by the ACTION being performed...                   UnitStack usStart = new UnitStack(type, (int)Math.ceil(str / 2d), owner);         UnitStack usStop  = new UnitStack(type, str / 2, owner);              Map<String, Cloneable> logStart = usStart.getActionLog();         Map<String, Cloneable> logStop  = usStop.getActionLog();              logStart.putAll(usOrig.getActionLog());         logStop .putAll(usOrig.getActionLog());              MoveFlags mfStop = (MoveFlags) logStop.get("move");         mfStop = ((mfStop == null) ? new MoveFlags(usStop) : mfStop.clone());         mfStop.addMoves(b.distanceBetween(begin, end, owner));         logStop.put("move", mfStop);              hcStart.setUnit(usStart);         hcStop .setUnit(usStop);      Or should I group by the object being worked on?                   UnitStack usStart = new UnitStack(type, (int)Math.ceil(str / 2d), owner);         Map<String, Cloneable> logStart = usStart.getActionLog();         logStart.putAll(usOrig.getActionLog());         hcStart.setUnit(usStart);              UnitStack usStop  = new UnitStack(type, str / 2, owner);         Map<String, Cloneable> logStop  = usStop.getActionLog();         logStop.putAll(usOrig.getActionLog());         hcStop.setUnit(usStop);              // Reflect that the move took place...         MoveFlags mfStop = (MoveFlags) logStop.get("move");         mfStop = ((mfStop == null) ? new MoveFlags(usStop) : mfStop.clone());         mfStop.addMoves(b.distanceBetween(begin, end, owner));         logStop.put("move", mfStop);      Obviously I could contrive some way to write a loop, or maybe extract it into a method but in a case like this, I don't really feel like those would be good solutions. (I have removed many things from both of these -- comments mostly, as well as context, since neither are relevant to the question)