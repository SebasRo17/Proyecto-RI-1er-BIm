I'm encountering a common issue in PHP (and most other languages) at the moment, where systems I'm designing need to be updated in multiple places to add new features, whereas I would like to have a core, where I can add new features, plugin's etc without having to touch the core code. An example would be a a navigation menu, where the menu loads it's items from directory or namespace X. My aim is so once I or another developer adds a new file, extends a MenuItem class, whichever it needs to be, the class loading the menu would discover this new file and display it, without ever having to touch the core menu loading code. The best I have come up with so far is:               function get_menu_items() {         $menu_items = array();         $raw_files = scandir(DOCUMENT_ROOT . '/menu/menu_items');         foreach($raw_files as $file){             require_once($file);             $class_name = substr($file, 0, -4); // cut away the '.php'             $menu_items []= new $class_name();         }         return $menu_items;     }      But the above feels wrong as I shouldn't be checking a directory for existence of files for features! I imagine this is a common design pattern like wordpress would use for plugin discovery? I've been searching for a while but not been able to better the above! Any help would be greatly appreciated!!