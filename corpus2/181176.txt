After watching this talk on REST, Reuse and Serendipity by Steve Vinoski, I wonder if there are business cases in _greenfield_ projects for (XML-)RPC-ish setups, that REST could not solve in a better way. A few RPC-Problems he mentions:   * Focus on language (fit the distributed system to the language, not the other way around)   * "Make it look local" (and cope with failure and latency as exceptions rather than the rule)   * intended to be language-independent, but still has "function calls" across languages as main ingredient   * IDL boilerplate   * Illusion of type safety   * and a few more ... * * * Just to dramatize it a bit, some Google Instant result for RPC vs REST: ![RPC](http://i.stack.imgur.com/jkIJ3.png) ![REST](http://i.stack.imgur.com/F9C2z.png)