I have a two-dimensional vector field, i.e., for each point `(x, y)` I have a vector `(u, v)`, whereas `u` and `v` are functions of `x` and `y`. This vector field canonically defines a set of trajectories, i.e. a set of paths a particle would take if it follows along the vector field. In the following image, the vector field is depicted in red, and there are four trajectories which are partly visible, depicted in dark red: ![trajectories](http://i.stack.imgur.com/u78WF.gif) I need an algorithm which efficiently calculates some trajectories for a given vector field. The trajectories must satisfy some kind of minimum denseness in the plane (for every point in the plane we must have a 'nearby' trajectory), or some other condition to get a reasonable set of trajectories. I could not find anything useful on Google on this, and Stackexchange doesn't seem to handle the topic either. Before I start devising such an algorithm by myself: **Are there any known algorithms for this problem? What is their name, for which keywords do I have to search?**