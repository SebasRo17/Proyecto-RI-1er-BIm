Say I'm looking at some code and I see:               MessageDigestPasswordEncoder encoder = new MessageDigestPasswordEncoder("SHA-512");      Now, in that file I also see:               import org.springframework.security.authentication.encoding.MessageDigestPasswordEncoder;      OK, pretty good guess that `Spring Security` is needed. But I guess, technically, `MessageDigestPasswordEncoder` could come from many different places. But, assuming I know it's Spring, then that should help. But here's what I'm after. I have many programs written by other people and sometimes, I just need to extract a small piece. For example, I needed to figure out how `CAS` was hashing passwords for an ETL job I'm working on. So I went to that very large project and just copied all of the jars over. Coded up what I needed and everything worked. However, I now have this very simple project with 60 jars in it. And I know not all are needed. So my question is, how can I "reverse engineer" this larger application and find out the minimum dependencies needed for that `MessageDigestPasswordEncoder` above? That's a crude example but you get the idea. I could start pulling jars out until something breaks but that would take forever. What I'd like to do is (even in the console) type `list_dependencies MessageDigestPasswordEncoder` and have a nice tree drawn. This sounds like a job for Maven but I'm not very experienced with Maven (I come from a .NET/Ruby world). Thanks.