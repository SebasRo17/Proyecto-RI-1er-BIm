I have come across a few hands on programming scenarios at recent job interviews.   1. Implement a queue in C# only using arrays. Call to get an item will take first item out from the queue(write on paper in 15 minutes) Approach: Implemented on time.Take items from index 0 with remaining items pushed up.Put items at lastindex.   2. Implement a program to create a folder tree which has an options for adding nodes to it and display tree to console.console. Shouldn't use any inbuilt collections/library(code on computer in 45 minutes). Approach:Implemented on time with tree implemented with List and traversal is done through recursion. In both scenarios, my solutions were not up-to the mark and I was rejected. I understand the flaws in the solution as I would have done it differently if given ample time. The first solution should not shuffle the array, and the second should not do recursion(subjective). But I am not sure if that was fair to me. It was both pressure situations because it is time bound, and the problems were like "new" to me (not really, but I haven't come across such problems at work in the past 10 years, we always use inbuilt collections). In agile development, we estimate our work with lot of focus on quality and all, I am not sure what exactly the point of time bound tests. I would have given a problem with no time limit to the candidate. Would like to know the community's opinion. How to tackle this at the next instance. What about denying to do any time bound tests in interviews offering to do it if it is not time bound?