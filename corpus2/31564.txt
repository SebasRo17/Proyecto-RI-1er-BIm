I have a list that looks like this:               preprocessedList = {{1,5.3},{1,5.566},{1,1.4322},{2,3.443543},{2,3.444},{3,0.1223},{4,1.3243},{4,1.554343}}      Each element in the list is of the form $(i,j_k)$, where $i = 1,2,3,...,N$ is an integer index (which may be degenerate, i.e. there may be multiple list entries with the same $i$ value), and $j_k$ is some value associated with each list item. I want to create a new list $L$ where, for each index starting with $i = 2$, we compute the median or mean of the difference between elements with the index $(i-1)$ and the nearest elements with index $i$ (in terms of one- dimensional Euclidean distance). Using the about example list: Starting with $i = 2$, we first take {1,5.3}, we compute that {2,3.444} is closest since the different between 3.444 and 5.3 is the minimum for all items with the index $i=2$. We compute this difference as $(3.444 - 5.3) = -1.856$. We then move on to {1,5.566}, notice again that {2,3.444} is closest to {1,5.3}, and compute this difference as $(3.444 - 5.566) = -2.122$. Finally, we move on to {1,1.4322}, notice that this is closest to {2,3.443543}, and compute the difference $(3.443543 - 1.4322) = 2.011343$. We then average these differences: $(-1.856 + -2.122 + 2.011343) / 3 = -0.6555...$ and place this at position $(i-1)$ in $L$. So we have $L = (-0.6555..., ...)$ thus far. We then move on to $i = 3$ and so forth. Note that if there is no $i = 3$ elements, we'd just enter $0$ at that position in $L$. Is there a fast and slick way to do this with a large initial preprocessedList? Here's the naive (very slow) way to do this:               preprocessedList = {{1, 5.3}, {1, 5.566}, {1, 1.4322}, {2, 3.443543}, {2, 3.444}, {3, 0.1223}, {4, 1.3243}, {4, 1.554343}};          L = Array[0 &, Max[preprocessedList[[All, 1]]] - (Min[preprocessedList[[All, 1]]])];          counter = 0;     For[i = Min[preprocessedList[[All, 1]]] + 1,        i <= Max[preprocessedList[[All, 1]]], i++,            counter += 1;            highIndexList = Select[preprocessedList, #[[1]] == i &];       lowIndexList = Select[preprocessedList, #[[1]] == (i - 1) &];            If[Length[highIndexList] > 0 && Length[lowIndexList] > 0,                differenceArray = Array[0 &, Length[lowIndexList]];           For[k = 1, k <= Length[lowIndexList], k++,            differenceArray[[k]] =               Nearest[highIndexList[[All, 2]], lowIndexList[[k, 2]]] - lowIndexList[[k, 2]];           ];       L[[counter]] = {i, Mean[Flatten[differenceArray]]};       ,       L[[counter]] = 0;       ];           ];      The output is:               L = {{2, -0.655552}, {3, -3.32147}, {4, 1.202}};      Perhaps there's a way to compile this?