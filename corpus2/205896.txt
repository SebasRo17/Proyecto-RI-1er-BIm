Consider the following code: a.py               import os          def print_rand():         print os.urandom()      And another module: b.py               from a import *      In this code, I end up with an `os` variable getting imported from `a`. I could prevent this with a small change: a.py               import os as _os          def print_rand():         print _os.urandom()      Since `from a import *` does not pick up on members beginning with an underscore, `b` wouldn't import the `os` module from `a`. I've thought about doing this in some of my code. I never use `import *`, but logically, it makes some sense anyway. (Not to mention I don't work alone on my code.) `os` is a member that `a` uses internally; it's not there to be exposed to the outside world. (Yes, I'm aware that it can be accessed anyway, but I just mean in the sense that the underscore conventionally means "private".) Is this something I should do? Would it be considered "Pythonic", or is it something I should particularly avoid doing? Does it even matter? (Should I have asked on StackOverflow? It seems too conceptual for there to me.)