In Java there are no `virtual`, `new`, `override` keywords for method definition. So the working of a method is easy to understand. Cause if _DerivedClass_ extends _BaseClass_ and has a method with same name and same signature of _BaseClass_ then the overriding will take place at run-time polymorphism (provided the method is not `static`).               BaseClass bcdc = new DerivedClass();      bcdc.doSomething() // will invoke DerivedClass's doSomething method.      * * * Now come to C# there can be so much confusion and hard to understand how the `new` or `virtual+derive` or new + virtual override is working. I'm not able to understand why in the world I'm going to add a method in my `DerivedClass` with same name and same signature as `BaseClass` and define a new behaviour but at the run-time polymorphism, the `BaseClass` method will be invoked! (which is not overriding but logically it should be). In case of `virtual + override` though the logical implementation is correct, but the programmer has to think which method he should give permission to user to override at the time of coding. Which has some _pro-con_ (let's not go there now). So why in C# there are so much space for _un_ -logical reasoning and confusion. So may I reframe my question as in which real world context should I think of use `virtual + override` instead of `new` and also use of `new` instead of `virtual + override`? * * * **EDIT** After some very good answers especially from Omar, I get that C# designers gave stress more about programmers should think before they make a method, which is good and handles some rookie mistakes from Java. Now I've a question in mind. As in Java if I had a code like               Vehicle vehicle = new Car();     vehicle.accelerate();      and later I make new class `SpaceShip` derived from `Vehicle`. Then I want to change all `car` to a `SpaceShip` object I just have to change single line of code               Vehicle vehicle = new SpaceShip();     vehicle.accelerate();      This will not break any of my logic at any point of code. But in case of C# if `SpaceShip` does not override the `Vehicle` class' `accelerate` and use `new` then the logic of my code will be broken. Isn't that a disadvantage?