Whenever I am defining my own events, I use a pattern such as the following (which I _believe_ is how the MSDN recommends doing it):               public class MyEventClass     {         private bool _value; // Backing variable         public bool Value         {             get { return _value; }             set             {                 if (value != _value) // Only raise event if value is changed/different                 {                     _value = value;                     OnValueChanged(EventArgs.Empty);                 }             }         }              public event EventHandler ValueChanged; // Anything can subscribe to the event         protected void OnValueChanged(EventArgs e) // Only this and children can invoke event         {             if (ValueChanged != null)                 ValueChanged(this, e);         }     }      Thus, the client code just needs to subscribe to the event and it automagically works. However, it feels cumbersome to pass the `EventArgs e` parameter, in particular with a class that uses EventHandler to raise its events, since the base EventArgs has no data to it, only `EventArgs.Empty`. Would it be considered a faux pas to change it to this?               protected void OnValueChanged()     {         if (ValueChanged != null)             ValueChanged(this, EventArgs.Empty);     }