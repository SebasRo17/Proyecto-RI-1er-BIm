I've been finding a lot of blog posts claiming JS encryption is unsafe, here's a couple of detailed ones: http://www.matasano.com/articles/javascript-cryptography/ http://rdist.root.org/2010/11/29/final-post-on-javascript-crypto/ My question is, if browsers truly are inherently unsafe then, by extension, entering any PCI-related info in the browser is unsafe - regardless of JS encryption, HTTPS, or any other security measures? Which would imply that malicious parties should be taking major advantage of this fact, right? Could someone provide specific examples where browser vulnerabilities were leveraged to steal **massive** amounts of PCI-info/PII (by "massive" I mean comparable to the amount that could be obtained by hacking into the hosting servers/DB)? Also, despite all those posts describing security flaws there's a proliferation of payment services and JS crypto libraries - does that indicate that most companies/communities:   1. are unaware of browser vulnerabilities?   2. are simply disregarding the underlying issues and jumping on the bandwagon to make some dough?   3. have weighted the (possibly low) likelihood of someone going through the trouble of exploiting browsers and decided it's still worth to capture payments through browsers? EDIT Using SSL/TLS addresses some of the issues, but definitely not all. Here are a few notable issues that fall outside of the area that SSL/TLS can solve (quoted directly from the Matasano blog post): > The prevalence of content-controlled code. > >   * We mean that pages are built from multiple requests, some of them > conveying Javascript directly, and some of them influencing Javascript using > DOM tag attributes (such as "onmouseover"). > > > The malleability of the Javascript runtime. > >   * There is no reliable way for any piece of Javascript code to verify its > execution environment. Javascript crypto code can't ask, "am I really > dealing with a random number generator, or with some facsimile of one > provided by an attacker?" And it certainly can't assert "nobody is allowed > to do anything with this crypto secret except in ways that I, the author, > approve of". These are two properties that often are provided in other > environments that use crypto, and they're impossible in Javascript. > > > What else is the Javascript runtime lacking for crypto implementors? > >   * Two big ones are secure erase (Javascript is usually garbage collected, > so secrets are lurking in memory potentially long after they're needed) and > functions with known timing characteristics. Real crypto libraries are > carefully studied and vetted to eliminate data-dependant code paths --- > ensuring that one similarly-sized bucket of bits takes as long to process as > any other --- because without that vetting, attackers can extract crypto > keys from timing. > Again, my main point is that, technically, once a credit card number (or some other important piece of info) is entered into a text field of a page there's a chance that it's been compromised - and at that, compromised more easily then if it were entered in the native application.