I'm playing with a mental model for distributed actor system that communicates using messages. In this, it is possible for an actor to create another actor. I've encountered one specific situation where I'm not really sure how to resolve. Consider this sequence of events:   1. Actor 1 requests creation Actor 2. As part of the "construction", it passes its own ID.   2. Actor 1 requests its own deletion.   3. System sends KILL message to all Actors who subscribed to {Actor1|KILL}   4. Actor 2 is created, saves ID of "1" sent to it as construction parameter.   5. Actor 2 attempts to send a message to Actor 1.   6. ???   7. Actor 2 detects that Actor 1 is gone, and reacts. Since Actor 1 and 2 can be on physically different machines, querying "Does Actor X exist?" every time (or before every time) you attempt to send a message will introduce latency that shouldn't be there in the typical case. Similarly, blocking until you know "Send Success" or "Send Fail" seems like a bad idea. It also seems that litering code with `if(send() == fail) { ... }` is ugly and error-prone. Are there known solutions for robustly and cleanly handling these sorts of situations?