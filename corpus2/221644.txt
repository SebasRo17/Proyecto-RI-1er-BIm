A class loads properties from a file and uses those as it performs its duties. For testing purposes I want to be able to modify said properties directly without having to use a test properties file. I did the implementation, but it seems filled with smells -- I'm wrestling with keeping this thing small (avoiding frameworks like Spring that will wrap and inject the properties). In particular, I cannot recall seeing a constructor that initializes itself via a statically loaded set of properties -- particularly that it sets variable values from somewhere other than passed-in parameters. I'm looking for arguments for/against this approach, and hoping to hit upon some alternatives if this is really as uncool as I think it is.               private static final String CONFIG_FILE_NAME = String.format("config-%s.properties",             null != System.getProperty("JAVA_ENV") ? System.getProperty("JAVA_ENV") : "development");     static {         PROPERTIES = new Properties();         try {             PROPERTIES.load(MyClass.class.getClassLoader().getResourceAsStream(CONFIG_FILE_NAME));             if (PROPERTIES.keySet().size() < 1) {                 LOGGER.error(String.format("failed to load %s: no properties", CONFIG_FILE_NAME));             }         }         catch (final IOException ie) {             LOGGER.error(String.format("failed to load %s", CONFIG_FILE_NAME), ie);         }     }          private String property1;     private String property2;          public MyClass() {         property1 = PROPERTIES.getProperty("prop.1");         property2 = PROPERTIES.getProperty("prop.2");     }          /* public accessors for property1 and property2 go here */