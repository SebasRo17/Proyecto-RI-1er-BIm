So while I've been doing some lengthy compiles I decided to take the C++ general test on ODesk and came across this question. ![This question](http://i.imgur.com/tyX95lv.png) If I'm not mistaken, given the wording (or lack thereof) **all** of these could be true. **a.**               int Foo() { }     int Foo(int bar) { }      **b.** Well, _"return`void`"_ would be incorrect semantically but functions can obviously have `void` return types.               void Foo() { }      **c.** This is the definition of inline functions, yes. **d.** Without going into much detail about the placement of the following elements,               typedef void (*Func)(int);          Func functions[2];          void Foo(int bar) { }     void Bar(int foo) { }          functions[0] = &Foo;     functions[1] = &Bar;      Further, you could always do this using lambdas and functors. **e.**               void Foo(int& bar)     {         ++bar;     }          int foobar = 5;     Foo(foobar);      **f.**               int bar = 5;          int& GetBar()     {         return bar;     }          GetBar() = 6;      **g.**               int bar = 5;          int* GetBar()     {         return &bar;     }          (*GetBar()) = 5;      * * * I fail to see where this question has any _truly false_ answers. Am I missing something? Needless to say I ran out of time and failed the whole thing. I guess I'm a bad C++ programmer. :(