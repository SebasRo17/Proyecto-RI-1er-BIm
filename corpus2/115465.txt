**Short Question**   Is there a typical way to name 'public' and 'private' members of an OO C project? **Background**   I fully understand that public and private members do not _really_ exist in the C language. However, like most C programmers, I still treat members as public or private to maintain the OO design. In addition to the typical OO methods I have found my self following a pattern (see example below) that makes it easier for me to distinguish which methods are _meant_ for the outside world vs the private members that may have fewer checks / are more efficient etc... Does a standard or best practice exist for such a thing or is my example below a good way to approach this? **Example Header**               #ifndef _MODULE_X_H_     #define _MODULE_X_H_          bool MOD_X_get_variable_x(void);     void MOD_X_set_variable_x(bool);          #endif /* _MODULE_X_H_ */      **Example Source**               // Module Identifier: MOD_X      #include "module_x.h"          // Private prototypes     static void mod_x_do_something_cool(void);     static void mod_x_do_something_else_cool(void);          // Private Variables     static bool var_x;          // Public Functions - Note the upper case module identifier     bool MOD_X_get_variable_x(void)      {return var_x;}     void MOD_X_set_variable_x(bool input){var_x = input;}          // Private Functions  - Note the lower case module identifier     void mod_x_do_something_cool(void){          // Some incredibly cool sub routine      }          void mod_x_do_something_else_cool(void){          // Another incredibly cool sub routine      }