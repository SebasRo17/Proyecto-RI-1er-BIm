Pass by reference can be faked by using `HoldAll` or something similar in the definition of a "Function". But can pass by reference be faked for symbols passed as named arguments (Options)? Let me demonstrate: This works (when you click on the checkboxes the list changes):               ClearAll@PassByArg;     Attributes[PassByArg] = {HoldFirst};     PassByArg[list_] := CheckboxBar[Dynamic[list], Range@Length@list];     aList = {1, 2, 3, 4, 5};     PassByArg[aList]     Dynamic[Sort@aList]      **How can I pass the reference to`list` as an option?** Here is one of my failed attempts (it returns `et::setraw: Cannot assign to raw object {1,2,3,4,5}` when a checkbox is clicked.               ClearAll@PassByOption;     Options@PassByOption = {"List" -> None};     PassByOption[opts : OptionsPattern[]] :=        With[{i = ReleaseHold@OptionValue@"List"},         CheckboxBar[Dynamic[i], Range@Length@i]];     aList = {1, 2, 3, 4, 5};     PassByOption["List" -> Hold@aList]     Dynamic[aList]      I always evaluate either too much (to `{1,2,3,4,5}`) or too little... Perhaps some motivation is in order: I'm developing a GUI using `Dynamic`. Now I would like to control a list of displayed functions in some plot. If I implement this as a reference passed with a named argument I practically don't have to change any other code:)