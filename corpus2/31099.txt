I have read the docs for `Catch`, `Throw`, and friends multiple times, and I confess that I find them utterly incomprehensible... Can someone tell me how one would port the following Python snippet to Mathematica?               def safeeval(fn, x, epsilon=sys.float_info.epsilon):         try:             # first attempt             return fn(x)         except Exception, first_exception:             try:                 try:                     # second attempt                     return fn(x + epsilon)                 except:                     # third (and last) attempt                     return fn(x - epsilon)             except:                 # give up!                 raise first_exception      In words: return `fn(x)`, trapping any exceptions during the evaluation of `fn(x)`. If there is an exception, cache it in `first_exception`, and return `fn(x + epsilon)`, again trapping any exceptions. If there is again an exception (a second one), return `fn(x - epsilon)`. Lastly, if there is again an exception (a third one), give up and re-raise `first_exception`. A higher-level, less literal translation of the above would be this: return the first one of `fn(x)`, `fn(x + epsilon)`, and `fn(x - epsilon)` that evaluates without errors ( _silencing any errors that do occur along the way_ ). If none of these expressions evaluates without errors, then proceed exactly as with the usual evaluation of `fn(x)` (emitting the appropriate error messages, etc.). * * * EDIT: OK, I finally came up with a solution that approximates what I described above, though I'm not sure it's anywhere close to optimal:               safeEval[fn_, x_, epsilon_:$MachineEpsilon]:= Module[{v, sentinel},         v = Quiet[Check[fn[x],                         Check[fn[x+epsilon],                               Check[fn[x-epsilon],                                     sentinel]]]];         If[v =!= sentinel, v, fn[x]]     ]      I was (*ahem*) thrown off by the whole `Catch`, `Throw` nomenclature. (These functions now seem to me like something unnaturally tacked onto Mathematica to make it look more like other more widely known languages.)