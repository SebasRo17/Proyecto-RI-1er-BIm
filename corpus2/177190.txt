My company has several versions of its core software in use by our customers at any one time. My job is to write bespoke Java software for the customers based on the version of core software they happen to be running. I've created a common Java library that performs many of the tasks I regularly require in a normal project. This is a Maven project that I deploy to our local Artifactory and pull down into other Maven projects when required. Currently this library includes v1.3 of our core software, for example:               <dependency>       <groupId>com.foo</groupId>       <artifactId>core-software</artifactId>       <version>1.3</version>     </dependency>      As a result, that's the only version I'm completely confident is compatible due to the success of the unit tests. **How can I best automate testing with other versions of the core software to ensure compatibility?** * * * One possibility is to create a series of Maven projects that incorporate my library and override the core-software version:               <!-- Override core version -->     <dependency>       <groupId>com.foo</groupId>       <artifactId>core-software</artifactId>       <version>1.2</version>     </dependency>     <!-- Incorporate shared library: -->     <dependency>       <groupId>com.foo</groupId>       <artifactId>common-lib</artifactId>       <version>1.0</version>     </dependency>      I could then execute the unit tests from my main project to ensure they all pass (I need to figure that bit out). The benefit of this approach is that I can incorporate these additional Maven projects in my continuous integration server and be alerted whenever a check-in breaks compatibility with another core software version. Can anyone suggest a better alternative?