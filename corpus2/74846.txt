The dynamically typed languages I know never let the developers specify the types of variables, or at least have a very limited support for that. JavaScript, for example, doesn't provide any mechanism to enforce types of variables when it is convenient to do so. PHP let you specify some types of method arguments, but there is no way to use native types (`int`, `string`, etc.) for arguments, and there is no way to enforce types for anything other than arguments. At the same time, it would be convenient to have a choice to specify in some cases the type of a variable in a dynamically typed language, instead of doing the type check manually. Why there is such limitation? Is it for technical/performance reasons (I suppose it is in the case of JavaScript), or only for political reasons (which is, I believe, the case of PHP)? Is this a case for other dynamically typed languages that I'm not familiar with? * * * **Edit:** following the answers and the comments, here's an example for a clarification: let's say we have the following method in plain PHP:               public function CreateProduct($name, $description, $price, $quantity)     {         // Check the arguments.         if (!is_string($name)) throw new Exception('The name argument is expected to be a string.');         if (!is_string($description)) throw new Exception('The description argument is expected to be a string.');         if (!is_float($price) || is_double($price)) throw new Exception('The price argument is expected to be a float or a double.');         if (!is_int($quantity)) throw new Exception('The quantity argument is expected to be an integer.');              if (!$name) throw new Exception('The name argument cannot be an empty string.');         if ($price <= 0) throw new Exception('The price argument cannot be less or equal to zero.');         if ($price < 0) throw new Exception('The price argument cannot be less than zero.');              // We can finally begin to write the actual code.         // TODO: Implement the method here.     }      With some efforts, this can be rewritten as (also see Programming by contracts in PHP):               public function CreateProduct($name, $description, $price, $quantity)     {         Component::CheckArguments(__FILE__, __LINE__, array(             'name' => array('value' => $name, 'type' => VTYPE_STRING),             'description' => array('value' => $description, 'type' => VTYPE_STRING),             'price' => array('value' => $price, 'type' => VTYPE_FLOAT_OR_DOUBLE),             'quantity' => array('value' => $quantity, 'type' => VTYPE_INT)         ));              if (!$name) throw new Exception('The name argument cannot be an empty string.');         if ($price <= 0) throw new Exception('The price argument cannot be less or equal to zero.');         if ($price < 0) throw new Exception('The price argument cannot be less than zero.');              // We can finally begin to write the actual code.         // TODO: Implement the method here.     }      But the same method would be written as follows if PHP would optionally accept native types for arguments:               public function CreateProduct(string $name, string $description, double $price, int $quantity)     {         // Check the arguments.         if (!$name) throw new Exception('The name argument cannot be an empty string.');         if ($price <= 0) throw new Exception('The price argument cannot be less or equal to zero.');         if ($price < 0) throw new Exception('The price argument cannot be less than zero.');              // We can finally begin to write the actual code.         // TODO: Implement the method here.     }      Which one is shorter to write? Which one is easier to read?