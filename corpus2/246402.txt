As an example, I am using PostgreSQL with an application-layer connection pool, such a a JDBC connection pool. The specific JDBC connection pool is not important. My question is more about the actual caching of the database connection. Connections to the database are created by supplying a data source (with credentials) to a JDBC driver, which presumably acts as bridge to a ODBC- compliant driver, which takes the standard set of commands and translates them to database specific formats. On top of a JDBC driver, an application can use a connection pool, which alleviates overhead/latency in creating and closing database connections. These connections are stored in a pool in an "array" if you will. Each connection is set to "not in use". When the connection is needed, the connect pool marks the connection as "in use" and gives it to the thread in an application which requested a connection. When the thread is finished with it, it then return the connection to the pool where another thread in a multi-threaded program can use it. After being idle for n amount of time, the connection is removed from the pool to free resources. Now while the connection is in the pool, does the tcp connection itself to the database remain live? In other words, when a thread retrieves a connection from the pool, the configuration of the PostgreSQL JDBC driver (authentication credentials) is cached and the bridge to the ODBC driver is cached, so a lot of work is already done in terms of taking the standard sql command and translating it to the specific database command. But does the database connection pool also cache the TCP connection, that is, keep the TCP connection alive and open to the database while the connection is still in the pool?