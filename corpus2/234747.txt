I'm trying to understand how the Dependency Inversion Principle differs from the "program to an interface, not an implementation" principle. I understand what "Program to an interface, not an implementation" means. I also understand how it allows for more flexible and maintainable designs. But I don't understand how the Dependency Inversion Principle is different from the "Program to an interface, not an implementation" principle. I read about DIP in several places on the web, and it didn't clear up my confusion. I still don't see how the two principles differ from each other. Thanks for your help.